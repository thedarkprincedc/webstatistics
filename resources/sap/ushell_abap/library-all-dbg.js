// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
if(window.jQuery&&window.jQuery.sap&&window.jQuery.sap.declare){window.jQuery.sap.declare("sap.ui.Device",false);}if(typeof window.sap!=="object"&&typeof window.sap!=="function"){window.sap={};}if(typeof window.sap.ui!=="object"){window.sap.ui={};}(function(){"use strict";if(typeof window.sap.ui.Device==="object"||typeof window.sap.ui.Device==="function"){var c="1.52.7";window.sap.ui.Device._checkAPIVersion(c);return;}var d={};function p(i,w){return("000"+String(i)).slice(-w);}var F=0,E=1,W=2,I=3,D=4,T=5;var g=function(){this.defaultComponent='DEVICE';this.sWindowName=(window.top==window)?"":"["+window.location.pathname.split('/').slice(-1)[0]+"] ";this.log=function(i,s,a){a=a||this.defaultComponent||'';var b=new Date(),e={time:p(b.getHours(),2)+":"+p(b.getMinutes(),2)+":"+p(b.getSeconds(),2),date:p(b.getFullYear(),4)+"-"+p(b.getMonth()+1,2)+"-"+p(b.getDate(),2),timestamp:b.getTime(),level:i,message:s||"",component:a||""};if(window.console){var f=e.date+" "+e.time+" "+this.sWindowName+e.message+" - "+e.component;switch(i){case F:case E:console.error(f);break;case W:console.warn(f);break;case I:console.info?console.info(f):console.log(f);break;case D:console.debug?console.debug(f):console.log(f);break;case T:console.trace?console.trace(f):console.log(f);break;}}return e;};};var l=new g();l.log(I,"Device API logging initialized");d._checkAPIVersion=function(s){var v="1.52.7";if(v!=s){l.log(W,"Device API version differs: "+v+" <-> "+s);}};var h={};function j(e,f,a){if(!h[e]){h[e]=[];}h[e].push({oListener:a,fFunction:f});}function k(e,f,a){var b=h[e];if(!b){return this;}for(var i=0,q=b.length;i<q;i++){if(b[i].fFunction===f&&b[i].oListener===a){b.splice(i,1);break;}}if(b.length==0){delete h[e];}}function n(e,a){var b=h[e],f;if(b){b=b.slice();for(var i=0,q=b.length;i<q;i++){f=b[i];f.fFunction.call(f.oListener||window,a);}}}var O={"WINDOWS":"win","MACINTOSH":"mac","LINUX":"linux","IOS":"iOS","ANDROID":"Android","BLACKBERRY":"bb","WINDOWS_PHONE":"winphone"};function o(a){a=a||navigator.userAgent;var b,e;function f(){var s=navigator.platform;if(s.indexOf("Win")!=-1){var t=/Windows NT (\d+).(\d)/i;var v=a.match(t);var w="";if(v[1]=="6"){if(v[2]==1){w="7";}else if(v[2]>1){w="8";}}else{w=v[1];}return{"name":O.WINDOWS,"versionStr":w};}else if(s.indexOf("Mac")!=-1){return{"name":O.MACINTOSH,"versionStr":""};}else if(s.indexOf("Linux")!=-1){return{"name":O.LINUX,"versionStr":""};}l.log(I,"OS detection returned no result");return null;}b=/Windows Phone (?:OS )?([\d.]*)/;e=a.match(b);if(e){return({"name":O.WINDOWS_PHONE,"versionStr":e[1]});}if(a.indexOf("(BB10;")>0){b=/\sVersion\/([\d.]+)\s/;e=a.match(b);if(e){return{"name":O.BLACKBERRY,"versionStr":e[1]};}else{return{"name":O.BLACKBERRY,"versionStr":'10'};}}b=/\(([a-zA-Z ]+);\s(?:[U]?[;]?)([\D]+)((?:[\d._]*))(?:.*[\)][^\d]*)([\d.]*)\s/;e=a.match(b);if(e){var i=/iPhone|iPad|iPod/;var q=/PlayBook|BlackBerry/;if(e[0].match(i)){e[3]=e[3].replace(/_/g,".");return({"name":O.IOS,"versionStr":e[3]});}else if(e[2].match(/Android/)){e[2]=e[2].replace(/\s/g,"");return({"name":O.ANDROID,"versionStr":e[3]});}else if(e[0].match(q)){return({"name":O.BLACKBERRY,"versionStr":e[4]});}}b=/\((Android)[\s]?([\d][.\d]*)?;.*Firefox\/[\d][.\d]*/;e=a.match(b);if(e){return({"name":O.ANDROID,"versionStr":e.length==3?e[2]:""});}return f();}function r(a){d.os=o(a)||{};d.os.OS=O;d.os.version=d.os.versionStr?parseFloat(d.os.versionStr):-1;if(d.os.name){for(var b in O){if(O[b]===d.os.name){d.os[b.toLowerCase()]=true;}}}}r();d._setOS=r;var B={"INTERNET_EXPLORER":"ie","EDGE":"ed","FIREFOX":"ff","CHROME":"cr","SAFARI":"sf","ANDROID":"an"};var u=navigator.userAgent;
/*!
	 * Taken from jQuery JavaScript Library v1.7.1
	 * http://jquery.com/
	 *
	 * Copyright 2011, John Resig
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 * http://jquery.org/license
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 * Copyright 2011, The Dojo Foundation
	 * Released under the MIT, BSD, and GPL Licenses.
	 *
	 * Date: Mon Nov 21 21:11:03 2011 -0500
	 */
function y(a){var b=(a||u).toLowerCase();var e=/(webkit)[ \/]([\w.]+)/;var f=/(opera)(?:.*version)?[ \/]([\w.]+)/;var i=/(msie) ([\w.]+)/;var q=/(trident)\/[\w.]+;.*rv:([\w.]+)/;var s=/(edge)[ \/]([\w.]+)/;var t=/(mozilla)(?:.*? rv:([\w.]+))?/;var v=s.exec(b)||q.exec(b)||e.exec(b)||f.exec(b)||i.exec(b)||b.indexOf("compatible")<0&&t.exec(b)||[];var w={browser:v[1]||"",version:v[2]||"0"};w[w.browser]=true;return w;}function z(a,e){var b=y(a);var f=a||u;var i=e||window.navigator;var q;if(b.mozilla){q=/Mobile/;if(f.match(/Firefox\/(\d+\.\d+)/)){var v=parseFloat(RegExp.$1);return{name:B.FIREFOX,versionStr:""+v,version:v,mozilla:true,mobile:q.test(f)};}else{return{mobile:q.test(f),mozilla:true,version:-1};}}else if(b.webkit){var s=f.toLowerCase().match(/webkit[\/]([\d.]+)/);var w;if(s){w=s[1];}q=/Mobile/;if(f.match(/(Chrome|CriOS)\/(\d+\.\d+).\d+/)){var v=parseFloat(RegExp.$2);return{name:B.CHROME,versionStr:""+v,version:v,mobile:q.test(f),webkit:true,webkitVersion:w};}else if(f.match(/FxiOS\/(\d+\.\d+)/)){var v=parseFloat(RegExp.$1);return{name:B.FIREFOX,versionStr:""+v,version:v,mobile:true,webkit:true,webkitVersion:w};}else if(f.match(/Android .+ Version\/(\d+\.\d+)/)){var v=parseFloat(RegExp.$1);return{name:B.ANDROID,versionStr:""+v,version:v,mobile:q.test(f),webkit:true,webkitVersion:w};}else{var t=/(Version|PhantomJS)\/(\d+\.\d+).*Safari/;var x=i.standalone;if(t.test(f)){var w1=t.exec(f);var v=parseFloat(w1[2]);return{name:B.SAFARI,versionStr:""+v,fullscreen:false,webview:false,version:v,mobile:q.test(f),webkit:true,webkitVersion:w,phantomJS:w1[1]==="PhantomJS"};}else if(/iPhone|iPad|iPod/.test(f)&&!(/CriOS/.test(f))&&!(/FxiOS/.test(f))&&(x===true||x===false)){return{name:B.SAFARI,version:-1,fullscreen:x,webview:!x,mobile:q.test(f),webkit:true,webkitVersion:w};}else{return{mobile:q.test(f),webkit:true,webkitVersion:w,version:-1};}}}else if(b.msie||b.trident){var v;if(document.documentMode&&!a){if(document.documentMode===7){v=8.0;}else{v=parseFloat(document.documentMode);}}else{v=parseFloat(b.version);}return{name:B.INTERNET_EXPLORER,versionStr:""+v,version:v,msie:true,mobile:false};}else if(b.edge){var v=v=parseFloat(b.version);return{name:B.EDGE,versionStr:""+v,version:v,edge:true};}return{name:"",versionStr:"",version:-1,mobile:false};}d._testUserAgent=z;function A(){d.browser=z();d.browser.BROWSER=B;if(d.browser.name){for(var b in B){if(B[b]===d.browser.name){d.browser[b.toLowerCase()]=true;}}}}A();d.support={};d.support.touch=!!(('ontouchstart'in window)||window.DocumentTouch&&document instanceof window.DocumentTouch);if(d.browser.phantomJS){d.support.touch=false;}d.support.pointer=!!window.PointerEvent;d.support.matchmedia=!!window.matchMedia;var m=d.support.matchmedia?window.matchMedia("all and (max-width:0px)"):null;d.support.matchmedialistener=!!(m&&m.addListener);if(d.browser.safari&&d.browser.version<6&&!d.browser.fullscreen&&!d.browser.webview){d.support.matchmedialistener=false;}d.support.orientation=!!("orientation"in window&&"onorientationchange"in window);d.support.retina=(window.retina||window.devicePixelRatio>=2);d.support.websocket=('WebSocket'in window);d.support.input={};d.support.input.placeholder=('placeholder'in document.createElement("input"));d.media={};var R={"SAP_3STEPS":"3Step","SAP_4STEPS":"4Step","SAP_6STEPS":"6Step","SAP_STANDARD":"Std","SAP_STANDARD_EXTENDED":"StdExt"};d.media.RANGESETS=R;d.media._predefinedRangeSets={};d.media._predefinedRangeSets[R.SAP_3STEPS]={points:[520,960],unit:"px",name:R.SAP_3STEPS,names:["S","M","L"]};d.media._predefinedRangeSets[R.SAP_4STEPS]={points:[520,760,960],unit:"px",name:R.SAP_4STEPS,names:["S","M","L","XL"]};d.media._predefinedRangeSets[R.SAP_6STEPS]={points:[241,400,541,768,960],unit:"px",name:R.SAP_6STEPS,names:["XS","S","M","L","XL","XXL"]};d.media._predefinedRangeSets[R.SAP_STANDARD]={points:[600,1024],unit:"px",name:R.SAP_STANDARD,names:["Phone","Tablet","Desktop"]};d.media._predefinedRangeSets[R.SAP_STANDARD_EXTENDED]={points:[600,1024,1440],unit:"px",name:R.SAP_STANDARD_EXTENDED,names:["Phone","Tablet","Desktop","LargeDesktop"]};var _=R.SAP_STANDARD;var C=d.support.matchmedialistener?0:100;var G={};var H=null;function J(f,t,a){a=a||"px";var q="all";if(f>0){q=q+" and (min-width:"+f+a+")";}if(t>0){q=q+" and (max-width:"+t+a+")";}return q;}function K(a){if(!d.support.matchmedialistener&&H==Q()[0]){return;}if(G[a].timer){clearTimeout(G[a].timer);G[a].timer=null;}G[a].timer=setTimeout(function(){var b=M(a,false);if(b){n("media_"+a,b);}},C);}function L(s,i){var q=G[s].queries[i];var a={from:q.from,unit:G[s].unit};if(q.to>=0){a.to=q.to;}if(G[s].names){a.name=G[s].names[i];}return a;}function M(a,b,f){f=f||d.media.matches;if(G[a]){var e=G[a].queries;var s=null;for(var i=0,t=e.length;i<t;i++){var q=e[i];if((q!=G[a].currentquery||b)&&f(q.from,q.to,G[a].unit)){if(!b){G[a].currentquery=q;}if(!G[a].noClasses&&G[a].names&&!b){N(a,G[a].names[i]);}s=L(a,i);}}return s;}l.log(W,"No queryset with name "+a+" found",'DEVICE.MEDIA');return null;}function N(s,a,b){var e="sapUiMedia-"+s+"-";P(e+a,b,e);}function P(s,b,a){var e=document.documentElement;if(e.className.length==0){if(!b){e.className=s;}}else{var f=e.className.split(" ");var q="";for(var i=0;i<f.length;i++){if((a&&f[i].indexOf(a)!=0)||(!a&&f[i]!=s)){q=q+f[i]+" ";}}if(!b){q=q+s;}e.className=q;}}function Q(){return[window.innerWidth,window.innerHeight];}function S(v,a){if(a==="em"||a==="rem"){var s=window.getComputedStyle||function(e){return e.currentStyle;};var x=s(document.documentElement).fontSize;var f=(x&&x.indexOf("px")>=0)?parseFloat(x,10):16;return v*f;}return v;}function U(f,t,e,s){f=S(f,e);t=S(t,e);var w=s[0];var a=f<0||f<=w;var b=t<0||w<=t;return a&&b;}function V(f,t,a){return U(f,t,a,Q());}function X(f,t,a){var q=J(f,t,a);var b=window.matchMedia(q);return b&&b.matches;}d.media.matches=d.support.matchmedia?X:V;d.media.attachHandler=function(f,a,s){var b=s||_;j("media_"+b,f,a);};d.media.detachHandler=function(f,a,s){var b=s||_;k("media_"+b,f,a);};d.media.initRangeSet=function(s,a,b,e,f){var t;if(!s){t=d.media._predefinedRangeSets[_];}else if(s&&d.media._predefinedRangeSets[s]){t=d.media._predefinedRangeSets[s];}else{t={name:s,unit:(b||"px").toLowerCase(),points:a||[],names:e,noClasses:!!f};}if(d.media.hasRangeSet(t.name)){l.log(I,"Range set "+t.name+" has already been initialized",'DEVICE.MEDIA');return;}s=t.name;t.queries=[];t.timer=null;t.currentquery=null;t.listener=function(){return K(s);};var v,w,x;var w1=t.points;for(var i=0,x1=w1.length;i<=x1;i++){v=(i==0)?0:w1[i-1];w=(i==w1.length)?-1:w1[i];x=J(v,w,t.unit);t.queries.push({query:x,from:v,to:w});}if(t.names&&t.names.length!=t.queries.length){t.names=null;}G[t.name]=t;if(d.support.matchmedialistener){var y1=t.queries;for(var i=0;i<y1.length;i++){var q=y1[i];q.media=window.matchMedia(q.query);q.media.addListener(t.listener);}}else{window.addEventListener("resize",t.listener,false);window.addEventListener("orientationchange",t.listener,false);}t.listener();};d.media.getCurrentRange=function(s,w){if(!d.media.hasRangeSet(s)){return null;}return M(s,true,isNaN(w)?null:function(f,t,a){return U(f,t,a,[w,0]);});};d.media.hasRangeSet=function(s){return s&&!!G[s];};d.media.removeRangeSet=function(s){if(!d.media.hasRangeSet(s)){l.log(I,"RangeSet "+s+" not found, thus could not be removed.",'DEVICE.MEDIA');return;}for(var x in R){if(s===R[x]){l.log(W,"Cannot remove default rangeset - no action taken.",'DEVICE.MEDIA');return;}}var a=G[s];if(d.support.matchmedialistener){var q=a.queries;for(var i=0;i<q.length;i++){q[i].media.removeListener(a.listener);}}else{window.removeEventListener("resize",a.listener,false);window.removeEventListener("orientationchange",a.listener,false);}N(s,"",true);delete h["media_"+s];delete G[s];};var Y={"TABLET":"tablet","PHONE":"phone","DESKTOP":"desktop","COMBI":"combi"};d.system={};function Z(a,b){var t=$(b);var i=d.os.windows&&d.os.version>=8;var e=d.os.windows&&d.os.version===7;var s={};s.tablet=!!(((d.support.touch&&!e)||i||!!a)&&t);s.phone=!!(d.os.windows_phone||((d.support.touch&&!e)||!!a)&&!t);s.desktop=!!((!s.tablet&&!s.phone)||i||e);s.combi=!!(s.desktop&&s.tablet);s.SYSTEMTYPE=Y;for(var f in Y){P("sap-"+Y[f],!s[Y[f]]);}return s;}function $(a){var u=a||navigator.userAgent;var i=d.os.windows&&d.os.version>=8;if(d.os.name===d.os.OS.IOS){return/ipad/i.test(u);}else{if(d.support.touch){if(i){return true;}if(d.browser.chrome&&d.os.android&&d.os.version>=4.4){return!/Mobile Safari\/[.0-9]+/.test(u);}else{var b=window.devicePixelRatio?window.devicePixelRatio:1;if(d.os.android&&d.browser.webkit&&(parseFloat(d.browser.webkitVersion)>537.10)){b=1;}var t=(Math.min(window.screen.width/b,window.screen.height/b)>=600);if(s1()&&(window.screen.height===552||window.screen.height===553)&&(/Nexus 7/i.test(u))){t=true;}return t;}}else{var e=(/(?=android)(?=.*mobile)/i.test(u));return(d.browser.msie&&u.indexOf("Touch")!==-1)||(d.os.android&&!e);}}}function a1(a,b){d.system=Z(a,b);if(d.system.tablet||d.system.phone){d.browser.mobile=true;}}a1();d._getSystem=Z;d.orientation={};d.resize={};d.orientation.attachHandler=function(f,a){j("orientation",f,a);};d.resize.attachHandler=function(f,a){j("resize",f,a);};d.orientation.detachHandler=function(f,a){k("orientation",f,a);};d.resize.detachHandler=function(f,a){k("resize",f,a);};function b1(i){i.landscape=s1(true);i.portrait=!i.landscape;}function c1(){b1(d.orientation);n("orientation",{landscape:d.orientation.landscape});}function d1(){e1(d.resize);n("resize",{height:d.resize.height,width:d.resize.width});}function e1(i){i.width=Q()[0];i.height=Q()[1];}function f1(){var w=d.orientation.landscape;var i=s1();if(w!=i){c1();}if(!k1){k1=window.setTimeout(g1,150);}}function g1(){d1();k1=null;}var h1=false;var i1=false;var j1;var k1;var l1;var m1=Q()[1];var n1=Q()[0];var o1=false;var p1;var q1=/INPUT|TEXTAREA|SELECT/;var r1=d.os.ios&&d.browser.name==="sf"&&((d.system.phone&&d.os.version>=7&&d.os.version<7.1)||(d.system.tablet&&d.os.version>=7));function s1(f){if(d.support.touch&&d.support.orientation&&d.os.android){if(o1&&f){return!d.orientation.landscape;}if(o1){return d.orientation.landscape;}}else if(d.support.matchmedia&&d.support.orientation){return!!window.matchMedia("(orientation: landscape)").matches;}var s=Q();return s[0]>s[1];}function t1(e){if(e.type=="resize"){if(r1&&q1.test(document.activeElement.tagName)&&!h1){return;}var w=Q()[1];var i=Q()[0];var t=new Date().getTime();if(w===m1&&i===n1){return;}i1=true;if((m1!=w)&&(n1==i)){if(!p1||(t-p1>300)){o1=(w<m1);}d1();}else{n1=i;}p1=t;m1=w;if(l1){window.clearTimeout(l1);l1=null;}l1=window.setTimeout(v1,1200);}else if(e.type=="orientationchange"){h1=true;}if(j1){clearTimeout(j1);j1=null;}j1=window.setTimeout(u1,50);}function u1(){if(i1&&(h1||(d.system.tablet&&d.os.ios&&d.os.version>=9))){c1();d1();h1=false;i1=false;if(l1){window.clearTimeout(l1);l1=null;}}j1=null;}function v1(){h1=false;i1=false;l1=null;}d._update=function(a){u=navigator.userAgent;l.log(W,"Device API values manipulated: NOT PRODUCTIVE FEATURE!!! This should be only used for test purposes. Only use if you know what you are doing.");A();r();a1(a);};e1(d.resize);b1(d.orientation);window.sap.ui.Device=d;if(d.support.touch&&d.support.orientation){window.addEventListener("resize",t1,false);window.addEventListener("orientationchange",t1,false);}else{window.addEventListener("resize",f1,false);}d.media.initRangeSet();d.media.initRangeSet(R["SAP_STANDARD_EXTENDED"]);if(sap.ui.define){sap.ui.define("sap/ui/Device",[],function(){return d;});}}());
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview A wrapper for a page's <code>allCatalogs</code> collection loaded from the page
 * building service.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global jQuery, sap */

  // namespace "sap.ui2.srvc" **************************************************
  sap.ui2 = sap.ui2 || {};
  sap.ui2.srvc = sap.ui2.srvc || {};

  // Only declare the module if jQuery.sap exists. Otherwise we do not even try to require assuming
  // that the script has been loaded manually (before SAPUI5).
  // Load time branching pattern
  var fnRequire = String; // NOP (String exists and is free of side-effects)
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.allcatalogs");
    // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
    fnRequire = function () {
      jQuery.sap.require.apply(this, arguments);
    };
  }

  // "public class" ************************************************************

  /**
   * Constructs a new representation (wrapper) for the given page's <code>allCatalogs</code>
   * collection to be loaded from the given factory's page building service. Note that this
   * collection does not contain the page's classic catalog as returned by
   * {@link sap.ui2.srvc.Page#getCatalog}).
   *
   * @param {sap.ui2.srvc.Factory} oFactory
   *  the factory
   * @param {string} sPageId
   *   ID of the page
   *
   * <p>
   * Initially a stub is created, which can later load its properties and related objects
   * asynchronously.
   * <p>
   * This collection and the contained catalogs are currently read-only and cannot be updated
   * through the page building service.
   * (see {@link sap.ui2.srvc.PageBuildingService}, {@link sap.ui2.srvc.Catalog})
   *
   * @class
   * @since 1.7.0
   */
  sap.ui2.srvc.AllCatalogs = function (oFactory, sPageId) {
    var aCatalogs = [],
      bIsStub = true,
      that = this;

    // BEWARE: constructor code below!

    // "private" methods ---------------------------------------------------------

    /**
     * Makes sure we are not just a stub.
     *
     * @private
     */
    function checkStub() {
      if (bIsStub) {
        throw new sap.ui2.srvc.Error(that + ": collection is just a stub",
          "sap.ui2.srvc.AllCatalogs");
      }
    }

    // "public" methods ----------------------------------------------------------

    /**
     * Returns this collection's catalog instances. Can only be called if the collection itself is
     * not a stub anymore.
     *
     * @returns {sap.ui2.srvc.Catalog[]}
     *   this collection's catalog instances
     * @since 1.7.0
     *
     * @see #isStub()
     */
    this.getCatalogs = function () {
      checkStub();
      return aCatalogs.slice();
    };

    /**
     * Tells whether this <code>allCatalogs</code> collection is still only a stub and does not yet
     * know its individual catalogs.
     *
     * @returns {boolean}
     *   whether this <code>allCatalogs</code> collection is still only a stub
     * @since 1.7.0
     *
     * @see #load()
     */
    this.isStub = function () {
      return bIsStub;
    };

    /**
     * Loads this <code>allCatalogs</code> collection including all of its catalogs and their CHIPs.
     * Notifies one of the given handlers.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given, the default <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @param {string} [sFilter]
     *   filter value as defined by OData specification e.g. "type eq 'H'" for HANA catalogs.
     *   Filter has been introduced with version 1.16.2.
     * @param {boolean} [bPartially=false]
     *   Whether to load the <code>allCatalogs</code> collection only partially instead of making
     *   sure that also remote catalogs are fully loaded (since 1.17.1). Note: Non-remote catalogs
     *   are not affected!
     * @param {string} sSorting
     *   name of the field to be sorted on via $orderby as defined by OData specification.
     *   If not defined the dafault sorting would be on the field id (since 1.44)
     * @since 1.7.0
     */
    this.load = function (fnSuccess, fnFailure, sFilter, bPartially, sSorting) {
      if (!bIsStub) {
        throw new sap.ui2.srvc.Error(that + ": collection is not a stub anymore",
          "sap.ui2.srvc.AllCatalogs");
      }

      function loadCatalogs() {
        var i, n, oCatalog;

        if (!bPartially) {
          // Note: If a catalog is still a stub here, it refers to a different system. We don't
          // expect to have many such catalogs, so we don't mind loading them serialized.
          for (i = 0, n = aCatalogs.length; i < n; i += 1) {
            oCatalog = aCatalogs[i];
            if (oCatalog.isStub()) {
              oCatalog.load(loadCatalogs, fnFailure);
              return;
            }
          }
        }
        fnSuccess();
      }

      function onSuccess(oAlterEgo) {
        var i, n;

        jQuery.sap.log.debug("Loaded: " + that, null, "sap.ui2.srvc.AllCatalogs");
        bIsStub = false;
        aCatalogs = [];
        for (i = 0, n = oAlterEgo.results.length; i < n; i += 1) {
          fnRequire("sap.ui2.srvc.catalog");
          aCatalogs.push(oFactory.createCatalog(oAlterEgo.results[i]));
        }
        jQuery.sap.log.debug("Initialized: " + that, null, "sap.ui2.srvc.AllCatalogs");
        loadCatalogs();
      }

      oFactory.getPageBuildingService().readAllCatalogs(sPageId, onSuccess, fnFailure, sFilter, sSorting);
    };

    /**
     * Returns this <code>allCatalogs</code> collection's string representation.
     *
     * @param {boolean} [bVerbose=false]
     *   flag whether to show all properties
     * @returns {string}
     *   this <code>allCatalogs</code> collection's string representation
     * @since 1.7.0
     */
    this.toString = function (bVerbose) {
      var aResult = ['sap.ui2.srvc.AllCatalogs({sPageId:"', sPageId, '",bIsStub:', bIsStub];
      if (bVerbose) {
        aResult.push(',aCatalogs:', JSON.stringify(aCatalogs));
      }
      aResult.push('})');
      return aResult.join('');
    };


    // constructor code -------------------------------------------------------
    if (!sap.ui2.srvc.Error) {
      fnRequire("sap.ui2.srvc.error");
    }
    if (!sPageId) {
      throw new sap.ui2.srvc.Error("Missing page ID", "sap.ui2.srvc.AllCatalogs");
    }
    jQuery.sap.log.debug("Created: " + this, null, "sap.ui2.srvc.AllCatalogs");
  };
}());
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview A wrapper for a property bag loaded from the page building service.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global jQuery, sap */

  // namespace "sap.ui2.srvc" **************************************************
  sap.ui2 = sap.ui2 || {};
  sap.ui2.srvc = sap.ui2.srvc || {};

  // Only declare the module if jQuery.sap exists. Otherwise we do not even try to require assuming
  // that the script has been loaded manually (before SAPUI5).
  // Load time branching pattern
  var fnRequire = String; // NOP (String exists and is free of side-effects)
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.bag");
    // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
    fnRequire = function () {
      jQuery.sap.require.apply(this, arguments);
    };
  }

  // "public class" ************************************************************

  /**
   * Constructs a new representation (wrapper) of the bag with the given
   * bag description as loaded from the given factory's page building service.
   * A property bag can be associated with a page (see {@link sap.ui2.srvc.Page#getBag}), a
   * CHIP instance (see {@link sap.ui2.srvc.ChipInstance#getBag}) or a CHIP
   * (see {@link sap.ui2.srvc.Chip#getBag}). Such bags take arbitrary name/value pairs consisting
   * of strings.
   *
   * @param {sap.ui2.srvc.Factory} oFactory
   *   the factory
   * @param {object} oAlterEgo
   *   the bag data including its (optional) properties as loaded via the page building service
   * @param {object} [oParentBag]
   *   a bag which is asked for properties not found in this bag
   * @param {function(sap.ui2.srvc.Bag)} [fnChangeListener]
   *   (since 1.21) a listener to be called (with this bag as an argument) each time this bag
   *   changes due to save or reset; the listener is not called in case a backend request fails
   *   completely
   *
   * @class
   * @since 1.3.0
   */
  sap.ui2.srvc.Bag = function (oFactory, oAlterEgo, oParentBag, fnChangeListener) {
    var oPropertiesByName,
      bResetting = false,
      bSaving = false,
      that = this;

    // BEWARE: constructor code below!

    // "private" methods ---------------------------------------------------------

    /**
     * Throws an error if the bag is currently running a <code>reset</code>.
     *
     * @private
     */
    function errorIfResetRunning() {
      if (bResetting) {
        throw new sap.ui2.srvc.Error("The previous reset operation is not finished yet",
          "sap.ui2.srvc.Bag");
      }
    }

    /**
     * Throws an error if the bag is currently running a <code>save</code>.
     *
     * @private
     */
    function errorIfSaveRunning() {
      if (bSaving) {
        throw new sap.ui2.srvc.Error("The previous save operation is not finished yet",
          "sap.ui2.srvc.Bag");
      }
    }

    /**
     * Fills the <code>oPropertiesByName</code> map based on the properties in the given bag data,
     * updating only the given accepted names if applicable.
     *
     * @param {object} oBagData
     *   parsed JSON object as returned by the OData service representing this bag
     * @param {sap.ui2.srvc.Map} [oAcceptedNames]
     *   map (used as a "hash set") of accepted names; if missing, all are accepted
     * @private
     */
    function fillPropertyMap(oBagData, oAcceptedNames) {
      var aProperties = (oBagData.Properties && oBagData.Properties.results)
        || (oBagData.ChipInstanceProperties && oBagData.ChipInstanceProperties.results)
        || (oBagData.ChipProperties && oBagData.ChipProperties.results)
        || [];

      oPropertiesByName = oPropertiesByName || new sap.ui2.srvc.Map();
      aProperties.forEach(function (oPropertyData) {
        var sName = oPropertyData.name,
          oOldProperty;

        if (!oAcceptedNames || oAcceptedNames.containsKey(sName)) {
          oOldProperty = oPropertiesByName.put(sName, oPropertyData);
          oPropertyData.$currentValue = oOldProperty
            ? oOldProperty.$currentValue // keep current value
            : oPropertyData.value;
        }
      });

      // remove relations
      delete oBagData.ChipInstanceProperties;
      delete oBagData.ChipProperties;
      delete oBagData.Properties;
    }

    /**
     * Returns the names of all translatable or non-translatable properties (as indicated) of
     * this bag, taking the given names from the parent bag into account. Avoids duplicates.
     *
     * @param {string[]} aNames
     *   names from parent bag or <code>[]</code>
     * @param {boolean} bTranslatable
     *   whether names of translatable text properties are requested
     * @returns {string[]}
     *  an array containing all names
     * @private
     */
    function getNames(aNames, bTranslatable) {
      var oNameSet;

      if (aNames.length === 0) { // no parent names --> no duplicates expected, run faster code
        oPropertiesByName.keys().forEach(function (sKey) {
          if (bTranslatable === (oPropertiesByName.get(sKey).translatable === "X")) {
            aNames.push(sKey);
          }
        });
        return aNames;
      }

      // parent names present --> expect duplicates and avoid them with slower code
      oNameSet = new sap.ui2.srvc.Map();
      aNames.forEach(function (sKey) {
        oNameSet.put(sKey);
      });
      oPropertiesByName.keys().forEach(function (sKey) {
        if (bTranslatable === (oPropertiesByName.get(sKey).translatable === "X")) {
          oNameSet.put(sKey);
        }
      });
      return oNameSet.keys();
    }

    /**
     * Returns a mock of a parent page or CHIP instance which contains the exact IDs and nothing
     * else.
     * @returns {object} a mock of a parent page or CHIP instance
     *
     * @private
     */
    function getParentMock() {
      // Note: bags at Chip level are read-only and can be ignored here!
      if (oAlterEgo.instanceId) {
        return {pageId: oAlterEgo.pageId, instanceId: oAlterEgo.instanceId};
      }
      return {id: oAlterEgo.pageId};
    }

    /**
     * Sets the value for the given property name. If no such property exists yet, it will be
     * created. If <code>setProperty()</code> is called during a running {@link #save()}, the
     * property will <i>not</i> be saved immediately. It will only be saved with the next call to
     * {@link #save()}.
     *
     * @param {string} sPropertyName
     *   the property name (which has to be a string)
     * @param {string} sValue
     *   the value (which has to be a string)
     * @param {boolean} bTranslatable
     *   whether this property is a translatable text property
     * @returns {sap.ui2.srvc.Bag}
     *   this bag
     * @throws Error when called while {@link #reset()} is running.
     * @private
     */
    function setProperty(sPropertyName, sValue, bTranslatable) {
      var oProperty;

      if (!sPropertyName) {
        throw new sap.ui2.srvc.Error("Property name must not be empty", "sap.ui2.srvc.Bag");
      }
      if (typeof sPropertyName !== "string") {
        throw new sap.ui2.srvc.Error("Property name must be a string", "sap.ui2.srvc.Bag");
      }
      oProperty = oPropertiesByName.get(sPropertyName);
      if (oProperty && ((oProperty.translatable === "X") !== bTranslatable)) {
        throw new sap.ui2.srvc.Error(
          "'" + sPropertyName + "' already exists as a "
            + (bTranslatable ? "non-translatable" : "translatable text")
            + " property",
          "sap.ui2.srvc.Bag"
        );
      }
      if (typeof sValue !== "string") {
        throw new sap.ui2.srvc.Error("Property value must be a string", "sap.ui2.srvc.Bag");
      }
      errorIfResetRunning();

      if (!oProperty) {
        oProperty = {name: sPropertyName, translatable: (bTranslatable ? "X" : " ")};
        oPropertiesByName.put(sPropertyName, oProperty);
      }
      oProperty.$currentValue = sValue;
      return that;
    }

    // "public" methods ----------------------------------------------------------

    /**
     * Returns this bag's ID.
     *
     * @returns {string}
     *   this bag's ID
     * @since 1.3.0
     */
    this.getId = function () {
      return oAlterEgo.id;
    };

    /**
     * Returns an array containing the names of the (non-translatable) properties contained in this
     * bag. In contrast to {@link #getPropertyNames()} the properties of the parent bag are ignored.
     * As long as a {@link #reset()} is running,
     * the "old" property names are returned.
     *
     * If {@link #resetProperty()} has been called on a not persisted property its name is not
     * contained in the array; for a persisted property it is contained in the array until
     * {@link #save()} is called on this bag.
     *
     * @returns {string[]}
     *   array of (non-translatable) property names really stored in this bag (not the parent bag)
     *
     * @see #getOwnTextNames
     * @see #getPropertyNames
     * @private
     */
    this.getOwnPropertyNames = function () {
      return getNames([], false);
    };

    /**
     * Returns an array containing the names of the translatable text properties contained in this
     * bag. In contrast to {@link #getTextNames()} the text properties of the parent bag are
     * ignored. As long as a {@link #reset()} is running, the "old" property names are returned.
     * For an array of non-translatable property names see {@link #getPropertyNames}.
     *
     * @returns {string[]}
     *   array of translatable text property names really stored in this bag (not the parent bag)
     *
     * @see #getOwnPropertyNames
     * @see #getTextNames
     * @private
     */
    this.getOwnTextNames = function () {
      return getNames([], true);
    };

    /**
     * Returns the property value for the given property name. If no such property exists, the
     * given default value is returned.
     * As long as a {@link #reset()} is running, "old" values are returned.
     *
     * @param {string} sPropertyName
     *   the property name
     * @param {string} [sDefaultValue]
     *   default value used if there is no property with given name
     *
     * @returns {string}
     *   the property value
     * @throws Error if <code>sPropertyName</code> is a translatable text property name.
     * @since 1.3.0
     */
    this.getProperty = function (sPropertyName, sDefaultValue) {
      var oProperty = oPropertiesByName.get(sPropertyName);

      if (oProperty && (oProperty.translatable === "X")) {
        throw new sap.ui2.srvc.Error("'" + sPropertyName + "' is a translatable text property",
          "sap.ui2.srvc.Bag");
      }

      if (oProperty) {
        return oProperty.$currentValue;
      }
      if (oParentBag) {
        return oParentBag.getProperty(sPropertyName, sDefaultValue);
      }
      return sDefaultValue;
    };

    /**
     * Returns an array containing the names of the (non-translatable) properties contained in this
     * bag. As long as a {@link #reset()} is running, the "old" property names are returned.
     * For an array of translatable text property names see {@link #getTextNames}.
     *
     * If {@link #resetProperty()} has been called on a not persisted property its name is not
     * contained in the array; for a persisted property it is contained in the array until
     * {@link #save()} is called on this bag.
     *
     * @returns {string[]}
     *   array of (non-translatable) property names
     * @since 1.3.0
     *
     * @see #getTextNames
     */
    this.getPropertyNames = function () {
      var aPropertyNames = oParentBag ? oParentBag.getPropertyNames() : [];

      return getNames(aPropertyNames, false);
    };

    /**
     * Returns the translatable text for the given text property name. If no such text property
     * exists, <code>sTextName</code> is returned again. As long as a {@link #reset()} is running,
     * "old" texts are returned.
     *
     * @param {string} sTextName
     *   the text property name
     * @returns {string}
     *   the translatable text
     * @throws Error if <code>sTextName</code> is an ordinary (non-translatable) property name.
     * @since 1.17.1
     */
    this.getText = function (sTextName) {
      var oProperty = oPropertiesByName.get(sTextName);

      if (oProperty && (oProperty.translatable !== "X")) {
        throw new sap.ui2.srvc.Error(
          "'" + sTextName + "' is a non-translatable property",
          "sap.ui2.srvc.Bag"
        );
      }

      if (oProperty) {
        return oProperty.$currentValue;
      }
      if (oParentBag) {
        return oParentBag.getText(sTextName);
      }
      return sTextName;
    };

    /**
     * Returns an array containing the names of the translatable text properties contained in this
     * bag. As long as a {@link #reset()} is running, the "old" property names are returned.
     * For an array of non-translatable property names see {@link #getPropertyNames}.
     *
     * @returns {string[]}
     *   array of translatable text property names
     * @since 1.17.1
     *
     * @see #getPropertyNames
     */
    this.getTextNames = function () {
      var aTextNames = oParentBag ? oParentBag.getTextNames() : [];

      return getNames(aTextNames, true);
    };

    /**
     * Discards all modified properties, deletes this bag with all its properties and reloads the
     * bag via the factory given in the constructor. If the factory's page building service offers
     * different layers (like <code>sap.ui2.srvc.PageBuildingService</code>, calling them
     * <i>scopes</i>), the values from a lower layer will become visible.
     * <p>
     * This is an asynchronous operation. If the bag is reset successfully, the success
     * handler is called. If there is an error while resetting the bag, all old values are kept
     * and the error handler is called.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnError]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If fnError is not given, the default error handler from the factory's
     *   page building service is called.
     * @throws Error when called while {@link #save()} or a previous <code>reset()</code> is
     *   running.
     * @since 1.3.0
     */
    this.reset = function (fnSuccess, fnError) {
      var oParent = getParentMock(),
        oPbs = oFactory.getPageBuildingService();

      function onReadSuccess(oBagData) {
        bResetting = false;

        oAlterEgo = oBagData;
        oPropertiesByName = undefined;
        fillPropertyMap(oAlterEgo);
        if (fnChangeListener) {
          fnChangeListener(that);
        }
        fnSuccess();
      }

      if (typeof fnSuccess !== "function") {
        throw new sap.ui2.srvc.Error("Missing success handler", "sap.ui2.srvc.Bag");
      }

      errorIfSaveRunning();
      errorIfResetRunning();
      bResetting = true;
      fnError = fnError || oPbs.getDefaultErrorHandler();

      if (oAlterEgo.$tmp) {
        // if bag is not yet persisted do not call delete and read
        sap.ui2.srvc.call(onReadSuccess.bind(null, oAlterEgo), fnError, true);
        return;
      }

      oPbs.deleteBag(oParent, oAlterEgo.id, function () {
        oAlterEgo.$tmp = true;  // TODO not yet part of a test
        // if bag cannot be read because there is no bag in lower layer success handler has to be
        // called; oAlterEgo is passed because success handler expects oData parameter and
        // oAlterEgo contains required information for the bag (like page and name) and no
        // properties (have been deleted after property map has been filled) --> property map
        // is cleared in success handler and we get an empty bag
        oPbs.readBag(oParent, oAlterEgo.id, onReadSuccess, onReadSuccess.bind(null, oAlterEgo));
      }, function () {
        // deleteBag failed
        bResetting = false;

        // NOTE: call error handler with any arguments passed in this wrapper
        fnError.apply(null, arguments);
      });
    };

    /**
     * Deletes the property with the given name, no matter if it is translatable or not. If no such
     * property exists, nothing happens.
     * <p>
     * Otherwise, the property value is considered to be <code>undefined</code> until a
     * {@link #save} operation has succeeded. Note how this <code>undefined</code> value is treated
     * differently by {@link #getProperty} and {@link #getText}!
     * <p>
     * <b>BEWARE:</b> This transient <code>undefined</code> value can be wrong due to a number of
     * reasons, including different layers of storage (like
     * <code>sap.ui2.srvc.PageBuildingService</code>, calling them <i>scopes</i>) or parent bags
     * (in case of catalog pages), which cannot be taken properly into account until the next time
     * a {@link #save} operation succeeds!
     * <p>
     * After a successful {@link #save} operation, a deleted property may reappear from a lower
     * layer of storage or from a parent bag. If you need to overwrite such values, use
     * {@link #setProperty} instead!
     * <p>
     * If <code>resetProperty()</code> is called during a running {@link #save}, the
     * property will <i>not</i> be saved immediately. It will only be saved with the next call to
     * {@link #save}.
     *
     * @param {string} sPropertyName
     *   the property name (which has to be a string)
     * @returns {sap.ui2.srvc.Bag}
     *   this bag
     * @throws Error when called while {@link #reset} is running.
     *
     * @since 1.17.1
     */
    this.resetProperty = function (sPropertyName) {
      var oProperty;

      oProperty = oPropertiesByName.get(sPropertyName);
      if (oProperty) {
        oProperty.$currentValue = undefined; //undefined value is marker to delete property on save
        if (!Object.prototype.hasOwnProperty.call(oProperty, "value")) { // no persisted value
          oPropertiesByName.remove(sPropertyName);
        }
      }
      return this;
    };

    /**
     * Saves this bag with all modified properties. This is an asynchronous operation.
     * If all modified properties have been saved, the success handler is called. If one or more
     * properties cannot be saved, the error handler is called. This error handler reports which
     * properties could not be saved and the corresponding error messages. The properties remain
     * valid and the bag tries to save them again with the next call to <code>save()</code>.
     *
     * <p>
     * If <code>save()</code> is called when there is no modified property, the function calls the
     * success handler asynchronously without any further activity.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler. Errors thrown in this function will be reported to the page
     *   building service's default error handler (not to <code>fnError</code> since the signature
     *   does not fit)
     * @param {function (map<string, string>, map<string, object>)} fnError
     *   error handler taking two maps, each mapping individual property names
     *   to error message and complete error information respectively. Since
     *   version 1.28.6, the second parameter is always returned,
     *   but a property name in that object may map to
     *   undefined values in case an error object containing the complete error
     *   information is not available.<br />
     *   For more details about the structure of the error information object
     *   see {@link sap.ui2.srvc.ODataWrapper#onError}
     * @throws Error when called while {@link #reset()} or a previous <code>save()</code> is
     *   running.
     * @since 1.3.0
     */
    this.save = function (fnSuccess, fnError) {
      var iNumberOfRequests = 0,
        oResetPropertyNames = new sap.ui2.srvc.Map(), // used as a "hash set"
        mMessagesByName = {},
        mErrorResponseByName = {},
        oParentMock = getParentMock(),
        oPbs = oFactory.getPageBuildingService();

      if (typeof fnSuccess !== "function") {
        throw new sap.ui2.srvc.Error("Missing success handler", "sap.ui2.srvc.Bag");
      }
      if (typeof fnError !== "function") {
        throw new sap.ui2.srvc.Error("Missing error handler", "sap.ui2.srvc.Bag");
      }
      errorIfSaveRunning();
      errorIfResetRunning();

      oPbs.openBatchQueue();

      oPropertiesByName.keys().forEach(function (sName) {
        var oUpdatedProperty,
          oProperty = oPropertiesByName.get(sName);

        function onError(sMessage, oErrorInformation) {
          mMessagesByName[sName] = sMessage;
          mErrorResponseByName[sName] = oErrorInformation;
        }

        if (oProperty.$currentValue !== oProperty.value) {
          iNumberOfRequests += 1;
          if (Object.prototype.hasOwnProperty.call(oProperty, "value")) {
            if (oProperty.$currentValue === undefined) {
              // reset property: delete it and re-read bag below
              oResetPropertyNames.put(sName);
              oPbs.deleteProperty(oProperty,
                function () {
                  if (oProperty.$currentValue === undefined) { // not re-created via API
                    oPropertiesByName.remove(sName);
                  } else {
                    delete oProperty.value; // not persisted anymore
                  }
                }, onError);
            } else {
              // changed property: update it
              oUpdatedProperty = JSON.parse(JSON.stringify(oProperty));
              oUpdatedProperty.value = oProperty.$currentValue; // 1st update clone
              oPbs.updateProperty(oUpdatedProperty,
                function () {
                  oProperty.value = oUpdatedProperty.value; // on success, update original
                }, onError);
            }
          } else {
            // new property: create it
            oPbs.createProperty(oParentMock, oAlterEgo.id, sName,
              oProperty.$currentValue, oProperty.translatable,
              function (oNewProperty) {
                // save alter ego because of __metadata needed for later updates
                oNewProperty.$currentValue = oProperty.$currentValue; // keep current value
                oPropertiesByName.put(sName, oNewProperty);
              }, onError);
          }
        }
      });

      if (oResetPropertyNames.keys().length) {
        // some properties were reset: re-read bag
        oPbs.readBag(oParentMock, oAlterEgo.id, function (oBagData) {
          fillPropertyMap(oBagData, oResetPropertyNames);
        }); // omit error handler, default one must be used here!
      }

      bSaving = true;
      // TODO allow to save empty bags (as they can also be the result of deleting all properties)
      oPbs.submitBatchQueue(function () {
        bSaving = false;
        if (fnChangeListener && iNumberOfRequests > Object.keys(mMessagesByName).length) {
          // at least one request must succeed
          fnChangeListener(that);
        }
        if (Object.keys(mMessagesByName).length > 0) {
          fnError(mMessagesByName, mErrorResponseByName);
        } else {
          oAlterEgo.$tmp = false;
          fnSuccess(); // Note: try/catch done by submitBatchQueue()!
        }
      });
    };

    /**
     * Sets the value for the given property name. If no such property exists yet, it will be
     * created. If <code>setProperty()</code> is called during a running {@link #save()}, the
     * property will <i>not</i> be saved immediately. It will only be saved with the next call to
     * {@link #save()}.
     *
     * @param {string} sPropertyName
     *   the property name (which has to be a string)
     * @param {string} sValue
     *   the value (which has to be a string)
     * @returns {sap.ui2.srvc.Bag}
     *   this bag
     * @throws Error when called while {@link #reset()} is running.
     * @throws Error when called with a property name which is not of type string or the empty
     *   string
     * @since 1.3.0
     */
    this.setProperty = function (sPropertyName, sValue) {
      return setProperty(sPropertyName, sValue, false);
    };

    /**
     * Sets the translatable text for the given text property name. If no such text property exists
     * yet, it will be created as a translatable text property. Ordinary properties and
     * translatable text properties share a common namespace! Once a property has been created,
     * it is either translatable or not and this cannot be changed by the corresponding setters.
     * You can only call <code>reset()</code> and start all over.
     * <p>
     * Note: You can create or modify translatable text properties only if the session language is
     * the same as the page's original language (see
     * {@link sap.ui2.srvc.Page#getOriginalLanguage}).
     * Also note that handling of translatable texts depends on the layer used. In some layers the
     * original language is important; in others it does not matter. In the latter case the empty
     * string (<code>""</code>) is returned, which indicates that the user is allowed to edit the
     * translatable texts in any language.
     * <p>
     * If <code>setText()</code> is called during a running {@link #save()}, the text property will
     * <i>not</i> be saved immediately. It will only be saved with the next call to {@link #save()}.
     *
     * @param {string} sTextName
     *   the text property name (must not be empty)
     * @param {string} sText
     *   the translatable text (may be empty)
     * @returns {sap.ui2.srvc.Bag}
     *   this bag
     * @throws Error when called while {@link #reset()} is running or if an ordinary
     * (non-translatable) property with the same name already exists.
     * @since 1.17.1
     *
     * @see sap.ui2.srvc.Page#getOriginalLanguage
     * @see chip.bag.getOriginalLanguage
     */
    this.setText = function (sTextName, sText) {
      return setProperty(sTextName, sText, true);
    };

    /**
     * Returns this bag's string representation.
     *
     * @param {boolean} [bVerbose=false]
     *   whether to show all properties
     * @returns {string}
     *   this bag's string representation
     * @since 1.3.0
     */
    this.toString = function (bVerbose) {
      var aResult = ['sap.ui2.srvc.Bag({id:"', oAlterEgo.id,
        '",pageId:"', oAlterEgo.pageId
        ];
      if (oAlterEgo.instanceId) {
        aResult.push('",instanceId:"', oAlterEgo.instanceId);
      }
      aResult.push('"');
      if (bVerbose) {
        aResult.push(',oAlterEgo:', JSON.stringify(oAlterEgo));
        aResult.push(',oPropertiesByName:', oPropertiesByName.toString());
        aResult.push(',bResetting:', bResetting);
        aResult.push(',bSaving:', bSaving);
      }
      aResult.push('})');
      return aResult.join('');
    };

    /**
     * Replace all properties in this bag with given raw bag data.
     *
     * @param {object} oBagData
     *  parsed JSON object as returned by the OData service representing this bag
     * @throws Error when called with bag data which does not fit to this bag.
     * @private
     */
    this.update = function (oBagData) {
      if (!oBagData || oAlterEgo.id !== oBagData.id) {
        throw new sap.ui2.srvc.Error("Bag data belongs to another bag",
          "sap.ui2.srvc.Bag");
      }
      // TODO: further tests for other key properties
      oPropertiesByName = undefined;
      fillPropertyMap(oBagData);
    };

    // constructor code -------------------------------------------------------
    if (!sap.ui2.srvc.Map) {
      fnRequire("sap.ui2.srvc.utils");
    }
    fillPropertyMap(oAlterEgo);
    jQuery.sap.log.debug("Created: " + this, null, "sap.ui2.srvc.Bag");
  };

}());
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview A wrapper for a catalog loaded from the page building service.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global jQuery, sap */

  // namespace "sap.ui2.srvc" **************************************************
  sap.ui2 = sap.ui2 || {};
  /**
   * @namespace The namespace for services related to page building and CHIP implementation.
   * @since 1.2.0
   */
  sap.ui2.srvc = sap.ui2.srvc || {};

  // Only declare the module if jQuery.sap exists. Otherwise we do not even try to require assuming
  // that the script has been loaded manually (before SAPUI5).
  // Load time branching pattern
  var fnRequire = String; // NOP (String exists and is free of side-effects)
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.catalog");
    // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
    fnRequire = function () {
      jQuery.sap.require.apply(this, arguments);
    };
  }

  //TODO We cannot require utils (module path possibly unset)?!, but we need testPublishAt
  sap.ui2.srvc.testPublishAt = sap.ui2.srvc.testPublishAt || function () {/*NOP*/};

  // "public class" ************************************************************

  /**
   * Constructs a new representation (wrapper) of the CHIP catalog with the given
   * ID to be loaded from the given factory's page building service.
   * <p>
   * Initially a stub is created, which can later load its properties and related objects
   * asynchronously.
   * <p>
   * Catalogs are currently read-only and cannot be updated through the page building service.
   *
   * @param {sap.ui2.srvc.Factory} oFactory
   *  the factory
   * @param {object|string} vCatalogData
   *   the catalog's ID or its catalog data as loaded via page building service
   *
   * @class
   * @see sap.ui2.srvc.PageBuildingService
   * @see sap.ui2.srvc.Chip
   * @since 1.2.0
   */
  sap.ui2.srvc.Catalog = function (oFactory, vCatalogData) {
    var oAlterEgo, // catalog's representation with all relations removed
      oCatalogPage, // {sap.ui2.srvc.Page}
      aChips = [], // {sap.ui2.srvc.Chip[]}
      oReadPromise, // if existing and in state "pending", a load/refresh is running; see read
      bIsStub = true, //TODO replace by aChips === undefined
      oCachedRemoteErrorArgs,
      sId,
      oReadRegisteredChipsPromise, // see readRegisteredChips
      aRegisteredChipIds = [],
      that = this;

    // BEWARE: constructor code below!

    // "private" methods ---------------------------------------------------------
    /**
     * Makes sure the given page is not just a stub.
     *
     * @private
     */
    function checkStub() {
      if (bIsStub) {
        throw new sap.ui2.srvc.Error(that + ": page is just a stub", "sap.ui2.srvc.Page");
      }
    }

    /**
     * Makes sure that not only the catalog's ID is known, but at least its alter ego.
     *
     * @private
     */
    function checkAlterEgo() {
      if (!oAlterEgo) {
        throw new sap.ui2.srvc.Error(that + ": catalog is just an ID", "sap.ui2.srvc.Catalog");
      }
    }

    /**
     * Releases all resources associated with this catalog. Call this method just before you stop
     * using it.
     *
     * @private
     */
    sap.ui2.srvc.testPublishAt(that);
    function exit() {
      var sToString = that.toString();

      //TODO exit() catalog's CHIPs?! what about oReadRegisteredChipsPromise then?
      if (oCatalogPage) {
        oCatalogPage.exit(); //TODO make sap.ui2.srvc.Page#exit also remove its API?! cf. below
      }

      // reset to initial state, but leave ID intact!
      oAlterEgo = undefined;
      vCatalogData = undefined;
      aChips = [];
      bIsStub = true;
      oReadPromise = undefined;
      oReadRegisteredChipsPromise = undefined;
      aRegisteredChipIds = [];

      // delete methods on deleted catalog to prevent wrong behavior
      Object.keys(that).forEach(function (sFunctionName) {
        if (!/getCatalogData|getId|isStub|toString/.test(sFunctionName)) {
          delete that[sFunctionName];
        }
      });

      oFactory.forgetCatalog(that);

      jQuery.sap.log.debug("Exited: " + sToString, null, "sap.ui2.srvc.Catalog");
    }

    /**
     * Gets this catalog's remote base URL.
     * @returns {string}
     * @private
     */
    sap.ui2.srvc.testPublishAt(that);
    function getRemoteBaseUrl() {
      return that.addSystemToServiceUrl(oAlterEgo.type === 'H'
        ? "/sap/hba/apps/kpi/s/odata/hana_chip_catalog.xsodata/"
        : oAlterEgo.baseUrl);
    }

    /**
     * Gets the remote catalog service.
     *
     * @returns {sap.ui2.srvc.RemoteCatalogService}
     * @private
     */
    sap.ui2.srvc.testPublishAt(that);
    function getRemoteCatalogService() {
      return oFactory.getRemoteCatalogService(oAlterEgo) || {
        readChips: function (sBaseUrl, sCatalogId, aChipIds, fnSuccess, fnFailure) {
          jQuery.sap.log.error("Catalog '" + oAlterEgo.id + "', type '" + oAlterEgo.type
            + "' not supported", null, "sap.ui2.srvc.Catalog");
          // fake an empty response to make the catalog valid
          // When created with alterEgo, we're still synchronous, so make it async
          sap.ui2.srvc.call(fnSuccess.bind(null, {results: []}), undefined, /*async=*/true);
        }
      };
    }

    /**
     * Success handler for loading a catalog.
     *
     * @private
     */
    function initialize() {
      var i, n,
        aResults;

      jQuery.sap.log.debug("Loaded: " + that, null, "sap.ui2.srvc.Catalog");
      if (oAlterEgo.Chips) {
        // fallback for HANA
        aResults = oAlterEgo.Chips.results || oAlterEgo.Chips;
        // remove relations and store catalog representation
        delete oAlterEgo.Chips;

        // create CHIP stubs
        aChips = [];
        for (i = 0, n = aResults.length; i < n; i += 1) {
          aChips[i] = oFactory.createChip(aResults[i]);
        }
        bIsStub = false;
        jQuery.sap.log.debug("Initialized: " + that, null, "sap.ui2.srvc.Catalog");
      }

      delete oAlterEgo.CatalogPage;
    }

    /**
     * Loads the catalog from the page building service, including its title and its contained
     * CHIPs (at least as stubs).
     *
     * If the catalog is a remote catalog, an attempt to load its chips is made.
     * In this case, if the loading fails, the catalog is fully initialized ( with an empty chips collection ) and
     * returned as 2nd argument of the reject handler (note that it is no longer a stub!)
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     *
     * @private
     */
    sap.ui2.srvc.testPublishAt(that);
    function read(bRefresh, fnSuccess, fnFailure) {
      var oDeferred;

      /*
       * @param {object} oResult
       *   the OData result from readCatalog
       */
      function onCatalogLoaded(oResult) {
        oAlterEgo = oResult;
        initialize();
        oDeferred.resolve();
      }

      /*
       * @param {object} oResult
       *   the OData result from readCatalogChips
       */
      function onChipsLoaded(oResult) {
        oAlterEgo.Chips = oResult;
        initialize();
        oDeferred.resolve();
      }

      /*
       * Processes the remote response from readCatalogChips.
       * @param {object} oResult
       *   the OData result from readCatalogChips
       */
      function processRemoteResponse(oResult) {
        oResult.results.forEach(function (oRawChip) {
          oRawChip.remoteCatalogId = sId;
        });
        onChipsLoaded(oResult);
      }

      /*
       * initialize the chip and reject the promise,
       * called when subsequent loading from a remote catalog fails
       * @param {string} sErrMsg
       *   an error message from a failure
       * @param {object} [oErrDetails]
       *   (since version 1.28.6) an optional object containing the complete
       *   error information as
       *   delivered by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
       *   for more details.
       */
      function couldNotLoadRemoteChips() {
        initialize(); // fail gracefully
        oCachedRemoteErrorArgs = arguments;
        oDeferred.reject.apply(this, arguments);
      }
      /*
       * Processes the local response from readCatalog. Passes it on to initialize or requests the
       * CHIPS from the remote server.
       * @param {object} oResult
       *   the OData result from the readCatalog
       */
      function processLocalResponse(oResult) {
        var sRemoteBaseUrl;
        if (oResult.remoteId) { //TODO || oResult.type === "REMOTE"
          oAlterEgo = oResult;
          try {
            sRemoteBaseUrl = getRemoteBaseUrl();
          } catch (e) {
            couldNotLoadRemoteChips(e.toString());
            return;
          }
          getRemoteCatalogService().readChips(sRemoteBaseUrl, oAlterEgo.remoteId, undefined,
            processRemoteResponse, couldNotLoadRemoteChips);
        } else if (oAlterEgo && bRefresh) {
          onChipsLoaded(oResult.Chips);
        } else {
          onCatalogLoaded(oResult);
        }
      }

      if (!oReadPromise || oReadPromise.state() !== 'pending') {
        oDeferred = new jQuery.Deferred();
        oReadPromise = oDeferred.promise();
        if (!oAlterEgo || (bRefresh && !oAlterEgo.remoteId)) {
          // read the local catalog if it is unknown yet or if refreshing a non-remote catalog
          oFactory.getPageBuildingService().readCatalog(sId, processLocalResponse,
            oDeferred.reject.bind(oDeferred));
        } else {
          processLocalResponse(oAlterEgo);
        }
      }
      fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();
      //TODO this needs "sap.ui2.srvc.utils" which is never required!
      oReadPromise.done(sap.ui2.srvc.call.bind(null, fnSuccess, fnFailure));
      oReadPromise.fail(fnFailure);
    }

    // "public" methods ----------------------------------------------------------

    /**
     * Makes the given server-relative service URL point to the system given as parameter
     * <code>sSystem</code> or to the system from which the catalog
     * loaded its CHIPs if <code>sSystem</code> is empty.
     * <em>Server-relative URL</em> means a URL starting with exactly one "/" (also known as
     * absolute-path URL).
     * <p>
     *
     * The system is added via segment parameter <code>o</code> to the last URL segment of the
     * service URL. It is also possible to make this function put the system to a different
     * URL path segment of the service URL by specifying the empty segment parameter
     * <code>o</code>. If both <code>sSystem</code> is empty and the catalog is a local
     * catalog, no system is added and the empty segment parameter <code>o</code> is removed.
     * <br/>
     * <b>Example 1:</b> <code>/sap/opu/odata/MyService/?p1=v1</code> is converted to
     * <code>/sap/opu/odata/MyService;o=SYS/?p1=v1</code> if the catalog is a remote catalog with
     * system ID &quot;SYS&quot;.
     * However it remains unchanged if the catalog is not remote <em>and</em>
     * the parameter <code>sSystem</code> is empty.<br/>
     * <b>Example 2:</b> <code>/sap/opu/odata/MyService;o=/MyEntities/$count?p1=v1</code> is
     * converted to <code>/sap/opu/odata/MyService;o=sid(SYS.123)/MyEntities/$count?p1=v1</code> if
     * parameter <code>sSystem</code> is set to &quot;sid(SYS.123)&quot;</code>.
     *
     * The URL is in no way normalized.
     *
     * @private
     * @param {string} sServiceUrl
     *   a server-relative service URL (to be used when addressing the system directly)
     * @param {string} [sSystem]
     *   a system specification like <code>SYS</code> or <code>sid(SYS.123)</code>; if empty the
     *   system from which the catalog loaded its CHIPs is used
     * @returns {string}
     *   the service URL pointing to the system specified in parameter <code>sSystem</code> or to
     *   the catalog's system
     * @throws Error if the URL is not server-relative (such as <code>./something</code>,
     *   <code>http://foo.bar/something</code>, ...)
     */
    this.addSystemToServiceUrl = function (sServiceUrl, sSystem) {
      /*jslint regexp:true */
      if (sServiceUrl.indexOf('/') !== 0 || sServiceUrl.indexOf('//') === 0) {
        throw new sap.ui2.srvc.Error("addSystemToServiceUrl: Invalid URL: " + sServiceUrl,
          "sap.ui2.srvc.Catalog");
      }
      sSystem = sSystem || this.getSystemAlias();
      if (/^[^?]*(;o=([\/;?]|$))/.test(sServiceUrl)) {
        // URL with ";o=" *not* followed by system: insert system
        sServiceUrl = sServiceUrl.replace(/;o=([\/;?]|$)/,
            (sSystem ? ";o=" + sSystem : "") + "$1");
      } else if (!/^[^?]*;o=/.test(sServiceUrl) && sSystem) {
        // URL without ";o=": append system
        sServiceUrl = sServiceUrl.replace(/(\/[^?]*?)(\/$|$|(\/?\?.*))/,
            "$1;o=" + sSystem + "$2");
      }
      if (sap.ui) {
        sap.ui.getCore().getEventBus().publish("sap.ushell.Container",
          "addRemoteSystemForServiceUrl", sServiceUrl); //{ sValue : sServiceUrl }
      }
      return sServiceUrl;
    };

    /**
     * Creates a new catalog in the backend as a clone of this catalog, using the given domain ID.
     * All copied catalog CHIPs are references (see {@link sap.ui2.srvc.Chip#isReference})
     * until they are changed (copy on write).
     * Changes to the original CHIPs will be visible in the catalog copy after the next read.
     * The success handler is called as soon as the clone has been created and the new
     * <code>sap.ui2.srvc.Catalog</code> object is not a stub anymore. Access the
     * <code>sap.ui2.srvc.Catalog</code> instance passed to the success callback in order to learn
     * the resulting ID!
     * <p>
     * Can be called no matter whether this catalog is still a stub. For remote catalogs where
     * only the ID is known, this method currently fails!
     *
     * @param {string} sNewDomainId
     *   the new catalog's domain-specific ID which must not contain a colon
     * @param {string} [sNewTitle]
     *   the new catalog's title; if <code>undefined</code>, this catalog's title will be used
     * @param {function (sap.ui2.srvc.Catalog)} fnSuccess
     *   success handler for asynchronous creation
     * @param {function (string, [sap.ui2.srvc.Catalog], [object])} fnFailure
     *   error handler, taking an error message, an optional {@link sap.ui2.srvc.Catalog}
     *   instance and, since version 1.28.6, an optional object containing the
     *   complete error information.<br />
     *   See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details about the complete error information parameter.
     *
     * @see #getCatalogPage
     * @since 1.19.1
     */
    this.clone = function (sNewDomainId, sNewTitle, fnSuccess, fnFailure) {
      var oCatalogData,
        /*
         * keeps calls to failure handler consistent with failure handler calls
         * in sap.ui2.srvc.Factory#createNewCatalog
         */
        fnFailureWrapper = function (sErrorMessage, oMaybeErrorInformation) {
          return fnFailure(sErrorMessage, /*sap.ui2.srvc.Catalog*/undefined,
            oMaybeErrorInformation);
        };

      if (oAlterEgo && oAlterEgo.type === "REMOTE") {
        oCatalogData = this.getCatalogData();
        delete oCatalogData.id;
        oCatalogData.domainId = sNewDomainId;
        if (sNewTitle !== undefined) {
          oCatalogData.title = sNewTitle;
        }
        oFactory.createNewCatalog(oCatalogData, fnSuccess, fnFailure);
      } else {
        oFactory.getPageBuildingService().cloneCatalog(this.getId(), sNewDomainId, sNewTitle,
          function (oRawCatalog) {
            // Note: Chips relation is deferred, Catalog cannot handle this, thus use ID only!
            oFactory.createCatalog(oRawCatalog.id, fnSuccess, fnFailureWrapper);
          }, fnFailureWrapper);
      }
    };

    /**
     * Returns all of this catalog's properties or <code>undefined</code> if only the catalog's ID
     * is known.
     *
     * @returns {object}
     *   all of this catalog's properties, e.g.
     *   <pre>
     *   {
     *     baseUrl: "/sap/hba/apps/kpi/s/odata/hana_chip_catalog.xsodata/",
     *     domainId: "Z_REMOTE_HANA_CATALOG",
     *     remoteId: "HANA_CATALOG",
     *     systemAlias: "sanssouci",
     *     title: "Remote HANA catalog",
     *     type: "REMOTE"
     *   }
     *   </pre>
     * @since 1.19.1
     *
     * @see #update
     * @see sap.ui2.srvc.Factory#createNewCatalog
     */
    this.getCatalogData = function () {
      /*jslint nomen:true */
      var oCatalogData;

      if (!oAlterEgo) {
        return undefined; // only ID is known!
      }

      oCatalogData = JSON.parse(JSON.stringify(oAlterEgo));
      delete oCatalogData.__metadata;
      return oCatalogData;
    };

    /**
     * Returns this catalog's corresponding catalog page (typically a stub only), if any
     * (see {@link sap.ui2.srvc.Factory#createNewPageBasedCatalog}).
     * This method is intended to be called in a design time use case only.
     * <p>
     * Catalog pages are an easy way to modify catalogs. A catalog based on a catalog page is not
     * only represented by a {@link sap.ui2.srvc.Catalog}, but also by a {@link sap.ui2.srvc.Page}.
     * This means that you can use the {@link sap.ui2.srvc.Page} and
     * {@link sap.ui2.srvc.ChipInstance} APIs to modify the catalog.
     * For example, you can add a new {@link sap.ui2.srvc.Chip} as a
     * {@link sap.ui2.srvc.ChipInstance} using the
     * {@link sap.ui2.srvc.Page#createNewPageBasedCatalog} method.
     * <p>
     * Can safely be called if the catalog itself is not a stub anymore ({@link #isStub}). Must
     * not be called if only the catalog's ID is known (see {@link #getCatalogData})!
     *
     * @returns {sap.ui2.srvc.Page}
     *   this catalog's corresponding catalog page, or <code>undefined</code> if this catalog is
     *   not based on a catalog page
     * @since 1.19.1
     */
    this.getCatalogPage = function () {
      checkAlterEgo();
      if (oAlterEgo.type !== "P" && oAlterEgo.type !== "CATALOG_PAGE") {
        return undefined; // this catalog is not based on a catalog page
      }

      if (!oCatalogPage) {
        oCatalogPage = oFactory.createPage(sId);
      }
      return oCatalogPage;
    };

    /**
     * Returns this catalog's CHIPs (typically stubs only). Can be called only if the catalog
     * itself is not a stub anymore.
     *
     * @returns {sap.ui2.srvc.Chip[]}
     *   this catalog's CHIPs
     * @since 1.2.0
     *
     * @see #isStub
     */
    this.getChips = function () {
      if (bIsStub) {
        throw new sap.ui2.srvc.Error(that + ": catalog is just a stub", "sap.ui2.srvc.Catalog");
      }
      return aChips.slice();
    };

    /**
     * Returns this catalog's domain ID which represents the catalog ID without any type-specific
     * prefixes (like "X-SAP-REMOTE:"). The domain ID is better human-readable than the ID (see
     * {@link #getId()}). Returns <code>undefined</code> as long as only the ID of this catalog
     * is known.
     *
     * @returns {string}
     *   this catalog's domain ID
     * @since 1.19.1
     *
     * @see sap.ui2.srvc.Factory#createNewPageBasedCatalog
     * @see sap.ui2.srvc.PageBuildingService#createPageBasedCatalog
     */
    this.getDomainId = function () {
      return oAlterEgo && oAlterEgo.domainId;
    };

    /**
     * Returns this catalog's technical ID. In contrast to {@link #getDomainId} this method returns
     * the ID including type-specific prefixes (like "X-SAP-REMOTE:"). Those should not be
     * displayed on a UI, for example.
     *
     * @returns {string}
     *   this catalog's technical ID including type-specific prefixes (like "X-SAP-REMOTE:")
     * @since 1.2.0
     */
    this.getId = function () {
      return sId;
    };

    /**
     * Returns this catalog's system alias.
     *
     * @returns {string}
     *   this catalog's system alias
     * @private
     */
    this.getSystemAlias = function () {
      return (oAlterEgo && oAlterEgo.systemAlias) || undefined;
    };

    /**
     * Returns this catalog's title.
     * <p>
     * Can safely be called if the catalog itself is not a stub anymore ({@link #isStub}). Must
     * not be called if only the catalog's ID is known (see {@link #getCatalogData})!
     *
     * @returns {string}
     *   this catalog's title
     * @since 1.2.0
     *
     * @see #isStub
     */
    this.getTitle = function () {
      checkAlterEgo();
      return oAlterEgo.title;
    };

    /**
     * Returns this catalog's type.
     * <p>
     * Can safely be called if the catalog itself is not a stub anymore ({@link #isStub}). Must
     * not be called if only the catalog's ID is known (see {@link #getCatalogData})!
     *
     * @returns {string}
     *   this catalog's type
     * @since 1.16.4
     */
    this.getType = function () {
      checkAlterEgo();
      return oAlterEgo && oAlterEgo.type;
    };

    /**
     * Tells whether this catalog is marked as outdated. For a catalog based on a catalog page
     * (see {@link #getCatalogPage}), this means that the catalog page is marked as outdated
     * (see {@link sap.ui2.srvc.Page#isOutdated}).
     * <p>
     * Can safely be called if the catalog itself is not a stub anymore ({@link #isStub}). Must
     * not be called if only the catalog's ID is known (see {@link #getCatalogData})!
     *
     * @returns {boolean}
     *   whether this catalog is marked as outdated
     * @since 1.19.1
     */
    this.isOutdated = function () {
      checkAlterEgo();

      // Note: no use calling getCatalogPage(), it could only create a new stub
      return (oCatalogPage && !oCatalogPage.isStub() && oCatalogPage.isOutdated())
        || oAlterEgo.outdated === "X";
    };

    /**
     * Tells whether this catalog is readOnly.
     * <p>
     * Can safely be called if the catalog itself is not a stub anymore ({@link #isStub}). Must
     * not be called if only the catalog's ID is known (see {@link #getCatalogData})!
     *
     * @returns {boolean}
     *   true if this catalog is in read only mode
     * @since 1.32.0
     */
    this.isReadOnly = function () {
      checkStub();
      return oAlterEgo.isReadOnly === "X";
    };

    /**
     * Tells whether this catalog is still only a stub and does not yet know its CHIPs or title.
     *
     * @returns {boolean}
     *   whether this catalog is still only a stub
     * @since 1.2.0
     *
     * @see #load
     */
    this.isStub = function () {
      return bIsStub;
    };

    /**
     * In case of a remote catalog which failed for some reason to read its CHIPs
     * (see {@link #readChips}), this method can be used to retrieve the original failure
     * handler arguments. This is needed because of the graceful degradation (the catalog
     * keeps usable and simply behaves as if it would be empty).
     * Will be reset on call of {@link #update}.
     *
     * @returns {arguments}
     *  the arguments as originally received by the {@link #readChips} failure handler
     * @since 1.34.0
     *
     * @see #readChips
     */
    this.getCachedRemoteFailureArguments = function () {
      return oCachedRemoteErrorArgs;
    };

    /**
     * Loads the catalog from the page building service, including its title and its contained CHIPs
     * (at least as stubs). Must not be called twice! If needed, call <code>refresh()</code>.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     * @since 1.2.0
     *
     * @see #isStub
     * @see #refresh
     */
    this.load = function (fnSuccess, fnFailure) {
      if (!bIsStub) {
        throw new sap.ui2.srvc.Error("Catalog is not a stub anymore", "sap.ui2.srvc.Catalog");
      }
      read(false, fnSuccess, fnFailure);
    };

    /**
     * Reads all CHIPs into the factory's CHIP cache. The catalog itself remains unchanged. This
     * method may be called even if the catalog is a stub.
     *
     * @param {string[]} aChipIds
     *   the IDs of the CHIPs to be read.
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details. Please see also {@link #getCachedRemoteFailureArguments}.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     * @since 1.16.4
     *
     * @see #getCachedRemoteFailureArguments
     */
    this.readChips = function (aChipIds, fnSuccess, fnFailure) {

      function createChips(oRawData) {
        oRawData.results.forEach(function (oRawChipData) {
          oFactory.createChip(oRawChipData);
        });
        //TODO this needs "sap.ui2.srvc.utils" which is never required!
        sap.ui2.srvc.call(fnSuccess, fnFailure);
      }

      function createRemoteChips(oRawData) {
        // add remoteCatalogId to each CHIP
        oRawData.results.forEach(function (oRawChipData) {
          oRawChipData.remoteCatalogId = sId;
        });
        createChips(oRawData);
      }

      function requestChips(oResult) {
        oAlterEgo = oResult;
        if (oAlterEgo.remoteId) {
          getRemoteCatalogService().readChips(getRemoteBaseUrl(), oAlterEgo.remoteId, aChipIds,
            createRemoteChips, fnFailure);
        } else {
          oFactory.getPageBuildingService().readCatalogChips(sId, aChipIds, createChips, fnFailure);
        }
      }

      if (!oAlterEgo) {
        // ensure that we have the alter ego to know type and remoteId, but do not load CHIPs
        oFactory.getPageBuildingService().readCatalog(sId, requestChips, fnFailure, true);
      } else {
        requestChips(oAlterEgo);
      }
    };

    /**
     * Reads all registered CHIPs using {@link #readChips}. The catalog itself remains unchanged.
     * This method may be called even if the catalog is a stub.
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     * @since 1.19.0
     * @private

     * @see #readChips
     * @see #registerChip
     */
    this.readRegisteredChips = function (fnSuccess, fnFailure) {

      function start() {
        var oDeferred = new jQuery.Deferred(),
          aChipIds = aRegisteredChipIds;

        aRegisteredChipIds = [];
        if (aChipIds.length) {
          that.readChips(aChipIds, oDeferred.resolve.bind(oDeferred),
              oDeferred.reject.bind(oDeferred));
        } else {
          oDeferred.resolve();
        }
        return oDeferred.promise();
      }

      if (!oReadRegisteredChipsPromise || oReadRegisteredChipsPromise.state() !== "pending") {
        oReadRegisteredChipsPromise = start();
      }
      fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();
      //TODO this needs "sap.ui2.srvc.utils" which is never required!
      oReadRegisteredChipsPromise.fail(fnFailure)
        .done(sap.ui2.srvc.call.bind(null, fnSuccess, fnFailure));
    };

    /**
     * Refreshes the catalog's CHIPs by reading them (again) from the backend. The catalog may be a
     * stub before refresh (since 1.19.0), but is not a stub anymore once refresh succeeds.
     * <p>
     * When a catalog is still a stub, <code>refresh</code> is the same as <code>load</code>. When
     * the catalog has been loaded before, <code>refresh</code> fetches only the CHIPs.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     * @since 1.11.0
     *
     * @see #load
     */
    this.refresh = function (fnSuccess, fnFailure) {
      read(true, fnSuccess, fnFailure);
    };

    /**
     * Registers a CHIP to be read later via {@link #readRegisteredChips}.
     *
     * @param {sap.ui2.srvc.Chip} oChip
     *   the CHIP to be registered
     * @since 1.19.0
     * @private
     */
    this.registerChip = function (oChip) {
      if (oReadRegisteredChipsPromise && oReadRegisteredChipsPromise.state() === "pending") {
        throw new sap.ui2.srvc.Error(
          "Invalid state: registerChip while readRegisteredChips pending",
          "sap.ui2.srvc.Catalog"
        );
      }
      aRegisteredChipIds.push(oChip.getId());
    };

    /**
     * Removes this catalog by deleting it within the page building service. Also deletes the
     * corresponding catalog page, if applicable (see {@link #getCatalogPage} and
     * {@link sap.ui2.srvc.Factory#createNewPageBasedCatalog}).
     * <p>
     * <b>BEWARE:</b> Do not continue to use this object afterwards!
     * <p>
     * Can safely be called if the catalog itself is not a stub anymore ({@link #isStub}). Must
     * not be called if only the catalog's ID is known (see {@link #getCatalogData}) or if the
     * catalog is being refreshed currently (see {@link #refresh})!
     *
     * @param {function ()} [fnSuccess]
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.19.1
     */
    this.remove = function (fnSuccess, fnFailure) {
      checkAlterEgo();
      if (oReadPromise && oReadPromise.state() === 'pending') {
        throw new sap.ui2.srvc.Error("Catalog is being refreshed: " + this,
          "sap.ui2.srvc.Catalog");
      }

      jQuery.sap.log.debug("Removing: " + this, null, "sap.ui2.srvc.Catalog");
      oFactory.getPageBuildingService().deleteCatalog(oAlterEgo, function () {
        exit();
        fnSuccess();
      }, fnFailure);
    };

    /**
     * Returns this catalog's string representation.
     *
     * @param {boolean} [bVerbose=false]
     *   flag whether to show all properties
     * @returns {string}
     *   this catalog's string representation
     * @since 1.2.0
     */
    this.toString = function (bVerbose) {
      var aResult = ['sap.ui2.srvc.Catalog({sId:"', sId, '"', ',bIsStub:', bIsStub];
      if (bVerbose) {
        aResult.push(',oAlterEgo:', JSON.stringify(oAlterEgo),
          ',oFactory:', oFactory.toString(bVerbose),
          ',aChips:', JSON.stringify(aChips)
          );
      }
      aResult.push('})');
      return aResult.join('');
    };

    /**
     * Updates one or more properties of this catalog in the backend based on the given raw data.
     * Properties which are not given keep their current value. Keys cannot be updated this way!
     * Note that for a catalog based on a catalog page ({@link #getCatalogPage}), the "title"
     * property is shared between the catalog and its corresponding catalog page!
     * <p>
     * Can safely be called if the catalog itself is not a stub anymore ({@link #isStub}). Must
     * not be called if only the catalog's ID is known (see {@link #getCatalogData})!
     * <p>
     * The catalog becomes a stub immediately. As soon as the update succeeds, the catalog is
     * loaded automatically and only after that, the success handler is called.
     * It is not wise to keep references to old CHIPs loaded from this catalog before an update
     * that changes the catalog's "identity", e.g. the "remoteId" property of a remote catalog.
     *
     * @param {object} oCatalogData
     *   any subset of the catalog's properties, e.g.
     *   <pre>
     *   {
     *     baseUrl: "/sap/hba/apps/kpi/s/odata/hana_chip_catalog.xsodata/",
     *     domainId: "Z_REMOTE_HANA_CATALOG",
     *     remoteId: "HANA_CATALOG",
     *     systemAlias: "sanssouci",
     *     title: "Remote HANA catalog",
     *     type: "REMOTE"
     *   }
     *   </pre>
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     * @throws Error when trying to update the "__metadata" property.
     * @since 1.19.1
     *
     * @see #getCatalogData
     */
    this.update = function (oCatalogData, fnSuccess, fnFailure) {
      var oNewAlterEgo;

      checkAlterEgo();
      if (Object.hasOwnProperty.call(oCatalogData, "__metadata")) {
        // sap.ui2.srvc.ODataWrapper#update() relies on __metadata!
        throw new sap.ui2.srvc.Error("Unsupported __metadata update", "sap.ui2.srvc.Catalog");
      }
      oNewAlterEgo = JSON.parse(JSON.stringify(oAlterEgo));
      Object.keys(oCatalogData).forEach(function (sName) {
        oNewAlterEgo[sName] = oCatalogData[sName];
      });

      bIsStub = true;
      oCachedRemoteErrorArgs = undefined;

      oFactory.getPageBuildingService().updateCatalog(oNewAlterEgo, function () {
        oAlterEgo = oNewAlterEgo; // update head data
        read(true, fnSuccess, fnFailure); // if this fails, we are stuck with a stub!
      }, function () {
        bIsStub = false; // update failed, e.g. wrong properties --> no change to catalog!
        fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();
        fnFailure.apply(null, arguments); // forward call
      });
    };

    // constructor code -------------------------------------------------------
    if (!sap.ui2.srvc.Error) {
      fnRequire("sap.ui2.srvc.error");
    }
    if (typeof vCatalogData === "object") {
      // direct creation
      sId = vCatalogData.id;
      // Robustness: we prefer remoteId over Chips in case there is both
      if (vCatalogData.remoteId) {
        delete vCatalogData.Chips;
      }
      oAlterEgo = vCatalogData;
      initialize();
    } else if (typeof vCatalogData === "string") {
      sId = vCatalogData;
    }
    if (!sId) {
      throw new sap.ui2.srvc.Error("Missing ID", "sap.ui2.srvc.Catalog");
    }
    jQuery.sap.log.debug("Created: " + this, null, "sap.ui2.srvc.Catalog");
  };
}());
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>sap.ui2.srvc.Chip</code> object with related functions.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global jQuery, sap */

  sap.ui2 = sap.ui2 || {};
  sap.ui2.srvc = sap.ui2.srvc || {};

  /*
   * A map of all registered contracts by name.
   * @see sap.ui2.srvc.Chip.addContract
   */
  var mContractsByName = {},
    fnRequire = String; // NOP (String exists and is free of side-effects)

  // Only declare the module if jQuery.sap exists. Otherwise we do not even try to require assuming
  // that the script has been loaded manually (before SAPUI5).
  // Load time branching pattern
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.chip");
    // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
    fnRequire = function () {
      jQuery.sap.require.apply(this, arguments);
    };
  }

  // We cannot require utils (module path possibly unset), but we urgently need testPublishAt
  sap.ui2.srvc.testPublishAt = sap.ui2.srvc.testPublishAt || function () {/*NOP*/};

  // "private" methods (static) without need to access properties -------------

  /**
   * Returns the initializer function for the given contract name or <code>null</code> if not found.
   *
   * @param {string} sName
   *   name of the contract to be return
   * @returns {function}
   *   function to be called to initialize the contract or null if none was found
   */
  function getContractInitializer(sName) {
    return Object.prototype.hasOwnProperty.call(mContractsByName, sName) ?
        mContractsByName[sName] : null;
  }

  // "public class" -----------------------------------------------------------

  /**
   * Constructs a new representation (wrapper) of the CHIP with the given CHIP data as loaded from
   * the page building service.
   * <p>
   * Initially a stub is created which can load its CHIP definition XML later on in an asynchronous
   * fashion.
   * <p>
   * CHIPs are currently read-only and cannot be updated through the page building service.
   * (see {@link sap.ui2.srvc.PageBuildingService})
   *
   * @param {object} oAlterEgo
   *   the CHIP data as loaded via page building service
   * @param {sap.ui2.srvc.Factory} oFactory
   *  the factory
   *
   * @class
   * @since 1.2.0
   */
  sap.ui2.srvc.Chip = function (oAlterEgo, oFactory) {
    var that = this,
      oBags, // {sap.ui2.srvc.Map<string,sap.ui2.srvc.Bag>}
      /*
       * {string}
       * The URL of the CHIP definition XML (as base for the referenced files)
       */
      sChipUrl,
      /*
       * {map<string,string>}
       * The configuration as read from the CHIP spec in the page building service.
       * The values are already validated and typed correctly. (Must be initialized
       * after the CHIP definition XML has been parsed.)
       */
      oConfiguration,
      /*
       * {sap.ui2.srvc.ChipDefinition}
       * The data from the CHIP definition XML. If undefined, the CHIP is still a stub.
       */
      oDefinition,
      /*
       * {string}
       * Cached error message in case loading fails.
       */
      sErrorMessage,
      /*
       * {object}
       * Cached error information in case loading fails.
       */
      oErrorInformation,
      /*
       * List of all success and failure handlers passed to a <code>load()</code> call while this
       * CHIP is already loading its XML; these will all be called after initialization has
       * finished. This list is non-<code>null</code> iff. this CHIP is currently loading its XML.
       *
       * @see #load()
       */
      aLoadHandlers,
      /*
       * The remote catalog if there is one.
       */
      oRemoteCatalog,
      /*
       * whether the chip expects to be updated from a (remote) catalog
       */
      bWaitingForUpdateViaCatalog;

    // BEWARE: constructor code below!

    // "private" or hidden methods --------------------------------------------

    /**
     * Makes sure this CHIP is not just a stub.
     *
     * @private
     */
    function checkStub() {
      if (!oDefinition) {
        throw new sap.ui2.srvc.Error(that + ": CHIP is just a stub", "sap.ui2.srvc.Chip");
      }
    }

    /**
     * Initialize the bags from raw CHIP bags array.
     *
     * @param {object[]} aRawChipBags
     *   Array of raw CHIP bags
     *
     * @private
     */
    function initBags(aRawChipBags) {
      var i;

      oBags = new sap.ui2.srvc.Map();
      if (!aRawChipBags) {
        return;
      }
      for (i = 0; i < aRawChipBags.length; i += 1) {
        // for each bag instance: create wrapper
        fnRequire("sap.ui2.srvc.bag");
        oBags.put(aRawChipBags[i].id,
          new sap.ui2.srvc.Bag(oFactory, aRawChipBags[i]));
      }
    }

    /**
     * Initialize some details (which need only be computed once) in the given SAPUI5
     * implementation by decorating it with additional properties starting with "$".
     *
     * @param {object} oImplementation
     *   UI5 inplementation
     * @private
     */
    function initSAPUI5(oImplementation) {
      /*jslint regexp: true */
      var sBasePath = oImplementation.basePath,
        iLastSlash,
        aMatches,
        sNamespace,
        sViewName = oImplementation.viewName;

      if (oImplementation.componentName) {
        oImplementation.$Namespace = oImplementation.componentName;
      } else {
        // (namespace)/(viewName).view.(viewType)
        aMatches = /^(?:([^\/]+)\/)?(.*)\.view\.(.*)$/.exec(sViewName);
        if (!aMatches) {
          throw new sap.ui2.srvc.Error(that + ": Illegal view name: " + sViewName,
            "sap.ui2.srvc.Chip");
        }

        // determine namespace, view name, and view type
        sNamespace = aMatches[1];
        sViewName = aMatches[2];
        oImplementation.$ViewType = aMatches[3].toUpperCase(); // @see sap.ui.core.mvc.ViewType
        if (sNamespace) {
          // prefix view name with namespace
          sViewName = sNamespace + "." + sViewName;
        } else {
          // derive namespace from view name's "package"
          iLastSlash = sViewName.lastIndexOf(".");
          if (iLastSlash < 1) {
            throw new sap.ui2.srvc.Error(that + ": Missing namespace: " + sViewName,
              "sap.ui2.srvc.Chip");
          }
          sNamespace = sViewName.substring(0, iLastSlash);
        }
        oImplementation.$Namespace = sNamespace;
        oImplementation.$ViewName = sViewName;
      }

      // URL prefix to load module for given namespace relative to CHIP definition XML
      oImplementation.$UrlPrefix = oImplementation.$Namespace.replace(/\./g, "/");
      if (sBasePath !== ".") {
        sBasePath = sBasePath.replace(/\/?$/, '/'); // ensure it ends with a slash
        oImplementation.$UrlPrefix = sBasePath + oImplementation.$UrlPrefix;
      }
      oImplementation.$UrlPrefix = that.toAbsoluteUrl(oImplementation.$UrlPrefix);
    }

    /**
     * Initializes the configuration, considers defaults set in the CHIP definition XML.
     *
     * @private
     */
    function initConfiguration() {
      oConfiguration = {};
      if (oDefinition.contracts.configuration && oDefinition.contracts.configuration.parameters) {
        // clone the parameters so that we can merge in oAlterEgo.configuration
        oConfiguration = JSON.parse(JSON.stringify(oDefinition.contracts.configuration.parameters));
      }
      that.updateConfiguration(oConfiguration, oAlterEgo.configuration);
    }

    /**
     * Initialize this CHIP using the given CHIP definition.
     *
     * @param {sap.ui2.srvc.ChipDefinition} oNewDefinition
     *   the CHIP definition
     *
     * @private
     */
    function initialize(oNewDefinition) {
      var i1, n1;

      if (oDefinition) {
        throw new sap.ui2.srvc.Error(that + ": cannot initialize twice", null, "sap.ui2.srvc.Chip");
      }
      oDefinition = oNewDefinition;
      oDefinition.contracts = oDefinition.contracts || {};

      if (!oDefinition.implementation || !oDefinition.implementation.sapui5) {
        throw new sap.ui2.srvc.Error(that + ": Missing SAPUI5 implementation",
          "sap.ui2.srvc.Chip");
      }
      initSAPUI5(oDefinition.implementation.sapui5);

      initConfiguration();

      jQuery.sap.log.debug("Initialized: " + that, null, "sap.ui2.srvc.Chip");
      if (aLoadHandlers) {
        // initialization has finished, call all waiting success handlers
        for (i1 = 0, n1 = aLoadHandlers.length; i1 < n1; i1 += 2) {
          aLoadHandlers[i1]();
        }
        aLoadHandlers = null;
      }
    }

    /**
     * Updates property bags with given raw data.
     *
     * @param {object[]} aRawChipBags
     *   Array of raw CHIP bags
     *
     * @private
     */
    sap.ui2.srvc.testPublishAt(that);
    function updateBags(aRawChipBags) {
      var i, sKey, aExistingKeys = oBags.keys();
      for (i = 0; i < aRawChipBags.length; i += 1) {
        sKey = aRawChipBags[i].id;
        if (oBags.containsKey(sKey)) {
          oBags.get(sKey).update(aRawChipBags[i]);
          aExistingKeys.splice(aExistingKeys.indexOf(sKey), 1);
        } else {
          oBags.put(sKey, new sap.ui2.srvc.Bag(oFactory, aRawChipBags[i]));
        }
      }
      for (i = 0; i < aExistingKeys.length; i += 1) {
        oBags.remove(aExistingKeys[i]);
      }
    }

    // "public" methods -------------------------------------------------------

    /**
     * Creates the API object for a CHIP instance. Can only be called if the CHIP is not a stub
     * anymore.
     *
     * @param {sap.ui2.srvc.ChipInstance} oChipInstance
     *   the CHIP instance
     * @param {sap.ui2.srvc.Map} [oContractsByName]
     *   CHIP instance's map from contract name to contract interface for page builder
     *   (since 1.11.0)
     * @return {object}
     *   the API object
     * @since 1.2.0
     *
     * @see #isStub()
     * @see sap.ui2.srvc.ChipInstance#getContract()
     */
    this.createApi = function (oChipInstance, oContractsByName) {
      var oApi = {},
        oContract,
        fnInitializer,
        sName,
        mRequestedContracts;

      checkStub();
      mRequestedContracts = oDefinition.contracts;
      if (mRequestedContracts) {
        for (sName in mRequestedContracts) {
          if (Object.prototype.hasOwnProperty.call(mRequestedContracts, sName)) {
            fnInitializer = getContractInitializer(sName);
            if (!fnInitializer) {
              throw new sap.ui2.srvc.Error(this + ": Contract '" + sName + "' is not supported",
                "sap.ui2.srvc.Chip");
            }
            oApi[sName] = {};
            oContract = fnInitializer.call(oApi[sName], oChipInstance);
            if (oContractsByName) {
              oContractsByName.put(sName, oContract);
            }
          }
        }
      }
      return oApi;
    };

    /**
     * Returns the list of available types of visualization. The types are always lower case.
     *
     * @returns {string[]}
     *   the available tile types in lower case, e.g. <code>["tile", "link"]</code>
     * @private
     * @see chip.types.getAvailableTypes
     */
    this.getAvailableTypes = function () {
      var sTypes;
      checkStub();
      if (oDefinition.contracts.types &&
          oDefinition.contracts.types.parameters &&
          typeof oDefinition.contracts.types.parameters.supportedTypes === "string" &&
          oDefinition.contracts.types.parameters.supportedTypes !== "") {
        // convert all supported types to lower case to make comparison easier
        sTypes = oDefinition.contracts.types.parameters.supportedTypes.toLowerCase();
        // types are comma separated
        return sTypes.split(",");
      }
      return [];
    };

    /**
     * Returns the property bag with given ID attached to this CHIP.
     * <p>
     * If there is no bag with that ID <code>undefined</code> is returned.
     *
     * @param {string} sBagId
     *   the bag ID
     *
     * @returns {sap.ui2.srvc.Bag}
     *   the CHIP's bag for given ID
     * @private
     */
    this.getBag = function (sBagId) {
      if (!sBagId) {
        throw new sap.ui2.srvc.Error("Missing bag ID", "sap.ui2.srvc.Chip");
      }

      return oBags.get(sBagId);
    };

    /**
     * Returns an array of bag IDs attached to this CHIP.
     *
     * @returns {string[]}
     *   array of bag IDs
     * @private
     */
    this.getBagIds = function () {
      return oBags.keys();
    };

    /**
     * Returns the id of this CHIP's base CHIP as defined by the page building service. Returns
     * the empty String if the CHIP does not have a base CHIP.
     *
     * @returns {string}
     *   the id of this CHIP's base CHIP. Empty string in case the CHIP has no base CHIP.
     * @see #isBasedOn()
     * @since 1.11.0
     */
    this.getBaseChipId = function () {
      return oAlterEgo.baseChipId;
    };

    /**
     * Returns the catalog by which this CHIP was loaded. The result may be
     * <code>undefined</code> if the CHIP is only a proxy and the actual
     * instance has been deleted in the backend server. This may happen for
     * CHIPs referenced by a chip instance.
     *
     * @returns {sap.ui2.srvc.Catalog}
     *   this CHIP's catalog or <code>undefined</code>
     * @since 1.19.0
     */
    this.getCatalog = function () {
      // CHIP from remote catalog
      if (oRemoteCatalog) {
        return oRemoteCatalog;
      }

      return oAlterEgo.$proxy ? undefined : oFactory.createCatalog(oAlterEgo.catalogId);
    };

    /**
     * Gets the value of a configuration parameter. Can only be called if the CHIP is not a stub
     * anymore.
     *
     * @param {string} sKey
     *   the name of the parameter
     * @returns {string}
     *   the value of the parameter or <code>undefined</code> if it does not exist
     * @since 1.2.0
     *
     * @see #isStub()
     */
    this.getConfigurationParameter = function (sKey) {
      checkStub();
      return oConfiguration[sKey];
    };

    /**
     * Returns this CHIP's description as defined by the page building service.
     *
     * @returns {string}
     *   this CHIP's description
     * @since 1.2.0
     */
    this.getDescription = function () {
      return oAlterEgo.description;
    };

    /**
     * Returns this CHIP's ID.
     *
     * @returns {string}
     *   this CHIP's ID
     * @since 1.2.0
     */
    this.getId = function () {
      return oAlterEgo.id;
    };

    /**
     * Returns this CHIP instance's implementation of type SAPUI5 as a control. This control
     * represents the root of this CHIP instance's UI from a page builder point of view. Can only
     * be called if the CHIP is not a stub anymore.
     *
     * @param {object} oApi
     *   the CHIP instance specific API
     * @returns {sap.ui.core.Control}
     *   this CHIP instance's SAPUI5 implementation as a control
     * @since 1.2.0
     *
     * @see #isStub()
     */
    this.getImplementationAsSapui5 = function (oApi) {
      var oData, oImplementation;

      checkStub();
      oData = {
        /*
         * @namespace The namespace for the instance specific CHIP API, which allows you to
         * access the various contracts consumed by your CHIP instance.
         * @name chip
         */
        chip: oApi
      };
      oImplementation = oDefinition.implementation.sapui5;

      jQuery.sap.registerModulePath(oImplementation.$Namespace, oImplementation.$UrlPrefix);

      if (oImplementation.componentName) {
        // SAPUI5 component
        return new sap.ui.core.ComponentContainer({
          component: sap.ui.getCore().createComponent({
            componentData: oData,
            name: oImplementation.componentName
          })
        });
      }

      // SAPUI5 MVC
      return sap.ui.view({
        type: oImplementation.$ViewType,
        viewName: oImplementation.$ViewName,
        viewData: oData
      });
    };

    /**
     * Returns the catalog by which this remote CHIP was loaded. This catalog is
     * <code>undefined</code> if the CHIP is from the same system as the catalog.
     *
     * @returns {sap.ui2.srvc.Catalog}
     *   this CHIP's remote catalog or <code>undefined</code>
     * @since 1.9.0
     */
    this.getRemoteCatalog = function () {
      return oRemoteCatalog;
    };

    /**
     * Returns this CHIP's title as defined by the page building service or the CHIP definition XML
     * (if available).
     *
     * @returns {string}
     *   this CHIP's title
     * @since 1.2.0
     */
    this.getTitle = function () {
      return oAlterEgo.title
         || (oDefinition && oDefinition.appearance && oDefinition.appearance.title);
    };

    /**
     * Checks whether this CHIP is based on the given CHIP instance. This can happen because there
     * is a catalog type which is built on a catalog page. In such a case the ABAP backend maps
     * each CHIP instance on that page to a CHIP in the resulting catalog.
     * <p>
     * Note: This CHIP's <code>baseChipId</code> is exactly non-empty if the CHIP is catalog-page
     * based. Then it is the ID of the CHIP used to build the CHIP instance. (This is recursive.
     * So if that CHIP is again catalog-page based...)
     *
     * @param {sap.ui2.srvc.ChipInstance} oChipInstance
     *   the CHIP instance to compare with
     * @returns {boolean}
     *   <code>true</code> iff the CHIP is based on the given CHIP instance
     * @since 1.19.1
     * @see #refresh()
     */
    this.isBasedOn = function (oChipInstance) {
      var sExpectedId
          = "X-SAP-UI2-PAGE:" + oChipInstance.getPage().getId()
          + ":" + oChipInstance.getId();

      /*
       * @param {string} sActualId
       * @returns {boolean}
       * @private
       */
      function matchesExpectation(sActualId) {
        // TODO use oAlterEgo.catalogPageChipInstanceId
        return sActualId === sExpectedId
          || sActualId.indexOf(sExpectedId + ':') === 0; // old IDs still contain the scope
      }

      return (oAlterEgo.referenceChipId && matchesExpectation(oAlterEgo.referenceChipId))
        || matchesExpectation(oAlterEgo.id);
    };

    /**
     * Tells whether this CHIP is a reference, pointing to its original CHIP.
     * Note: A refresh on the CHIP may be needed before calling this method, but only if the CHIP
     * is based on a catalog page and that corresponding catalog page may be updated in your use
     * case after the CHIP has been loaded.
     *
     * @returns {boolean}
     *   whether this CHIP is a reference
     * @since 1.19.1
     * @see #refresh()
     *
     */
    this.isReference = function () {
      return !!oAlterEgo.referenceChipId;
    };

    /**
     * Tells whether this CHIP is a broken reference,
     * as indicated by referenceChipId being set to "O" (Orphaned)
     *
     * @returns {boolean}
     *   whether this CHIP is a broken reference
     * @since 1.23.1
     *
     */
    this.isBrokenReference = function () {
      // If an underlying chip of a reference is deleted, the property referenceChipId is set
      // to "O" (Orphaned)
      return oAlterEgo.referenceChipId === "O";
    };

    /**
     * Tells whether this CHIP is still only a stub and does not yet know its CHIP definition XML.
     *
     * @returns {boolean}
     *   whether this CHIP is still only a stub
     * @since 1.2.0
     *
     * @see #load()
     */
    this.isStub = function () {
      return !oDefinition;
    };

    /**
     * Loads the CHIP definition XML in case this has not yet been done. If this CHIP is not a stub
     * anymore this method fails!
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used.
     * @since 1.2.0
     *
     * @see #isStub()
     */
    this.load = function (fnSuccess, fnFailure) {
      function onError(sErrMessage, oErrDetails) {
        // loading has failed, call all waiting error handlers
        sErrorMessage = sErrMessage;
        oErrorInformation = oErrDetails;
        var i, n;
        if (aLoadHandlers) {
          for (i = 1, n = aLoadHandlers.length; i < n; i += 2) {
            aLoadHandlers[i](sErrMessage, oErrDetails);
          }
          aLoadHandlers = null;
        }
      }

      // Note: might fail synchronously!
      function createChipDefinition() {
        if (oFactory) { // Note: factory is optional!
          oFactory.createChipDefinition(oAlterEgo.url, initialize, onError);
          return;
        }
        sap.ui2.srvc.get(oAlterEgo.url, /*XML=*/true,
          function (oXml) {
            jQuery.sap.log.debug("Loaded: " + that, null, "sap.ui2.srvc.Chip");
            initialize(new sap.ui2.srvc.ChipDefinition(oXml));
          }, onError);
      }

      function onChipUpdated() {
        if (!oAlterEgo.url) {
          if (bWaitingForUpdateViaCatalog) {
            throw new sap.ui2.srvc.Error("Remote catalog did not deliver CHIP '" + oAlterEgo.id
              + "'", "sap.ui2.srvc.Chip");
          }
          throw new sap.ui2.srvc.Error("Missing module URL", "sap.ui2.srvc.Chip");
        }
        bWaitingForUpdateViaCatalog = false;
        sChipUrl = sap.ui2.srvc.absoluteUrl(oAlterEgo.url);
        createChipDefinition();
      }

      if (!this.isStub()) {
        throw new sap.ui2.srvc.Error("Chip is not a stub anymore", "sap.ui2.srvc.Chip");
      }
      if (typeof fnSuccess !== "function") {
        throw new sap.ui2.srvc.Error("Missing success handler", "sap.ui2.srvc.Chip");
      }
      fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();

      if (sErrorMessage) { // NOTE: check sErrorMessage only
        sap.ui2.srvc.call(fnFailure.bind(null, sErrorMessage, oErrorInformation), null, true);
        return;
      }

      if (aLoadHandlers) {
        // wait until loading has finished (one way or the other)
        aLoadHandlers.push(fnSuccess, fnFailure);
        return;
      }

      // start loading
      if (oAlterEgo.url) {
        createChipDefinition();
      } else if (oAlterEgo.remoteCatalogId) {
        // a remote chip, request the catalog to update all registered CHIPs (incl. this one)
        this.getRemoteCatalog().readRegisteredChips(onChipUpdated, onError);
        bWaitingForUpdateViaCatalog = true;
      } else {
        // this looks like a null object, try to read our raw data and expect a failure
        // Note: might fail synchronously!
        oFactory.getPageBuildingService().readChip(
          oAlterEgo.id,
          function (oRawChip) {
            oAlterEgo = oRawChip;
            onChipUpdated();
          },
          onError
        );
      }
      aLoadHandlers = [fnSuccess, fnFailure];
    };

    /**
     * Refreshes the CHIP from the OData service. Use this only for CHIPs that you received via a
     * catalog. When called on a CHIP received via a page, the function may fail.
     * <p>
     * This method is intended to refresh a CHIP in a catalog based on a catalog page. Such a CHIP
     * is based on a CHIP instance of this catalog page. If such a CHIP instance is changed this
     * method can be used to refresh the corresponding CHIP.
     * <p>
     * Note: This method does not replace the {@link #load} method, as the CHIP definition is not
     * loaded. Thus, if the CHIP was a stub before the refresh, it is still a stub afterwards.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.16.5
     *
     * @see #load()
     * @see #isStub()
     * @see #isBasedOn()
     */
    this.refresh = function (fnSuccess, fnFailure) {

      function updateChip(oNewAlterEgo) {
        oAlterEgo.title = oNewAlterEgo.title;
        oAlterEgo.configuration = oNewAlterEgo.configuration;
        oAlterEgo.referenceChipId = oNewAlterEgo.referenceChipId;
        initBags(oNewAlterEgo.ChipBags && oNewAlterEgo.ChipBags.results);
        // All other fields cannot be changed via the corresponding CHIP instance.
        // TODO throw exception if URL changes?
        if (!that.isStub()) {
          that.updateConfiguration(oConfiguration, oAlterEgo.configuration);
        }
        fnSuccess();
      }

      function updateRemoteChip(oResult) {
        if (oResult.results[0]) {
          updateChip(oResult.results[0]);
        } else {
          fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();
          fnFailure("Could not refresh CHIP. No update received from catalog "
            + oAlterEgo.remoteCatalogId);
        }
      }

      if (typeof fnSuccess !== "function") {
        throw new sap.ui2.srvc.Error("Missing success handler", "sap.ui2.srvc.Chip");
      }
      if (!oAlterEgo.url) {
        throw new sap.ui2.srvc.Error(that + ": CHIP is just a stub", "sap.ui2.srvc.Chip");
      }
      if (oAlterEgo.remoteCatalogId) {
        this.getRemoteCatalog().readChips([oAlterEgo.id], updateRemoteChip, fnFailure);
      } else {
        oFactory.getPageBuildingService().readChip(oAlterEgo.id, updateChip, fnFailure);
      }
    };

    /**
     * Updates the CHIP. This is an internal function, used when a "preliminary" object has been
     * created and the data from the page building service are delivered together with another
     * object (e.g. the catalog).
     *
     * @param {object} oNewAlterEgo
     *   the CHIP data as loaded via page building service
     * @private
     * @throws Error when the update data do not match or when the CHIP already is complete
     */
    this.update = function (oNewAlterEgo) {
      // was erroneously publicly documented in 1.18 and made @private in 1.19.0
      if (typeof oNewAlterEgo !== "object" || oNewAlterEgo.id !== this.getId()) {
        throw new sap.ui2.srvc.Error("Invalid update data: " + this, "sap.ui2.srvc.Chip");
      }
      // update bags if available
      if (oNewAlterEgo.ChipBags && oNewAlterEgo.ChipBags.results) {
        updateBags(oNewAlterEgo.ChipBags && oNewAlterEgo.ChipBags.results);
      }

      if (oAlterEgo.url) {
        return; // No more update, please!
      }
      if (!oNewAlterEgo.url) {
        return; // This is not really an update!
      }
      oAlterEgo = oNewAlterEgo;
      sChipUrl = sap.ui2.srvc.absoluteUrl(oAlterEgo.url);
      jQuery.sap.log.debug("Updated: " + this, null, "sap.ui2.srvc.Chip");
    };

    /**
     * Updates the given parameter map from the given JSON string. All parameters that actually were
     * defined in the CHIP definition XML are accepted. All others will raise a warning to the log.
     *
     * @param {map<String,String>} mParameters
     *   the parameter map to fill
     * @param {map<String,String>|string} vConfigurationUpdates
     *   the configuration updates as parameter map or as JSON string
     *   <p>If one parameter value is <code>undefined</code> (which can only happen by supplying a
     *   map) then this property is removed from <code>mParameters</code>.
     *
     * @since 1.2.0
     */
    this.updateConfiguration = function (mParameters, vConfigurationUpdates) {
      var mConfigurationUpdates,
        sKey,
        sValue;
      if (!vConfigurationUpdates) {
        return;
      }
      if (typeof vConfigurationUpdates === 'string') {
        try {
          mConfigurationUpdates = JSON.parse(vConfigurationUpdates);
        } catch (e) {
          // configuration as a whole is incorrect and will be ignored
          // Note: toString(true) will also output configuration, thus it is no secret
          jQuery.sap.log.warning(this + ': ignoring invalid configuration "'
              + vConfigurationUpdates + '"', null, "sap.ui2.srvc.Chip");
          return;
        }
      } else {
        mConfigurationUpdates = vConfigurationUpdates;
      }
      for (sKey in mConfigurationUpdates) {
        if (Object.prototype.hasOwnProperty.call(mConfigurationUpdates, sKey)) {
          if (Object.prototype.hasOwnProperty.call(oConfiguration, sKey)) {
            sValue = mConfigurationUpdates[sKey];
            if (sValue === undefined) {
              delete mParameters[sKey];
            } else if (typeof sValue !== 'string') {
              throw new sap.ui2.srvc.Error("Value for '" + sKey + "' must be a string",
                "sap.ui2.srvc.Chip");
            } else {
              mParameters[sKey] = sValue;
            }
          } else {
            jQuery.sap.log.warning(this + ': ignoring unknown configuration parameter ' + sKey,
              null, "sap.ui2.srvc.Chip");
          }
        }
      }
    };

    /**
     * Makes the given relative URL absolute. URLs containing host and/or protocol
     * and URLs with an absolute path remain unchanged. The URL is in no way
     * normalized; the function takes the URL of the CHIP definition XML as base.
     *
     * @param {string} sUrl
     *   the (possibly server-relative) URL
     * @returns {string}
     *   the absolute URL
     * @since 1.2.0
     */
    this.toAbsoluteUrl = function (sUrl) {
      return sap.ui2.srvc.absoluteUrl(sUrl, sChipUrl);
    };

    /**
     * Returns this CHIP's string representation.
     *
     * @param {boolean} [bVerbose=false]
     *   flag whether to show all properties
     * @returns {string}
     *   this CHIP's string representation
     * @since 1.2.0
     */
    this.toString = function (bVerbose) {
      var aResult = [
          'sap.ui2.srvc.Chip({sChipUrl:"', sChipUrl, '"'
        ];
      if (bVerbose) {
        aResult.push(',oAlterEgo:', JSON.stringify(oAlterEgo),
            ',oBags:', oBags.toString(),
            ',oDefinition:', JSON.stringify(oDefinition)
          );
      }
      aResult.push('})');
      return aResult.join('');
    };

    /**
     * This method can be used to figure out if the CHIP initially existed.
     * This is only relevant when the CHIP navigation property was expanded
     * (OData $expand).
     *
     * @returns {boolean}
     *    Whether the CHIP initially existed.
     *
     * @private
     */
    this.isInitiallyDefined = function (bDefined) {
      return bDefined;
    }.bind(
      null,
      oAlterEgo && !oAlterEgo.hasOwnProperty("$proxy") // $proxy (set from factory) when null
    );

    // constructor code -------------------------------------------------------
    if (!sap.ui2.srvc.Map) {
      fnRequire("sap.ui2.srvc.utils");
    }
    if (!oAlterEgo) {
      throw new sap.ui2.srvc.Error("Missing CHIP description", "sap.ui2.srvc.Chip");
    }

    sChipUrl = sap.ui2.srvc.absoluteUrl(oAlterEgo.url);
    if (oAlterEgo.remoteCatalogId) {
      oRemoteCatalog = oFactory.createCatalog(oAlterEgo.remoteCatalogId);
      if (!oAlterEgo.url) {
        oRemoteCatalog.registerChip(this);
      }
    }
    initBags(oAlterEgo.ChipBags && oAlterEgo.ChipBags.results);
    jQuery.sap.log.debug("Created: " + this, null, "sap.ui2.srvc.Chip");
  };

  // "public" methods (static) ------------------------------------------------

  /**
   * Adds a contract to the list of known contracts which can be consumed by CHIPs.
   *
   * @param {string} sName
   *   The name of the contract.
   * @param {function (sap.ui2.srvc.ChipInstance)} fnInitializer
   *   This function will initialize the contract for a CHIP instance. When the API object for a
   *   CHIP instance requesting this contract is initialized, a sub-object with the contract's name
   *   is added to the API. The initializer is then called with this sub-object as <code>this</code>
   *   and the CHIP instance as parameter.
   * @since 1.2.0
   */
  sap.ui2.srvc.Chip.addContract = function (sName, fnInitializer) {
    if (getContractInitializer(sName)) {
      if (!sap.ui2.srvc.Error) {
        fnRequire("sap.ui2.srvc.error");
      }
      throw new sap.ui2.srvc.Error("Cannot register contract '" + sName + "' twice",
        "sap.ui2.srvc.Chip");
    }
    mContractsByName[sName] = fnInitializer;
  };

  /* eslint-disable no-unused-vars*/
  /**
   * Removes a contract from the list of known contracts which can be consumed by CHIPs. Does not
   * fail even if the contract was not known before!
   * Note: Only used in test code via testPublishAt
   *
   * @param {string} sName
   *   The name of the contract.
   * @since 1.11.0
   * @private
   */
  sap.ui2.srvc.testPublishAt(sap.ui2.srvc.Chip);
  function removeContract(sName) {
    delete mContractsByName[sName];
  }
  /* eslint-enable no-unused-vars*/
}());
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>sap.ui2.srvc.ChipDefinition</code> object, representing an XML document
 * which defines a CHIP.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global jQuery, sap */

  sap.ui2 = sap.ui2 || {};
  sap.ui2.srvc = sap.ui2.srvc || {};

  var sNAMESPACE = 'http://schemas.sap.com/sapui2/services/Chip/1',
    fnRequire = String; // NOP (String exists and is free of side-effects)

  // Only declare the module if jQuery.sap exists. Otherwise we do not even try to require assuming
  // that the script has been loaded manually (before SAPUI5).
  // Load time branching pattern
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.chipdefinition");
    // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
    fnRequire = function () {
      jQuery.sap.require.apply(this, arguments);
    };
  }

  // "private" methods (static) without need to access properties -------------

  /**
   * Returns the local name of the given DOM node.
   * @param {object} oDomNode
   *   the DOM node
   * @returns {string}
   *   the local name
   */
  function getLocalName(oDomNode) {
    // Caution: In IE9 the ActiveX XML parser used in utils.js knows localName, however the
    // XMLHttpRequest doesn't and uses baseName instead!
    return oDomNode.localName || oDomNode.baseName; // W3C vs. IE
  }

  /**
   * Returns the value of the given DOM element's attribute with the given name.
   * <p>
   * Note: We currently expect the attribute not to have a namespace.
   *
   * @param {object} oDomElement
   *   the DOM element
   * @param {string} sName
   *   the attribute name
   * @returns {string}
   *   the attribute value or <code>""</code> if the attribute is not defined
   */
  function getAttribute(oDomElement, sName) {
    var oAttribute, aAttributes, i, n;
    if (typeof oDomElement.getAttributeNS === "function") {
      return oDomElement.getAttributeNS(null, sName);
    }
    // ugly workaround for IE's XMLHttpRequest which doesn't know getAttributeNS, but knows the
    // attribute's namespace
    aAttributes = oDomElement.attributes;
    for (i = 0, n = aAttributes.length; i < n; i += 1) {
      oAttribute = aAttributes[i];
      if (!oAttribute.namespaceURI && getLocalName(oAttribute) === sName) {
        return oAttribute.nodeValue;
      }
    }
    return "";
  }

  /**
   * Returns the text content of the given DOM node.
   *
   * @param {object} oDomNode
   *   the DOM node
   * @returns {string}
   *   the text content (might be <code>""</code> but not <code>undefined</code>
   *   or <code>null</code>)
   */
  function getText(oDomNode) {
    // Note: IE returns "" where FF returns undefined for empty nodes; this leads into trouble
    // when cloning an object via JSON later on!
    return oDomNode.textContent || oDomNode.text || ""; // W3C vs. IE
  }

  /**
   * Visits the children of the given DOM node and call the given handler for each child node
   * with the corresponding name.
   * @param {object} oThat
   *  this used for calling the handlers from <code>mChildHandlers</code>
   * @param {object} oDomNode
   *   the DOM node
   * @param {map<string,function(object)>} mChildHandlers
   *   maps the child name to a handler function. The handler function's parameter is the DOM node.
   */
  function visit(oThat, oDomNode, mChildHandlers) {
    var oChild,
      aChildren = oDomNode.childNodes,
      fnHandler,
      i,
      n;

    for (i = 0, n = aChildren.length; i < n; i += 1) {
      oChild = aChildren[i];
      if (oChild.namespaceURI === sNAMESPACE) {
        fnHandler = mChildHandlers[getLocalName(oChild)];
        if (fnHandler) {
          fnHandler.call(oThat, oChild);
        }
      }
    }
  }

  // "public class" -----------------------------------------------------------

  /**
   * Constructs a new representation of a CHIP definition from the given XML document. We expect
   * the XML document to conform to the schema.
   *
   * @param {object} oXml
   *    The DOM representation of the XML document
   *
   * @class
   * @see sap.ui2.srvc.Chip.
   * @since 1.2.0
   */
  sap.ui2.srvc.ChipDefinition = function (oXml) {
    var that = this;

    if (oXml instanceof sap.ui2.srvc.ChipDefinition) {
      // undocumented "copy constructor", performs deep clone and copies existing stuff only!
      oXml = JSON.parse(JSON.stringify(oXml));
      ["appearance", "contracts", "id", "implementation"].forEach(function (sName) {
        if (Object.prototype.hasOwnProperty.call(oXml, sName)) {
          that[sName] = oXml[sName];
        }
      });
      return;
    }

    if (getLocalName(oXml.documentElement) !== 'chip'
        || oXml.documentElement.namespaceURI !== sNAMESPACE) {
      if (!sap.ui2.srvc.Error) {
        fnRequire("sap.ui2.srvc.error");
      }
      throw new sap.ui2.srvc.Error('Missing root <chip>', 'sap.ui2.srvc.ChipDefinition');
    }

    visit(this, oXml.documentElement, {
      appearance: function (oAppearanceNode) {
        this.appearance = {};

        visit(this.appearance, oAppearanceNode, {
          description: function (oDescriptionNode) {
            this.description = getText(oDescriptionNode);
          },

          title: function (oTitleNode) {
            this.title = getText(oTitleNode);
          }
        });
      },

      contracts: function (oContractsNode) {
        this.contracts = {};

        visit(this.contracts, oContractsNode, {
          consume: function (oConsumeNode) {
            var sId = getAttribute(oConsumeNode, 'id');
            this[sId] = {};

            visit(this[sId], oConsumeNode, {
              parameters: function (oParametersNode) {
                this.parameters = {};

                visit(this.parameters, oParametersNode, {
                  parameter: function (oParameterNode) {
                    var sName = getAttribute(oParameterNode, 'name');
                    this[sName] = getText(oParameterNode);
                  }
                });
              }
            });
          }
        });
      },

      id: function (oIdNode) {
        this.id = getText(oIdNode);
      },

      implementation: function (oImplementationNode) {
        this.implementation = {};

        visit(this.implementation, oImplementationNode, {
          sapui5: function (oUi5Node) {
            this.sapui5 = {basePath: '.'};

            visit(this.sapui5, oUi5Node, {
              basePath: function (oBasePathNode) {
                this.basePath = getText(oBasePathNode);
              },
              componentName: function (oComponentNameNode) {
                this.componentName = getText(oComponentNameNode);
              },
              viewName: function (oViewNameNode) {
                this.viewName = getText(oViewNameNode);
              }
            });
          }
        });
      }
    });

    // paranoid mode to avoid memory leaks
    oXml = null;
  };
}());
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>sap.ui2.srvc.ChipInstance</code> object with related functions.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global jQuery, sap */

  sap.ui2 = sap.ui2 || {};
  sap.ui2.srvc = sap.ui2.srvc || {};

  // Only declare the module if jQuery.sap exists. Otherwise we do not even try to require assuming
  // that the script has been loaded manually (before SAPUI5).
  // Load time branching pattern
  var fnRequire = String; // NOP (String exists and is free of side-effects)
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.chipinstance");
    // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
    fnRequire = function () {
      jQuery.sap.require.apply(this, arguments);
    };
  }

  // "public class" -----------------------------------------------------------

  /**
   * Constructs a new representation (wrapper) of the CHIP instance with the given
   * CHIP instance data as loaded from the page building service. A CHIP instance is a usage of a
   * CHIP in a page
   * <p>
   * Initially a stub is created, which can later load its properties and related objects
   * asynchronously.
   * <p>
   * A CHIP instance is a mutable object and (page building service related) changes can be
   * persisted by the page building service.
   *
   * @param {sap.ui2.srvc.Factory} oFactory
   *  the factory
   * @param {object} oAlterEgo
   *  the CHIP instance data as loaded via the page building service, including embedded
   *  CHIP instance property bags
   * @param {sap.ui2.srvc.Chip} oChip
   *  the CHIP (which might still be a stub)
   * @param {sap.ui2.srvc.Page} [oPage]
   *  (since 1.9.0) the page to which this CHIP instance belongs
   *
   * @class
   * @see sap.ui2.srvc.PageBuildingService
   * @since 1.2.0
   */
  sap.ui2.srvc.ChipInstance = function (oFactory, oAlterEgo, oChip, oPage) {
    var oApi,
      oBags, // {sap.ui2.srvc.Map<string,sap.ui2.srvc.Bag>}
      oConfiguration,
      oContractsByName = new sap.ui2.srvc.Map(), // {sap.ui2.srvc.Map<string,object>}
      bFullscreen = false,
      aFullscreenHandlers = [],
      fnRefreshHandler,
      sTitle, // no own temporary title so far
      fnTitleChange,
      that = this;

    // BEWARE: constructor code below!

    // "private" methods ------------------------------------------------------

    /**
     * The alter ego object has some properties indicating that a CHIP instance is a reference.
     * This method modifies those properties in a way, that this CHIP instance becomes a
     * non-reference.
     * Should be called when an action was executed which made a reference CHIP instance a
     * non-reference in the backend.
     * @private
     */
    function makeNonReference() {
      // note: server sets "" (instead of undefined) for non-references
      oAlterEgo.referenceChipInstanceId = "";
      oAlterEgo.referencePageId = "";
    }

    /**
     * @see sap.ui2.srvc#Bag
     * @param {sap.ui2.srvc.Bag} oBag
     *   unused
     * @private
     */
    function bagChangeHandler() {
      // copy on write: cannot be a reference anymore!
      makeNonReference();

      if (oPage) {
        // bag changes may result in Scope changes of the page
        oPage.updateScope();
      }
    }

    /**
     * Makes sure this CHIP instance is not just a stub.
     *
     * @private
     */
    function checkStub() {
      if (!oApi) {
        throw new sap.ui2.srvc.Error(that + ": CHIP instance is just a stub",
          "sap.ui2.srvc.ChipInstance");
      }
    }

    /**
     * Complete the construction of a CHIP instance and make it ready for full use
     * within a page builder: create CHIP API.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function ([string])} [fnFailure]
     *   error handler, taking an optional error message
     *
     * @private
     */
    function initialize(fnSuccess, fnFailure) {
      if (!oApi) {
        oApi = oChip.createApi(that, oContractsByName);
      }

      jQuery.sap.log.debug("Initialized: " + that, null, "sap.ui2.srvc.ChipInstance");
      sap.ui2.srvc.call(fnSuccess, fnFailure); // Note: this method was already called async.
    }

    /**
     * Initialize the bags from raw CHIP instance bags array.
     * @param {object[]} aRawChipInstanceBags
     *   Array of raw CHIP instance bags
     *
     * @private
     */
    function initializeBags(aRawChipInstanceBags) {
      var i,
        aChipBagIds = oChip.getBagIds(),
        oRawBag;
      for (i = 0; i < aRawChipInstanceBags.length; i += 1) {
        // for each bag instance: create wrapper
        fnRequire("sap.ui2.srvc.bag");
        oBags.put(aRawChipInstanceBags[i].id,
          new sap.ui2.srvc.Bag(oFactory, aRawChipInstanceBags[i],
            oChip.getBag(aRawChipInstanceBags[i].id), bagChangeHandler));
      }
      for (i = 0; i < aChipBagIds.length; i += 1) {
        oRawBag = {
          pageId: oAlterEgo.pageId,
          instanceId: oAlterEgo.instanceId,
          id: aChipBagIds[i],
          $tmp: true
        };
        if (!oBags.containsKey(oRawBag.id)) { // do not overwrite CHIP instance bags!
          oBags.put(oRawBag.id,
            new sap.ui2.srvc.Bag(oFactory, oRawBag, oChip.getBag(oRawBag.id), bagChangeHandler));
        }
      }
    }

    /**
     * Lazily initialize this CHIP instance's configuration. Requires a complete
     * CHIP, not just a stub!
     *
     * @private
     */
    function initializeConfiguration() {
      if (oChip.isStub()) {
        // BCP 1780175765
        // fail early as updateConfiguration will also throw in this case which results in
        // oConfig being initialized wrongly to an empty object
        throw new sap.ui2.srvc.Error(this + ": initializeConfiguration expects that the CHIP is no stub anymore",
          "sap.ui2.srvc.ChipInstance");
      }

      if (!oConfiguration) {
        oConfiguration = {};
        oChip.updateConfiguration(oConfiguration, oAlterEgo.configuration);
      }
    }

    /**
     * Persists this CHIP instance.
     *
     * @param {function ()} [fnSuccess]
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     *
     * @private
     */
    sap.ui2.srvc.testPublishAt(that);
    function persist(fnSuccess, fnFailure) {
      oFactory.getPageBuildingService().updatePageChipInstance(oAlterEgo,
        function () {
          // copy on write: we cannot be a reference anymore!
          makeNonReference();

          if (oPage) {
            oPage.updateScope();
          }
          if (fnSuccess) {
            fnSuccess(); // no-args!
          }
        }, fnFailure);
    }

    // "public" methods -------------------------------------------------------

    /**
     * Attaches the given event handler to the "fullscreen" event which is fired whenever
     * fullscreen mode is toggled. There can be multiple handlers at any time.
     *
     * Use <code>Function.prototype.bind()</code> to determine the event handler's
     * <code>this</code> or some of its arguments.
     *
     * Note: Without such an event handler, the CHIP will simply continue to display the
     * same content, no matter whether fullscreen mode is on or off.
     *
     * @param {function} fnEventHandler
     *   the event handler for the "fullscreen" event
     * @since 1.2.0
     */
    this.attachFullscreen = function (fnEventHandler) {
      if (typeof fnEventHandler !== "function") {
        throw new sap.ui2.srvc.Error(this + ": fullscreen event handler is not a function",
          "sap.ui2.srvc.ChipInstance");
      }
      aFullscreenHandlers.push(fnEventHandler);
    };

    /**
     * Attaches the given event handler to the "refresh" event which is fired
     * whenever the user requests a refresh of this CHIP instance's content.
     *
     * Use <code>Function.prototype.bind()</code> to determine the event handler's
     * <code>this</code> or some of its arguments.
     *
     * Note: Without such an event handler, the CHIP will be recreated to enforce a refresh!
     *
     * @param {function} [fnEventHandler]
     *   the event handler for the "refresh" event
     * @since 1.2.0
     */
    this.attachRefresh = function (fnEventHandler) {
      if (fnEventHandler && typeof fnEventHandler !== "function") {
        throw new sap.ui2.srvc.Error(this + ": refresh event handler is not a function",
          "sap.ui2.srvc.ChipInstance");
      }
      fnRefreshHandler = fnEventHandler;
    };

    /**
     * Attaches the listener that is notified when setTitle is called. The caller
     * may be the page builder as well as the CHIP.
     *
     * @param {function (sap.ui2.srvc.ChipInstance)} fnNewTitleChange
     *     the listener function, it will be called with the instance as parameter;
     *     may be <code>null</code> to remove the listener
     * @since 1.2.0
     */
    this.attachTitleChange = function (fnNewTitleChange) {
      fnTitleChange = fnNewTitleChange;
    };

    /**
     * Detaches all event handlers from all events.
     *
     * @since 1.2.0
     */
    this.detachAll = function () {
      aFullscreenHandlers = [];
      fnRefreshHandler = null;
    };

    /**
     * Releases all resources associated with this CHIP instance. Call this method
     * just before you stop using it.
     *
     * @since 1.2.0
     */
    this.exit = function () {
      jQuery.sap.log.debug('Exit: ' + that, null, "sap.ui2.srvc.ChipInstance");

      // Note: CHIPs are shared objects, do not exit them!

      // reset to initial state
      oApi = null;
      oBags = new sap.ui2.srvc.Map();
      oConfiguration = null;
      sTitle = null;
      fnTitleChange = null;
    };

    /**
     * Returns this CHIP instance's specific API instance.
     *
     * @returns {object}
     *   this CHIP instance's specific API instance
     * @since 1.2.0
     */
    this.getApi = function () {
      return oApi;
    };

    /**
     * Returns an array of bag IDs attached to this CHIP instance.
     *
     * @returns {string[]}
     *   array of bag IDs
     * @since 1.5.0
     */
    this.getBagIds = function () {
      return oBags.keys();
    };

    /**
     * Returns the property bag with given ID attached to this CHIP instance.
     * <p>
     * If there is no bag with that ID an empty bag is returned.
     *
     * @param {string} sBagId
     *   the bag ID
     *
     * @returns {sap.ui2.srvc.Bag}
     *   the CHIP instance's bag for given ID
     * @since 1.5.0
     */
    this.getBag = function (sBagId) {
      var oBag;

      if (!sBagId) {
        throw new sap.ui2.srvc.Error("Missing bag ID", "sap.ui2.srvc.ChipInstance");
      }

      oBag = oBags.get(sBagId);
      if (oBag) {
        return oBag;
      }

      fnRequire("sap.ui2.srvc.bag");
      oBag = new sap.ui2.srvc.Bag(oFactory,
        {pageId: oAlterEgo.pageId, instanceId: oAlterEgo.instanceId, id: sBagId, $tmp: true},
        /*oParentBag*/null,
        bagChangeHandler);
      oBags.put(sBagId, oBag);
      return oBag;
    };

    /**
     * Returns this instance's CHIP.
     *
     * @returns {sap.ui2.srvc.Chip}
     *   this instance's CHIP
     * @since 1.2.0
     */
    this.getChip = function () {
      return oChip;
    };

    /**
     * Get the persisted CHIP instance configuration as string.
     *
     * @returns {string}
     *   the persisted configuration
     * @since 1.11.0
     * @private
     */
    this.getConfiguration = function () {
      return oAlterEgo.configuration;
    };

    /**
     * Retrieves a parameter value from the CHIP instance configuration, the
     * CHIP configuration or the CHIP definition.
     *
     * @param {string} sKey
     *   the key
     * @returns {string}
     *   the configuration parameter value or <code>undefined</code> if unknown
     * @since 1.2.0
     */
    this.getConfigurationParameter = function (sKey) {
      initializeConfiguration();
      if (Object.prototype.hasOwnProperty.call(oConfiguration, sKey)) {
        return oConfiguration[sKey];
      }
      return oChip.getConfigurationParameter(sKey);
    };

    /**
     * @namespace The (pseudo) namespace for the instance specific CHIP API. Note that there is no
     * global <code>window.chip</code> property. Instead, you can access the instance specific CHIP
     * API from the view data of the SAPUI5 view (<code>sap.ui.core.mvc.View#getViewData()</code>)
     * in the CHIP coding. For CHIPs based on components, call
     * <code>sap.ui.core.UIComponent#getComponentData()</code> instead. In both cases, the property
     * is simply called <code>chip</code>.
     * @name chip
     * @since 1.2.0
     *
     * @see sap.ui2.srvc.ChipInstance#getImplementationAsSapui5
     */

    /**
     * @namespace The (pseudo) namespace for contract interfaces (to be used by a page builder).
     * Note that there is no global <code>window.contract</code> property. Instead, you can access
     * contracts by {@link sap.ui2.srvc.ChipInstance#getContract}.
     *
     * @name contract
     * @since 1.11.0
     *
     * @see sap.ui2.srvc.ChipInstance#getContract
     */

    /**
     * Returns the contract interface (to be used by a page builder) for the given contract name.
     * Can only be called if the CHIP instance is not a stub anymore.
     * Note that a separate contract interface is optional and need not be available for each
     * and every contract!
     *
     * @param {string} sName
     *   the name of a contract, e.g. "url"
     * @returns {object}
     *   an optional contract interface to be used by a page builder; may be <code>undefined</code>
     * @since 1.11.0
     *
     * @see #isStub()
     */
    this.getContract = function (sName) {
      checkStub();
      return oContractsByName.get(sName);
    };

    /**
     * Tells whether the fullscreen mode is currently turned on.
     *
     * @returns {boolean}
     *   whether fullscreen mode is turned on
     * @since 1.2.0
     */
    this.getFullscreen = function () {
      return bFullscreen;
    };

    /**
     * Returns this CHIP instance's ID, as defined within the page building service.
     *
     * @returns {string}
     *   this CHIP instance's ID
     * @since 1.2.0
     */
    this.getId = function () {
      return oAlterEgo.instanceId;
    };

    /**
     * Returns this CHIP instance's implementation of type SAPUI5 as a control. This control
     * represents the root of this CHIP instance's UI from a page builder point of view. Can only
     * be called if the CHIP instance is not a stub anymore.
     *
     * @returns {sap.ui.core.Control}
     *   this CHIP instance's SAPUI5 implementation as a control
     * @since 1.2.0
     *
     * @see #isStub()
     */
    this.getImplementationAsSapui5 = function () {
      checkStub();
      return oChip.getImplementationAsSapui5(oApi);
    };

    /**
     * Returns this CHIP instance's layout data as defined by the page building service.
     *
     * @returns {string}
     *   this CHIP instance's layout data
     * @since 1.2.0
     */
    this.getLayoutData = function () {
      return oAlterEgo.layoutData;
    };

    /**
     * Returns this CHIP instance's page if it has been passed explicitly to our constructor or
     * the corresponding factory method, or if this CHIP instance has been created by its page.
     *
     * @returns {sap.ui2.srvc.Page}
     *   this CHIP instance's page, which might be unknown (<code>undefined</code>)
     * @since 1.9.0
     * @see sap.ui2.srvc.ChipInstance
     * @see sap.ui2.srvc.Factory#createChipInstance
     * @see sap.ui2.srvc.Page#addChipInstance
     * @see sap.ui2.srvc.Page#load
     * @see sap.ui2.srvc.Page#removeChipInstance
     */
    this.getPage = function () {
      return oPage;
    };

    /**
     * Returns this instance's title.
     *
     * @returns {string}
     *   this instance's title
     * @since 1.2.0
     */
    this.getTitle = function () {
      // Note: we cannot have a falsy temporary title nor can we persist one!
      return sTitle || oAlterEgo.title || oChip.getTitle();
    };

    /**
     * Returns the instance's latest update date, as given by the backend.
     * May return <code>undefined</code> in case the CHIP instance is a stub or the date could not
     * be parsed.
     *
     * @param {boolean} [bInRawFormat=false]
     *   When set to false (default), the date will be returned as <code>date</code>. When set to
     *   true, the value will be returned as given from the backend, which means as a
     *   <code>string</code> like <code>"/Date(1415104869000)/"</code>.
     * @returns {date|string}
     *   The latest update date returned as date or string. May be undefined in case of a stub.
     * @private
     */
    this.getUpdated = function (bInRawFormat) {
      //TODO after an update of the instance, the new value must be updated in oAlterEgo
      function parsingFailed() {
        jQuery.sap.log.error("Parse Error: CHIP instance's updated property has unexpected format",
          "value of updated property: '" + oAlterEgo.updated + "'", "sap.ui2.srvc.ChipInstance");
      }

      var aMatches, oResultDate;
      if (oAlterEgo.updated && !bInRawFormat) {
        // ODate V2: format looks like "/Date(1415104869000)/"
        aMatches = /\((\d*)\)/.exec(oAlterEgo.updated);

        if (!aMatches) {
          parsingFailed();
          return undefined;
        }

        // Note: parseInt does not throw but returns NaN, new Date(NaN) returns InvalidDate
        oResultDate = new Date(parseInt(aMatches[1], 10));

        if (isNaN(oResultDate.getTime())) {
          parsingFailed();
          return undefined;
        }
        return oResultDate;
      }
      return oAlterEgo.updated;
    };

    /**
     * Tells whether this CHIP instance is marked as outdated.
     *
     * @returns {boolean}
     *   whether this CHIP instance is marked as outdated
     * @since 1.9.1
     */
    this.isOutdated = function () {
      return oAlterEgo.outdated === "X";
    };

    /**
     * Tells whether this CHIP instance is readOnly.
     *
     * @throws Error if the CHIP instance is still a stub
     * @returns {boolean}
     *   whether this CHIP instance is readOnly
     * @since 1.32.0
     */
    this.isReadOnly = function () {
      checkStub();
      return oAlterEgo.isReadOnly === "X";
    };

    /**
     * Tells whether this CHIP instance is a reference, pointing to its original CHIP instance.
     *
     * @returns {boolean}
     *   whether this CHIP instance is a reference
     * @since 1.19.1
     * @see #getOriginalId()
     * @see #getOriginalPageId()
     * @see #isBrokenReference()
     */
    this.isReference = function () {
      // note in 1.36- and earlier broken references had the following properties:
      //    referencePageId: "O",
      //    referenceChipInstanceId: ""
      return !!oAlterEgo.referenceChipInstanceId || !!oAlterEgo.referencePageId;
    };

    /**
     * Tells whether this CHIP instance is a broken reference, which means the original has been deleted.
     *
     * @returns {boolean}
     *   whether this CHIP instance is a broken reference
     * @since 1.36.1
     * @see #isReference()
     */
    this.isBrokenReference = function () {
      // note in 1.36- and earlier broken references had the following properties:
      //    referencePageId: "O",
      //    referenceChipInstanceId: ""
      return oAlterEgo.referenceChipInstanceId === "O" || oAlterEgo.referencePageId === "O";
    };

    /**
     * If this CHIP instance is a reference, this method returns the ID of the original
     * CHIP instance. If not <code>undefined</code> is returned.
     *
     * @returns {string}
     *   The original CHIP instance ID or <code>undefined</code>
     * @since 1.34.0
     * @see #isReference()
     * @see #getOriginalPageId()
     */
    this.getOriginalId = function () {
      // the server returns "" for non-references but this is mapped to undefined here as this is
      // more JavaScript-like. In addition "O" is removed as it is indicating that the original was deleted.
      return (oAlterEgo.referenceChipInstanceId === "" || oAlterEgo.referenceChipInstanceId === "O") ?
        undefined : oAlterEgo.referenceChipInstanceId;
    };

    /**
     * If this CHIP instance is a reference, this method returns the page ID of the original CHIP
     * instance's page. If not <code>undefined</code> is returned.
     *
     * @returns {string}
     *   Page ID of the original CHIP instance's page or <code>undefined</code>
     * @since 1.34.0
     * @see #isReference()
     * @see #getOriginalId()
     */
    this.getOriginalPageId = function () {
      // the server returns "" for non-references but this is mapped to undefined here as this is
      // more JavaScript-like. In addition "O" is removed as it is indicating that the original was deleted.
      return (oAlterEgo.referencePageId === "" || oAlterEgo.referencePageId === "O") ?
        undefined : oAlterEgo.referencePageId;
    };

    /**
     * Tells whether this CHIP instance is still only a stub and needs to be loaded.
     *
     * @returns {boolean}
     *   whether this CHIP instance is still only a stub
     * @since 1.2.0
     *
     * @see #load()
     */
    this.isStub = function () {
      return !oApi;
    };

    /**
     * Completes the construction of a CHIP instance and makes it ready for full use
     * within a page builder: loads CHIP definition XML, creates CHIP API.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     * @since 1.2.0
     */
    this.load = function (fnSuccess, fnFailure) {
      //TODO disallow multiple calls?
      var fnLoad;

      fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();
      fnLoad = initialize.bind(null, fnSuccess, fnFailure);

      if (oChip.isStub()) {
        oChip.load(fnLoad, fnFailure);
      } else {
        sap.ui2.srvc.call(fnLoad, fnFailure, true);
      }
    };

    /**
     * Removes this CHIP instance from its page. This deletes the page CHIP instance
     * within the page building service! Since 1.9.0 it also removes it from the page to which this
     * CHIP instance belongs, as long as that page is known.
     * <p>
     * Note: Does not affect the page's layout.
     * <p>
     * Note (since 1.9.0): Call either {@link sap.ui2.srvc.ChipInstance#remove} or
     * {@link sap.ui2.srvc.Page#removeChipInstance}, the result will be the same!
     *
     * @param {function ()} [fnSuccess]
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.2.0
     *
     * @see #getPage
     * @see sap.ui2.srvc.Page#removeChipInstance
     */
    this.remove = function (fnSuccess, fnFailure) {
      if (oPage && oPage.removeChipInstance(that, fnSuccess, fnFailure)) {
        return; // wait, page will call us again!
      }

      this.exit();
      oFactory.getPageBuildingService().deletePageChipInstance(
        oAlterEgo.pageId,
        oAlterEgo.instanceId,
        fnSuccess,
        fnFailure
      );
    };

    /**
     * Calls refresh handler if registered. Returns <code>true</code> if refresh handler has been
     * called successfully.
     *
     * @returns {boolean}
     *   <code>true</code> if refresh handler has been called successfully
     * @since 1.2.0
     */
    this.refresh = function () {
      if (fnRefreshHandler) {
        try {
          fnRefreshHandler(); // Note: "this" is undefined
          return true;
        } catch (ex) {
          jQuery.sap.log.error(that + ": call to refresh handler failed: "
            + (ex.message || ex.toString()), null, "sap.ui2.srvc.ChipInstance");
          return false;
        }
      }
      return false;
    };

    /**
     * Turns the fullscreen mode on as indicated. Calls the attached listener in case the mode
     * has changed.
     *
     * @param {boolean} bOn
     *   whether fullscreen mode is turned on
     * @since 1.2.0
     */
    this.setFullscreen = function (bOn) {
      var i, n;

      if (bFullscreen !== bOn) {
        bFullscreen = bOn;

        for (i = 0, n = aFullscreenHandlers.length; i < n; i += 1) {
          aFullscreenHandlers[i]();
        }
      }
    };

    /**
     * Determines this CHIP instance's layout data (encoded as a string, for
     * example in JSON) and persists it.
     *
     * @param {string} sLayoutData
     *   the new layout data
     * @param {function ()} [fnSuccess]
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     * @since 1.2.0
     */
    this.setLayoutData = function (sLayoutData, fnSuccess, fnFailure) {
      if (oAlterEgo.layoutData === sLayoutData) {
        if (fnSuccess) {
          fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();
          sap.ui2.srvc.call(fnSuccess, fnFailure, true);
        }
        return;
      }
      oAlterEgo.layoutData = sLayoutData;
      persist(fnSuccess, fnFailure);
    };

    /**
     * Changes this instance's title and persists it if requested. The title change
     * listener (see {@link #attachTitleChange}) is called.
     *
     * This method is not reentrant.
     *
     * @param {string} sNewTitle
     *   the new title
     * @param {boolean} [bDoPersist=false]
     *   whether the change shall be persisted
     * @param {function ()} [fnSuccess]
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     * @since 1.2.0
     *
     * @see #getPage()
     * @see sap.ui2.srvc.Page#getOriginalLanguage()
     */
    this.setTitle = function (sNewTitle, bDoPersist, fnSuccess, fnFailure) {
      var sOldTitle;
      fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();

      if (sTitle !== sNewTitle) {
        // adjust temporary title
        sTitle = sNewTitle;

        if (fnTitleChange) {
          // if called by CHIP: make sure listener runs asynchronously
          // (thus not during initial rendering)
          sap.ui2.srvc.call(
            fnTitleChange.bind(null, this),
            fnFailure,
            !bDoPersist
          );
        }
      }

      if (bDoPersist && oAlterEgo.title !== sTitle) {
        sOldTitle = oAlterEgo.title;
        oAlterEgo.title = sTitle;
        sTitle = undefined;
        persist(fnSuccess, function () {
          // restore old title in case of failure
          oAlterEgo.title = sOldTitle;
          // reset temporary title too
          sTitle = undefined;

          fnFailure.apply(null, arguments);
        });
      } else if (fnSuccess) {
        sap.ui2.srvc.call(fnSuccess, fnFailure, true);
      }
    };

    /**
     * Returns this CHIP instance's string representation.
     *
     * @param {boolean} [bVerbose=false]
     *   flag whether to show all properties
     * @returns {string}
     *   this CHIP instance's string representation
     * @since 1.2.0
     */
    this.toString = function (bVerbose) {
      var aResult = ['sap.ui2.srvc.ChipInstance({oChip:', oChip.toString(bVerbose),
        ',bFullscreen:', bFullscreen
        ];
      if (bVerbose) {
        aResult.push(',oAlterEgo:', JSON.stringify(oAlterEgo),
            ',oApi:', JSON.stringify(oApi),
            ',oBags:', oBags.toString(),
            ',oConfiguration:', JSON.stringify(oConfiguration),
            ',oFactory:', oFactory.toString(bVerbose),
            ',aFullscreenHandlers.length:', aFullscreenHandlers.length,
            ',sTitle:"', sTitle, '"'
          );
      }
      aResult.push('})');
      return aResult.join('');
    };

    /**
     * Updates the configuration. All parameters that actually were defined in the CHIP definition
     * XML are accepted. All others will raise a warning to the log.
     * <p>
     * The configuration is maintained as JSON string in a single property. This has the following
     * consequences regarding the scopes:
     * <ul>
     * <li>If the CHIP instance has never been persisted in the current scope, the configuration is
     *   inherited from lower scopes. If there are no changes either, the properties have their
     *   default values from the CHIP definition.
     * <li>When persisting the CHIP instance in a given scope for the first time (may it be due to
     *   configuration changes or title changes...), the configuration changes are merged with
     *   inherited changes from lower scopes and persisted in the current scope. Subsequent changes
     *   in lower scopes will then remain invisible.
     * <li>A property for which never an update was supplied has the default value from the CHIP
     *   definition. This also applies if you delete the update again by setting it to
     *   <code>undefined</code>.
     * </ul>
     * <b>Example:</b><br>
     * The CHIP has two properties: <code>a</code> with default value "foo" and <code>b</code> with
     * default value "bar". The administrator changes <code>a</code> to "baz" in scope CUST. Later
     * a user changes <code>b</code> in PERS. Then the administrator decides to change
     * <code>a</code> back to "foo", but our user will never see this again, because the system
     * persisted both <code>a</code> and <code>b</code> in PERS.
     *
     * @param {map<String,String>} mConfigurationUpdates
     *   The configuration updates. The values must be strings. You can however set a value to
     *   <code>undefined</code>. This removes it from the list of updated property and effectively
     *   resets it to the default value.
     * @param {function ()} [fnSuccess]
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}
     * @since 1.7.0
     */
    this.updateConfiguration = function (mConfigurationUpdates, fnSuccess, fnFailure) {
      initializeConfiguration();
      oChip.updateConfiguration(oConfiguration, mConfigurationUpdates);
      oAlterEgo.configuration = JSON.stringify(oConfiguration);
      persist(fnSuccess, fnFailure);
    };

    // constructor code -------------------------------------------------------
    if (!sap.ui2.srvc.Map) {
      fnRequire("sap.ui2.srvc.utils");
    }
    oBags = new sap.ui2.srvc.Map();

    initializeBags((oAlterEgo.ChipInstanceBags && oAlterEgo.ChipInstanceBags.results)
      || []);

    delete oAlterEgo.Chip; //TODO do not modify caller's object!
    jQuery.sap.log.debug("Created: " + this, null, "sap.ui2.srvc.ChipInstance");
  };
}());
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview Dummy file, The <code>types</code> contract is in the file contracts/actions.js !
 * @since 1.32.0
 */

(function () {
  "use strict";
}());
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview Empty placeholder to avoid "404 Not Found" errors.
 */
// this file intentionally left blank
// was: "ECMAScript 5 compatibility shims for legacy JavaScript engines"
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview A factory for wrapper objects corresponding to the four
 * entities of the page building service: catalogs, pages, CHIP instances, and
 * CHIPs.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global jQuery, sap */

  // namespace "sap.ui2.srvc" **************************************************
  sap.ui2 = sap.ui2 || {};
  sap.ui2.srvc = sap.ui2.srvc || {};

  // Only declare the module if jQuery.sap exists. Otherwise we do not even try to require assuming
  // that the script has been loaded manually (before SAPUI5).
  // Load time branching pattern
  var fnRequire = String; // NOP (String exists and is free of side-effects)
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.factory");
    // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
    fnRequire = function () {
      jQuery.sap.require.apply(this, arguments);
    };
  }

  // "public class" ************************************************************

  //TODO how could a new page be created via this factory?
  //TODO default error handler, maybe same as PBS?
  /**
   * Constructs a new factory based on the given page building service.
   * A factory for creating wrapper objects corresponding to catalogs, pages,
   * CHIP instances, or CHIPs loaded from a page building service.
   * <p>
   * All factory methods are able to create stubs synchronously. Those stubs
   * need to be loaded asynchronously in order to become complete.
   * <p>
   * Note: All error handlers are optional and default to
   * <code>getPageBuildingService().getDefaultErrorHandler()</code>
   *
   * @param {sap.ui2.srvc.PageBuildingService} oPbs
   *  the page building service
   *
   * @see sap.ui2.srvc.ODataService#getDefaultErrorHandler
   * @see #getPageBuildingService
   * @class
   * @since 1.2.0
   */
  sap.ui2.srvc.Factory = function (oPbs) {
    var mChips = {}, // cache for CHIPs
      mCatalogs = {}, // cache for catalogs
      mChipDefinitions = {}, // cache for CHIP definitions
      oRemoteCatalogServicesByBaseUrl, // mapping from base URL to remote catalog service
      that = this;

    // BEWARE: constructor code below!

    // "private" methods ---------------------------------------------------------

    // "public" methods ----------------------------------------------------------

    /**
     * Registers a remote catalog service for the given base URL.
     *
     * @param {string} sBaseUrl
     *   the base URL
     * @param {sap.ui2.srvc.RemoteCatalogService} oRemoteCatalogService
     *   the remote catalog service compatible to {@link sap.ui2.srvc.RemoteCatalogService}
     * @throws Error if the base URL is already registered
     * @since 1.19.1
     */
    this.addRemoteCatalogService = function (sBaseUrl, oRemoteCatalogService) {
      if (!sBaseUrl) {
        throw new sap.ui2.srvc.Error("Invalid base URL", "sap.ui2.srvc.Factory");
      }
      if (typeof oRemoteCatalogService.readChips !== "function") {
        throw new sap.ui2.srvc.Error("Invalid remote catalog service", "sap.ui2.srvc.Factory");
      }
      sBaseUrl = sBaseUrl.replace(/\/$/, ""); // ignore trailing '/'
      if (oRemoteCatalogServicesByBaseUrl.containsKey(sBaseUrl)) {
        throw new sap.ui2.srvc.Error("Base URL '" + sBaseUrl + "' already registered",
          "sap.ui2.srvc.Factory");
      }
      oRemoteCatalogServicesByBaseUrl.put(sBaseUrl, oRemoteCatalogService);
    };

    /**
     * Creates a new catalog with the given ID and returns the stub. If a success
     * handler is given, the catalog will be loaded automatically from the page
     * building service, calling one of the given handlers.
     * <p>
     * Caches the created catalog, so that a subsequent request for a catalog with
     * the same ID will be answered from the cache.
     * <p>
     * Note: All contained CHIPs will typically be stubs only!
     * <p>
     * Note: If the catalog is a remote catalog and a success handler is given,
     * an attempt is made to load the chips. If this load attempts failed, the promise
     * is rejected with the 2nd argument being the (semi-)instantiated catalog with an
     * *empty* chip collection! This catalog is not a stub itself!
     *
     * @param {string|object} vCatalogData
     *   the catalog ID or the raw catalog representation as loaded via the page building service
     * @param {function (sap.ui2.srvc.Catalog)} [fnSuccess]
     *   success handler for asynchronous loading
     * @param {function (string, [sap.ui2.srvc.Catalog], [object])} fnFailure
     *   error handler, taking an error message, an optional {@link sap.ui2.srvc.Catalog}
     *   instance and, since version 1.28.6, an optional object containing the
     *   complete error information.<br />
     *   See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details about the complete error information parameter.
     *   If fnFailure is not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used.
     *
     * @returns {sap.ui2.srvc.Catalog}
     *   the newly created catalog, as a stub
     * @since 1.2.0
     */
    this.createCatalog = function (vCatalogData, fnSuccess, fnFailure) {
      var that = this,
        oCatalog,
        sCatalogId = typeof vCatalogData === "object" ? vCatalogData.id : vCatalogData;

      // call fnFailure but insert oCatalog as second argument
      function fnFailureWithCatalog() {
        var aArgs;
        fnFailure = fnFailure || that.getPageBuildingService().getDefaultErrorHandler(); // both are optional
        if (fnFailure) {
          // convert a to array and add catalog at index 1
          aArgs = Array.prototype.slice.call(arguments);
          aArgs.splice(1, 0, oCatalog);
          fnFailure.apply(null, aArgs);
        }
      }

      function failWithOriginalArgs() {
        // use same error message and error object of the first failure
        fnFailureWithCatalog.apply(null, oCatalog.getCachedRemoteFailureArguments());
      }

      if (Object.prototype.hasOwnProperty.call(mCatalogs, sCatalogId)) {
        oCatalog = mCatalogs[sCatalogId].catalog;
        if (typeof vCatalogData === "object" && oCatalog.getCatalogData() === undefined) {
          // re-apply constructor function to existing instance which knows only its ID
          sap.ui2.srvc.Catalog.call(oCatalog, this, vCatalogData);
        }
      } else {
        fnRequire("sap.ui2.srvc.catalog");
        oCatalog = new sap.ui2.srvc.Catalog(this, vCatalogData);
        mCatalogs[sCatalogId] = {
          catalog: oCatalog,
          chips: {}
        };
      }
      if (fnSuccess) {
        // since catalogs are cached it might not be a stub any more
        if (oCatalog.isStub()) {
          oCatalog.load(fnSuccess.bind(null, oCatalog), fnFailureWithCatalog);
        } else {
          // catalog was already created before, no need to load it again
          if (oCatalog.getCachedRemoteFailureArguments() !== undefined) {
            sap.ui2.srvc.call(failWithOriginalArgs, failWithOriginalArgs, /*async=*/true);
          } else {
            sap.ui2.srvc.call(fnSuccess.bind(null, oCatalog), fnFailureWithCatalog, /*async=*/true);
          }
        }
      }
      return oCatalog;
    };

    /**
     * Creates a CHIP instance for the given raw CHIP representation as loaded
     * via the page building service. If a success handler is given, the CHIP
     * will be loaded automatically, calling one of the given handlers.
     * <p>
     * Caches the created CHIPs, so that a subsequent request for a CHIP with
     * the same ID will be answered from the cache.
     *
     * @param {object} oRawChip
     *   the raw CHIP representation as loaded via the page building service
     * @param {function (sap.ui2.srvc.Chip)} [fnSuccess]
     *   success handler for asynchronous loading
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     *
     * @returns {sap.ui2.srvc.Chip}
     *   the newly created CHIP, as a stub
     * @since 1.2.0
     */
    this.createChip = function (oRawChip, fnSuccess, fnFailure) {
      var sCatalogId = oRawChip.remoteCatalogId,
        sChipId = oRawChip.id,
        oCache,
        oChip;
      if (sCatalogId) {
        // the catalog is irrelevant, ensure that the cache entry for it exists
        this.createCatalog(sCatalogId);
        oCache = mCatalogs[sCatalogId].chips;
      } else {
        oCache = mChips;
      }
      if (Object.prototype.hasOwnProperty.call(oCache, sChipId)) {
        oChip = oCache[sChipId];
        oChip.update(oRawChip);
      } else {
        fnRequire("sap.ui2.srvc.chip");
        oChip = new sap.ui2.srvc.Chip(oRawChip, this);
        oCache[sChipId] = oChip;
      }
      if (fnSuccess) {
        if (oChip.isStub()) {
          oChip.load(fnSuccess.bind(null, oChip), fnFailure);
        } else {
          fnFailure = fnFailure || this.getPageBuildingService().getDefaultErrorHandler();
          sap.ui2.srvc.call(fnSuccess.bind(null, oChip), fnFailure, true);
        }
      }
      return oChip;
    };

    /**
     * Creates a CHIP definition for the given URL. Caches the created objects, making sure that
     * even parallel calls to this function result in a single GET request only.
     * <p> Note: the newly created CHIP definition is returned to the success handler only!
     *
     * @param {string} sUrl
     *   the URL to the CHIP definition XML
     * @param {function (sap.ui2.srvc.ChipDefinition)} fnSuccess
     *   success handler for asynchronous loading; a new clone is passed to each handler!
     * @param {function (string)} [fnFailure]
     *   error handler, taking an error message. If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     *
     * @since 1.17.0
     * @private
     */
    this.createChipDefinition = function (sUrl, fnSuccess, fnFailure) {
      var oChipDefinition, aLoadHandlers;

      /**
       * Calls the given success handler (a)synchronously with a clone of the given CHIP
       * definition. Errors thrown in the success handler are caught and reported to the error
       * handler.
       *
       * @param {sap.ui2.srvc.ChipDefinition} oOriginalChipDefinition
       *   original CHIP definition, will be cloned before it is passed to success handler
       * @param {function ()} fnSomeSuccess
       *   no-args success handler
       * @param {function (string)} [fnSomeFailure]
       *   error handler, taking an error message; MUST NOT throw any error itself! If not given
       *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
       * @param {boolean} [bAsync=false]
       *   whether the call shall be asynchronously
       * @private
       */
      function call(oOriginalChipDefinition, fnSomeSuccess, fnSomeFailure, bAsync) {
        sap.ui2.srvc.call(
          fnSomeSuccess.bind(null, new sap.ui2.srvc.ChipDefinition(oOriginalChipDefinition)),
          fnSomeFailure,
          bAsync
        );
      }

      function successHandler(oXml) {
        var i, n,
          oChipDefinition = new sap.ui2.srvc.ChipDefinition(oXml);
        mChipDefinitions[sUrl] = oChipDefinition; // Note: overwrites load handlers!
        // loading has finished, call all waiting load handlers
        for (i = 0, n = aLoadHandlers.length; i < n; i += 2) {
          call(oChipDefinition, aLoadHandlers[i], aLoadHandlers[i + 1], false);
        }
      }

      function errorHandler(vError) {
        var i, n, sMessage;

        if (typeof vError === "string") {
          // sap.ui2.srvc.get error handler returns a sting only
          sMessage = vError;
        } else {
          // jQuery.sap.loadResource error handler returns an Error object
          sMessage = vError.message;
        }

        mChipDefinitions[sUrl] = sMessage; // Note: overwrites load handlers!
        // loading has failed, call all waiting failure handlers
        for (i = 0, n = aLoadHandlers.length; i < n; i += 2) {
          aLoadHandlers[i + 1](sMessage);
        }
      }

      if (!sUrl) {
        throw new sap.ui2.srvc.Error("Missing URL", "sap.ui2.srvc.Factory");
      }
      if (typeof fnSuccess !== "function") {
        throw new sap.ui2.srvc.Error("Missing success handler", "sap.ui2.srvc.Factory");
      }
      fnFailure = fnFailure || this.getPageBuildingService().getDefaultErrorHandler();

      if (window.jQuery && jQuery.sap && typeof jQuery.sap.loadResource === "function") {
        // if UI5 is available, the cache buster token must be added to sURL, as load jQuery.sap.loadResource
        // (further down) is used to load the XML.
        sUrl = sap.ui2.srvc.addCacheBusterTokenUsingUshellConfig(sUrl);
      }

      if (Object.prototype.hasOwnProperty.call(mChipDefinitions, sUrl)) {
        // cache hit: either array of load handlers, or CHIP definition, or error message
        oChipDefinition = aLoadHandlers = mChipDefinitions[sUrl];

        if (sap.ui2.srvc.isArray(aLoadHandlers)) {
          // wait until loading has finished (one way or the other)
          aLoadHandlers.push(fnSuccess, fnFailure);
        } else if (oChipDefinition instanceof sap.ui2.srvc.ChipDefinition) {
          // already loaded
          call(oChipDefinition, fnSuccess, fnFailure, true);
        } else {
          // error message or illegal state
          sap.ui2.srvc.call(fnFailure.bind(null, oChipDefinition), null, true);
        }
        return;
      }

      // Note: do this early to avoid issues in FF
      // @see https://bugzilla.mozilla.org/show_bug.cgi?id=340345
      fnRequire("sap.ui2.srvc.chipdefinition");

      // loading is in progress
      aLoadHandlers = [fnSuccess, fnFailure];
      mChipDefinitions[sUrl] = aLoadHandlers;

      if (window.jQuery && jQuery.sap && typeof jQuery.sap.loadResource === "function") {
        // if UI5 is available use loadResource, as it also looks into preload files.
        // NOTE: the cache buster token was already added to sUrl some lines above.
        // RESTRICTION: CHIP Definition XML files will only be loaded from preload file, if NO cache buster is
        // in use. With cache buster, a request is sent (which most likely is served from browser cache).
        // This is because loadResource matches the URLs and expect the UI5 cache buster token to be used
        // (for Smart Business tiles), but we inject the UI2 token.
        jQuery.sap.loadResource({ dataType: "xml", url: sUrl, async: true})
          .then(successHandler)
          .catch(errorHandler);
      } else {
        // no UI5
        sap.ui2.srvc.get(sUrl, /*XML=*/true, successHandler, errorHandler);
      }
    };

    /**
     * Creates a new CHIP instance instance for the given raw CHIP instance
     * representation as loaded via the page building service. If a success
     * handler is given, the CHIP instance will be loaded automatically, calling
     * one of the given handlers.
     * <p>
     *
     * @param {object} oRawChipInstance
     *   the raw CHIP instance representation as loaded via the page building service
     * @param {function (sap.ui2.srvc.ChipInstance)} [fnSuccess]
     *   success handler for asynchronous loading
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @param {sap.ui2.srvc.Page} [oPage]
     *  (since 1.9.0) the page to which this CHIP instance belongs; this is passed on to the CHIP
     *  instance itself, see {@link sap.ui2.srvc.ChipInstance#getPage}
     *
     * @returns {sap.ui2.srvc.ChipInstance}
     *   the newly created CHIP instance, as a stub
     * @since 1.2.0
     */
    this.createChipInstance = function (oRawChipInstance, fnSuccess, fnFailure, oPage) {
      var oChip,
        oChipInstance;

      // ensure at least a "null object" CHIP that knows its IDs
      oRawChipInstance.Chip = oRawChipInstance.Chip || {$proxy: true};
      oRawChipInstance.Chip.id = oRawChipInstance.Chip.id || oRawChipInstance.chipId;
      oRawChipInstance.Chip.remoteCatalogId = oRawChipInstance.Chip.remoteCatalogId
          || oRawChipInstance.remoteCatalogId;

      if (oRawChipInstance.RemoteCatalog && oRawChipInstance.RemoteCatalog.id) {
        // ensure that we do not lose the information about the remote catalog
        this.createCatalog(oRawChipInstance.RemoteCatalog);
      }

      oChip = this.createChip(oRawChipInstance.Chip);
      fnRequire("sap.ui2.srvc.chipinstance");
      oChipInstance = new sap.ui2.srvc.ChipInstance(this, oRawChipInstance, oChip, oPage);
      if (fnSuccess) {
        oChipInstance.load(fnSuccess.bind(null, oChipInstance), fnFailure);
      }
      return oChipInstance;
    };

    /**
     * Creates a new catalog in the backend based on the given raw data. The success handler is
     * called as soon as the catalog has been created and the {@link sap.ui2.srvc.Catalog} is
     * not a stub anymore. Typically, this will be used to create "remote catalogs", i.e. pointers
     * to existing catalogs on a remote server.
     * <p>
     * Creating a remote catalog requires two steps: first the catalog data is created via the
     * factory's page building service, then the catalog's CHIPs are loaded from the appropriate
     * remote catalog service (see {@link sap.ui2.srvc.Factory#addRemoteCatalogService}). If the
     * second step fails, the error handler is called with an error message and the new catalog
     * instance (since 1.20). In this case the catalog is still a stub and does not know its CHIPs,
     * but it knows more than just its ID and it can be updated!
     *
     * @param {object} oCatalogData
     *   the raw catalog representation for the page building service (<code>__metadata</code> not
     *   needed!), e.g.
     *   <pre>
     *   {
     *     baseUrl: "/sap/hba/apps/kpi/s/odata/hana_chip_catalog.xsodata/",
     *     domainId: "Z_REMOTE_HANA_CATALOG",
     *     remoteId: "HANA_CATALOG",
     *     systemAlias: "sanssouci",
     *     title: "Remote HANA catalog",
     *     type: "REMOTE"
     *   }
     *   </pre>
     * @param {function (sap.ui2.srvc.Catalog)} fnSuccess
     *   success handler for asynchronous creation
     * @param {function (string, [sap.ui2.srvc.Catalog], [object])} fnFailure
     *   error handler, taking an error message, an optional {@link sap.ui2.srvc.Catalog}
     *   instance and, since version 1.28.6, an optional object containing the
     *   complete error information.<br />
     *   See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details about the complete error information parameter.
     *
     * @since 1.19.1
     */
    this.createNewCatalog = function (oCatalogData, fnSuccess, fnFailure) {
      this.getPageBuildingService().createCatalog(oCatalogData,
        function (oRawCatalog) {
          var oCatalog = that.createCatalog(oRawCatalog);
          oCatalog.load(fnSuccess.bind(null, oCatalog), function (sErrorMessage, oErrorInformation) {
            fnFailure(sErrorMessage, oCatalog, oErrorInformation);
          });
        }, function (sErrorMessage, oMaybeErrorInformation) {  // consistent fnFailure
          fnFailure(sErrorMessage, /* sap.ui2.srvc.Catalog */undefined, oMaybeErrorInformation);
        });
    };

    /**
     * Creates a new catalog in the backend, based on a catalog page and using the given domain ID
     * and title. The success handler is called as soon as the catalog has been created and the
     * {@link sap.ui2.srvc.Catalog} is not a stub anymore. Access the new catalog in order to
     * learn the resulting ID! Use {@link sap.ui2.srvc.Catalog#getCatalogPage} to access the
     * corresponding catalog page which is initially a stub.
     *
     * @param {string} sDomainId
     *   the catalog's domain-specific ID
     * @param {string} [sTitle]
     *   the catalog's title
     * @param {function (sap.ui2.srvc.Catalog)} fnSuccess
     *   success handler for asynchronous creation
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     *
     * @since 1.19.1
     */
    this.createNewPageBasedCatalog = function (sDomainId, sTitle, fnSuccess, fnFailure) {
      this.getPageBuildingService().createPageBasedCatalog(sDomainId, sTitle,
        function (oRawCatalog) {
          that.createCatalog(oRawCatalog, fnSuccess, fnFailure);
        }, fnFailure);
    };

    /**
     * Creates a new page with the given ID and returns the stub. If a success
     * handler is given, the page will be loaded automatically from the
     * page building service, calling one of the given handlers.
     *
     * @param {string} sPageId
     *   the page ID
     * @param {function (sap.ui2.srvc.Page)} [fnSuccess]
     *   success handler for asynchronous loading
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @param {boolean} [bPartially=false]
     *   whether to load the page only partially (instead of completely, including its CHIP
     *   instances)
     *
     * @returns {sap.ui2.srvc.Page}
     *   the newly created page, as a stub
     * @since 1.2.0
     */
    this.createPage = function (sPageId, fnSuccess, fnFailure, bPartially) {
      var oPage;
      fnRequire("sap.ui2.srvc.page");
      oPage = new sap.ui2.srvc.Page(this, sPageId);
      if (fnSuccess) {
        oPage.load(fnSuccess.bind(null, oPage), fnFailure, bPartially);
      }
      return oPage;
    };

    /**
     * Creates a new page set with the given ID and returns the stub. If a success
     * handler is given, the page set will be loaded automatically from the
     * page building service, calling one of the given handlers.
     *
     * @param {string} sPageSetId
     *   the page set ID
     * @param {function (sap.ui2.srvc.PageSet)} [fnSuccess]
     *   success handler for asynchronous loading
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     *
     * @returns {sap.ui2.srvc.PageSet}
     *   the newly created page set, as a stub
     * @since 1.11.0
     */
    this.createPageSet = function (sPageSetId, fnSuccess, fnFailure) {
      var oPageSet;
      fnRequire("sap.ui2.srvc.pageset");
      oPageSet = new sap.ui2.srvc.PageSet(this, sPageSetId);
      if (fnSuccess) {
        oPageSet.load(fnSuccess.bind(null, oPageSet), fnFailure);
      }
      return oPageSet;
    };

    /**
     * Removes the catalog from the factory internal cache.
     *
     * @param {sap.ui.srvc.Catalog} oCatalog
     *   catalog to be removed from cache
     *
     * @private
     */
    this.forgetCatalog = function (oCatalog) {
      delete mCatalogs[oCatalog.getId()];
    };

    /**
     * Returns this factory's page building service.
     *
     * @returns {sap.ui2.srvc.PageBuildingService}
     *   this factory's page building service
     * @since 1.2.0
     */
    this.getPageBuildingService = function () {
      return oPbs;
    };

    /**
     * Gets the remote catalog service that is able to deliver CHIPs for the given remote catalog.
     *
     * @param {object} oRawCatalog
     *   the JSON description of the remote catalog as delivered from
     *   {@link sap.ui2.srvc.PageBuildingService#readCatalog}.
     * @returns {sap.ui2.srvc.RemoteCatalogService}
     *   the remote catalog service compatible to {@link sap.ui2.srvc.RemoteCatalogService} or
     *   <code>undefined</code> if no such service has been added via
     *   {@link #addRemoteCatalogService}
     * @private
     */
    this.getRemoteCatalogService = function (oRawCatalog) {
      var sBaseUrl = oRawCatalog.type === 'H'
        ? "/sap/hba/apps/kpi/s/odata/hana_chip_catalog.xsodata"
        : oRawCatalog.baseUrl;

      return sBaseUrl
        ? oRemoteCatalogServicesByBaseUrl.get(sBaseUrl.replace(/\/$/, "")) // ignore trailing '/'
        : undefined;
    };

    /**
     * Returns this factory's string representation.
     *
     * @param {boolean} [bVerbose=false]
     *   flag whether to show all properties
     * @returns {string}
     *   this factory's string representation
     * @since 1.2.0
     */
    this.toString = function (bVerbose) {
      var aResult = [
          'sap.ui2.srvc.Factory({oPbs:', oPbs.toString(bVerbose)
        ];
      if (bVerbose) {
        aResult.push(',mChips:', JSON.stringify(mChips));
      }
      aResult.push('})');
      return aResult.join('');
    };

    // constructor code -------------------------------------------------------
    if (!sap.ui2.srvc.Map) {
      fnRequire("sap.ui2.srvc.utils");
    }
    oRemoteCatalogServicesByBaseUrl = new sap.ui2.srvc.Map();
    if (!oPbs) {
      throw new sap.ui2.srvc.Error("Missing page building service", "sap.ui2.srvc.Factory");
    }
    jQuery.sap.log.debug("Created: " + this, null, "sap.ui2.srvc.Factory");
  };

  // public factory function ***************************************************

  /**
   * Constructs a new factory for wrapper objects corresponding to catalogs,
   * pages, CHIP instances, or CHIPs loaded from the page building service with the given base URI.
   *
   * @param {string} sBaseUri
   *   base URI of the page building service
   * @param {function (string, [object])} [fnDefaultFailure]
   *   error handler taking an error message and, since version 1.28.6, an
   *   optional object containing the complete error information as delivered
   *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
   *   for more details.
   * @param {boolean} [bIsPersonalization=false]
   *   defines the return value of {@link sap.ui2.srvc.PageBuildingService#isPersonalization} of
   *   the returned factory's page building service facade (since 1.16.1)
   * @returns {sap.ui2.srvc.Factory}
   *   returns the new factory for the given <code>sBaseUri</code>
   * @since 1.2.0
   *
   * @see sap.ui2.srvc.Factory
   * @see sap.ui2.srvc.PageBuildingService
   * @see sap.ui2.srvc.createPageBuildingService()
   */
  sap.ui2.srvc.createFactory = function (sBaseUri, fnDefaultFailure, bIsPersonalization) {
    if (!sap.ui2.srvc.createPageBuildingService) {
      fnRequire("sap.ui2.srvc.PageBuildingService");
    }
    return new sap.ui2.srvc.Factory(
      sap.ui2.srvc.createPageBuildingService(sBaseUri, fnDefaultFailure, bIsPersonalization)
    );
  };
}());
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview A wrapper for a page loaded from the page building service.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global jQuery, sap */

  // namespace "sap.ui2.srvc" **************************************************
  sap.ui2 = sap.ui2 || {};
  sap.ui2.srvc = sap.ui2.srvc || {};

  // Only declare the module if jQuery.sap exists. Otherwise we do not even try to require assuming
  // that the script has been loaded manually (before SAPUI5).
  // Load time branching pattern
  var fnRequire = String; // NOP (String exists and is free of side-effects)
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.page");
    // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
    fnRequire = function () {
      jQuery.sap.require.apply(this, arguments);
    };
  }

  // "public class" ************************************************************

  /**
   * Constructs a new representation (wrapper) of the page with the given ID
   * or the given page data to be loaded from the given factory's page building
   * service. Associated CHIP instances (see {@link sap.ui2.srvc.ChipInstance}), catalogs (see
   * {@link sap.ui2.srvc.Catalog} and {@link sap.ui2.srvc.AllCatalogs}), and bags (see
   * {@link sap.ui2.srvc.Bag}) are also constructed.
   * <p>
   * Initially a stub is created, which can later load its properties and related objects
   * asynchronously.
   *<p>
   * A page is a mutable object and changes can be persisted by the page building service.
   *
   * @param {sap.ui2.srvc.Factory} oFactory
   *  the factory
   * @param {string|object} vPageData
   *   the page's ID or its page data as loaded via page building service
   *
   * @class
   * @since 1.2.0
   * @see sap.ui2.srvc.PageBuildingService
   */
  sap.ui2.srvc.Page = function (oFactory, vPageData) {
    var sId, // the page ID
      oAllCatalogs, // {sap.ui2.srvc.AllCatalogs|undefined} the page's "allCatalogs" collection
      oAlterEgo, // page's representation with all relations removed
      mBags, // {sap.ui2.srvc.Map<string,sap.ui2.srvc.Bag|jQuery.Deferred>}
      oCatalog, // created on demand
      aChipInstances = [], // {sap.ui2.srvc.ChipInstance[]}
      bIsLoadingBagsOnDemand = true,
      bIsStub = true,
      that = this;

    // BEWARE: constructor code below!

    // "private" methods ---------------------------------------------------------

    /**
     * Makes sure the given page is not just a stub.
     *
     * @private
     */
    function checkStub() {
      if (bIsStub) {
        throw new sap.ui2.srvc.Error(that + ": page is just a stub", "sap.ui2.srvc.Page");
      }
    }

    /**
     * Initializes the page when the alter ego is known
     * @param {object} oNewAlterEgo
     *   the page data as loaded via page building service
     *
     * @private
     */
    function initialize(oNewAlterEgo) {
      var i,
        bBagsLoaded = !!(oNewAlterEgo.Bags && oNewAlterEgo.Bags.results),
        aRawBags = bBagsLoaded ? oNewAlterEgo.Bags.results : [],
        aRawChipInstances
          = (oNewAlterEgo.PageChipInstances && oNewAlterEgo.PageChipInstances.results) || [],
        iBagCount = aRawBags.length,
        iChipInstanceCount = aRawChipInstances.length;

      bIsLoadingBagsOnDemand = !bBagsLoaded;
      // remove relations and store page representation
      delete oNewAlterEgo.Bags;
      delete oNewAlterEgo.Catalog;
      delete oNewAlterEgo.PageChipInstances;
      oAlterEgo = oNewAlterEgo;
      bIsStub = false;

      // create bag instances
      if (iBagCount > 0) {
        fnRequire("sap.ui2.srvc.bag");
      }
      for (i = 0; i < iBagCount; i += 1) {
        // for each bag instance: create wrapper
        mBags.put(aRawBags[i].id, new sap.ui2.srvc.Bag(oFactory, aRawBags[i]));
      }

      // create CHIP instances
      for (i = 0; i < iChipInstanceCount; i += 1) {
        // for each CHIP instance: create wrapper
        aChipInstances[i] = oFactory.createChipInstance(aRawChipInstances[i], null, null, that);
      }
    }

    /**
     * Persists this page.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     *
     * @private
     */
    function persist(fnSuccess, fnFailure) {
      oFactory.getPageBuildingService().updatePage(oAlterEgo,
        function (oRawPage) {
          that.updateScope();
          if (fnSuccess) {
            fnSuccess(); // no-args!
          }
        }, fnFailure);
    }

    // "public" methods ----------------------------------------------------------

    /**
     * Adds a new instance for the given CHIP to this page and loads that CHIP
     * instance completely unless requested otherwise. Can only be called if the page is not a stub
     * anymore.
     * <p>
     * Note: Does not affect this page's layout.
     *
     * @param {sap.ui2.srvc.Chip|sap.ui2.srvc.ChipInstance} vTemplate
     *   the CHIP (or stub) which is to be used; (since 1.11.0) alternatively a CHIP instance, in
     *   this case a new CHIP instance is created referring to the same CHIP and having the same
     *   title and configuration. The layout data will not be copied. It is up to the caller to
     *   update that value.
     *   No bags will be copied!
     * @param {function (sap.ui2.srvc.ChipInstance)} fnSuccess
     *   success handler, taking the newly created CHIP instance which knows its page
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @param {boolean} [bPartially=false]
     *   whether to create the new CHIP instance as a stub only
     * @since 1.2.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     * @see sap.ui2.srvc.ChipInstance#getPage
     */
    this.addChipInstance = function (vTemplate, fnSuccess, fnFailure, bPartially) {
      var oPbs = oFactory.getPageBuildingService(),
        oChip,
        oChipInstance;

      function update(oRawChipInstance) {
        var oChipInstance = oFactory.createChipInstance(oRawChipInstance,
            bPartially ? null : fnSuccess, fnFailure, that);
        aChipInstances.push(oChipInstance);
        that.updateScope();

        if (bPartially) {
          fnSuccess(oChipInstance);
        }
      }

      checkStub();
      if (vTemplate.getChip) {
        oChipInstance = vTemplate;
        oChip = oChipInstance.getChip();
      } else {
        oChip = vTemplate;
      }
      if (oChip.getRemoteCatalog()) {
        oPbs.createPageChipInstanceFromRawData({
          pageId: oAlterEgo.id,
          chipId: oChip.getId(),
          configuration: (oChipInstance && oChipInstance.getConfiguration()) || "",
          // layoutData will not be copied, it is up to the page builder to update that value
          title: oChipInstance && oChipInstance.getTitle(),
          remoteCatalogId: oChip.getRemoteCatalog().getId()
        }, update, fnFailure);
      } else {
        oPbs.createPageChipInstance(oAlterEgo.id, /*sInstanceId*/null, oChip.getId(),
            oChipInstance && oChipInstance.getTitle(),
            (oChipInstance && oChipInstance.getConfiguration()) || "",
            // layoutData will not be copied, it is up to the page builder to update that value
            /*sLayoutData*/"",
            update, fnFailure);
      }
    };

    /**
     * Adds a new CHIP instance to this page which refers to the given original CHIP instance and
     * loads the reference completely if and only if the original is not a stub anymore.
     * Can only be called if this page is not a stub anymore.
     * <p>
     * Note: Does not affect this page's layout.
     *
     * @param {sap.ui2.srvc.ChipInstance} oOriginal
     *   the CHIP instance (or stub) to refer to (which MUST know its page)
     * @param {function (sap.ui2.srvc.ChipInstance)} fnSuccess
     *   success handler, taking the newly created reference which knows its page
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.21.1
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     * @see sap.ui2.srvc.ChipInstance#getPage
     */
    this.addChipInstanceReference = function (oOriginal, fnSuccess, fnFailure) {
      var oPbs = oFactory.getPageBuildingService();

      function update(oRawChipInstance) {
        var oChipInstance = oFactory.createChipInstance(oRawChipInstance,
          oOriginal.isStub() ? null : fnSuccess, fnFailure, that);

        aChipInstances.push(oChipInstance);
        // that.updateScope() is currently not necessary as this is a feature for catalog pages
        // and they are not maintained on scope PERS.
        // Scope changes from CONF -> CUST are not tracked

        if (oOriginal.isStub()) {
          fnSuccess(oChipInstance);
        }
      }

      checkStub();
      oPbs.clonePageChipInstance(oOriginal.getPage().getId(), oOriginal.getId(), this.getId(),
        update, fnFailure);
    };

    /**
     * Releases all resources associated with this page. Call this method
     * just before you stop using it.
     *
     * @since 1.2.0
     */
    this.exit = function () {
      var i, n;

      jQuery.sap.log.debug("Exiting: " + this, null, "sap.ui2.srvc.Page");
      // exit children
      for (i = 0, n = aChipInstances.length; i < n; i += 1) {
        aChipInstances[i].exit();
      }
      // reset to initial state
      oAlterEgo = null; // page's representation with all relations removed
      mBags = new sap.ui2.srvc.Map(); // all bags removed
      oCatalog = null; // created on demand
      aChipInstances = []; // {sap.ui2.srvc.ChipInstance[]}
      bIsStub = true;
      jQuery.sap.log.debug("Exited: " + this, null, "sap.ui2.srvc.Page");
    };

    /**
     * Returns this page's collection of all catalogs, which might still be a stub.
     * <p>
     * <b>Note:</b> Returns <code>undefined</code> in case the JavaScript file for
     * <code>sap.ui2.srvc.AllCatalogs</code> has not been included!
     *
     * @returns {sap.ui2.srvc.AllCatalogs}
     *   this page's collection of all catalogs
     * @since 1.7.0
     */
    this.getAllCatalogs = function () {
      if (!oAllCatalogs) {
        try {
          fnRequire("sap.ui2.srvc.allcatalogs");
        } catch (e) {
          //TODO this adds one 404 request?!
          // old application without registerModulePath and without allcatalogs.js
        }
        if (sap.ui2.srvc.AllCatalogs) {
          oAllCatalogs = new sap.ui2.srvc.AllCatalogs(oFactory, sId);
        } else {
          jQuery.sap.log.warning("sap.ui2.srvc.AllCatalogs is not available", null,
            "sap.ui2.srvc.Page");
        }
      }
      return oAllCatalogs;
    };

    /**
     * Returns an array of bag IDs attached to this page.
     *
     * @returns {string[]}
     *   array of bag IDs
     * @since 1.3.0
     */
    this.getBagIds = function () {
      if (bIsLoadingBagsOnDemand) {
        throw new sap.ui2.srvc.Error(that + ": page is just a stub, load bags on demand",
          "sap.ui2.srvc.Page");
      }
      return mBags.keys();
    };

    /**
     * Returns the property bag with given ID attached to this page.
     * <p>
     * If there is no bag with that ID an empty bag is returned.
     *
     * @param {string} sBagId
     *   the bag ID
     *
     * @returns {sap.ui2.srvc.Bag}
     *   the page's bag for given ID
     * @since 1.3.0
     */
    this.getBag = function (sBagId) {
      var oBag;

      if (bIsLoadingBagsOnDemand) {
        throw new sap.ui2.srvc.Error(that + ": page is just a stub, load bags on demand",
          "sap.ui2.srvc.Page");
      }

      if (!sBagId) {
        throw new sap.ui2.srvc.Error("Missing bag ID", "sap.ui2.srvc.Page");
      }

      if (mBags.containsKey(sBagId)) {
        return mBags.get(sBagId);
      }

      fnRequire("sap.ui2.srvc.bag");
      oBag = new sap.ui2.srvc.Bag(oFactory, {pageId: this.getId(), id: sBagId, $tmp: true});
      mBags.put(sBagId, oBag);
      return oBag;
    };

    /**
     * Asynchronously get the property bag with given ID attached to this page. If that bag has not
     * yet been loaded the bag is loaded first.
     * <p>
     * The <code>done</code> function will be called with a <code>sap.ui2.srvc.Bag</code> instance.
     * If there was no such bag an empty <code>sap.ui2.srvc.Bag</code> is passed.
     *
     * @param {string} sBagId
     *   the bag ID
     *
     * @returns {object}
     *  jQuery.promise object
     * @since 1.11.0
     */
    this.loadBag = function (sBagId) {
      var oDeferred;

      if (!sBagId) {
        throw new sap.ui2.srvc.Error("Missing bag ID", "sap.ui2.srvc.Page");
      }

      if (mBags.containsKey(sBagId)) {
        oDeferred = mBags.get(sBagId);
      } else {
        fnRequire("sap.ui2.srvc.bag");
        oDeferred = new jQuery.Deferred();
        mBags.put(sBagId, oDeferred);
        oFactory.getPageBuildingService().readBag(sId, sBagId, function (oRawBag) {
          oDeferred.resolve(new sap.ui2.srvc.Bag(oFactory, oRawBag));
        }, function () {
          oDeferred.resolve(new sap.ui2.srvc.Bag(oFactory, {pageId: sId, id: sBagId, $tmp: true}));
        });
      }
      return oDeferred.promise();
    };

    /**
     * Returns this page's catalog, which might still be a stub.  Can only be called if the page
     * itself is not a stub anymore.
     *
     * @returns {sap.ui2.srvc.Catalog}
     *   this page's catalog or <code>undefined</code> if the page has no catalog
     * @since 1.2.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.getCatalog = function () {
      checkStub();
      if (!oCatalog && oAlterEgo.catalogId) {
        oCatalog = oFactory.createCatalog(oAlterEgo.catalogId);
      }
      return oCatalog;
    };

    /**
     * Returns this page's CHIP instances. Can only be called if the page is not a stub anymore.
     *
     * @returns {sap.ui2.srvc.ChipInstance[]}
     *   this page's CHIP instances
     * @since 1.2.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.getChipInstances = function () {
      checkStub();
      return aChipInstances.slice();
    };

    /**
     * Returns this page's ID.
     *
     * @returns {string}
     *   this page's ID
     * @since 1.2.0
     */
    this.getId = function () {
      return sId;
    };

    /**
     * Returns the layout for this page. Can only be called if the page is not a stub anymore.
     *
     * @returns {string}
     *   the layout for this page
     * @since 1.2.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.getLayout = function () {
      checkStub();
      return oAlterEgo.layout;
    };

    /**
     * Sets the layout (encoded as a string, for example in JSON) for this page and persists it.
     * Can only be called if the page is not a stub anymore.
     *
     * @param {string} sLayout
     *   the new layout
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.2.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.setLayout = function (sLayout, fnSuccess, fnFailure) {
      checkStub();
      if (oAlterEgo.layout === sLayout) {
        if (fnSuccess) {
          fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();
          sap.ui2.srvc.call(fnSuccess, fnFailure, true);
        }
        return;
      }
      oAlterEgo.layout = sLayout;
      persist(fnSuccess, fnFailure);
    };

    /**
     * Returns this page's original language (in which the page has been created) as BCP-47.
     * If you are logged on in the same language or if the original language is empty, translatable
     * texts can be created and modified on this page and its bags. The same is valid for the
     * page's CHIP instances and their bags. See {@link sap.ui2.srvc.Bag#setText}.
     * <p>
     * Note: Handling of translatable texts depends on the layer used. In some layers the original
     * language is important; in others it does not matter. In the latter case the empty string
     * (<code>""</code>) is returned, which indicates that the user is allowed to edit the
     * translatable texts in any language.
     * <p>
     * The following code is a flexible way of checking the current situation without knowing the
     * current language or layer:
     * <pre>
     *  if (oPage.getOriginalLanguage() === "" ||
     *      oPage.getOriginalLanguage() === sap.ui.getCore().getConfiguration().getLanguage()) {
     *    // create and modify the page's texts
     *  }
     * </pre>
     * <p>
     * This method is intended to be only called in a design time use case.
     * Can only be called if the page is not a stub anymore.
     *
     * @returns {string}
     *   this page's original language (BCP-47) or <code>""</code>
     * @since 1.17.1
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.getOriginalLanguage = function () {
      checkStub();
      return oAlterEgo.originalLanguage;
    };

    /**
     * Returns this page's scope. This method is intended to be only called on catalog pages (see
     * {@link sap.ui2.srvc.Catalog#getCatalogPage}), so only in a design time use case.
     * If you want to check if the page has been personalized (so in a runtime use case) you should
     * rather use {@link #isPersonalized}.
     * Can only be called if the page is not a stub anymore.
     *
     * @returns {string}
     *   returns "PERSONALIZATION", "CUSTOMIZATION" or "CONFIGURATION".
     * @since 1.34.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     * @see #isPersonalized()
     */
    this.getScope = function () {
      checkStub();
      return oAlterEgo.scope;
    };

    /**
     * Returns this page's title. Can only be called if the page is not a stub anymore.
     *
     * @returns {string}
     *   this page's title
     * @since 1.2.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.getTitle = function () {
      checkStub();
      return oAlterEgo.title;
    };

    /**
     * Sets the title for this page and persists it. Can only be called if the page is not a stub
     * anymore.
     *
     * @param {string} sTitle
     *   the new title
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.2.0
     *
     * @throws Error if the page is still a stub
     * @see #getOriginalLanguage()
     * @see #isStub()
     */
    this.setTitle = function (sTitle, fnSuccess, fnFailure) {
      checkStub();
      if (oAlterEgo.title === sTitle) {
        if (fnSuccess) {
          fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();
          sap.ui2.srvc.call(fnSuccess, fnFailure, true);
        }
        return;
      }
      oAlterEgo.title = sTitle;
      persist(fnSuccess, fnFailure);
    };

    /**
     * Tells whether this page is a catalog page (see {@link sap.ui2.srvc.Catalog#getCatalogPage}
     * and {@link sap.ui2.srvc.Factory#createNewPageBasedCatalog}).
     * This method is intended to be only called in a design time use case.
     * Can only be called if the page is not a stub anymore (see {@link #isStub}).
     *
     * @returns {boolean}
     *   whether this page is a catalog page
     * @since 1.19.1

     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.isCatalogPage = function () {
      checkStub();
      return oAlterEgo.isCatalogPage === "X";
    };

    /**
     * Tells whether this page can be altered on Personalization scope or not. Can only be called
     * if the page is not a stub anymore.
     *
     * @returns {boolean}
     *   true if this page is locked and false if not
     * @since 1.25.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.isPersonalizationLocked = function () {
      checkStub();
      return oAlterEgo.isPersLocked === "X";
    };

    /**
     * Determines and persists the locking status of a page which determines if
     * a page can be altered on Personalization scope or not.
     * This method is intended to be only called in a design time use case.
     * Can only be called if the page is not a stub anymore.
     *
     * @param {boolean} bIsPersLocked
     *   Desired locking status
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.25.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.setPersonalizationLocked = function (bIsPersLocked, fnSuccess, fnFailure) {
      checkStub();

      if (oFactory.getPageBuildingService().isPersonalization()) {
        throw new sap.ui2.srvc.Error(
          "Personalization locking cannot be changed at personalization scope",
          "sap.ui2.srvc.Page"
        );
      }

      if ((oAlterEgo.isPersLocked === "X" && bIsPersLocked)
              || (oAlterEgo.isPersLocked !== "X" && !bIsPersLocked)) {
        if (fnSuccess) {
          fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();
          sap.ui2.srvc.call(fnSuccess, fnFailure, true);
        }
        return;
      }

      oAlterEgo.isPersLocked = bIsPersLocked ? "X" : " ";

      persist(fnSuccess, fnFailure);
    };

    /**
     * Tells whether this page is marked as outdated.
     * This method is intended to be only called in a design time use case.
     * Can only be called if the page is not a stub anymore.
     *
     * @returns {boolean}
     *   whether this page is marked as outdated
     * @since 1.7.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.isOutdated = function () {
      checkStub();
      return oAlterEgo.outdated === "X";
    };

    /**
     * Tells whether this page is read-only. Can only be called if the page is not a stub anymore.
     *
     * @returns {boolean}
     *   true if this page is read-only
     * @since 1.32.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     */
    this.isReadOnly = function () {
      checkStub();
      return oAlterEgo.isReadOnly === "X";
    };

    /**
     * Tells whether this page was originally read from 'PERSONALIZATION' scope or was modified in
     * a way that had copied the page to that scope. Such modifications include changes of layout
     * data and changes to CHIP instances, but not to property bags.
     * This method is intended to be only called in a runtime use case.
     * Can only be called if the page is not a stub anymore.
     *
     * @returns {boolean}
     *   whether this page is personalized
     * @since 1.16.1
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     * @see #addChipInstance()
     * @see #removeChipInstance()
     * @see #setLayout()
     * @see #setTitle()
     */
    this.isPersonalized = function () {
      checkStub();
      return oAlterEgo.scope === "PERSONALIZATION";
    };

    /**
     * Tells whether this page is still only a stub and does not yet know its properties or related
     * objects, for example layout, title, catalog, or CHIP instances.
     *
     * @returns {boolean}
     *   whether this page is still only a stub
     * @since 1.2.0
     *
     * @see #load()
     */
    this.isStub = function () {
      return bIsStub;
    };

    /**
     * Loads the current page including its layout, title, (stub) catalog, and CHIP instances (see
     * <code>bPartially</code> parameter). Notifies one of the given handlers. All CHIP instances
     * know their page, see {@link sap.ui2.srvc.ChipInstance#getPage}.
     * <p>
     * Note: Preferably, CHIP instances should be loaded individually as needed (e.g. as they
     * become visible).
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @param {boolean} [bPartially=false]
     *   whether to load the page only partially (instead of completely, including its CHIP
     *   instances)
     * @since 1.2.0
     */
    this.load = function (fnSuccess, fnFailure, bPartially) {
      var iAsyncCount;

      if (!bIsStub) {
        throw new sap.ui2.srvc.Error("Page is not a stub anymore", "sap.ui2.srvc.Page");
      }

      function checkDone() {
        if (iAsyncCount === 0) {
          // all async operations done, call success handler
          jQuery.sap.log.debug("Initialized: " + that, null, "sap.ui2.srvc.Page");
          fnSuccess();
        }
      }

      function onLoad() {
        iAsyncCount -= 1;
        checkDone();
      }

      oFactory.getPageBuildingService().readPage(sId,
        function (oNewAlterEgo) {
          var i,
            aRawChipInstances
              = (oNewAlterEgo.PageChipInstances && oNewAlterEgo.PageChipInstances.results) || [],
            iChipInstanceCount = aRawChipInstances.length;

          jQuery.sap.log.debug("Loaded: " + that, null, "sap.ui2.srvc.Page");
          initialize(oNewAlterEgo);

          iAsyncCount = bPartially ? 0 : iChipInstanceCount;
          if (!bPartially) {
            for (i = 0; i < iChipInstanceCount; i += 1) {
              aChipInstances[i].load(onLoad, fnFailure);
            }
          }
          checkDone();
        }, fnFailure);
    };

    /**
     * Removes (in other words, deletes) this page from the page building service.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.2.0
     */
    this.remove = function (fnSuccess, fnFailure) {
      this.exit();
      oFactory.getPageBuildingService().deletePage(sId, fnSuccess, fnFailure);
    };

    /**
     * Removes the given page CHIP instance from this page's collection of CHIP instances, calls
     * the instance's <code>remove()</code> method and returns <code>true</code>.
     * If the given page CHIP instance does not belong to this page (any more), <code>false</code>
     * is returned and nothing else happens.
     * Can only be called if the page is not a stub anymore.
     *
     * @param {sap.ui2.srvc.ChipInstance} oChipInstance
     *   the CHIP instance to remove from this page
     * @param {function ()} [fnSuccess]
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @returns {boolean}
     *   <code>true</code> iff. the given CHIP instance's <code>remove()</code> method has been
     *   called
     * @since 1.9.0
     *
     * @throws Error if the page is still a stub
     * @see #isStub()
     * @see sap.ui2.srvc.ChipInstance#getPage
     * @see sap.ui2.srvc.ChipInstance#remove
     */
    this.removeChipInstance = function (oChipInstance, fnSuccess, fnFailure) {
      var i = aChipInstances.indexOf(oChipInstance);

      checkStub();
      if (i >= 0) {
        // remove to avoid endless loops
        aChipInstances.splice(i, 1);

        oChipInstance.remove(function () {
          that.updateScope();
          if (fnSuccess) {
            fnSuccess.apply(this, arguments);
          }
        }, function () {
          // reinsert CHIP instance because backend call failed
          aChipInstances.splice(i, 0, oChipInstance);
          fnFailure = fnFailure || oFactory.getPageBuildingService().getDefaultErrorHandler();
          fnFailure.apply(this, arguments);
        });

        return true;
      }

      return false;
    };

    /**
     * Returns this page's string representation.
     *
     * @param {boolean} [bVerbose=false]
     *   flag whether to show all properties
     * @returns {string}
     *   this page's string representation
     * @since 1.2.0
     */
    this.toString = function (bVerbose) {
      var aResult = ['sap.ui2.srvc.Page({sId:"', sId, '",bIsStub:', bIsStub,
        ',bIsLoadingBagsOnDemand:', bIsLoadingBagsOnDemand];
      if (bVerbose) {
        aResult.push(',oAlterEgo:', JSON.stringify(oAlterEgo),
            ',oCatalog:', oCatalog ? oCatalog.toString(bVerbose) : oCatalog,
            ',oFactory:', oFactory.toString(bVerbose),
            ',aChipInstances:', JSON.stringify(aChipInstances)
          );
      }
      aResult.push('})');
      return aResult.join('');
    };

    /**
     * Changes to pages on CUSTOMIZING or CONFIGURATION scope will create a page copy on scope
     * PERSONALIZATION automatically in the backend; thus we update the scope accordingly.
     * Note: Can also be called by CHIP instances in case they are modified.
     *
     * @since 1.16.1
     * @private
     * @see #isPersonalized
     */
    this.updateScope = function () {
      if (oFactory.getPageBuildingService().isPersonalization()) {
        oAlterEgo.scope = "PERSONALIZATION";
      }
    };


    // constructor code -------------------------------------------------------
    if (!sap.ui2.srvc.Map) {
      fnRequire("sap.ui2.srvc.utils");
    }
    if (typeof vPageData === 'object') {
      // direct creation
      sId = vPageData.id;
      initialize(vPageData);
    } else if (typeof vPageData === 'string') {
      sId = vPageData;
    }
    if (!sId) {
      throw new sap.ui2.srvc.Error("Missing ID", "sap.ui2.srvc.Page");
    }
    mBags = new sap.ui2.srvc.Map();
    jQuery.sap.log.debug("Created: " + this, null, "sap.ui2.srvc.Page");
  };
}());
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global window,console, DOMParser, jQuery, location, sap, setTimeout, URI, XMLHttpRequest */

  // ensure that Function.prototype.bind is available, even with iOS 5
  // utils.js is used with startup service, shell API and page building services
  if (!Function.prototype.bind) {
    /* eslint-disable no-extend-native */
    /**
     * Replacement for ECMAScript 5 feature which might still be missing.
     *
     * @param {object} oThis
     *  The value to be passed as the <code>this</code> parameter to the target
     *  function when the bound function is called. The value is ignored if the
     *  bound function is constructed using the <code>new</code> operator.
     * @param {...object} aVarArgs
     *  Arguments to prepend to arguments provided to the bound function when
     *  invoking the target function.
     * @returns {function}
     *  A function with the bound arguments aVarArgs
     *
     * @see <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind">bind in ECMAScript 5</a>
     */
    Function.prototype.bind = function (oThis) {
      /* eslint-enable no-extend-native */
      if (typeof this !== "function") {
        // closest thing possible to the ECMAScript 5 internal IsCallable function
        throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
        that = this,
        NOP = function () {/* no-op c'tor */},
        fBound = function () {
          return that.apply(
            // passing "window" as "this" has been removed (cf. "use strict";)
            this instanceof NOP ? this : oThis,
            aArgs.concat(Array.prototype.slice.call(arguments))
          );
        };
      NOP.prototype = this.prototype;
      fBound.prototype = new NOP();
      return fBound;
    };
  }

  // namespace "sap.ui2.srvc" **************************************************
  sap.ui2 = sap.ui2 || {};
  sap.ui2.srvc = sap.ui2.srvc || {};
  if (sap.ui2.srvc.log) {
    return; // It's OK. Don't load twice.
  }

  // cache for GET requests
  var oCache;

  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.utils");
  }

  // "private static" methods **************************************************

  /**
   * Tells whether the package <code>jQuery.sap.log</code> currently exists.
   *
   * @returns {boolean}
   *   returns <code>true</code> if <code>jQuery.sap.log</code> exists
   */
  function jQuerySapLogExists() {
    return typeof jQuery === "function" && jQuery.sap && jQuery.sap.log;
  }

  /**
   * Formats the message for a simple output to <code>window.console</code>.
   * Mimics SAPUI5 log behavior for the three last parts:
   * <code>
   * var logText = oLogEntry.date + " " + oLogEntry.time + " " + sWindowName +
   *    oLogEntry.message + " - " + oLogEntry.details + " " + oLogEntry.component;
   * </code>
   * @param {string} sMessage
   *  message to be logged
   * @param {string} sDetails
   *  message details to be logged
   * @param {string} sComponent
   *  component which logged the message
   * @returns {string}
   *  message in the format "message - details - component"
   */
  function formatMessage(sMessage, sDetails, sComponent) {
    return (sMessage || "") + " - " + (sDetails || "") + " " + (sComponent || "");
  }

  // "public static" methods ***************************************************

  /**
   * @namespace The namespace for functions which log messages even if SAPUI5 is not present.
   * @since 1.3.0
   */
  sap.ui2.srvc.log = {
    /**
     * Wrapper function for <code>jQuery.sap.log.debug()</code>. Writes a simple log message to
     * the console if SAPUI5 is not present.
     *
     * @param {string} sMessage
     *   the log message
     * @param {string} sDetails
     *   the message details
     * @param {string} sComponent
     *   the component which issues the message
     * @since 1.3.0
     */
    debug: function (sMessage, sDetails, sComponent) {
      if (jQuerySapLogExists()) {
        jQuery.sap.log.debug(sMessage, sDetails, sComponent);
        return;
      }
      if (typeof console === "object") {
        /* eslint-disable no-console */
        if (typeof console.debug === "function") { // e.g. Chrome
          console.debug(formatMessage(sMessage, sDetails, sComponent));
        } else { // e.g. IE9
          console.log(formatMessage(sMessage, sDetails, sComponent));
        }
        /* eslint-enable no-console */
      }
    },

    /**
     * Wrapper function for <code>jQuery.sap.log.error()</code>. Writes a simple error message to
     * the console if SAPUI5 is not present.
     *
     * @param {string} sMessage
     *   the log message
     * @param {string} sDetails
     *   the message details
     * @param {string} sComponent
     *   the component which issues the message
     * @since 1.3.0
     */
    error: function (sMessage, sDetails, sComponent) {
      if (jQuerySapLogExists()) {
        jQuery.sap.log.error(sMessage, sDetails, sComponent);
        return;
      }
      if (typeof console === "object") {
        /* eslint-disable no-console */
        console.error(formatMessage(sMessage, sDetails, sComponent));
        /* eslint-enable no-console */
      }
    },

    /**
     * Wrapper function for <code>jQuery.sap.log.info()</code>. Writes a simple info message to
     * the console if SAPUI5 is not present.
     *
     * @param {string} sMessage
     *   the log message
     * @param {string} sDetails
     *   the message details
     * @param {string} sComponent
     *   the component which issues the message
     * @since 1.3.0
     */
    info: function (sMessage, sDetails, sComponent) {
      if (jQuerySapLogExists()) {
        jQuery.sap.log.info(sMessage, sDetails, sComponent);
        return;
      }
      if (typeof console === "object") {
        /* eslint-disable no-console */
        console.info(formatMessage(sMessage, sDetails, sComponent));
        /* eslint-enable no-console */
      }
    },

    /**
     * Wrapper function for <code>jQuery.sap.log.warning()</code>. Writes a simple warning message
     * to the console if SAPUI5 is not present.
     *
     * @param {string} sMessage
     *   the log message
     * @param {string} sDetails
     *   the message details
     * @param {string} sComponent
     *   the component which issues the message
     * @since 1.3.0
     */
    warning: function (sMessage, sDetails, sComponent) {
      if (jQuerySapLogExists()) {
        jQuery.sap.log.warning(sMessage, sDetails, sComponent);
        return;
      }
      if (typeof console === "object") {
        /* eslint-disable no-console */
        console.warn(formatMessage(sMessage, sDetails, sComponent));
        /* eslint-enable no-console */
      }
    }
  };

  /**
   * Makes the given relative URL absolute. URLs containing host and/or protocol
   * and URLs with an absolute path remain unchanged. The URL is in no way
   * normalized; the function simply cuts off the file name from the base and
   * appends the relative URL.
   *
   * @param {string} sUrl
   *   the (possibly server-relative) URL
   * @param {string} [sBase=location.href]
   *   the base URL; it <b>must</b> at least be server-absolute
   * @returns {string}
   *   the absolute URL
   * @since 1.2.0
   */
  sap.ui2.srvc.absoluteUrl = function (sUrl, sBase) {
    /*jslint regexp: true */

    // default base is the page location
    sBase = sBase || location.href;
    // base must be absolute
    if (sBase.indexOf('://') < 0 && sBase.charAt(0) !== '/') {
      throw new sap.ui2.srvc.Error("Illegal base URL: " + sBase, "sap.ui2.srvc");
    }
    // do not change empty or absolute URL
    if (!sUrl || sUrl.indexOf('://') >= 0 || sUrl.charAt(0) === '/') {
      return this.addCacheBusterTokenUsingUshellConfig(sUrl);
    }
    if (sBase.search(/^([^:]*:)?\/\/[^\/]+$/) < 0) {
      // not a pure server URL -> cut off the file name
      sBase = sBase.replace(/\/[^\/]*$/, '');
    }
    // append the relative path
    return this.addCacheBusterTokenUsingUshellConfig(sBase + '/' + sUrl);
  };

  /**
   * Calls the given success handler (a)synchronously. Errors thrown in the success handler are
   * caught and the error message is reported to the error handler; if an error stack is
   * available, it is logged.
   *
   * @param {function ()} fnSuccess
   *   no-args success handler
   * @param {function (string)} [fnFailure]
   *   error handler, taking an error message; MUST NOT throw any error itself!
   * @param {boolean} [bAsync=false]
   *   whether the call shall be asynchronously
   * @since 1.2.0
   */
  sap.ui2.srvc.call = function (fnSuccess, fnFailure, bAsync) {
    // see also redundant declaration in sap.ushell.utils.call which has to be in sync
    var sMessage;

    if (bAsync) {
      setTimeout(function () {
        sap.ui2.srvc.call(fnSuccess, fnFailure, false);
      }, 0);
      return;
    }

    try {
      fnSuccess();
    } catch (e) {
      sMessage = e.message || e.toString();
      sap.ui2.srvc.log.error("Call to success handler failed: " + sMessage,
          e.stack, //may be undefined: only supported in Chrome, FF; as of now not in Safari, IE
          "sap.ui2.srvc");
      if (fnFailure) {
        fnFailure(sMessage);
      }
    }
  };

  /**
   * GETs the given URL (as XML if indicated) and hands it to the given
   * success handler. As this is a root cause for asynchronous behaviour,
   * special precautions are taken: errors thrown in the success handler are
   * caught and reported to the error handler!
   *
   * @param {string} sUrl
   *   URL for GET request
   * @param {boolean} bXml
   *   whether the handler expects XML instead of plain text
   * @param {function (*)} fnSuccess
   *   success handler, taking a DOM document or text string
   * @param {function (string, string)} fnFailure
   *   error handler, taking an error message and (if http status is not OK) the GET response as
   *   text; MUST NOT throw any error itself!
   * @param {object} [oXHR]
   *   the XMLHttpRequest object which may be predefined (e.g. by setting request headers). If
   *   <code>undefined</code>, a new XMLHttpRequest object is created.
   * @param {boolean} [bCache]
   *   whether the response is cached for further calls (since 1.8.1). XML responses cannot be
   *   cached. An <code>sap.ui2.srvc.Error</code> is thrown if both <code>bXml</code> and
   *   <code>bCache</code> are set to <code>true</code>.
   * @since 1.2.0
   */
  sap.ui2.srvc.get = function (sUrl, bXml, fnSuccess, fnFailure, oXHR, bCache) {
    if (typeof fnSuccess !== "function") {
      throw new sap.ui2.srvc.Error("Missing success handler", "sap.ui2.srvc");
    }
    if (typeof fnFailure !== "function") {
      throw new sap.ui2.srvc.Error("Missing error handler", "sap.ui2.srvc");
    }
    if (bXml && bCache) {
      throw new sap.ui2.srvc.Error("Caching of XML responses not supported", "sap.ui2.srvc");
    }
    if (typeof sap.ui2.srvc.addCacheBusterTokenUsingUshellConfig === "function") {
      sUrl = sap.ui2.srvc.addCacheBusterTokenUsingUshellConfig(sUrl);
    }
    oXHR = oXHR || new XMLHttpRequest();

    /**
     * @private
     */
    oXHR.onreadystatechange = function () {
      var oResult, oXml;
      // Note: "this" refers to oXHR according to W3C
      if (this.readyState !== /*DONE*/4) {
        return; // not yet DONE
      }
      sap.ui2.srvc.get.pending -= 1;
      if (this.status !== /*OK*/200) {
        // HTTP status not OK
        sap.ui2.srvc.log.error("Error " + this.status + " in response for URL " + sUrl,
          null, "sap.ui2.srvc");
        fnFailure(sUrl + ": " + this.status + " " + this.statusText, this.responseText);
        return;
      }

      sap.ui2.srvc.log.debug("Received response for URL " + sUrl, null, "sap.ui2.srvc");
      if (bXml) {
        oXml = this.responseXML;
        if (oXml === null || !oXml.documentElement) {
          // in FF it is null, in IE it is a document with only an error message
          fnFailure(sUrl + ": no valid XML");
          return;
        }
        oResult = oXml;
      } else {
        oResult = this.responseText;
        if (bCache) {
          oCache.put(sUrl, oResult);
        }
      }
      sap.ui2.srvc.call(fnSuccess.bind(null, oResult), fnFailure);
    };

    if (!bXml && oCache.containsKey(sUrl)) {
      sap.ui2.srvc.log.debug("Return cached response for URL " + sUrl, null, "sap.ui2.srvc");
      sap.ui2.srvc.call(fnSuccess.bind(null, oCache.get(sUrl)), fnFailure);
    } else {
      try {
        // Given that the XHR request could be provided as a parameter, we must
        // check that this was not already opened before calling open. One
        // reason this could happen is header settings. Only after opening the
        // request headers can be set. Calling open again will cause the
        // previous request to be aborted (i.e., headers loss).
        if (oXHR.readyState < XMLHttpRequest.OPENED) { // keep working on the opened request
            oXHR.open("GET", sUrl, /*asynchronously*/true);
        } else {
            sap.ui2.srvc.log.debug("XHR Request was already opened for " + sUrl, null, "sap.ui2.srvc");
        }
        oXHR.send();
        sap.ui2.srvc.get.pending += 1;
        sap.ui2.srvc.log.debug("Sent request to URL " + sUrl, null, "sap.ui2.srvc");
      } catch (e) {
        sap.ui2.srvc.log.error("Error '" + (e.message || e) + "' in request to URL " + sUrl,
          null, "sap.ui2.srvc");
        throw e;
      }
    }
  };

  /**
   * Gets an URL and adds the given cache buster token to it if no other token is already
   * contained. In case the URL is no valid URL the token is not added.
   *
   * @param {string} sUrl
   *  e.g. "/sap/bc/ui5_ui5/application/path"
   *  URL to be changed
   * @param {regEx} oPattern
   *  e.g /^\/sap\/bc\/ui5_ui5\//
   *  RegExp to determine if sUrl matches and needs to be extended by the cache buster token
   *  sToken
   * @param {string} sReplacement
   *  e.g. "/sap/bc/ui5_ui5/[CacheBusterToken]/"
   *  The part of sUrl matched by oPattern will be exchanged by this. Before that is done sToken
   *  is inserted in sReplacement at the position indicated by [CacheBusterToken]
   *  The replacement may refer to capture groups of oPattern
   * @param {string} sToken
   *  e.g. "~201412132350000~"
   *  token to be inserted in sUrl. It will be inserted as indicated in the final constructed URL!
   * @returns {string}
   *  - if sUrl did not matched oPattern: unchanged sUrl
   *  - if sUrl matched oPattern: sUrl enhanced with sToken,
   *         e.g. "/sap/bc/ui5_ui5/~201412132350000~/application/path"
   *
   * @private
   */
  sap.ui2.srvc.addCacheBusterToken = function (sUrl, oPattern, sReplacement, sToken) {
    if (oPattern.test(sUrl)) { //url matches the pattern
      sUrl = sUrl.replace(oPattern, sReplacement);
      //replace the token placeholder globally in the final url (!)
      // (also allow the token to be added elsewhere)
      sUrl = sUrl.replace(/\[CacheBusterToken\]/g, sToken);
    }
    return sUrl;
  };

  /**
   * Removes a cache buster token (if available) of an Url and normalizes the url afterwards
   * @param {string} sUrl
   *  the URL to be normalized
   * @returns {string}
   *   normalized url (without a cache buster token)
   * @since 1.28.1
   *
   * @private
   */
  sap.ui2.srvc.removeCBAndNormalizeUrl = function (sUrl) {
    var aMatches,
      sUrlPrefix,
      sCacheBusterSegment,
      sUrlPostfix;

    if (typeof sUrl !== "string" || sUrl === "" || isUriWithRelativeOrEmptyPath(sUrl)) {
      return sUrl;
    }

    function isUriWithRelativeOrEmptyPath(sUrl0) {
        var oUri = new URI(sUrl0),
            sPath = oUri.path();

        if (oUri.is("absolute")) {
          return false;
        }

        if (sPath && sPath.charAt(0) === "/") {
          return false;
        }

        return true;
    }

    // split up the URL into 3 parts: prefix, cache-buster segment, postfix
    // leading slashes are always part of the segment, the postfix might have a trailing slash
    aMatches = sUrl.match(/(.*)(\/~[\w\-]+~[A-Z0-9]?)(.*)/);
    if (aMatches) {
      sUrlPrefix = aMatches[1];
      sCacheBusterSegment = aMatches[2];
      sUrlPostfix = aMatches[3];
    }

    function normalizePath(sUrl0) {
      return new URI(sUrl0).normalizePathname().toString();
    }

    function isRelativePathWithDotSegmentsThatGoOutside(sPath) {
      var aSegments = new URI(sPath).segment(),
        i,
        iPos = 0;

      for (i = 0; i < aSegments.length && iPos >= 0; i += 1) {
        if (aSegments[i] === "..") {
          iPos = iPos - 1;
        } else {
          iPos = iPos + 1;
        }
      }

      return iPos < 0;
    }

    // check if URL contains a cache-buster token
    if (sCacheBusterSegment) {
      // check if removal of cache-buster token is required
      if (sUrlPostfix && isRelativePathWithDotSegmentsThatGoOutside(sUrlPostfix)) {
        // remove the cache-buster token
        sUrl = sUrlPrefix + sUrlPostfix;
      }
    }

    // always normalize the URL path
    return normalizePath(sUrl);
  };

  /**
   * Gets an URL and adds the given cache buster token to it if no other token is already
   * contained. The rules to be applied are coming from the ushell configuration:
   *  sap-ushell-config.cacheBusting.patterns
   * The rules are applied by there order property (lowest first) and the modified URL is returned
   * as soon as the first rule matched.
   * <p>
   * If the query parameter <code>sap-ushell-nocb</code> is set to <code>true</code> or <code>X</code>,
   * no cache buster tokens are added and existing cache buster tokens are removed from the specified URL.
   *
   * @param {string} sUrl
   *  e.g. "/sap/bc/ui5_ui5/application/path"
   *  URL to be changed
   * @returns {string}
   *  - if sUrl already contained a cache buster token (e.g. ~00000~): unchanged sUrl
   *  - if sUrl did not match any pattern: unchanged sUrl
   *  - if sUrl matched pattern: sUrl enhanced with sToken,
   *         e.g. "/sap/bc/ui5_ui5/~201412132350000~/application/path"
   *  - if the modified sUrl (normalized and cache buster token was removed)
   *    is found as an attribute of the config
   *    (window["sap-ushell-config"].cacheBusting.urls),
   *    the cache buster token which is defined as the value of this attribute
   *    is going to be returned.
   *
   * @private
   */
  sap.ui2.srvc.addCacheBusterTokenUsingUshellConfig = function (sUrl) {
    //TODO move to sap.ushell.utils
    var oCacheBusting = window["sap-ushell-config"] &&
        window["sap-ushell-config"].cacheBusting,
      oPatterns = oCacheBusting && oCacheBusting.patterns,
      sCacheBusterUrl = sUrl,
      aParameterMap = [],
      sSapUshellNoCb,
      aRules = [];

    aParameterMap = sap.ui2.srvc.getParameterMap();
    sSapUshellNoCb = aParameterMap["sap-ushell-nocb"] && aParameterMap["sap-ushell-nocb"][0];

    // When URL disables Cache Busting return URL without cache busting token
    // It can happen that we get a URL which already has a cache-buster token included (from the ABAP server), so we also remove
    // an existing token here (this implementation is simpler than passing the URL parameter to the resolveLink service and evaluate it there)
    if ((sSapUshellNoCb === 'true' || sSapUshellNoCb === 'X') && typeof sUrl === "string") {
      sUrl = sUrl.replace(/\/~[\w\-]+~[A-Z0-9]?/, "");
      return sUrl;
    }

    // don't continue if the string is empty or a token is already present,
    // either as path segment (e.g.: /~0123_-Abc~/) or as query parameter
    // /e.g. ?cb=~xxxxxx~
    // also consider URLs with query parameters and fragments
    // this case happens during navigation, because this method is both called from
    // NavTargetResolution service as well as from the stubbed jQuery.sap.registerModulePath method
    //
    // syntax for application cache-buster contains now an additional scope qualifier that can be
    // either empty, "R" for resource, "5" for UI5 app, "W" for web app and "C"  for custom
    // see ABAP class /UI5/CL_UI5_APP_HTTP_HANDLER for details
    if (!oCacheBusting
            || typeof sUrl !== "string"
            || sUrl === ""
            || /[\/=]~[\w\-]+~[A-Z0-9]?[\/#\?\&]/.test(sUrl) // matches intermediate segment with cb-token; consider URLs with query string or fragment
            || /[\/=]~[\w\-]+~[A-Z0-9]?$/.test(sUrl)) {    // matches last segment with cb-token (no trailing slash or further parameters)
      return sUrl;
    }

    if (oCacheBusting && oCacheBusting.urls) {
      // Removing the last slash of the input url
      if (sUrl.charAt(sUrl.length - 1) === "/") {
        sUrl = sUrl.substr(0, sUrl.length - 1);
      }
      // Config contains the modified url (without a slash at the end)
      if (oCacheBusting.urls.hasOwnProperty(sUrl)) {
        return sUrl + "/" + oCacheBusting.urls[sUrl].cacheBusterToken;
      }
      // Config contains the modified url (having a slash at the end)
      if (oCacheBusting.urls.hasOwnProperty(sUrl + "/")) {
        return sUrl + "/" + oCacheBusting.urls[sUrl + "/"].cacheBusterToken;
      }
    }

    if (!oPatterns) {
      return sUrl;
    }

    // put rules in aRules and sort them by oRule.order
    Object.keys(oPatterns).forEach(function (sPattern) {
      if (oPatterns.hasOwnProperty(sPattern)) {
        var oRule = oPatterns[sPattern];
        // the property name is the pattern to be used, copy it to the object itself for later
        oRule.pattern = new RegExp(sPattern);
        aRules.push(oRule);
      }
    });
    aRules.sort(function (oRule1, oRule2) { return oRule1.order - oRule2.order; });

    // apply rules
    aRules.every(function (oRule) { // use every to be able to break
      if (oRule.pattern.test(sUrl)) {
        if (!oRule.cacheBusterToken) {
          oRule.cacheBusterToken = oCacheBusting.cacheBusterToken;
        }

        //url matches the pattern, note that this is not redundant
        //one can define patterns without a replacement to match and end the matching process!
        sCacheBusterUrl = sap.ui2.srvc.addCacheBusterToken(sUrl, oRule.pattern, oRule.replacement,
          oRule.cacheBusterToken);
        // break as soon as first rule matches (irrespective of alteration)
        return false;
      }
      return true;
    });

    return sCacheBusterUrl;
  };

  /**
   * Clear cache for GET requests.
   *
   * @since 1.8.1
   */
  sap.ui2.srvc.get.clearCache = function () {
    oCache = new sap.ui2.srvc.Map();
  };

  /**
   * Number of pending XHR requests.
   *
   * @type {number}
   */
  sap.ui2.srvc.get.pending = 0;

  /**
   * Gets the device's form factor. Based on <code>sap.ui.Device.system</code> from SAPUI5.
   * @returns {string}
   *   the device's form factor ("desktop", "tablet" or "phone")
   * @since 1.19.1
   */
  sap.ui2.srvc.getFormFactor = function () {
   // see also redundant declaration in sap.ushell.utils.getFormFactor which has to be in sync
    var oSystem = sap.ui.Device.system;

    if (oSystem.desktop) {
      return oSystem.SYSTEMTYPE.DESKTOP;
    }
    if (oSystem.tablet) {
      return oSystem.SYSTEMTYPE.TABLET;
    }
    if (oSystem.phone) {
      return oSystem.SYSTEMTYPE.PHONE;
    }
    // returns undefined
  };

  /**
   * Returns a map of all search parameters present in the given search string
   * or this window's current URL. To be precise, <code>location.search</code>
   * is used as a default and any given search string must use the same syntax
   * (start with a "?" and not include a "#").
   *
   * @param {string} [sSearchString=location.search]
   *   search string starting with a "?" (unless empty) and not including a "#"
   * @returns {object}
   *   a <code>map&lt;string, string[]></code> from key to array of values
   * @since 1.2.0
   *
   * @see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameterMap()">
   * javax.servlet.ServletRequest#getParameterMap()</a>
   * @see <a href="https://sapui5.hana.ondemand.com/sdk/docs/api/symbols/jQuery.sap.util.UriParameters.html">
   * Interface jQuery.sap.util.UriParameters</a>
   */
  sap.ui2.srvc.getParameterMap = function (sSearchString) {
    var i,
      n,
      mResult = {},
      sKey,
      sValue,
      iIndexOfEquals,
      aKeyValuePairs,
      // Note: location.search starts with "?" if not empty
      sSearch = arguments.length > 0 ? sSearchString : location.search;

    if (sSearch && sSearch.charAt(0) !== "?") {
      throw new sap.ui2.srvc.Error("Illegal search string " + sSearch, "sap.ui2.srvc");
    }
    if (!sSearch || sSearch === "?") {
      return {}; // Note: split("") would return [""]
    }

    // Note: W3C recommends that servers support ";" as well as "&"
    //       (http://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2.2)
    // http://unixpapa.com/js/querystring.html advocates this on the client-side also!
    aKeyValuePairs = sSearch.substring(1).replace(/\+/g, ' ').split(/[&;]/);

    for (i = 0, n = aKeyValuePairs.length; i < n; i += 1) {
      // decode key/value pair at first "=" character
      sKey = aKeyValuePairs[i];
      sValue = ""; // Note: empty value may be omitted altogether
      iIndexOfEquals = sKey.indexOf("=");
      if (iIndexOfEquals >= 0) {
        sValue = sKey.slice(iIndexOfEquals + 1);
        sValue = decodeURIComponent(sValue);
        sKey = sKey.slice(0, iIndexOfEquals);
      }
      sKey = decodeURIComponent(sKey);

      // map key to value(s)
      // Note: beware of inherited functions!
      if (!Object.prototype.hasOwnProperty.call(mResult, sKey)) {
        mResult[sKey] = [];
      }
      mResult[sKey].push(sValue);
    }

    return mResult;
  };

  /**
   * Returns the value of the given URL's GET parameter with the given name, properly decoded.
   * Returns "" if no such parameter can be found.
   *
   * @param {string} sUrl
   *   any URL
   * @param {string} sName
   *   the name of the GET parameter we are looking for
   * @returns {string}
   *   the parameter value, properly decoded
   *
   * @private
   * @since 1.17.0
   */
  sap.ui2.srvc.getParameterValue = function (sUrl, sName) {
    var oParameterMap, iQueryIndex;

    if (typeof sName !== "string") {
      // avoid surprises when sName would later be converted into a string
      throw new sap.ui2.srvc.Error("Missing parameter name", "sap.ui2.srvc");
    }

    sUrl = sUrl.split('#')[0];
    iQueryIndex = sUrl.indexOf("?");
    if (iQueryIndex >= 0) {
      oParameterMap = sap.ui2.srvc.getParameterMap(sUrl.slice(iQueryIndex));
      if (oParameterMap[sName]) {
        return oParameterMap[sName][0];
      }
    }
    return "";
  };

  /**
   * Tells whether the given value is an array.
   *
   * @param {object} o
   *   any value
   * @returns {boolean}
   *   <code>true</code> if and only if the given value is an array
   * @since 1.2.0
   */
  sap.ui2.srvc.isArray = function (o) {
    // see Crockford page 61
    return Object.prototype.toString.apply(o) === '[object Array]';
  };
  /**
   * Tells whether the given value is a string.
   *
   * @param {object} o
   *   any value
   * @returns {boolean}
   *   <code>true</code> if and only if the given value is a string
   * @since 1.50.1
   */
  sap.ui2.srvc.isString = function name(o) {
    return /String/.test(Object.prototype.toString.call(o));
  };

  /**
   * Parses the given XML string and returns it as a document.
   *
   * @param {string} sXml
   *   the XML
   * @returns {DOMDocument}
   *   a DOM document, or <code>null</code> in case of missing or empty XML string
   * @throws {Error}
   *   in case of invalid XML string
   * @since 1.2.0
   */
  sap.ui2.srvc.parseXml = function (sXml) {
    var oXml;
    if (!sXml || typeof sXml !== "string") {
      return null;
    }
    oXml = new DOMParser().parseFromString(sXml, "text/xml");
    if (oXml.getElementsByTagName("parsererror").length) { // Chrome, Firefox
      throw new sap.ui2.srvc.Error("Invalid XML: " + sXml, "sap.ui2.srvc");
    }
    return oXml;
  };

  /**
   * Serves as a marker for functions that are to be exposed in QUnit tests. Calls to this function
   * are expected to be placed directly before the named function declaration (even <b>after</b>
   * the JSDoc). The function itself does nothing.
   *
   * @param {object} o
   *   the object to which this function will be attached in tests; must not be <code>this</code>
   *   (use <code>that</code> instead)
   * @since 1.3.0
   */
  sap.ui2.srvc.testPublishAt = function (o) {
    // intentionally left blank
  };

  // "public classes" **********************************************************

  if (sap.ui2.srvc.Error === undefined) {
    sap.ui2.srvc.Error = function (sMessage, sComponent) {
      // see also redundant declaration in error.js which has to be in sync
      var oError = new Error(sMessage); // reuse Error constructor to benefit from it (e.g. stack)
      oError.name = "sap.ui2.srvc.Error";
      sap.ui2.srvc.log.error(sMessage, null, sComponent);
      return oError;
    };
    // to avoid (new Error()) instanceof sap.ui2.srvc.Error === true we do not set the prototype,
    // we also tolerate that (new sap.ui2.srvc.Error()) instanceof sap.ui2.srvc.Error === false now
    // sap.ui2.srvc.Error.prototype = Error.prototype;
  }

  /**
   * Creates an empty map. It is used for mapping from arbitrary string(!) keys (including "get" or
   * "hasOwnProperty") to values of any type.
   * @class
   * @since 1.5.0
   */
  sap.ui2.srvc.Map = function () {
    this.entries = {};
  };

  /**
   * Associates the specified value with the specified key in this map. If the map previously
   * contained a mapping for the key, the old value is replaced by the specified value. Returns
   * the old value. Note: It might be a good idea to assert that the old value is
   * <code>undefined</code> in case you expect your keys to be unique.
   *
   * @param {string} sKey
   *   key with which the specified value is to be associated
   * @param {any} vValue
   *   value to be associated with the specified key
   * @returns {any}
   *   the old value
   * @since 1.5.0
   */
  sap.ui2.srvc.Map.prototype.put = function (sKey, vValue) {
    var vOldValue = this.get(sKey);
    this.entries[sKey] = vValue;
    return vOldValue;
  };

  /**
   * Returns <tt>true</tt> if this map contains a mapping for the specified key.
   *
  * @param {string} sKey
  *   key whose presence in this map is to be tested
  * @returns {boolean}
  *   <tt>true</tt> if this map contains a mapping for the specified key
   * @since 1.5.0
  */
  sap.ui2.srvc.Map.prototype.containsKey = function (sKey) {
    if (typeof sKey !== "string") {
      throw new sap.ui2.srvc.Error("Not a string key: " + sKey, "sap.ui2.srvc");
    }
    return Object.prototype.hasOwnProperty.call(this.entries, sKey);
  };

  /**
   * Returns the value to which the specified key is mapped, or <code>undefined</code> if this map
   * contains no mapping for the key.
   * @param {string} sKey
   *   the key whose associated value is to be returned
   * @returns {any}
   *   the value to which the specified key is mapped, or <code>undefined</code> if this map
   *   contains no mapping for the key
   * @since 1.5.0
  */
  sap.ui2.srvc.Map.prototype.get = function (sKey) {
    if (this.containsKey(sKey)) {
      return this.entries[sKey];
    }
    //return undefined;
  };

  /**
   * Returns an array of this map's keys. This array is a snapshot of the map; concurrent
   * modifications of the map while iterating do not influence the sequence.
   * @returns {string[]}
   *   this map's keys
   * @since 1.5.0
   */
  sap.ui2.srvc.Map.prototype.keys = function () {
    return Object.keys(this.entries);
  };

  /**
   * Removes a key together with its value from the map.
   * @param {string} sKey
   *  the map's key to be removed
   * @since 1.11.0
   */
  sap.ui2.srvc.Map.prototype.remove = function (sKey) {
    delete this.entries[sKey];
  };

  /**
   * Returns this map's string representation.
   *
   * @returns {string}
   *   this map's string representation
   * @since 1.5.0
   */
  sap.ui2.srvc.Map.prototype.toString = function () {
    var aResult = ['sap.ui2.srvc.Map('];
    aResult.push(JSON.stringify(this.entries));
    aResult.push(')');
    return aResult.join('');
  };


  // initialize the cache for GET
  sap.ui2.srvc.get.clearCache();
}());
jQuery.sap.declare('sap.ushell_abap.library-all');
jQuery.sap.declare('sap.ui.Device'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.allcatalogs'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.bag'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.catalog'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.chip'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.chipdefinition'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.chipinstance'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.contracts.types'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.es5'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.factory'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.page'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui2.srvc.utils'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.ODataService') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview A facade to any OData service, providing CSRF token handling and a default
 * error handler.
 */

(function () {
  "use strict";
  /*global jQuery, sap */
  jQuery.sap.declare("sap.ui2.srvc.ODataService");

  var fnRequire;

  // Note: Only the section between @begin and @end is included in pbs-template.js.
  // In pbs-template fnRequire is differently initialized (in case UI5 is not available)!
  // Thus this variable is used in the coding below and not directly jQuery.sap.require.
  // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
  fnRequire = function () {
    jQuery.sap.require.apply(this, arguments);
  };

  function nop() {/* null object pattern */}

 /// @begin
  var mCsrfTokens;

  if (!sap.ui2.srvc.Map) {
    fnRequire("sap.ui2.srvc.utils");
  }
  mCsrfTokens = new sap.ui2.srvc.Map();
  // "public class" ************************************************************

  /**
   * Constructs a facade to any OData service, providing token handling for SAP NetWeaver Gateway's
   * token-based CSRF protection mechanism. See
   * <a href="http://help.sap.com/saphelp_gateway20sp07/helpdata/en/e6/cae27d5e8d4996add4067280c8714e/content.htm?frameset=/en/04/58f03908ce451aa734674e17a43775/frameset.htm&current_toc=/en/57/a41787789c4eca867d9a09696fc42c/plain.htm&node_id=203">
   * Cross-Site Request Forgery Protection</a>.
   *
   * @param {sap.ui2.srvc.ODataWrapper} oODataWrapper
   *   OData wrapper instance this service facade delegates to
   * @param {function (string, [object])} [fnDefaultFailure]
   *   error handler taking an error message and, since version 1.28.6, an
   *   optional object containing the complete error information as delivered
   *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
   *   for more details.
   *
   * @class
   * @borrows sap.ui2.srvc.ODataWrapper#submitBatchQueue as this.submitBatchQueue
   * @public
   * @since 1.19.0
   */
  sap.ui2.srvc.ODataService = function (oODataWrapper, fnDefaultFailure) {
    var sBaseUrl;

    // BEWARE: constructor code below!

    // "private" methods -------------------------------------------------------

    // "public" methods --------------------------------------------------------

    /**
     * Returns the current value of the CSRF token. It is initially empty and determined
     * automatically by <code>sap.ui2.srvc.ODataWrapper</code> on successful read requests.
     *
     * @returns {string}
     *   the current value of the CSRF token
     * @public
     * @since 1.7.0
     * @see #refreshCsrfToken
     * @see #setCsrfToken
     */
    this.getCsrfToken = function () {
      if (mCsrfTokens.get(sBaseUrl) && mCsrfTokens.get(sBaseUrl).token) {
        return mCsrfTokens.get(sBaseUrl).token;
      }
      return "";
    };

    /**
     * Returns the default error handler for this facade.
     *
     * @returns {function (string, [object])}
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.2.0
     */
    this.getDefaultErrorHandler = function () {
      return fnDefaultFailure;
    };

    /**
     * Opens a new queue where all requests are parked until a call to {@link #submitBatchQueue}.
     *
     * @public
     * @since 1.19.0
     */
    this.openBatchQueue = function () {
      oODataWrapper.openBatchQueue();
    };

    /**
     * Refreshes the CSRF token of this OData service by reading the service document again, which
     * is never cached. Called automatically by <code>sap.ui2.srvc.ODataWrapper</code> on a write
     * operation if the CSRF token is missing or expired.
     *
     * @param {function ()} fnSuccess
     *   a callback function that is executed if the request succeeds
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @public
     * @since 1.17.0
     * @see #getCsrfToken
     * @see #setCsrfToken
     * @see sap.ui2.srvc.ODataWrapper#read
     */
    this.refreshCsrfToken = function (fnSuccess, fnFailure) {
      var oTokenData;

      if (typeof fnSuccess !== "function") {
        throw new sap.ui2.srvc.Error("Success callback is not a function",
            "sap.ui2.srvc.ODataService");
      }
      fnFailure = fnFailure || fnDefaultFailure;

      oTokenData = mCsrfTokens.get(sBaseUrl);

      if (!oTokenData.fetchingInProgress) {
        // fetch token
        oTokenData.token = undefined;
        oTokenData.fetchingInProgress = true;

        // GET service document which is never cached
        oODataWrapper.read("", function () {
          // wrapper.read does a setCsrfToken call
          if (!mCsrfTokens.get(sBaseUrl) || !mCsrfTokens.get(sBaseUrl).token) {

            fnFailure("No CSRF token delivered");

            oTokenData.errorHandlers.forEach(function (fnHandler) {
              fnHandler("No CSRF token delivered");
            });
          } else {
            // drop excess parameters; Note: try/catch already done by read()!
            fnSuccess();
            oTokenData.successHandlers.forEach(function (fnHandler) {
              fnHandler();
            });
          }
          oTokenData.successHandlers = [];
          oTokenData.errorHandlers = [];
          // TODO clarify if should be done in setCsrfToken (called by wrapper.read) (interference
          // with GET?)
          oTokenData.fetchingInProgress = false;
        }, fnFailure);
      } else {
        // token fetching already in progress by other instance, only register handlers
        oTokenData.successHandlers.push(fnSuccess);
        oTokenData.errorHandlers.push(fnFailure);
      }
    };

    /**
     * Determines the new value of the CSRF token. Use this function to synchronize the CSRF token
     * across multiple instances of this facade in case their first read requests run in parallel.
     * Retrieve the token from a service in the success handler of its read request and distribute
     * it to all other services; do so for each service. Note that the last success handler of all
     * first read requests run in parallel determines the token to be used for modifications.
     * <p>
     * If debugging HTTP traffic, watch out for <code>x-csrf-token</code> headers and
     * <code>sap-XSRF_*</code> cookies.
     *
     * @param {string} [sNewCsrfToken=""]
     *   the new value of the CSRF token, which may be <code>null</code> or <code>undefined</code>
     * @public
     * @since 1.7.0
     * @see #getCsrfToken
     * @see #refreshCsrfToken
     */
    this.setCsrfToken = function (sNewCsrfToken) {
      var oTokenData;
      // sNewCsrfToken must be a string OR undefined
      if (sNewCsrfToken && typeof sNewCsrfToken !== "string") {
        throw new sap.ui2.srvc.Error("Invalid CSRF token: " + sNewCsrfToken,
          "sap.ui2.srvc.ODataService");
      }
      oTokenData = mCsrfTokens.get(sBaseUrl);
      oTokenData.token = sNewCsrfToken;
    };

    /**
     * Sets the default error handler for this facade.
     *
     * @param {function (string, [object])} fnNewDefaultFailure
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @public
     * @since 1.2.0
     */
    this.setDefaultErrorHandler = function (fnNewDefaultFailure) {
      if (fnNewDefaultFailure && typeof fnNewDefaultFailure !== "function") {
        throw new sap.ui2.srvc.Error("Error callback is not a function",
          "sap.ui2.srvc.ODataService");
      }
      fnDefaultFailure = fnNewDefaultFailure || nop;
    };

    // cf. "@borrows sap.ui2.srvc.ODataWrapper#submitBatchQueue as this.submitBatchQueue"
    this.submitBatchQueue = function () {
      oODataWrapper.submitBatchQueue.apply(oODataWrapper, arguments);
    };

    /**
     * Returns this facade's string representation.
     *
     * @param {boolean} [bVerbose=false]
     *   flag whether to show all properties
     * @returns {string}
     *   this facade's string representation
     * @since 1.2.0
     */
    this.toString = function (bVerbose) {
      var aResult = ['sap.ui2.srvc.ODataService({'];
      if (bVerbose) {
        aResult.push('csrfToken:"', this.getCsrfToken(), '"');
        aResult.push(',oODataWrapper:', oODataWrapper.toString(true));
      }
      aResult.push('})');
      return aResult.join('');
    };

    // constructor code -------------------------------------------------------
    if (!sap.ui2.srvc.Error) { // not needed anymore as error is part of utils
      fnRequire("sap.ui2.srvc.error");
    }
    if (!oODataWrapper) {
      throw new sap.ui2.srvc.Error("Missing OData wrapper", "sap.ui2.srvc.ODataService");
    }

    sBaseUrl = oODataWrapper.getBaseUrl();
    if (!mCsrfTokens.get(sBaseUrl)) {
      mCsrfTokens.put(sBaseUrl, {
        //token: undefined,
        fetchingInProgress: false,
        successHandlers: [],
        errorHandlers: []
      });
    }

    this.setDefaultErrorHandler(fnDefaultFailure);
  };

/// @end

  /**
   * for test purposes only
   */
  sap.ui2.srvc.ODataService.resetSharedCsrfTokens = function () {
    mCsrfTokens = new sap.ui2.srvc.Map();
  };
}());

}; // end of sap/ui2/srvc/ODataService.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.ODataWrapper') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview A wrapper around <code>OData</code>, providing CSRF token handling, caching and
 * generic batch support.
 */

(function () {
  "use strict";
  /*global jQuery, OData, sap, window */
  jQuery.sap.declare("sap.ui2.srvc.ODataWrapper");

  // Note: Only the section between @begin and @end is included in pbs-template.js.
  // In pbs-template fnRequire is differently initialized (in case UI5 is not available)!
  // Thus this variable is used in the coding below and not directly jQuery.sap.require.
  // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
  var fnRequire = function () {
    jQuery.sap.require.apply(this, arguments);
  };
  function nop() {/* null object pattern */}

  sap.ui2.srvc.testPublishAt = sap.ui2.srvc.testPublishAt || function () {
    // intentionally left blank
  };

/// @begin
  // if OData is missing, automatically require SAPUI5's datajs implementation
  if (typeof OData !== "object") {
    fnRequire("sap.ui.thirdparty.datajs");
  }

  /**
   * Reject the given <code>jQuery.Deferred</code> object(s) (array or single one) with the
   * given error response.
   *
   * @param {jQuery.Deferred|jQuery.Deferred[]} vDeferred
   *   deferred or array of deferreds to be rejected
   * @param {object} oResponse
   *   parameter of (each) reject call
   */
  function reject(vDeferred, oResponse) {
    if (sap.ui2.srvc.isArray(vDeferred)) {
      // a failed change set: reject each single jQuery.Deferred in the same way
      vDeferred.forEach(function (oDeferred) {
        oDeferred.reject(oResponse);
      });
    } else {
      // a failed GET request
      vDeferred.reject(oResponse);
    }
  }

  // "public class" ************************************************************

  /**
   * Constructs a wrapper around <code>OData</code>, providing CSRF token handling, caching and
   * generic batch support. The sap-statistics header is automatically added to all requests if
   * the URL query parameter <code>sap-statistics=true</code> is set (see
   * <a href="http://help.sap.com/saphelp_nw74/helpdata/de/40/93b81292194d6a926e105c10d5048d/content.htm">
   * SAP Performance Statistics</a>).
   * If <code>OData</code> is missing, "sap.ui.thirdparty.datajs" is required automatically.
   * <p>
   * The preferred way to call the constructor is from a "sub-class" of
   * {@link sap.ui2.srvc.ODataService}:
   * <pre>
   *   function Service() {
   *     var oWrapper = new sap.ui2.srvc.ODataWrapper(oSettings, this);
   *     sap.ui2.srvc.ODataService.call(this, oWrapper, fnDefaultFailure);
   *   }
   *   var myService = new Service();
   * </pre>
   * This provides public inheritance of <code>sap.ui2.srvc.ODataService</code> methods and
   * private inheritance of <code>sap.ui2.srvc.ODataWrapper</code> methods. In case you are not
   * providing a public "sub-class" of <code>sap.ui2.srvc.ODataService</code> but only want to
   * use methods from <code>sap.ui2.srvc.ODataWrapper</code>,
   * {@link sap.ui2.srvc.createODataWrapper} is the preferred way to construct an instance.
   *
   * @param {object} oSettings
   *   An object containing various properties:
   *   <pre>
   *     {
   *       baseUrl: "/OData/OData.svc", // Mandatory base URL of the OData service
   *       supportsChangeSets: false,   // Type: boolean, Default: false
   *                                    // Whether the OData service supports change sets with <b>multiple</b>
   *                                    // operations bundled into a single logical unit of work. Otherwise
   *                                    // each modifying operation is isolated in a change set of its own.
   *       "sap-language": "EN",        // header which is set for all requests sent
   *       "sap-client": 120,           // header which is set for all requests sent
   *       "sap-statistics": true       // header which is set for all requests sent; in order to receive
   *                                    // some performance statistics
   *     }
   *   </pre>
   * @param {sap.ui2.srvc.ODataService} oODataService
   *   facade to any OData service, keeping track of CSRF token and default error handler
   *   (see {@link #getODataService})
   *
   * @class
   * @public
   * @since 1.19.0
   */
  // OLD API: function (sBaseUrl, oODataService, bSupportsChangeSets)
  sap.ui2.srvc.ODataWrapper = function (oSettings, oODataService) {
    var S_STICKY_SESSION_HEADER = "saplb", // header to check during sticky session
      aBatchQueue, // corresponds to data.__batchRequests
      bChangeSetOpen, // whether a change set is currently open at the end of our batch queue
      aDeferredQueue, // jQuery.Deferred() objects corresponding to each request
      bRefreshingCsrfToken, // whether CSRF token is currently being refreshed automatically(!)
      that = this,
      sBaseUrl,
      bSupportsChangeSets;

    // BEWARE: constructor code below!

    // "private" methods -------------------------------------------------------

    /**
     * Converts old api calls of the ODataWrapper constructor to the current one.
     * @param {object} oArgs
     *   An arguments object containing the parameters of the constructor function. See Constructor for details.
     * @returns {object}
     *   Settings for ODataWrapper in an object instead of arguments
     * @private
     */
    function handleOldConstructorApi(oArgs) {
      var oSettings = {};

      oSettings.baseUrl = oArgs[0];
      // This is not a mandatory parameter and might be undefined
      if (typeof oArgs[2] === 'boolean') {
        oSettings.supportsChangeSets = oArgs[2];
      }

      return oSettings;
    }

    /* eslint-disable no-unused-vars */
    /**
     * Getter mainly used for testing.
     *
     * @returns {object}
     */
    sap.ui2.srvc.testPublishAt(that);
    function getBatchQueue() {
        return aBatchQueue;
    }
    /* eslint-enable no-unused-vars */

    /**
     * Iterates over the given headers map and returns the first value for the requested key (case
     * insensitive). If no such key is found, <code>undefined</code> is returned.
     *
     * @param {string} sKey
     *   the requested key
     * @param {object} [mHeaders={}]
     *   an object treated as a <code>map&lt;string, object&gt;</code>
     * @returns {string}
     *   the header value or <code>undefined</code> if the header was not found
     */
    sap.ui2.srvc.testPublishAt(that);
    function headerValue(sKey, mHeaders) {
      var sCurrentKey;
      sKey = sKey.toLowerCase();
      for (sCurrentKey in mHeaders) {
        if (Object.prototype.hasOwnProperty.call(mHeaders, sCurrentKey)
            && sCurrentKey.toLowerCase() === sKey) {
          return mHeaders[sCurrentKey];
        }
      }
      return undefined;
    }

    /**
     * Gets an object supposed to be the headers object used for OData requests.
     * Adds headers set as static properties of sap.ui2.srvc.ODataWrapper or as part of Constructor settings.
     * The following headers may be added:
     *  - sap-language
     *  - sap-statistics
     *  - sap-client
     *
     * @param {object} [oHeaders={}]
     *   optional object supposed to be the headers object used for OData requests
     * @returns {object}
     *   returns oHeader (if not given, a new object is created) additional headers may be added as
     *   properties to the object.
     */
    function addGlobalSapHeaders(oHeaders) {
      var sSapLanguage = oSettings["sap-language"] || sap.ui2.srvc.ODataWrapper["sap-language"],
        sSapStatistics = oSettings["sap-statistics"] || sap.ui2.srvc.ODataWrapper["sap-statistics"],
        sSapClient = oSettings["sap-client"] || sap.ui2.srvc.ODataWrapper["sap-client"];

      oHeaders = oHeaders || {};
      if (sSapLanguage) {
        oHeaders["sap-language"] = sSapLanguage;
      }
      if (sSapStatistics || (sSapStatistics === "false")) {
        // If sSapStatistics is set, all requests done via ODataWrapper, will contain the
        // sap-statistics header. See
        // http://help.sap.com/saphelp_nw74/helpdata/de/40/93b81292194d6a926e105c10d5048d/content.htm
        oHeaders["sap-statistics"] = "" + sSapStatistics;
      }
      if (sSapClient) {
          oHeaders["sap-client"] = sSapClient;
      }
      return oHeaders;
    }

    /**
     * Adds previously detected sticky session headers to the given object
     * (which is supposed to be the headers object used for OData requests).
     *
     * @param {object} [oHeaders={}]
     *   optional object supposed to be the headers object used for OData requests
     * @returns {object}
     *   returns oHeader (if not given, a new object is created) additional
     *   headers may be added as properties to the object.
     */
    function addStickySessionHeader(oHeaders) {
      oHeaders = oHeaders || {};

      var oStickySessionConfiguration =
        sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration[sBaseUrl];

      /*
       * NOTE: not assuming oStickySessionConfiguration is defined (see comment
       * on assigment of sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration)
       * down in this file.
       */
      if (typeof oStickySessionConfiguration === "undefined") {
        return oHeaders;
      }

      if (oStickySessionConfiguration && oStickySessionConfiguration.enabled &&
        typeof oStickySessionConfiguration.value !== "undefined") {

        oHeaders[S_STICKY_SESSION_HEADER] = oStickySessionConfiguration.value;
      }

      return oHeaders;
    }

    /**
     * Detects sticky session based on the given response headers and, in case
     * of success, updates the static
     * sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration with the sticky
     * session value found in the header.
     *
     * @param {object} oResponseHeaders
     *   the response headers
     */
    sap.ui2.srvc.testPublishAt(that);
    function detectStickySession(oResponseHeaders) {
      var sHeaderValue,
        oStickySessionConfiguration =
        sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration[sBaseUrl];

      if (!oStickySessionConfiguration || !oStickySessionConfiguration.enabled) {
        return;
      }

      // add sticky session header value if found
      sHeaderValue = headerValue(S_STICKY_SESSION_HEADER, oResponseHeaders);
      if (typeof sHeaderValue === "undefined") {
        return;
      }

      if (oStickySessionConfiguration.value !== sHeaderValue) { // take the last value from server
        oStickySessionConfiguration.value = sHeaderValue;
      }
    }

    /**
     * Iterates over the given headers map and returns the first value for the well-known
     * "X-CSRF-Token" key (case insensitive). If no such key is found, <code>""</code> is
     * returned.
     *
     * @param {object} [mHeaders={}]
     *   an object treated as a <code>map&lt;string, object&gt;</code>
     * @returns {string}
     */
    sap.ui2.srvc.testPublishAt(that);
    function csrfTokenValue(mHeaders) {
      return headerValue("x-csrf-token", mHeaders) || "";
    }

    /**
     * Wrapper around
     * <a href="http://datajs.codeplex.com/wikipage?title=datajs%20OData%20API#OData.request">
     * <code>OData.request</code></a> which is able to automatically fetch a CSRF token if
     * required.
     *
     * @param {string} sRequestUrl
     *   a string containing the <b>absolute</b> URL
     * @param {string} sMethod
     *   the HTTP method to use, e.g. "POST"
     * @param {object} oPayload
     *   payload of the request (in intermediate format)
     * @param {function(object)} [fnSuccess]
     *   callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Defaults to the OData service facade's default error handler
     * @param {object} [oHandler]
     *   (OData/datajs) handler for the response data
     * @param {boolean} [bIsRepeatedRequest]
     *   This function recursively calls itself to re-execute it in case the CSRF token was invalid and has been fetched.
     *   To prevent endless loops when the server returns an invalid token, this flag is used.
     */
    sap.ui2.srvc.testPublishAt(that);
    function doRequest(sRequestUrl, sMethod, oPayload, fnSuccess, fnFailure, oHandler, bIsRepeatedRequest) {
      var oHeaders;
      fnSuccess = fnSuccess || nop;
      fnFailure = fnFailure || oODataService.getDefaultErrorHandler();
      that.check(fnSuccess, fnFailure);
      oHeaders = {
        'Accept': "application/json",
        'Accept-Language': (sap.ui && sap.ui.getCore().getConfiguration().getLanguage()) || "",
        'X-CSRF-Token': oODataService.getCsrfToken()
      };

      addGlobalSapHeaders(oHeaders);
      addStickySessionHeader(oHeaders);

      OData.request({
        requestUri: sRequestUrl,
        method: sMethod,
        data: oPayload,
        headers : oHeaders
      },
        function (oData, oResponse) {
          detectStickySession((oResponse || {}).headers);
          jQuery.sap.log.debug("Received OData response for " + sMethod + ' "' + sRequestUrl + '"',
            null,
            "sap.ui2.srvc.ODataWrapper");
          // Note: drop excess parameters; try/catch
          sap.ui2.srvc.call(fnSuccess.bind(null, oData), fnFailure);
        },
        function (oError) {
          // wrappers for success & failure handlers to reset flag
          function failure() {
            fnFailure.apply(null, arguments);
          }
          function success() {
            fnSuccess.apply(null, arguments);
          }

          if (!bIsRepeatedRequest
              && oError.response.statusCode === 403
              && csrfTokenValue(oError.response.headers).toLowerCase() === "required") {
            // refresh CSRF token and repeat original request
            jQuery.sap.log.debug("CSRF token required for " + sMethod + ' "' + sRequestUrl
              + '", refreshing it', JSON.stringify(oError.response),
              "sap.ui2.srvc.ODataWrapper");

            oODataService.refreshCsrfToken(
              doRequest.bind(that, sRequestUrl, sMethod, oPayload, success, failure, oHandler, /*bIsRepeatedRequest*/ true),
              failure
            );
          } else {
            that.onError(sMethod, sRequestUrl, fnFailure, /*oDeferred*/null, oError);
          }
        },
        oHandler);
      jQuery.sap.log.debug("Sent OData request for " + sMethod + ' "' + sRequestUrl + '"', null,
        "sap.ui2.srvc.ODataWrapper");
    }

    /**
     * Transforms the given absolute URL into a relative URL w.r.t. this OData wrapper's base URL,
     * removing protocol, host, port, and base URL, but preserving query parameters and a fragment
     * part.
     *
     * @param {string} sRequestUrl
     *   a string containing an <b>absolute</b> URL, e.g.
     *   "http://acme.corp/OData/OData.svc/Products(1)?$foo=bar#abc"
     * @returns {string}
     *   a string containing the <b>relative</b> URL w.r.t. this OData wrapper's base URL, e.g.
     *   "Products(1)?$foo=bar#abc"
     */
    sap.ui2.srvc.testPublishAt(that);
    function toRelativeUrl(sRequestUrl) {
      var i = sRequestUrl.indexOf(sBaseUrl);
      if (i < 0) {
        throw new sap.ui2.srvc.Error('Not relative to base URL "' + sBaseUrl + '": ' + sRequestUrl,
          "sap.ui2.srvc.ODataWrapper");
      }
      return sRequestUrl.slice(i + sBaseUrl.length);
    }

    /**
     * Transforms the given relative URL into an absolute URL w.r.t. this OData wrapper's base URL,
     * making sure there is exactly one slash in between.
     *
     * @param {string} sRelativeUrl
     *   a string containing the <b>relative</b> URL w.r.t. this OData wrapper's base URL, e.g.
     *   "Products(1)"
     * @returns {string}
     *   a string containing the <b>absolute</b> URL, e.g. "/OData/OData.svc/Products(1)"
     */
    sap.ui2.srvc.testPublishAt(that);
    function toRequestUrl(sRelativeUrl) {
      if (/^\//.test(sRelativeUrl)) {
        throw new sap.ui2.srvc.Error("Not a relative URL: " + sRelativeUrl,
          "sap.ui2.srvc.ODataWrapper");
      }
      return sBaseUrl + sRelativeUrl;
    }

    /**
     * Wrapper around
     * <a href="http://datajs.codeplex.com/wikipage?title=datajs%20OData%20API#OData.read">
     * <code>OData.read</code></a> which supports queuing up for "$batch" requests.
     *
     * @param {string} sRelativeUrl
     *   a string containing the <b>relative</b> URL w.r.t. this OData wrapper's base URL, e.g.
     *   "Products(1)"
     * @param {function(object,object)} fnRawSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     *   and the response object
     * @param {function (object)} fnRawFailure
     *   a callback function that is executed if the request fails, taking an error object
     */
    sap.ui2.srvc.testPublishAt(that);
    function readOrBatch(sRelativeUrl, fnRawSuccess, fnRawFailure) {
      var oDeferred,
        sRequestUrl = toRequestUrl(sRelativeUrl),
        oHeaders = addStickySessionHeader(addGlobalSapHeaders()); // may return an empty object

      if (aBatchQueue) {
        jQuery.sap.log.debug('Queued OData request for GET "' + sRelativeUrl + '"', null,
          "sap.ui2.srvc.ODataWrapper");
        aBatchQueue.push({
          method: "GET",
          requestUri: sRelativeUrl,
          headers: oHeaders
        });
        oDeferred = (new jQuery.Deferred()).done(fnRawSuccess).fail(fnRawFailure);
        aDeferredQueue.push(oDeferred);
        bChangeSetOpen = false;
        return;
      }

      // add specifc headers for read request
      oHeaders["Accept"] = "application/json";
      oHeaders["Accept-Language"] = (sap.ui && sap.ui.getCore().getConfiguration().getLanguage()) || "";
      // always fetch a new token with GET requests;
      // this avoids using old tokens from responses served from browser cache
      // see internal BCP incident 1570753380
      oHeaders["X-CSRF-Token"] = "Fetch";

      OData.read({
        requestUri: sRequestUrl,
        headers: oHeaders
      }, fnRawSuccess, fnRawFailure);
      jQuery.sap.log.debug('Sent OData request for GET "' + sRequestUrl + '"', null,
        "sap.ui2.srvc.ODataWrapper");
    }

    /**
     * Wrapper around {@link #doRequest} which supports queuing up for "$batch" requests.
     *
     * @param {string} sRelativeUrl
     *   a string containing the <b>relative</b> URL w.r.t. this OData wrapper's base URL, e.g.
     *   "Products"
     * @param {string} sMethod
     *   the HTTP method to use, either "POST", "PUT" or "DELETE" (retrieve requests using "GET"
     *   must be made via {@link #readOrBatch} instead!)
     * @param {object} oPayload
     *   payload of the request (in intermediate format)
     * @param {function(object)} [fnSuccess]
     *   callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Defaults to the OData service facade's default error handler
     */
    sap.ui2.srvc.testPublishAt(that);
    function requestOrBatch(sRelativeUrl, sMethod, oPayload, fnSuccess, fnFailure) {
      /*jslint nomen:true */
      var oDeferred,
        oChangeRequest = {
          data: oPayload,
          method: sMethod,
          requestUri: sRelativeUrl,
          headers: addStickySessionHeader(addGlobalSapHeaders()) // may return an empty object
        },
        sRequestUrl = toRequestUrl(sRelativeUrl);

      if (aBatchQueue) {
        fnSuccess = fnSuccess || nop;
        fnFailure = fnFailure || oODataService.getDefaultErrorHandler();
        that.check(fnSuccess, fnFailure);
        jQuery.sap.log.debug("Queued OData request for " + sMethod + ' "' + sRelativeUrl + '"',
          null, "sap.ui2.srvc.ODataWrapper");
        if (!bChangeSetOpen) {
          aBatchQueue.push({__changeRequests: []});
          aDeferredQueue.push([]);
          bChangeSetOpen = bSupportsChangeSets;
        }
        aBatchQueue[aBatchQueue.length - 1].__changeRequests.push(oChangeRequest);
        oDeferred = (new jQuery.Deferred())
          .done(function (oData, oResponse) {
            jQuery.sap.log.debug("Received OData response for "
              + sMethod + ' "' + sRequestUrl + '"', null, "sap.ui2.srvc.ODataWrapper");
            // Note: drop excess parameters; try/catch
            sap.ui2.srvc.call(fnSuccess.bind(null, oData), fnFailure);
          })
          .fail(that.onError.bind(that, sMethod, sRequestUrl, fnFailure, /*oDeferred*/null));
        aDeferredQueue[aDeferredQueue.length - 1].push(oDeferred);
        return;
      }

      doRequest(sRequestUrl, sMethod, oPayload, fnSuccess, fnFailure);
    }

    // "public" methods --------------------------------------------------------

    /**
     * Checks whether session stickyness is configured and enabled
     *
     * @returns {boolean}
     *   whether the sticky session header is configured and active
     *
     * @public
     *
     * @since 1.30.0
     */
    this.isStickySessionEnabled = function() {
      return (sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration[sBaseUrl] || {}).enabled || false;
    };

    /**
     * <p>
     * Configures and activates session stickiness.
     * </p>
     * <p>
     * Session stickiness allows the client to execute OData requests to the
     * same application server. This is achieved by copying a certain sticky
     * session header
     * (found in the OData response from the server) to the OData request made
     * by ODataWrapper, indicating the load balancer that requests should be
     * made against a certain application server. Once detected, the sticky
     * header is automatically shared by all instances of
     * <code>sap.ui2.srvc.ODataWrapper</code> connected to exactly the same
     * base URL.
     * </p>
     * <p>
     * NOTE: The sticky session header sent from the server always overrides
     * the last sticky session header requested. This is to avoid that the
     * feature is disabled if the load balancer returns another value for the
     * sticky session header for some reason (e.g. the application server goes
     * offline).
     * </p>
     * <p>
     * NOTE: In line with {@link sap.ui2.srvc.PageBuildingService}, session
     * stickiness is only supported in scopes different from PERS.
     * </p>
     * <p>
     * Currently, session stickiness is affected by the following limitations:
     * <ul>
     * <li>If the client caches the response headers for certain requests, these
     * cached headers will be used instead of the headers sent from the server
     * (as in if cache was disabled).</li>
     * <li>If initial requests to different URLs that share the same base URL are
     * performed asynchronously (e.g. through multiple instances of
     * ODataWrapper), sticky session may be disabled for a part or all of these
     * initial requests. This is because the requests are made before the first
     * response with a sticky session header is obtained.</li>
     * <li>This mechanism only guarantees that requests are forwarded to the
     * specified application server. For example, if the application server in
     * turn contacts further load balanced servers, the session may not be
     * maintain and load balancing may still occur.</li>
     * </ul>
     * </p>
     * @public
     *
     * @since 1.30.0
     */
    this.enableStickySession = function() {
      sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration[sBaseUrl].enabled = true;
    };

    /**
     * Checks that the given callback functions are really functions. This check
     * is useful to "fail fast" because these callbacks are not called immediately.
     *
     * @param {function} fnSuccess
     *   success callback
     * @param {function} fnFailure
     *   error callback
     *
     * @public
     * @since 1.19.0
     */
    this.check = function (fnSuccess, fnFailure) {
      if (!fnSuccess) {
        throw new sap.ui2.srvc.Error("Missing success callback",
          "sap.ui2.srvc.ODataWrapper");
      }
      if (typeof fnSuccess !== "function") {
        throw new sap.ui2.srvc.Error("Success callback is not a function",
          "sap.ui2.srvc.ODataWrapper");
      }
      if (!fnFailure) {
        throw new sap.ui2.srvc.Error("Missing error callback",
          "sap.ui2.srvc.ODataWrapper");
      }
      if (typeof fnFailure !== "function") {
        throw new sap.ui2.srvc.Error("Error callback is not a function",
          "sap.ui2.srvc.ODataWrapper");
      }
    };

    /**
     * Wrapper around <code>OData.request</code> which is able to automatically fetch a CSRF token
     * if required. It uses POST as a method.
     *
     * @param {string} sRelativeUrl
     *   a string containing the <b>relative</b> URL w.r.t. this OData wrapper's base URL, e.g.
     *   "Products"
     * @param {object} oPayload
     *   payload of the request (in intermediate format)
     * @param {function(object)} [fnSuccess]
     *   callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Defaults to the OData service facade's default error handler
     *
     * @public
     * @since 1.19.0
     */
    this.create = function (sRelativeUrl, oPayload, fnSuccess, fnFailure) {
      requestOrBatch(sRelativeUrl, "POST", oPayload, fnSuccess, fnFailure);
    };

    /**
     * Wrapper around <code>OData.request</code> which is able to automatically fetch a CSRF token
     * if required. It uses DELETE as a method.
     *
     * @param {string|object} vEntity
     *   either a string containing the <b>relative</b> URL w.r.t. this OData wrapper's base URL,
     *   e.g. "Products(1)", or the datajs representation of the entity
     * @param {function()} [fnSuccess]
     *   callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Defaults to the OData service facade's default error handler
     *
     * @public
     * @since 1.19.0
     */
    this.del = function (vEntity, fnSuccess, fnFailure) {
      /*jslint nomen:true */
      var sRelativeUrl = vEntity;

      if (typeof sRelativeUrl !== "string") {
        sRelativeUrl = toRelativeUrl(vEntity.__metadata.uri);
      }

      requestOrBatch(sRelativeUrl, "DELETE", null, function (oData) {
        if (fnSuccess) {
          // Note: try/catch already done by doRequest()
          fnSuccess(); // drop excess parameters (oData === undefined)
        }
      }, fnFailure);
    };

    /**
     * Returns the wrapper's base URL.
     *
     * @returns {string}
     *   base URL of the OData service, e.g. "/OData/OData.svc/"
     *
     * @public
     * @since 1.19.0
    */
    this.getBaseUrl = function () {
      return sBaseUrl;
    };

    /**
     * Returns this wrapper's facade to an OData service (which was passed to the constructor
     * {@link sap.ui2.srvc.ODataWrapper}).
     *
     * @returns {sap.ui2.srvc.ODataService}
     *   this wrapper's facade to an OData service.
     *
     * @public
     * @since 1.19.1
     */
    this.getODataService = function () {
      return oODataService;
    };

    /**
     * Wraps the given generic OData failure handler. It processes the raw
     * OData error response object, calls the given failure handler with an
     * error message and, since version 1.28.6, an object containing additional
     * technical details.  If a Deferred object is given, it is rejected with
     * the same arguments passed to the failure handler call.
     *
     * This method logs technical information to the console if this is
     * available at the time the error occurs.
     *
     * @param {string} sMethod
     *   the HTTP method used in the OData request, e.g. "POST"
     * @param {string} sRequestUrl
     *   the <b>absolute</b> URL the request is sent to
     * @param {function (string, [object])} fnFailure
     *   the wrapped failure handler that will be called synchronously. The
     *   first parameter is a human-readable error message containing technical
     *   information, including sMethod and sRequestUrl; the second parameter
     *   is an <b>optional</b> object containing the complete error information
     *   returned in the <code>error</code> value contained in the body of the
     *   OData error response object, plus the HTTP response status code.
     *
     *   For example, the returned error object has the following structure:
     *   <pre>
     *   {
     *     httpStatus: 404,
     *     // ... other keys and values from oError.response.body.error
     *   }
     *   </pre>
     *
     *   Please refer to the documentation of the specific OData service used
     *   for details about keys and values returned in
     *   <code>oError.response.body.error</code>.<br />
     *
     *   <b>IMPORTANT:</b> the second parameter may be undefined if the error
     *   cannot be parsed or is not returned in the OData error response.<br />
     *
     *   <b>NOTE:</b> the second parameter is returned since version 1.28.6.
     * @param {jQuery.Deferred} [oDeferred]
     *   a <code>jQuery.Deferred</code> object that will be rejected with the
     *   same arguments fnFailure is called
     * @param {object} oError
     *   error object provided by datajs, should contain the response
     *
     * @public
     * @since 1.19.0
     */
    this.onError = function (sMethod, sRequestUrl, fnFailure, oDeferred, oError) {
      var oParsedErrorInformation,
        sMessage = "Error ";

      if (oError.response && oError.response.statusCode) {
        sMessage += "(" + oError.response.statusCode + ", " + oError.response.statusText + ") ";
      }
      sMessage += "in OData response for " + sMethod + ' "' + sRequestUrl + '": ' + oError.message;

      if (oError.response && oError.response.body) {

        try {
          oParsedErrorInformation = JSON.parse(oError.response.body).error;

          if (oParsedErrorInformation) {

            if (oParsedErrorInformation.hasOwnProperty("message") &&
                oParsedErrorInformation.message.hasOwnProperty("value")) {
              sMessage += "\nDetails: " + oParsedErrorInformation.message.value;
            }

            // NOTE: there was an agreement to not alter the data in
            // oError.response.body.error (except from adding the status if
            // it's not there already)
            if (oError.response.statusCode && !oParsedErrorInformation.httpStatus) {
              oParsedErrorInformation.httpStatus = oError.response.statusCode;
            }
          }
        } catch (ex) {
          // do not rely on subtleties of error response, treat error details as optional
        }
      }

      jQuery.sap.log.error(sMessage, JSON.stringify(oError.response),
        "sap.ui2.srvc.ODataWrapper");

      if (oDeferred) {
        oDeferred.reject(sMessage, oParsedErrorInformation);
      }
      fnFailure(sMessage, oParsedErrorInformation);
    };

    /**
     * Opens a new queue where all requests are parked until a call to {@link #submitBatchQueue}.
     *
     * @public
     * @since 1.19.0
     *
     * @see #isBatchQueueOpen
     * @see #submitBatchQueue
     */
    this.openBatchQueue = function () {
      if (aBatchQueue) {
        throw new sap.ui2.srvc.Error("Batch queue already open", "sap.ui2.srvc.ODataWrapper");
      }

      aBatchQueue = [];
      aDeferredQueue = [];
      bChangeSetOpen = false;
    };

    /**
     * Checks whether the queue of requests is already open or not
     *
     * @returns {boolean}
     *   true if batchQueue is already open
     *
     * @public
     * @since 1.34.0
     *
     * @see #openBatchQueue
     * @see #submitBatchQueue
     */
    this.isBatchQueueOpen = function() {
        return !!aBatchQueue;
    };

    /**
     * Wrapper around
     * <a href="http://datajs.codeplex.com/wikipage?title=datajs%20OData%20API#OData.read">
     * <code>OData.read</code></a> which supports caching.
     *
     * @param {string} sRelativeUrl
     *   a string containing the <b>relative</b> URL w.r.t. this OData wrapper's base URL, e.g.
     *   "Products(1)"
     * @param {function(object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Defaults to the OData service facade's default error handler
     *   ({@link sap.ui2.srvc.ODataService#getDefaultErrorHandler})
     * @param {boolean} [bCache=false]
     *   whether the response is cached for further calls (since 1.11.0) in
     *   <code>OData.read.$cache</code>, a <code>sap.ui2.srvc.Map</code> from
     *   <code>sRequestUrl</code> to a <code>jQuery.Deferred</code> object created on demand;
     *   without this flag, the cache is neither written nor read!
     *
     * @public
     * @since 1.19.0
     */
    this.read = function (sRelativeUrl, fnSuccess, fnFailure, bCache) {
      var oDeferred,
        sRequestUrl = toRequestUrl(sRelativeUrl),
        sSapMessage;

      /*
       * Success handler for <code>OData.read</code>.
       */
      function success(oData, oResponse) {
        detectStickySession(oResponse.headers);
        oODataService.setCsrfToken(
          csrfTokenValue(oResponse.headers) || oODataService.getCsrfToken() // prefer a new token
        );
        jQuery.sap.log.debug('Received OData response for GET "' + sRequestUrl + '"', null,
          "sap.ui2.srvc.ODataWrapper");
        // The sap-message header is a Gateway feature used e.g. by the INTEROP service
        // It returns structured information (as XML). We don't evaluate it, we only log it.
        // Severity is also part of the structure, but we simply assume warning.
        sSapMessage = headerValue("sap-message", oResponse.headers);
        if (sSapMessage) {
          jQuery.sap.log.warning("SAP message for GET " + sRequestUrl, sSapMessage,
            "sap.ui2.srvc.ODataWrapper");
        }
        if (oDeferred) {
          // put arguments for fnSuccess into cache; clone oData first
          oDeferred.resolve(JSON.parse(JSON.stringify(oData)), oODataService.getCsrfToken());
        }
        // Note: drop excess parameters; try/catch
        sap.ui2.srvc.call(fnSuccess.bind(null, oData), fnFailure);
      }

      fnFailure = fnFailure || oODataService.getDefaultErrorHandler();
      this.check(fnSuccess, fnFailure);

      if (bCache) {
        OData.read.$cache = OData.read.$cache || new sap.ui2.srvc.Map();
        oDeferred = OData.read.$cache.get(sRequestUrl); // the promise is cached
        if (oDeferred) {
          jQuery.sap.log.debug('Using cached response for GET "' + sRequestUrl + '"', null,
            "sap.ui2.srvc.ODataWrapper");
          oDeferred.done(function (oData, sCachedCsrfToken) {
            // prefer our own token
            oODataService.setCsrfToken(oODataService.getCsrfToken() || sCachedCsrfToken);
            // clone cached oData before passing to success handler
            // Note: try/catch
            sap.ui2.srvc.call(fnSuccess.bind(null, JSON.parse(JSON.stringify(oData))), fnFailure);
          }).fail(fnFailure);
          return;
        }
        oDeferred = new jQuery.Deferred();
        OData.read.$cache.put(sRequestUrl, oDeferred.promise());
      }

      readOrBatch(
        sRelativeUrl,
        success,
        this.onError.bind(this, "GET", sRequestUrl, fnFailure, oDeferred)
      );
    };

    /**
     * Performs a batch request with the given payload.
     *
     * <b>Warning:</b> This bypasses the batch queue.
     *
     * @param {object} oPayload
     *   payload of the request (in intermediate format)
     * @param {function(object)} [fnSuccess]
     *   callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Defaults to the OData service facade's default error handler
     * @private
     */
    this.batch = function (oPayload, fnSuccess, fnFailure) {
      var sRequestUrl = toRequestUrl("$batch");

      doRequest(sRequestUrl, "POST", oPayload, fnSuccess, fnFailure, OData.batchHandler);
    };

    /**
     * Submits the current batch queue opened by {@link #openBatchQueue} by sending a single
     * "$batch" request to the OData service and deletes the current batch queue immediately.
     *
     * @param {function()} [fnBatchAccepted]
     *   A callback function that is executed if the batch request is accepted by the
     *   server, no matter whether individual operations fail. It will be called <b>after</b> all
     *   success or failure handlers of individual operations.
     * @param {function(string, [object])} [fnBatchItselfFailed]
     *   A callback function that is executed if the batch request itself
     *   fails, error handler taking an error message and, since version
     *   1.28.6, an optional object containing the complete error information
     *   as delivered by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.<br />
     *
     *   Defaults to the OData service facade's default
     *   error handler ({@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}).<br />
     *
     *   This is called <b>instead</b> of individual failure handlers in this case!
     *
     * @public
     * @since 1.19.0
     *
     * @see #openBatchQueue
     * @see #isBatchQueueOpen
     */
    this.submitBatchQueue = function (fnBatchAccepted, fnBatchItselfFailed) {
      /*jslint nomen:true */
      var aMyDeferredQueue = aDeferredQueue; // used in closure below

      /*
       * Success handler for $batch request.
       *
       * @param {object} oData
       */
      function onBatchSuccess(oData) {
        var iActual = oData.__batchResponses.length,
          iExpected = aMyDeferredQueue.length;

        if (iExpected !== iActual) {
          that.onError("POST", toRequestUrl("$batch"), fnBatchItselfFailed, /*oDeferred*/null, {
            message: "Protocol error! Expected " + iExpected
              + " responses, but received " + iActual
          });
          return;
        }

        oData.__batchResponses.forEach(function (oResponse, i) {
          // Note: "raw" success/failure signatures for all requests!
          var oDeferred = aMyDeferredQueue[i];
          if (oResponse.response) {
            // if it contains a nested response, it must be a failure
            reject(oDeferred, oResponse);
          } else if (oResponse.__changeResponses) {
            // successful change set
            oResponse.__changeResponses.forEach(function (oChangeResponse, j) {
              oDeferred[j].resolve(oChangeResponse.data, oChangeResponse);
            });
          } else {
            // successful GET request
            oDeferred.resolve(oResponse.data, oResponse);
          }
        });

        if (fnBatchAccepted) {
          sap.ui2.srvc.call(fnBatchAccepted, oODataService.getDefaultErrorHandler());
        }
      }

      if (!aBatchQueue) {
        throw new sap.ui2.srvc.Error("No open batch queue to submit", "sap.ui2.srvc.ODataWrapper");
      }

      if (aBatchQueue.length > 0) {
        this.batch({__batchRequests: aBatchQueue}, onBatchSuccess, fnBatchItselfFailed);
      } else if (fnBatchAccepted) {
        // call success handler (if given) directly (async) if batchQueue is empty
        sap.ui2.srvc.call(fnBatchAccepted, oODataService.getDefaultErrorHandler(), /*async=*/true);
      }

      aBatchQueue = undefined;
      aDeferredQueue = undefined; // be nice to the garbage collector
    };

    /**
     * Returns this wrapper's string representation.
     *
     * @param {boolean} [bVerbose=false]
     *   flag whether to show all properties
     * @returns {string}
     *   this wrapper's string representation
     *
     * @public
     * @since 1.19.0
     */
    this.toString = function (bVerbose) {
      var aResult = ['sap.ui2.srvc.ODataWrapper({sBaseUrl:"', sBaseUrl, '"'];
//      if (bVerbose) {
//      }
      aResult.push('})');
      return aResult.join('');
    };

    /** executes a put request
     *
     * @param {string} sRelativeUrl the relative URL to use
     * @param {object} oPayload the payload
     * @param {function ()} [fnSuccess]
     *   callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Defaults to the OData service facade's default error handler
     */
    this.put = function (sRelativeUrl, oPayload, fnSuccess, fnFailure) {
      requestOrBatch(sRelativeUrl, "PUT", oPayload, function (oData) {
        if (fnSuccess) {
          // Note: try/catch already done by doRequest()
          fnSuccess(); // drop excess parameters (oData === undefined)
        }
      }, fnFailure);
    };
    /**
     * Generic entity update method.
     *
     * @param {object} oEntity
     *   the datajs representation of the entity
     * @param {function ()} [fnSuccess]
     *   callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Defaults to the OData service facade's default error handler
     *
     * @public
     * @since 1.19.0
     */
    this.update = function (oEntity, fnSuccess, fnFailure) {
      /*jslint nomen:true */
      var oPayload = {
          "__metadata": {
            type: oEntity.__metadata && oEntity.__metadata.type
          }
        },
        sPropertyName,
        sRelativeUrl = toRelativeUrl(oEntity.__metadata.uri);

      // copy all original property values of entity into request data
      for (sPropertyName in oEntity) {
        if (Object.prototype.hasOwnProperty.call(oEntity, sPropertyName)
            && sPropertyName.indexOf('$') !== 0
            && typeof oEntity[sPropertyName] !== "object") {
          oPayload[sPropertyName] = oEntity[sPropertyName];
        }
      }
      this.put(sRelativeUrl, oPayload, fnSuccess, fnFailure);
    };

    // constructor code -------------------------------------------------------
    if (!sap.ui2.srvc.Map) {
      fnRequire("sap.ui2.srvc.utils");
    }

    // Detect old API and transform it to the current one
    if (typeof oSettings === 'string') {
      oSettings = handleOldConstructorApi(arguments);
    } else if (typeof oSettings === 'object') {
      // clone to ensure it is not changed afterwards
      oSettings = cloneObject(oSettings);
    }

    if (!oSettings || !oSettings.baseUrl || typeof oSettings.baseUrl !== "string") {
      throw new sap.ui2.srvc.Error("Missing base URL", "sap.ui2.srvc.ODataWrapper");
    }
    if (!oODataService || typeof oODataService !== "object") {
      throw new sap.ui2.srvc.Error("Missing OData service facade", "sap.ui2.srvc.ODataWrapper");
    }

    // ensure that base URL has a trailing /
    oSettings.baseUrl = oSettings.baseUrl.replace(/\/$/, "") + "/";

    sBaseUrl = oSettings.baseUrl;
    bSupportsChangeSets = oSettings.supportsChangeSets;

    if (typeof sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration === "undefined") {
      jQuery.sap.log.error("sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration is not defined!",
        "the sap.ui2.srvc.ODataWrapper constructor was called before the static property was defined",
        "sap.ui2.srvc.ODataWrapper");
    } else if (typeof sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration[sBaseUrl] === "undefined") {

      // Define the sticky session configuration for the base URL managed by
      // this ODataWrapper instance.
      sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration[sBaseUrl] = {
        enabled: false, // sticky session disabled by default
        value: undefined // the value detected if enabled = true
      };
    }
  };

  /**
   * Detects and, if needed, converts old api calls of the createODataWrapper function to the current one.
   * @param {object} oArgs
   *   An arguments object containing the parameters of the createODataWrapper function. See createODataWrapper for details
   * @returns {object}
   *   Settings for ODataWrapper and default failure function
   * @private
   */
  function handleOldCreateODataWrapperApi (oArgs) {
    var oSettings = {};
    var oTransformedApi = {};

    oSettings.baseUrl = oArgs[0];
    // These are non mandatory parameters and might be undefined
    if (typeof oArgs[1] === 'boolean') {
      oSettings.supportsChangeSets = oArgs[1];
    }
    if (typeof oArgs[2] === 'function') {
      oTransformedApi.defaultFailure = oArgs[2];
    }
    oTransformedApi.settings = oSettings;

    return oTransformedApi;
  }

  /**
   * Clones an Object to avoid unwanted changes
   * @param {object} oInputObject
   *   The object that needs to be cloned
   * @returns {object}
   *   The cloned object
   * @private
   */
  function cloneObject (oInputObject) {
    if (oInputObject === undefined) {
      return undefined;
    }
    try {
      return JSON.parse(JSON.stringify(oInputObject));
    } catch (e) {
      return undefined;
    }
  }

  /*
   * Configuration for sticky session is done here as it is a static property
   * that should not rely on the instance initialization. Also, it may happen
   * that an already defined sap.ui2.srvc.ODataWrapper name is re-assigned
   * because this file is re-executed or re-loaded. Such a scenario may be
   * possible if this file is required twice (after being registered to two
   * different module paths).
   */
  if (typeof sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration === "undefined") {
    sap.ui2.srvc.ODataWrapper.oStickySessionConfiguration = {};
  }

  // public factory function ***************************************************

  /**
   * Checks the sap-statistics setting form UI5's configuration and set it on the ODataWrapper.
   * If UI5 is not available, it is checked if the sap-statistics query parameter is set.
   * Note: this function is directly executed
   * @param {string} getWindowLocationSearch
   *   value of window.location.search; to be able to test the behavior of this method with
   *   different search strings.
   * @private
   */
  sap.ui2.srvc.testPublishAt(sap.ui2.srvc.ODataWrapper);
  function checkSapStatisticsSetting(sWindowLocationSearch) {
    try {
      // read the value from UI5 as it may be set via [CTRL-SHIFT-ALT-P]
      sap.ui2.srvc.ODataWrapper["sap-statistics"] =
        sap.ui.getCore().getConfiguration().getStatistics();
    } catch (e) {
      // Read sap-statistics directly form query parameter in scenarios without UI5
      sap.ui2.srvc.ODataWrapper["sap-statistics"] =
        /sap-statistics=(true|x|X)/.test(sWindowLocationSearch);
    }
  }
  // call function directly (immediate function pattern will break testPublishAt)
  checkSapStatisticsSetting(window.location.search);

  /**
   * Constructs and returns a {@link sap.ui2.srvc.ODataWrapper} which knows its
   * {@link sap.ui2.srvc.ODataService} twin, see {@link sap.ui2.srvc.ODataWrapper#getODataService}.
   *
   * @param {object} oSettings
   *   An object containing various properties:
   *   <pre>
   *     {
   *       baseUrl: "/OData/OData.svc", // Mandatory base URL of the OData service
   *       supportsChangeSets: false,   // Type: boolean, Default: false
   *                                    // Whether the OData service supports change sets with <b>multiple</b>
   *                                    // operations bundled into a single logical unit of work. Otherwise
   *                                    // each modifying operation is isolated in a change set of its own.
   *       "sap-language": "EN",        // header which is set for all requests sent
   *       "sap-client": 120,           // header which is set for all requests sent
   *       "sap-statistics": true       // header which is set for all requests sent; in order to receive
   *                                    // some performance statistics
   *     }
   *   </pre>
   * @param {function (string, [object])} [fnDefaultFailure]
   *   error handler taking an error message and, since version 1.28.6, an
   *   optional object containing the complete error information as delivered
   *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
   *   for more details.
   * @returns {sap.ui2.srvc.ODataWrapper}
   *   new instance of ODataWapper/ODataService
   *
   * @public
   * @since 1.19.1
   */
  // OLD API: function (sBaseUrl, bSupportsChangeSets, fnDefaultFailure)
  sap.ui2.srvc.createODataWrapper = function (oSettings, fnDefaultFailure) {
    // If old API is used we need to transform it to the current one.
    if (typeof arguments[0] === 'string') {
      var oTransformedApi = handleOldCreateODataWrapperApi(arguments);
      oSettings = oTransformedApi.settings;
      if (oTransformedApi.defaultFailure) {
        fnDefaultFailure = oTransformedApi.defaultFailure;
      }
    } else if (typeof arguments[0] === 'object') {
      // clone to ensure it is not changed afterwards
      oSettings = cloneObject(oSettings);
    }

    function Service() {
      var oWrapper = new sap.ui2.srvc.ODataWrapper(oSettings, this);
      fnRequire("sap.ui2.srvc.ODataService");
      sap.ui2.srvc.ODataService.call(this, oWrapper, fnDefaultFailure);
      return oWrapper;
    }

    return new Service(); // BEWARE: this actually _returns_ the wrapper, not the service!
  };
/// @end
}());

}; // end of sap/ui2/srvc/ODataWrapper.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.actions') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.actions');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>actions</code> contract.
 *               since 1.32 the <code>types</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.actions");
    jQuery.sap.declare("sap.ui2.srvc.contracts.types");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  /**
   * @namespace The namespace for the CHIP API's <code>actions</code> contract, which
   * allows you to provide a CHIP's actions with all related functionality.
   * @name chip.actions
   * @since 1.25.0
   */

  sap.ui2.srvc.Chip.addContract("actions", function (oChipInstance) {
    var fnActionsProvider;

    /**
     * Determines the callback function which provides the internal actions for this CHIP. The
     * callback has to return an array of actions. Action is an object with the following
     * properties: text, icon and targetURL or a press handler.
     * @example:
     * <code>[
     *        {
     *            text: "Some Action",
     *            icon: "sap-icon://action",
     *            targetURL: "#SemanticObject-Action"
     *        },
     *        {
     *            text: "Settings",
     *            icon: "sap-icon://action-settings",
     *            press: function (oEvent){
     *                //Open settings UI
     *            }
     *        }
     *       ]
     * </code>.
     *
     * An embedding application calls this function each time it wants to display the CHIP's
     * actions.
     *
     * Use <code>Function.prototype.bind()</code> to determine the callback's <code>this</code> or
     * some of its arguments.
     *
     * @name chip.actions.setActionsProvider
     * @function
     * @since 1.25.0
     * @param {function} fnProvider
     *   a callback which returns an array of action objects representing this CHIP's internal actions.
     */
    this.setActionsProvider = function (fnProvider) {
      if (typeof fnProvider !== "function") {
        throw new sap.ui2.srvc.Error("CHIP actions provider is not a function", "chip.actions");
      }
      fnActionsProvider = fnProvider;
    };

    /**
     * @namespace The namespace for the contract interface (to be used by a page builder) for
     * the <code>actions</code> contract, which allows you to get a CHIP's actions with all related functionality.
     * @name contract.actions
     * @since 1.25.0
     */
    return {
      /**
       * Returns this CHIP's internal actions, if available.
       *
       * @returns {Array}
       *   this CHIP's internal actions array
       *
       * @name contract.actions.getActions
       * @function
       * @since 1.25.0
       *
       * @see chip.actions.setActionsProvider
       */
      getActions: function () {
        if (fnActionsProvider) {
          return fnActionsProvider();
        }
        return [];
      }
    };
  });

  // the "contracts" mechanism requires a host to provide the functionality
  // (it is not "optional")
  // When the EP uses the ABAP JS sources, the contract should be made available.
  // thus we make the contract available in this *file* to avoid
  // having to have a separate script tag within the EP resource
  // (note that contracts due to ancient design can not be required)

  /**
   * @namespace The namespace for the CHIP API's <code>types</code> contract, which allows the CHIP
   * to offer multiple visualizations from which the page builder can choose.
   * @name chip.types
   * @since 1.32.0
   */

  sap.ui2.srvc.Chip.addContract("types", function (oChipInstance) {
    var sCurrentType,
      fnSetTypeHandler;

    /**
     * Attaches the given event handler to the change event which is fired whenever the page builder
     * wants to change the current type of visualization. The CHIP has to react accordingly and
     * change the visualization after the handler is called. The event handler should return a
     * <code>jQuery.Deferred</code> object's promise to inform the caller whether the visualization
     * has been changed (or failed). In the latter case an error message should be provided.
     * In case the type was changed before the handler was attached, the handler gets called
     * immediately after registration. This also works when the handler is overwritten by a
     * different one.
     *
     * Use <code>Function.prototype.bind()</code> to determine the event handler's
     * <code>this</code> or some of its arguments.
     *
     * Note: Without such an event handler, it will not be possible to change the visualization of
     * the CHIP during runtime.
     *
     * @name chip.types.attachTypeChange
     * @function
     *
     * @param {function (string)} fnHandler
     *   the handler for changing the visualization type of the CHIP. The first argument will be
     *   the set type. The function <b>must</b> return a <code>jQuery.Deferred</code>
     *   object's promise.
     *
     * @throws Error if <code>fnHandler</code> is not a function or if fnHandler.
     * @throws If fnHandler is directly called (because a type was cached) and throws an error.
     *
     * @since 1.32.0
     * @see contract.types.setType
     * @see chip.types.getAvailableTypes
     */
    this.attachSetType = function (fnHandler) {
      if (typeof fnHandler !== "function") {
        throw new sap.ui2.srvc.Error("Change event handler is not a function",
          "chip.types");
      }
      if (fnSetTypeHandler === fnHandler) {
        // nothing to do, especially do not call the handler again (assumption: better performance)
        return;
      }
      fnSetTypeHandler = fnHandler;

      // a type was already set, so fire the new handler directly
      if (sCurrentType) {
        // do not catch errors here -> fail early (the CHIP throws the error so it has to catch it)
        fnSetTypeHandler(sCurrentType);
      }
    };

    /**
     * @namespace The namespace for the contract interface (to be used by a page builder) for
     * the <code>types</code> contract, which allows you to change the CHIP's type of visualization.
     * @name contract.types
     * @since 1.32.0
     */
    return { // contract
      /**
       * Returns the list of available types of visualization. The types are always lower case.
       *
       * @name chip.types.getAvailableTypes
       * @function
       * @returns {string[]}
       *   the available tile types in lower case, e.g. <code>["tile", "link"]</code>
       * @since 1.32.0
       */
      getAvailableTypes : function () {
        // note: getAvailableTypes does a toLowerCase
        return oChipInstance.getChip().getAvailableTypes();
      },

      /**
       * Informs the CHIP to change it's visualization type to <code>sType</code>. In case the CHIP
       * has not attached an handler for this event yet, the contract will call the handler directly
       * while attaching it.
       *
       * @param {string} sType
       *   The type to be set.
       *   Note: Before comparison <code>sType.toLowerCase()</code> will be used.
       *
       * @throws Error if <code>sType</code> is not valid.
       *
       * @name contract.types.setType
       * @function
       * @since 1.32.0
       *
       * @see chip.types.attachSetType
       * @see chip.types.getAvailableTypes
       */
      setType: function (sType) {
        var sTypeLowerCase;
        if (typeof sType !== "string" || sType === "") {
          throw new sap.ui2.srvc.Error("The given type is not a string",
            "contract.types");
        }
        sTypeLowerCase = sType.toLowerCase();
        if (this.getAvailableTypes().indexOf(sTypeLowerCase) < 0) {
          throw new sap.ui2.srvc.Error("The CHIP does not support type '" + sTypeLowerCase + "'",
            "contract.types");
        }

        // type is valid. cache it in case a (new) handler is registered
        sCurrentType = sTypeLowerCase;

        if (!fnSetTypeHandler) {
          return;
        }
        try {
          fnSetTypeHandler(sTypeLowerCase);
        } catch (e) {
          jQuery.sap.log.error("Could not set CHIP type '" + sTypeLowerCase + "': "
              + (e.message || e.toString()), null, "chip.types");
        }
      }
    };

  });
}());

}; // end of sap/ui2/srvc/contracts/actions.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.bag') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.bag');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>bag</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.bag");
    jQuery.sap.require("sap.ui2.srvc.chip");
    jQuery.sap.require("sap.ui2.srvc.utils");
  }

  /**
   * @namespace The namespace for the CHIP API's <code>bag</code> contract, which allows you to
   * access property bags attached to a CHIP instance and read or write properties in these bags.
   * @name chip.bag
   * @since 1.5.0
   */

  sap.ui2.srvc.Chip.addContract("bag", function (oChipInstance) {
    var fnBagsUpdatedHandler;
    /**
     * Returns the associated property bag for a given ID. If no bag with the given ID exists, a
     * new, empty bag is created on the fly.
     *
     * @name chip.bag.getBag
     * @function
     * @since 1.5.0
     * @param {string} sBagId
     *   The ID of the bag to be returned
     * @returns {sap.ui2.srvc.Bag}
     *   The associated bag
     */
    this.getBag = function (sBagId) {
      return oChipInstance.getBag(sBagId);
    };

    /**
     * Returns an array of IDs of all associated property bags which currently exist.
     * Note that new bags are created on the fly if you call <code>getBag</code> with any other ID.
     *
     * @name chip.bag.getBagIds
     * @function
     * @since 1.5.0
     * @returns {string[]}
     *   IDs of associated bags
     */
    this.getBagIds = function () {
      return oChipInstance.getBagIds();
    };

    /**
     * Returns this CHIP instance's original language as BCP-47.
     * If you are logged on in the same language or if the original language is empty, translatable
     * texts can be created and modified for this CHIP instance and its bags.
     * See {@link sap.ui2.srvc.Bag#setText}.
     * <p>
     * Note: Handling of translatable texts depends on the layer used. In some layers the original
     * language is important; in others it does not matter. In the latter case the empty string
     * (<code>""</code>) is returned, which indicates that the user is allowed to edit the
     * translatable texts in any language.
     * <p>
     * The following code is a flexible way of checking the current situation without knowing the
     * current language or layer:
     * <pre>
     *  if (oChipInstance.getOriginalLanguage() === "" || oChipInstance.getOriginalLanguage() ===
     *      sap.ui.getCore().getConfiguration().getLanguage()) {
     *    // create and modify the CHIP instance's texts
     *  }
     * </pre>
     * <p>
     *
     * @name chip.bag.getOriginalLanguage
     * @function
     * @returns {string}
     *   this CHIP instance's original language (BCP-47) or <code>""</code>
     * @since 1.17.1
     */
    this.getOriginalLanguage = function () {
      return oChipInstance.getPage() && oChipInstance.getPage().getOriginalLanguage();
    };

    /**
     * Usually the Page Builder does not know about the internals of a CHIP, but there are special
     * CHIPs (e.g. SAP Fiori Launchpad app launcher tiles, also serving as bookmark tiles) the
     * Page Builder knows about the internals. In certain cases the Page Builder changes the bag
     * data of the CHIP and is able to notify the CHIP Instance what bag(s) have been updated,
     * so the CHIP instance can update the view.
     *
     * Note: The event must be explicitly triggered by the Page Builder. There is no automatic mechanism.
     *
     * @name chip.bag.attachBagsUpdated
     * @function
     * @param {function(string[])} fnHandler
     *   Handler which is called if the Page Builder updates one or multiple related bags. The
     *   receives as first parameter an array containing all the IDs of the updated bags
     * @since 1.34.0
     * @private
     * @see contract.bag.fireBagsUpdated
     */
    this.attachBagsUpdated = function (fnHandler) {
      // Back channel for FLP bookmark tiles, as they are managed by the FLP Bookmark Service.
      // The FLP directly changes the bag data of the bookmark tile and can notify the bookmark
      // tiles afterwards about the changes, so the bookmark tiles can update their views with
      // the new bag data
      if (typeof fnHandler !== "function") {
        throw new sap.ui2.srvc.Error("The given handler is not a function", "chip.bag");
      }
      fnBagsUpdatedHandler = fnHandler;
    };

    /**
     * @namespace The namespace for the contract interface (to be used by a page builder) for
     * the <code>bag</code> contract.
     * @name contract.bag
     * @private
     */
    return { // contract - private as only used by Fiori Launchpad
      /**
       * Allows the page builder to inform the CHIP about changes in certain bags.
       * Note: Usually the page builder should not care about the content of the bags; however, for bookmark tiles
       * in the Fiori Launchpad this is required as the Fiori Launchpad manages them.
       *
       * @name contract.bag.fireBagsUpdated
       * @function
       * @param {string[]} aUpdatedBagIds
       *   array of bag IDs which have been updated by the page builder
       * @since 1.34.0
       * @private
       * @see chip.bag.attachBagsUpdated
       */
      fireBagsUpdated : function (aUpdatedBagIds) {
        if (!sap.ui2.srvc.isArray(aUpdatedBagIds) || aUpdatedBagIds.length < 1) {
          throw new sap.ui2.srvc.Error("At least one bag ID must be given", "contract.bag");
        }
        if (fnBagsUpdatedHandler) {
          fnBagsUpdatedHandler(aUpdatedBagIds);
        }
      }
    };
  });
}());

}; // end of sap/ui2/srvc/contracts/bag.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.configuration') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.configuration');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>configuration</code> contract.
 */

(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.configuration");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  /**
   * @namespace The namespace for the CHIP API's <code>configuration</code> contract, which allows
   * you to read configuration parameters.
   * @name chip.configuration
   * @since 1.2.0
   */

  sap.ui2.srvc.Chip.addContract("configuration", function (oChipInstance) {
    var fnUpdatedHandler;

    /**
     * Returns the value of the configuration parameter with the given name as a
     * string.
     *
     * Note: Use <code>JSON.parse(sParameterValue)</code> for values which represent
     * objects or arrays, use <code>parseInt(sParameterValue, 10)<code> for values
     * which represent integers, etc.
     *
     * @name chip.configuration.getParameterValueAsString
     * @function
     * @since 1.2.0
     * @param {string} sParameterName
     *   the parameter's name
     * @returns {string}
     *   the parameter's value
     */
    this.getParameterValueAsString = function (sParameterName) {
      return oChipInstance.getConfigurationParameter(sParameterName);
    };

    /**
     * Usually the Page Builder does not know about the internals of a CHIP, but there are special
     * CHIPs (e.g. SAP Fiori Launchpad app launcher tiles, also serving as bookmark tiles) the
     * Page Builder knows about the internals. In certain cases the Page Builder changes the configuration
     * data of the CHIP and is able to notify the CHIP Instance what configuration properties have been updated,
     * so the CHIP instance can update based on the new data.
     *
     * Note: The event must be explicitly triggered by the Page Builder. There is no automatic mechanism.
     *
     * @name chip.configuration.attachConfigurationUpdated
     * @function
     * @param {function(string[])} fnHandler
     *   Handler which is called if the Page Builder updates one or multiple configuration properties on
     *   the CHIP instance. fnHandler receives as first parameter an array containing keys of all first level
     *   configuration properties which have been updated.
     * @since 1.46.0
     * @private
     * @see contract.configuration.fireConfigurationUpdated
     */
    this.attachConfigurationUpdated = function (fnHandler) {
      // Back channel for FLP bookmark tiles, as they are managed by the FLP Bookmark Service.
      // The FLP directly changes the configuration data of the bookmark tile and can notify the bookmark
      // tiles afterwards about the changes, so the bookmark tiles can update themselves with the new data.
      if (typeof fnHandler !== "function") {
        throw new sap.ui2.srvc.Error("The given handler is not a function",
            "chip.configuration");
      }
      fnUpdatedHandler = fnHandler;
    };

    /**
     * @namespace The namespace for the contract interface (to be used by a page builder) for
     * the <code>configuration</code> contract.
     * @name contract.configuration
     * @private
     */
    return { // contract - private as only used by Fiori Launchpad
      /**
       * Allows the page builder to inform the CHIP about changes of certain configuration properties.
       * Note: Usually the page builder should not care about the content of the CHIP's configuration; however,
       * for bookmark tiles in SAP Fiori Launchpad this is required as the SAP Fiori Launchpad manages them.
       *
       * @name contract.configuration.fireConfigurationUpdated
       * @function
       * @param {string[]} aUpdatedConfigKeys
       *   array of first-level configuration property keys which have been updated by the page builder
       * @since 1.46.0
       * @private
       * @see chip.configuration.attachBagsUpdated
       */
      fireConfigurationUpdated : function (aUpdatedConfigKeys) {
        if (!sap.ui2.srvc.isArray(aUpdatedConfigKeys) || aUpdatedConfigKeys.length < 1) {
          throw new sap.ui2.srvc.Error("At least one configuration property key must be given",
              "contract.configuration");
        }
        if (fnUpdatedHandler) {
          fnUpdatedHandler(aUpdatedConfigKeys);
        }
      }
    };
  });

  /**
   * @namespace The namespace for the CHIP API's <code>writeConfiguration</code> contract which
   * allows you to write configuration parameters.
   * @name chip.writeConfiguration
   * @since 1.7.0
   */

  sap.ui2.srvc.Chip.addContract("writeConfiguration", function (oChipInstance) {
    /**
     * Sets the values of the given configuration parameters and persists the updated chip
     * instance. All parameters that actually were defined in the CHIP definition XML are accepted.
     * All others will raise a warning to the log.
     * <p>
     * The configuration is maintained as JSON string in a single property. This has the following
     * consequences regarding the scopes:
     * <ul>
     * <li>If the CHIP instance has never been persisted in the current scope, the configuration is
     *   inherited from lower scopes. If there are no changes either, the properties have their
     *   default values from the CHIP definition.
     * <li>When persisting the CHIP instance in a given scope for the first time (may it be due to
     *   configuration changes or title changes...), the configuration changes are merged with
     *   inherited changes from lower scopes and persisted in the current scope. Subsequent changes
     *   in lower scopes will then remain invisible.
     * <li>A property for which never an update was supplied has the default value from the CHIP
     *   definition. This also applies if you delete the update again by setting it to
     *   <code>undefined</code>.
     * </ul>
     * <b>Example:</b><br>
     * The CHIP has two properties: <code>a</code> with default value "foo" and <code>b</code> with
     * default value "bar". The administrator changes <code>a</code> to "baz" in scope CUST. Later
     * a user changes <code>b</code> in PERS. Then the administrator decides to change
     * <code>a</code> back to "foo", but our user will never see this again, because the system
     * persisted both <code>a</code> and <code>b</code> in PERS.
     *
     * @name chip.writeConfiguration.setParameterValues
     * @function
     * @since 1.7.0
     * @param {map<String,String>} mConfigurationUpdates
     *   The configuration updates. The values must be strings. You can however set a value to
     *   <code>undefined</code>. This removes it from the list of updated properties and effectively
     *   resets it to the default value.
     * @param {function ()} [fnSuccess]
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   The default error handler is provided by the page builder
     */
    this.setParameterValues = function (mConfigurationUpdates, fnSuccess, fnFailure) {
      oChipInstance.updateConfiguration(mConfigurationUpdates, fnSuccess, fnFailure);
    };
  });
}());

}; // end of sap/ui2/srvc/contracts/configuration.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.configurationUi') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.configurationUi');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>configurationUi</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.configurationUi");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  /**
   * @namespace The namespace for the CHIP API's <code>configurationUi</code> contract, which
   * allows you to provide a CHIP-specific configuration UI with all related functionality.
   * @name chip.configurationUi
   * @since 1.11.0
   */

  sap.ui2.srvc.Chip.addContract("configurationUi", function (oChipInstance) {
    var fnCancelHandler,
      fnDisplayHandler,
      fnDirtyProvider,
      bEnabled = false,
      fnSaveHandler,
      fnUiProvider;

    /**
     * Attaches the given event handler to the "cancel" event which is fired whenever the user
     * chooses to cancel configuration. You can inform the user about unsaved changes by
     * setting a "dirty" provider.
     *
     * Use <code>Function.prototype.bind()</code> to determine the event handler's
     * <code>this</code> or some of its arguments.
     *
     * Note: Without such an event handler, it will not be possible to cancel the configuration UI
     * for this CHIP.
     *
     * @name chip.configurationUi.attachCancel
     * @function
     * @since 1.11.0
     * @param {function} fnEventHandler
     *   event handler for canceling configuration
     *
     * @see chip.configurationUi.attachSave
     * @see chip.configurationUi.setDirtyProvider
     */
    this.attachCancel = function (fnEventHandler) {
      if (typeof fnEventHandler !== "function") {
        throw new sap.ui2.srvc.Error("Cancel event handler is not a function",
          "chip.configurationUi");
      }
      fnCancelHandler = fnEventHandler;
    };

    /**
     * Attaches the given event handler to the "save" event which is fired whenever the user
     * chooses to save the current configuration. The event handler should return a
     * <code>jQuery.Deferred</code> object's promise to inform the caller whether the save
     * operation has been successful or not. In the latter case an error message is provided.
     *
     * Use <code>Function.prototype.bind()</code> to determine the event handler's
     * <code>this</code> or some of its arguments.
     *
     * Note: Without such an event handler, it will not be possible to save configurations for this
     * CHIP.
     *
     * @name chip.configurationUi.attachSave
     * @function
     * @since 1.11.0
     * @param {function} fnEventHandler
     *   event handler for saving the current configuration; returns a <code>jQuery.Deferred</code>
     *   object's promise
     *
     * @see chip.configurationUi.attachCancel
     */
    this.attachSave = function (fnEventHandler) {
      if (typeof fnEventHandler !== "function") {
        throw new sap.ui2.srvc.Error("Save event handler is not a function",
          "chip.configurationUi");
      }
      fnSaveHandler = fnEventHandler;
    };

    /**
     * Inform the embedding application that the user has triggered configuration of this CHIP.
     * The embedding application will get this CHIP's configuration UI from the callback determined
     * via <code>chip.configurationUi.setUiProvider()</code> and display it with
     * additional "save" and "cancel" buttons. If these are pressed, the CHIP instance is informed
     * via the corresponding "save" and "cancel" events.
     *
     * @name chip.configurationUi.display
     * @function
     * @since 1.11.0
     *
     * @see chip.configurationUi.attachCancel
     * @see chip.configurationUi.attachSave
     * @see chip.configurationUi.setUiProvider
     */
    this.display = function () {
      if (fnDisplayHandler) {
        fnDisplayHandler();
      }
    };

    /**
     * Tells whether configuration of CHIPs is enabled. Note that this value is constant throughout
     * a CHIP's lifetime. If configuration is enabled, CHIPs should provide a way for the user to
     * trigger configuration and should not display live data (as administrators will not have the
     * corresponding permissions). This trigger should then inform the embedding application to
     * display the configuration UI.
     *
     * @name chip.configurationUi.isEnabled
     * @function
     * @since 1.11.0
     * @returns {boolean}
     *   whether configuration is enabled
     *
     * @see chip.configurationUi.display
     */
    this.isEnabled = function () {
      return bEnabled;
    };

    /**
     * Tells whether this CHIP is readOnly.
     * Before calling this method please ensure that it is available.
     * (Extension of an already existing contract)
     *
     * @name chip.configurationUi.isReadOnly
     * @function
     * @returns {boolean}
     *   whether this CHIP instance is readOnly
     * @since 1.32.0
     */
    this.isReadOnly = function () {
      return oChipInstance.isReadOnly();
    };

    /**
     * Determines the callback function which provides the configuration UI's "dirty" state for
     * this CHIP. The callback has to return a <code>boolean</code> value telling whether this
     * CHIP's configuration UI is currently in a "dirty" state, i.e. contains unsaved changes.
     *
     * An embedding application calls this function each time the user wants to cancel the CHIP's
     * configuration UI. A confirmation dialog will be presented to the user in case the UI is
     * "dirty".
     *
     * Use <code>Function.prototype.bind()</code> to determine the callback's <code>this</code> or
     * some of its arguments.
     *
     * Note: Without such a callback, it will not be possible to inform the user about unsaved
     * changes.
     *
     * @name chip.configurationUi.setDirtyProvider
     * @function
     * @since 1.11.0
     * @param {function} fnProvider
     *   a callback which returns a <code>boolean</code> value telling whether this CHIP's
     *   configuration UI is currently in a "dirty" state
     *
     * @see chip.configurationUi.attachCancel
     */
    this.setDirtyProvider = function (fnProvider) {
      fnDirtyProvider = fnProvider;
    };

    /* eslint-disable valid-jsdoc*/ // &lt; &gt; are confusing eslint
    /**
     * Determines the callback function which provides the configuration UI for this CHIP. The
     * callback has to return an SAPUI5 control (<code>sap.ui.core.Control</code>), which, for
     * example, can be a view or a component wrapped into a
     * <code>sap.ui.core.ComponentContainer</code>.
     *
     * An embedding application calls this function each time it wants to display the CHIP's
     * configuration UI. Once the user chooses to save or cancel the configuration, the UI will be
     * removed from the embedding application's UI, but not destroyed! Use the event handlers for
     * the corresponding "save" and "cancel" events to clean up the UI as necessary (e.g. destroy
     * it).
     *
     * Use <code>Function.prototype.bind()</code> to determine the callback's <code>this</code> or
     * some of its arguments.
     *
     * Note: Without such a callback, it will not be possible to configure this CHIP.
     *
     * @name chip.configurationUi.setUiProvider
     * @function
     * @since 1.11.0
     * @param {function (map &lt;string,string&gt;)} fnProvider
     *   a callback which returns an SAPUI5 control (<code>sap.ui.core.Control</code>)
     *   representing this CHIP's configuration UI.
     *   Since 1.21.0 an optional parameter map can be passed to the UI provider. This map can be
     *   used for example to pass default configuration values to the UI.
     *
     * @see chip.configurationUi.attachCancel
     * @see chip.configurationUi.attachSave
     */
    this.setUiProvider = function (fnProvider) {
      fnUiProvider = fnProvider;
    };
    /* eslint-enable valid-jsdoc*/

    /**
     * @namespace The namespace for the contract interface (to be used by a page builder) for
     * the <code>configurationUi</code> contract, which allows you to use a CHIP-specific
     * configuration UI with all related functionality.
     * @name contract.configurationUi
     * @since 1.11.0
     */
    return {
      /**
       * Attaches the given event handler to the "display" event which is fired by the
       * CHIP instance whenever the user has triggered configuration of this CHIP.
       *
       * @param {function} fnEventHandler
       *   the event handler for the "display" event
       *
       * @name contract.configurationUi.attachDisplay
       * @function
       * @since 1.11.0
       *
       * @see chip.configurationUi.display
       */
      attachDisplay: function (fnEventHandler) {
        if (typeof fnEventHandler !== "function") {
          throw new sap.ui2.srvc.Error("Display event handler is not a function",
            "sap.ui2.srvc.ChipInstance");
        }
        fnDisplayHandler = fnEventHandler;
      },

      /**
       * Fires the "cancel" event on this CHIP instance's configuration UI.
       *
       * @name contract.configurationUi.fireCancel
       * @function
       * @since 1.11.0
       *
       * @see chip.configurationUi.attachCancel
       */
      fireCancel: function () {
        if (fnCancelHandler) {
          fnCancelHandler();
        }
      },

      /**
       * Fires the "save" event on this CHIP instance's configuration UI.
       *
       * @returns {object}
       *   a <code>jQuery.Deferred</code> object's promise as returned by the "save" event handler
       *
       * @name contract.configurationUi.fireSave
       * @function
       * @since 1.11.0
       *
       * @see chip.configurationUi.attachSave
       */
      fireSave: function () {
        return fnSaveHandler ? fnSaveHandler() : undefined;
      },

      /* eslint-disable valid-jsdoc*/ // &lt; &gt; are confusing eslint
      /**
       * Returns this CHIP's configuration UI, if available.
       *
       * @param {map &lt;string,string&gt;} [mParameters]
       *   Since 1.21.0 an optional parameter map can be passed to the UI provider. This map can be
       *   used for example to pass default configuration values to the UI.
       *
       * @returns {sap.ui.core.Control}
       *   this CHIP's configuration UI or <code>undefined</code>
       *
       * @name contract.configurationUi.getUi
       * @function
       * @since 1.11.0
       *
       * @see chip.configurationUi.setUiProvider
       */
      getUi: function (mParameters) {
        return fnUiProvider ? fnUiProvider(mParameters) : undefined;
      },
      /* eslint-enable valid-jsdoc*/

      /**
       * Tells whether this CHIP's configuration UI is currently in a "dirty" state (contains
       * unsaved changes).
       *
       * @returns {boolean}
       *   whether this CHIP's configuration UI is currently in a "dirty" state; returns
       *   <code>undefined</code> in case the CHIP instance has not set a corresponding provider
       *   function
       *
       * @name contract.configurationUi.isDirty
       * @function
       * @since 1.11.0
       *
       * @see chip.configurationUi.setDirtyProvider
       */
      isDirty: function () {
        return fnDirtyProvider ? fnDirtyProvider() : undefined;
      },

      /**
       * Determines whether this CHIP instance's configuration UI is enabled by the page builder.
       * <b>Note:</b> Changing this setting after <code>getImplementationAsSapui5()</code> has been
       * called violates the contract of <code>chip.configurationUi.isEnabled()</code>!
       *
       * @param {boolean} bNewEnabled
       *   whether this CHIP instance's configuration UI is enabled by the page builder
       *
       * @name contract.configurationUi.setEnabled
       * @function
       * @since 1.11.0
       *
       * @see sap.ui2.srvc.ChipInstance#getImplementationAsSapui5()
       * @see chip.configurationUi.isEnabled
       */
      setEnabled: function (bNewEnabled) {
        bEnabled = bNewEnabled;
      }
    };
  });
}());
}; // end of sap/ui2/srvc/contracts/configurationUi.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.fullscreen') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.fullscreen');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>fullscreen</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.fullscreen");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  /**
   * @namespace The namespace for the CHIP API's <code>fullscreen</code> contract, which allows you
   * to deal with toggling of fullscreen mode.
   * @name chip.fullscreen
   * @since 1.2.0
   */

  sap.ui2.srvc.Chip.addContract("fullscreen", function (oChipInstance) {
    /**
     * Tells whether fullscreen mode is currently turned on.
     *
     * @name chip.fullscreen.getFullscreen
     * @function
     * @since 1.2.0
     * @returns {boolean}
     *   whether fullscreen mode is turned on
     */
    this.getFullscreen = function () {
      return oChipInstance.getFullscreen();
    };

    /**
     * Turns fullscreen mode on as specified.
     *
     * @name chip.fullscreen.setFullscreen
     * @function
     * @since 1.2.0
     * @param {boolean} bOn
     *   whether fullscreen mode is turned on
     */
    this.setFullscreen = function (bOn) {
      oChipInstance.setFullscreen(bOn);
    };

    /**
     * Attaches the given event handler to the "fullscreen" event which is fired
     * whenever fullscreen mode is toggled.
     *
     * Use <code>Function.prototype.bind()</code> to determine the event handler's
     * <code>this</code> or some of its arguments.
     *
     * Note: Without such an event handler, the CHIP will simply continue to display the
     * same content, no matter whether fullscreen mode is on or off.
     *
     * @name chip.fullscreen.attachFullscreen
     * @function
     * @since 1.2.0
     * @param {function} fnEventHandler
     *   the event handler for the "fullscreen" event
     */
    this.attachFullscreen = function (fnEventHandler) {
      oChipInstance.attachFullscreen(fnEventHandler);
    };
  });
}());

}; // end of sap/ui2/srvc/contracts/fullscreen.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.navigation') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.navigation');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>navigation</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.navigation");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  var oNavigationHandle;
  if (typeof sap.ui2.shell === "object"
      && typeof sap.ui2.shell.getNavigationHandle === "function") {

    oNavigationHandle = sap.ui2.shell.getNavigationHandle();
    if (typeof oNavigationHandle === "object"
        && typeof oNavigationHandle.navigateToUrl === "function") {

      /**
       * @namespace The namespace for the CHIP API's <code>navigation</code> contract, which allows
       * you to navigate to a launchpad URL in a surrounding shell.
       * @name chip.navigation
       * @since 1.2.0
       */

      sap.ui2.srvc.Chip.addContract("navigation", function (oChipInstance) {
        /**
         * Navigates to the given URL using the optional settings.
         *
         * @name chip.navigation.navigateToUrl
         * @function
         * @since 1.2.0
         * @param {string} sUrl
         *   the URL to navigate to
         * @param {object} [oSettings]
         *   the settings
         *
         * @see <code>sap.ui2.shell.getNavigationHandle().navigateToUrl()<code>
         */
        this.navigateToUrl = function (sUrl, oSettings) {
          oNavigationHandle.navigateToUrl.apply(oNavigationHandle, arguments);
        };
      });
    }
  }
}());

}; // end of sap/ui2/srvc/contracts/navigation.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.preview') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.preview');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>preview</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.preview");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  /**
   * @namespace The namespace for the CHIP API's <code>preview</code> contract, which
   * allows to display the CHIP in a preview mode.
   * @name chip.preview
   * @since 1.11.0
   */

  sap.ui2.srvc.Chip.addContract("preview", /** @returns {object} */ function (oChipInstance) {
    var bEnabled = false,
      sPreviewIconUrl,
      sPreviewSubtitle,
      sPreviewTitle,
      sTargetUrl;


    /**
     * Returns this CHIP's description. May be used by the CHIP for the UI it shows in preview
     * mode.
     *
     * @name chip.preview.getDescription
     * @function
     * @since 1.11.0
     * @returns {string}
     *   the CHIP description
     */
    this.getDescription = function () {
      return oChipInstance.getChip().getDescription();
    };

    /**
     * Returns this CHIP's title. May be used by the CHIP for the UI it shows in preview mode.
     *
     * @name chip.preview.getTitle
     * @function
     * @since 1.11.0
     * @returns {string}
     *   the CHIP title
     */
    this.getTitle = function () {
      return oChipInstance.getTitle();
    };

    /**
     * Tells whether preview mode is enabled. Note that this value is constant throughout
     * a CHIP's lifetime. If preview mode is enabled, CHIPs should provide a target URL for the
     * embedding application to trigger navigation, see {@link chip.preview.setTargetUrl}.
     * They should not display live data for performance reasons.
     *
     * @name chip.preview.isEnabled
     * @function
     * @since 1.11.0
     * @returns {boolean}
     *   whether preview mode is enabled
     */
    this.isEnabled = function () {
      return bEnabled;
    };

    /**
     * Determines the preview icon to be used by the embedding application for this CHIP.
     *
     * @name chip.preview.setPreviewIcon
     * @function
     * @since 1.11.0
     * @param {string} sNewPreviewIconUrl
     *   the preview icon URL. It is recommended that this URL follows the rules defined for the
     *   <code>src</code> attribute of <code>sap.ui.core.Icon</code>.
     */
    this.setPreviewIcon = function (sNewPreviewIconUrl) {
      sPreviewIconUrl = sNewPreviewIconUrl;
    };

    /**
     * Determines the preview subtitle to be used by the embedding application for this CHIP.
     *
     * @name chip.preview.setPreviewSubtitle
     * @function
     * @since 1.40.0
     * @param {string} sNewPreviewSubtitle
     *   the preview subtitle.
     */
    this.setPreviewSubtitle = function (sNewPreviewSubtitle) {
      sPreviewSubtitle = sNewPreviewSubtitle;
    };

    /**
     * Determines the preview title to be used by the embedding application for this CHIP. If the
     * CHIP has no specific preview title e.g. based on its configuration it may return the title
     * from the <code>getTitle</code> method of this contract.
     *
     * @name chip.preview.setPreviewTitle
     * @function
     * @since 1.11.0
     * @param {string} sNewPreviewTitle
     *   the preview title.
     *
     * @see chip.preview.getTitle
     */
    this.setPreviewTitle = function (sNewPreviewTitle) {
      sPreviewTitle = sNewPreviewTitle;
  };

    /**
     * Determines the target URL for navigation from this CHIP. May be used by the embedding
     * application to trigger navigation to the CHIP's underlying application.
     *
     * @name chip.preview.setTargetUrl
     * @function
     * @since 1.11.0
     * @param {string} sNewTargetUrl
     *   the target URL for navigation triggered in this CHIP
     */
    this.setTargetUrl = function (sNewTargetUrl) {
      sTargetUrl = sNewTargetUrl;
    };

    /**
     * @namespace The namespace for the contract interface (to be used by a page builder) for
     * the <code>preview</code> contract, which allows you to display a CHIP in preview
     * mode and to retrieve the URL of the CHIP's underlying application.
     * "Preview mode" means that a CHIP does not retrieve and display live data, but displays a
     * static preview in order to improve performance.
     * The embedding application has two alternatives to display a CHIP preview:
     * Either it embeds the CHIP UI and relies on the CHIP not rendering live data or it
     * retrieves preview attributes like title and icon from the CHIP to create the preview UI
     * itself.
     *
     * @name contract.preview
     * @since 1.11.0
     */
    return {
      /**
       * Returns the URL of the preview icon for this CHIP.
       *
       * @name contract.preview.getPreviewIcon
       * @function
       * @returns {string}
       *   the preview icon's URL
       * @since 1.11.0
       *
       * @see chip.preview.setPreviewIcon
       */
      getPreviewIcon: function () {
        return sPreviewIconUrl;
      },

      /**
       * Returns the preview subtitle for this CHIP.
       *
       * @name contract.preview.getPreviewSubtitle
       * @function
       * @returns {string}
       *   the preview subtitle
       * @since 1.40.0
       *
       * @see chip.preview.setPreviewSubtitle
       */
      getPreviewSubtitle: function () {
        return sPreviewSubtitle;
      },

      /**
       * Returns the preview title for this CHIP.
       *
       * @name contract.preview.getPreviewTitle
       * @function
       * @returns {string}
       *   the preview title
       * @since 1.11.0
       *
       * @see chip.preview.setPreviewTitle
       */
      getPreviewTitle: function () {
        return sPreviewTitle;
      },


      /**
       * Returns the target URL for the CHIP's underlying application.
       *
       * @name contract.preview.getTargetUrl
       * @function
       * @returns {string}
       *   target URL
       * @since 1.11.0
       *
       * @see chip.preview.setTargetUrl
       */
      getTargetUrl: function () {
        return sTargetUrl;
      },

      /**
       * Determines whether preview mode for this CHIP instance is enabled by the page builder.
       * <b>Note:</b> Changing this setting after <code>getImplementationAsSapui5()</code> has been
       * called probably violates the contract of <code>chip.preview.isEnabled()</code>!
       *
       * @param {boolean} bNewEnabled
       *   whether preview mode for this CHIP instance is enabled by the page builder
       *
       * @name contract.preview.setEnabled
       * @function
       * @since 1.11.0
       *
       * @see sap.ui2.srvc.ChipInstance#getImplementationAsSapui5()
       * @see chip.preview.isEnabled
       */
      setEnabled: function (bNewEnabled) {
        bEnabled = bNewEnabled;
      }
    };
  });
}());

}; // end of sap/ui2/srvc/contracts/preview.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.refresh') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.refresh');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>refresh</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.refresh");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  /**
   * @namespace The namespace for the CHIP API's <code>refresh</code> contract, which allows you to
   * handle refresh events.
   * @name chip.refresh
   * @since 1.2.0
   */

  sap.ui2.srvc.Chip.addContract("refresh", function (oChipInstance) {
    /**
     * Attaches the given event handler to the "refresh" event which is fired
     * whenever the user requests a refresh of this CHIP's content.
     *
     * Use <code>Function.prototype.bind()</code> to determine the event handler's
     * <code>this</code> or some of its arguments.
     *
     * Note: Without such an event handler, the CHIP will be recreated to enforce a refresh!
     *
     * @name chip.refresh.attachRefresh
     * @function
     * @since 1.2.0
     * @param {function} fnEventHandler
     *   the event handler for the "refresh" event
     */
    this.attachRefresh = function (fnEventHandler) {
      oChipInstance.attachRefresh(fnEventHandler);
    };
  });
}());

}; // end of sap/ui2/srvc/contracts/refresh.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.search') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.search');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>search</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.search");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  /**
   * @namespace The namespace for the CHIP API's <code>search</code> contract with
   * CHIP search-related functionality. With this contract, the CHIP can provide CHIP-specific
   * search keywords. In addition, it can highlight words from the search in its UI.
   * @name chip.search
   * @since 1.11.0
   */

  sap.ui2.srvc.Chip.addContract("search", function (oChipInstance) {
    var fnHighlight,
      aKeywords;

    /**
     * Determines specific keywords with which the CHIP wants to be found in a search over all
     * CHIPs from the page builder. If not set, the page builder executing a CHIP search can only
     * search based on CHIP metadata like the CHIP title.
     *
     * @name chip.search.setKeywords
     * @function
     * @since 1.11.0
     * @param {string[]} aNewKeywords
     *   the keywords of this CHIP
     */
    this.setKeywords = function (aNewKeywords) {
      if (!sap.ui2.srvc.isArray(aNewKeywords)) {
        throw new sap.ui2.srvc.Error("Not an array: " + aNewKeywords, "chip.search");
      }
      aKeywords = aNewKeywords.slice();
    };

    /**
     * Attaches the given event handler to the "highlight" event which is fired whenever the user
     * executes a search over all CHIPs using specific search terms. The event handler takes a
     * string array as parameter, containing the highlight words. These are derived from the
     * search terms. The CHIP can then highlight these in its UI.
     *
     * @name chip.search.attachHighlight
     * @function
     * @since 1.11.0
     * @param {function (string[])} fnEventHandler
     *   event handler for highlighting words in the CHIP UI which takes a string array with the
     *   highlight words as parameter
     */
    this.attachHighlight = function (fnEventHandler) {
      if (typeof fnEventHandler !== "function") {
        throw new sap.ui2.srvc.Error("Not a function: " + fnEventHandler,
          "chip.search");
      }
      fnHighlight = fnEventHandler;
    };

    /**
     * @namespace The namespace for the contract interface (to be used by a page builder) for
     * the <code>search</code> contract. This contract interface allows the pagebuilder to get
     * the CHIP-specific search keywords. In addition, it can have the CHIP highlight words
     * in its UI based on the search terms used.
     * @name contract.search
     * @since 1.11.0
     */
    return {
      /**
       * Returns the CHIP-specific search keywords.
       *
       * @name contract.search.getKeywords
       * @function
       * @since 1.11.0
       * @returns {string[]}
       *   CHIP-specific search keywords. Empty array if the CHIP has not set any keywords.
       *
       * @see chip.search.setKeywords
       */
      getKeywords: function () {
        return aKeywords ? aKeywords.slice() : [];
      },

      /**
       * Fires the "highlight" event which takes a string array with the words to
       * be highlighted as parameters.
       *
       * @name contract.search.fireHighlight
       * @function
       * @since 1.11.0
       * @param {string[]} aHighlightWords
       *   words to be highlighted
       *
       * @see chip.search.attachHighlight
       */
      fireHighlight: function (aHighlightWords) {
        if (fnHighlight) {
          fnHighlight(aHighlightWords);
        }
      }
    };
  });
}());
}; // end of sap/ui2/srvc/contracts/search.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.searchProvider') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.searchProvider');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>searchProvider</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.searchProvider");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  var oSearchHandle;
  if (typeof sap.ui2.shell === "object"
      && typeof sap.ui2.shell.getSearchHandle === "function") {

    oSearchHandle = sap.ui2.shell.getSearchHandle();
    if (typeof oSearchHandle === "object"
        && typeof oSearchHandle.addSearchProvider === "function") {

      /**
       * @namespace The namespace for the CHIP API's <code>searchProvider</code> contract, which
       * allows you to add a search provider to a surrounding shell.
       * @name chip.searchProvider
       * @since 1.2.0
       */

      sap.ui2.srvc.Chip.addContract("searchProvider", function (oChipInstance) {
        /**
         * Adds a search provider with the given URL (if this feature is available).
         *
         * @name chip.searchProvider.addSearchProvider
         * @function
         * @since 1.2.0
         * @param {string} sUrl
         *   the search provider's URL
         *
         * @see <code>sap.ui2.shell.getSearchHandle().addSearchProvider()<code>
         */
        this.addSearchProvider = function (sUrl) {
          oSearchHandle.addSearchProvider.apply(oSearchHandle, arguments);
        };
      });
    }
  }
}());

}; // end of sap/ui2/srvc/contracts/searchProvider.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.url') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.url');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>url</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.url");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  /**
   * @namespace The namespace for the CHIP API's <code>url</code> contract, which allows you
   * convert relative URLs into absolute ones.
   * @name chip.url
   * @since 1.2.0
   */

  sap.ui2.srvc.Chip.addContract("url", function (oChipInstance) {
    /**
     * Makes the given server-relative service URL point to the system given as parameter
     * <code>sSystem</code> or to the system of this CHIP's catalog if <code>sSystem</code>
     * is empty.
     * <em>Server-relative URL</em> means a URL starting with exactly one "/" (also known as
     * absolute-path URL).
     * <p>
     * The function is typically used if the CHIP has been loaded from a remote catalog. In this
     * case, a CHIP wants to perform service calls to the system providing the remote catalog:
     * it must convert the corresponding URLs via this method. The function may also be used for
     * CHIPs loaded from a local catalog to perform service calls to a different system.
     * <p>
     * The system is added via segment parameter <code>o</code> to the last URL segment of the
     * service URL. It is also possible to make this function put the system to a different
     * URL path segment of the service URL by specifying the empty segment parameter
     * <code>o</code>. If both <code>sSystem</code> is empty and the CHIP is loaded from a local
     * catalog, no system is added and the empty segment parameter <code>o</code> is removed.
     * <br/>
     * <b>Example 1:</b> <code>/sap/opu/odata/MyService/?p1=v1</code> is converted to
     * <code>/sap/opu/odata/MyService;o=SYS/?p1=v1</code> if the corresponding CHIP has been loaded
     * via a remote catalog with system ID &quot;SYS&quot;.
     * However it remains unchanged if the CHIP has been loaded from the logon system <em>and</em>
     * the parameter <code>sSystem</code> is empty.<br/>
     * <b>Example 2:</b> <code>/sap/opu/odata/MyService;o=/MyEntities/$count?p1=v1</code> is
     * converted to <code>/sap/opu/odata/MyService;o=sid(SYS.123)/MyEntities/$count?p1=v1</code> if
     * parameter <code>sSystem</code> is set to &quot;sid(SYS.123)&quot;</code>.
     * <p>
     * The URL is in no way normalized.
     *
     * @name chip.url.addSystemToServiceUrl
     * @function
     * @since 1.19.1
     * @param {string} sServiceUrl
     *   a server-relative service URL (to be used when addressing the system directly)
     * @param {string} [sSystem]
     *   a system specification like &quot;SYS&quot; or &quot;sid(SYS.123)&quot;; if empty the
     *   system of the CHIP's catalog is used
     * @returns {string}
     *   the service URL pointing to the system specified in parameter <code>sSystem</code> or to
     *   the system from which the CHIP's catalog has been loaded
     * @throws Error if the URL is not server-relative such as <code>./something</code>,
     *   <code>http://foo.bar/something</code>, ...)
     */
    this.addSystemToServiceUrl = function (sServiceUrl, sSystem) {
      return oChipInstance.getChip().getCatalog().addSystemToServiceUrl(sServiceUrl, sSystem);
    };

    /**
     * Returns the system of this CHIP's catalog where application data for this CHIP is typically
     * located. This API is needed in scenarios where a CHIP navigates to another application and
     * needs to transfer system information so that the application can use the same application
     * system.
     *
     * @name chip.url.getApplicationSystem
     * @function
     * @since 1.19.1
     * @returns {string}
     *   the system of this CHIP's catalog or <code>undefined</code> if there is no such catalog
     * @see chip.url.addSystemToServiceUrl
     */
    this.getApplicationSystem = function () {
      return oChipInstance.getChip().getCatalog().getSystemAlias();
    };

    /**
     * Makes the given relative URL absolute. URLs containing host and/or protocol
     * and URLs with an absolute path remain unchanged. The URL is in no way
     * normalized; the function takes the URL of the CHIP definition XML as base.
     *
     * @name chip.url.toAbsoluteUrl
     * @function
     * @since 1.2.0
     * @param {string} sUrl
     *   the (possibly server-relative) URL
     * @returns {string}
     *   the absolute URL
     */
    this.toAbsoluteUrl = function (sUrl) {
      return oChipInstance.getChip().toAbsoluteUrl(sUrl);
    };
  });
}());

}; // end of sap/ui2/srvc/contracts/url.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.contracts.visible') ) {
  jQuery.sap.declare('sap.ui2.srvc.contracts.visible');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>visible</code> contract.
 */
(function () {
  "use strict";
  /*global jQuery, sap */

  // Note: jQuery might not yet be available!
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.contracts.visible");
    jQuery.sap.require("sap.ui2.srvc.chip");
  }

  /**
   * @namespace The namespace for the CHIP API's <code>visible</code> contract regarding the
   * CHIP's current visibility within the page.
   * @name chip.visible
   * @since 1.17.1
   */

  sap.ui2.srvc.Chip.addContract("visible", function (oChipInstance) {
    var bVisible = true,
      fnOnVisible;

    /**
     * Calls fnOnVisible with bVisible as parameter. Adds some some error handling ensuring that exceptions will
     * not affect the page builder.
     *
     * @private
     */
    function callOnVisible() {
      try {
        fnOnVisible(bVisible);
      } catch (e) {
        jQuery.sap.log.error(oChipInstance + ": call to visible handler failed: "
            + (e.message || e.toString()), null, "chip.visible");
      }
    }

    /**
     * Attaches the given event handler to the "visible" event which is fired whenever the CHIP's
     * visibility has been changed. The event handler takes a boolean as parameter, representing
     * the new visible state.
     * (Since 1.42) fnEventHandler is called once initially with the current visibility making it
     * unnecessary to check {#isVisible} when the CHIP is initialized. Attaching the same handler
     * multiple times will only result in one call to it.
     *
     * @name chip.visible.attachVisible
     * @function
     * @since 1.17.0
     * @param {function (boolean)} fnEventHandler
     *   event handler for visibility changes
     */
    this.attachVisible = function (fnEventHandler) {
      if (typeof fnEventHandler !== "function") {
        throw new sap.ui2.srvc.Error("Not a function: " + fnEventHandler,
          "chip.visible");
      }

      // attaching the same handler multiple time should not end in multiple calls (see below)
      if (fnOnVisible === fnEventHandler) {
        return;
      }
      fnOnVisible = fnEventHandler;

      // call the handler directly to stay compatible with previous behavior in the FLP.
      // There the tiles where notified directly after instantiation (multiple tiles) so they
      // did not need to check via isVisible() if they are visible or not.
      callOnVisible();
    };

    /**
     * Returns the CHIP's visibility within the page builder's page. The visibility is
     * <code>true</code> initially.
     *
     * @name chip.visible.isVisible
     * @function
     * @since 1.17.0
     * @returns {boolean}
     *   the CHIP's visibility within the page builder's page.
     * @see contract.visible.setVisible
     */
    this.isVisible = function () {
      return bVisible;
    };

    /**
     * @namespace The namespace for the contract interface (to be used by a page builder) for
     * the <code>visible</code> contract. This contract interface allows the pagebuilder to
     * notify the CHIP when the CHIP's visibility has been changed.
     *
     * @name contract.visible
     * @since 1.17.0
     */
    return {
      /**
       * Notifies the CHIP about its new visibility. The CHIP is only informed, if the
       * visibility is different then before.
       *
       * @param {boolean} bNewVisible
       *   the CHIP visibility
       * @name contract.visible.setVisible
       * @function
       * @since 1.17.0
       * @see chip.visible.isVisible
       * @see chip.visible.attachVisible
       */
      setVisible: function (bNewVisible) {
        if (bVisible === bNewVisible) {
          // nothing changed so do nothing
          return;
        }

        bVisible = bNewVisible;
        if (fnOnVisible) {
          callOnVisible();
        }
      }
    };
  });
}());
}; // end of sap/ui2/srvc/contracts/visible.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.error') ) {
  jQuery.sap.declare('sap.ui2.srvc.error');
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview An error object which logs the error message immediately.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global jQuery, sap */

  // namespace "sap.ui2.srvc" **************************************************
  sap.ui2 = sap.ui2 || {};
  sap.ui2.srvc = sap.ui2.srvc || {};

  // Only declare the module if jQuery.sap exists. Otherwise we do not even try to require assuming
  // that the script has been loaded manually (before SAPUI5).
  if (typeof jQuery === "function" && jQuery.sap) {
    jQuery.sap.declare("sap.ui2.srvc.error");
    jQuery.sap.require("sap.ui2.srvc.utils");
  }

  /**
   * Creates an <code>Error</code> object and logs the error message immediately.
   *
   * @param {string} sMessage
   *   the error message
   * @param {string} [sComponent]
   *   the error component to log
   *
   * @class
   * @constructor
   * @since 1.2.0
   */
  sap.ui2.srvc.Error = function (sMessage, sComponent) {
    // see also redundant declaration in utils.js which has to be in sync
    var oError = new Error(sMessage); // reuse Error constructor to benefit from it (e.g. stack)
    oError.name = "sap.ui2.srvc.Error";
    sap.ui2.srvc.log.error(sMessage, null, sComponent);
    return oError;
  };
  // to avoid (new Error()) instanceof sap.ui2.srvc.Error === true we do not set the prototype,
  // we also tolerate that (new sap.ui2.srvc.Error()) instanceof sap.ui2.srvc.Error === false now
  // sap.ui2.srvc.Error.prototype = Error.prototype;

}());

}; // end of sap/ui2/srvc/error.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.pageset') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview A wrapper for a page set loaded from the page building service.
 */

this.sap = this.sap || {};

(function () {
  "use strict";
  /*global jQuery, sap */

  // namespace "sap.ui2.srvc" **************************************************
  sap.ui2 = sap.ui2 || {};
  sap.ui2.srvc = sap.ui2.srvc || {};

  var O_PAGE_TYPES = {
      // don't start with 0 because it is falsy
      assigned: 1, // contained in AssignedPages and scope is not PERSONALIZATION
      userCreated: 2, // not contained in AssignedPages or DefaultPage
      personalized: 3, // contained in AssignedPages and scope is PERSONALIZATION
      defaultPage: 4 // assigned as DefaultPage
    };

  jQuery.sap.declare("sap.ui2.srvc.pageset");
  // we cannot call jQuery.sap.require here because of our qunit.html environment

  // "public class" ************************************************************

  /**
   * Constructs for the given ID a new representation (wrapper) of the page set with associated
   * pages (see {@link sap.ui2.srvc.Page}).
   * A page set is a mutable object and changes can be persisted by the page building service (see
   * {@link sap.ui2.srvc.PageBuildingService}).
   *
   * @param {sap.ui2.srvc.Factory} oFactory
   *  the factory
   * @param {string} sPageSetId
   *   the page set's ID
   * @class
   * @since 1.11.0
   * @private
   */
  sap.ui2.srvc.PageSet = function (oFactory, sPageSetId) {
    var sId, // the page set ID
      oAlterEgo, // page set's representation with all relations removed
      oDefaultPage,
      aPages = [], // {sap.ui2.srvc.Page[]}
      oPageTypes, // {sap.ui2.srvc.Map}
      bIsStub = true,
      that = this;

    /**
     * Makes sure the given page set is not just a stub.
     *
     * @private
     */
    function checkStub() {
      if (bIsStub) {
        throw new sap.ui2.srvc.Error(that + ": page set is just a stub", "sap.ui2.srvc.PageSet");
      }
    }

    /**
     * Returns the type of the given page.
     *
     * @param {sap.ui2.srvc.Page} oPage
     *   any page of this page set
     * @returns {int}
     *   the page type as defined privately
     * @private
     */
    sap.ui2.srvc.testPublishAt(that);
    function getPageType(oPage) {
      var sId = oPage.getId(),
        iPageType;

      checkStub();
      if (!oPageTypes.containsKey(sId)) {
        throw new sap.ui2.srvc.Error("Unknown page " + sId, "sap.ui2.srvc.PageSet");
      }

      iPageType = oPageTypes.get(sId);
      if (iPageType === O_PAGE_TYPES.assigned && oPage.isPersonalized()) {
        iPageType = O_PAGE_TYPES.personalized;
      }
      return iPageType;
    }

    /**
     * Initializes the page set when the alter ego is known
     * @param {object} oNewAlterEgo
     *  JSON representation of the page set (as received from the OData service)
     * @private
     */
    function initialize(oNewAlterEgo) {
      var sDefaultPageId = oNewAlterEgo.DefaultPage.id,
        aRawAssignedPages = (oNewAlterEgo.AssignedPages && oNewAlterEgo.AssignedPages.results)
          || [];

      oAlterEgo = oNewAlterEgo;

      // initialize type for assigned pages
      oPageTypes = new sap.ui2.srvc.Map();
      aRawAssignedPages.forEach(function (oRawAssignedPage) {
        // assume only ID is present
        oPageTypes.put(oRawAssignedPage.id, O_PAGE_TYPES.assigned);
      });

      // initialize already loaded pages
      oAlterEgo.Pages.results.forEach(function (oRawPage) {
        var oPage = new sap.ui2.srvc.Page(oFactory, oRawPage), //TODO oFactory.createPage()
          sPageId = oPage.getId();

        aPages.push(oPage);

        if (sDefaultPageId === sPageId) {
          oDefaultPage = oPage;
          oPageTypes.put(sPageId, O_PAGE_TYPES.defaultPage);
        } else if (!oPageTypes.containsKey(sPageId)) { // not AssignedPage
          oPageTypes.put(sPageId, O_PAGE_TYPES.userCreated);
        }
      });

      // remove relations
      delete oAlterEgo.AssignedPages;
      delete oAlterEgo.DefaultPage;
      delete oAlterEgo.Pages;

      bIsStub = false;
      jQuery.sap.log.debug("Initialized: " + that, null, "sap.ui2.srvc.PageSet");
    }

    /**
     * Appends a new page with given title to this page set.
     *
     * @param {string} [sPageTitle]
     *   title for the new page
     * @param {string} sCatalogId
     *   id of the default catalog of the new page
     * @param {function (sap.ui2.srvc.Page)} fnSuccess
     *   success handler taking new page that has been appended to this page set
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.11.0
     */
    this.appendPage = function (sPageTitle, sCatalogId, fnSuccess, fnFailure) {
      checkStub();
      if (typeof fnSuccess !== "function") {
        throw new sap.ui2.srvc.Error("Missing success handler", "sap.ui2.srvc.PageSet");
      }

      oFactory.getPageBuildingService().createPageInPageSet(sId, sPageTitle, sCatalogId,
        function (oNewRawPage) {
          var oNewPage = new sap.ui2.srvc.Page(oFactory, oNewRawPage); //TODO oFactory.createPage()
          aPages.push(oNewPage);
          // all new pages are user created:
          oPageTypes.put(oNewPage.getId(), O_PAGE_TYPES.userCreated);
          jQuery.sap.log.debug("Appended new page with ID " + oNewPage.getId() + " to pageset "
            + that, null, "sap.ui2.srvc.PageSet");

          fnSuccess(oNewPage);
        }, fnFailure);
    };

    /**
     * Returns true if oPage can entirely be deleted (without a page shining through afterwards).
     * See also <code>isPageResettable</code>.
     *
     *@param {sap.ui2.srvc.Page} oPage
     *   the page to be checked
     * @returns {boolean}
     *   true if page can be removed
     * @since 1.11.0
     *
     * @see #isPageResettable
     * @see #removePage
     */
    this.isPageRemovable = function (oPage) {
      return getPageType(oPage) === O_PAGE_TYPES.userCreated;
    };

    /**
     * Returns true if a delete on oPage only has effect like a reset (with a page shining
     * through afterwards). However, check also method <code>isPageRemovable</code>.
     *
     *@param {sap.ui2.srvc.Page} oPage
     *   the page to be checked
     * @returns {boolean}
     *   true if page can be reset
     * @since 1.11.0
     *
     * @see #isPageRemovable
     * @see #removePage
     */
    this.isPageResettable = function (oPage) {
      return getPageType(oPage) === O_PAGE_TYPES.personalized;
    };

    /**
     * Remove given page from this page set; fails if the page is not removable.
     *
     * @param {sap.ui2.srvc.Page} oPage
     *   the page to be removed
     * @param {function ()} [fnSuccess]
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @see #isPageRemovable
     * @since 1.11.0
     */
    this.removePage = function (oPage, fnSuccess, fnFailure) {
      if (!this.isPageRemovable(oPage)) {
        throw new sap.ui2.srvc.Error("Cannot remove page " + oPage.getId(),
          "sap.ui2.srvc.PageSet");
      }

      oPage.remove(function () {
        aPages.splice(aPages.indexOf(oPage), 1);
        oPageTypes.remove(oPage.getId());
        if (fnSuccess) {
          fnSuccess();
        }
      }, fnFailure);
    };

    /**
     * Reset given page from this page set; fails if the page is not resettable.
     *
     * @param {sap.ui2.srvc.Page} oPage
     *   the page to be reset
     * @param {function ()} [fnSuccess]
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @see #isPageResettable
     * @since 1.16.1
     */
    this.resetPage = function (oPage, fnSuccess, fnFailure) {
      if (!this.isPageResettable(oPage)) {
        throw new sap.ui2.srvc.Error("Cannot reset page " + oPage.getId(),
          "sap.ui2.srvc.PageSet");
      }

      // remove page copy from PERSONALIZATION scope
      oPage.remove(function () {
        // reload page from underlying scope
        oPage.load(fnSuccess, fnFailure, /*bPartially*/true);
      }, fnFailure);
    };

    /**
     * Removes all pages from pageset which does not match given page ID or catalog ID.
     * If the pageset is not loaded an error is thrown.
     *
     * @param {string[]} aPageIds
     *   array of valid page IDs
     * @param {string[]} aCatalogIds
     *   array of valid catalog IDs
     * @since 1.16.2
     *
     * @see #isStub()
     * @private
     */
    this.filter = function (aPageIds, aCatalogIds) {
      var i,
        aResult = [],
        oCurrentPage;

      checkStub();
      aPageIds = aPageIds || [];
      aCatalogIds = aCatalogIds || [];

      for (i = 0; i < aPages.length; i += 1) {
        oCurrentPage = aPages[i];
        if (aPageIds.indexOf(oCurrentPage.getId()) !== -1) {
          aResult.push(oCurrentPage);
        } else if (oCurrentPage.getCatalog()
            && aCatalogIds.indexOf(oCurrentPage.getCatalog().getId()) !== -1) {
          aResult.push(oCurrentPage);
        }
      }
      aPages = aResult;
    };

    /**
     * Returns this page set's configuration.
     *
     * @returns {string}
     *   this page set's configuration
     * @since 1.11.0
     *
     * @see #isStub()
     */
    this.getConfiguration = function () {
      checkStub();
      return oAlterEgo.configuration;
    };

    /**
     * Sets this page set's configuration.
     *
     * @param {string} sConfiguration
     *   new configuration string for this page set
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.11.0
     *
     * @see #isStub()
     */
    this.setConfiguration = function (sConfiguration, fnSuccess, fnFailure) {
      checkStub();
      if (typeof fnSuccess !== "function") {
        throw new sap.ui2.srvc.Error("Missing success handler", "sap.ui2.srvc.PageSet");
      }

      if (oAlterEgo.configuration === sConfiguration) {
        // no change: call success handler async
        sap.ui2.srvc.call(fnSuccess, fnFailure, true);
        return;
      }

      oAlterEgo.configuration = sConfiguration;
      oFactory.getPageBuildingService().updatePageSet(oAlterEgo, function (oNewAlterEgo) {
        fnSuccess();
      }, fnFailure);
    };

    /**
     * Returns this page set's default page. Can only be called if the page set is not a stub
     * anymore.
     *
     * @returns {sap.ui2.srvc.Page}
     *   this page set's default page
     * @since 1.11.0
     *
     * @see #isStub()
     */
    this.getDefaultPage = function () {
      checkStub();
      return oDefaultPage;
    };

    /**
     * Returns this page set's ID.
     *
     * @returns {string}
     *   this page set's ID
     * @since 1.11.0
     */
    this.getId = function () {
      return sId;
    };

    /**
     * Returns this page set's pages. Can only be called if the page set is not a stub anymore.
     *
     * @returns {sap.ui2.srvc.Page[]}
     *   this page set's pages
     * @since 1.11.0
     *
     * @see #isStub()
     */
    this.getPages = function () {
      checkStub();
      return aPages.slice();
    };

    /**
     * Tells whether this page set is still only a stub and does not yet know its properties or
     * related objects, for example pages.
     *
     * @returns {boolean}
     *   whether this page set is still only a stub
     * @since 1.11.0
     *
     * @see #load()
     */
    this.isStub = function () {
      return bIsStub;
    };

    /**
     * Loads the current page set including its configuration, title and pages (aka groups).
     * Property bags of the pages are not loaded. The function <code>loadBag</code> (see
     * {@link sap.ui2.srvc.Page#loadBag}) of the page objects needs to be used to get a property
     * bag.
     * Notifies one of the given handlers.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   If not given
     *   <code>{@link sap.ui2.srvc.ODataService#getDefaultErrorHandler}</code> is used
     * @since 1.11.0
     */
    this.load = function (fnSuccess, fnFailure) {
      if (!bIsStub) {
        throw new sap.ui2.srvc.Error("Page set is not a stub anymore", "sap.ui2.srvc.PageSet");
      }

      oFactory.getPageBuildingService().readPageSet(sId,
        function (oNewAlterEgo) {
          jQuery.sap.log.debug("Loaded: " + that, null, "sap.ui2.srvc.PageSet");
          initialize(oNewAlterEgo);

          fnSuccess();
        }, fnFailure);
    };

    /**
     * Returns this page set's string representation.
     *
     * @param {boolean} [bVerbose=false]
     *   flag whether to show all properties
     * @returns {string}
     *   this page set's string representation
     * @since 1.11.0
     */
    this.toString = function (bVerbose) {
      var aResult = ['sap.ui2.srvc.PageSet({sId:"', sId, '",bIsStub:', bIsStub];
      if (bVerbose) {
        aResult.push(',oAlterEgo:', JSON.stringify(oAlterEgo),
          ',oFactory:', oFactory.toString(bVerbose),
          ',aPages:', JSON.stringify(aPages)
          );
      }
      aResult.push('})');
      return aResult.join('');
    };

    // constructor code -------------------------------------------------------
    jQuery.sap.require("sap.ui2.srvc.page");
    jQuery.sap.require("sap.ui2.srvc.utils");
    sId = sPageSetId;
    if (!sId) {
      throw new sap.ui2.srvc.Error("Missing page set ID", "sap.ui2.srvc.PageSet");
    }
    jQuery.sap.log.debug("Created: " + this, null, "sap.ui2.srvc.PageSet");
  };
}());

}; // end of sap/ui2/srvc/pageset.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.AppStateAdapter') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's AppStateAdapter for the ABAP
 *               platform.
 *
 * @version 1.52.7
 */
(function () {
    "use strict";
    /*jslint nomen: true*/
    /*global jQuery, sap, setTimeout */
    jQuery.sap.declare("sap.ushell_abap.adapters.abap.AppStateAdapter");
    jQuery.sap.require('sap.ushell.services.Personalization'); // unlisted dependency retained

    

    /**
     * Constructs a new instance of the AppStateAdapter for the ABAP
     * platform
     *
     * @param {object} oSystem
     *   The system served by the adapter
     * @param {string} sParameters
     *   Parameter string, not in use
     * @param {object} oConfig
     *   A potential adapter configuration
     * @class The Unified Shell's AppStateAdapter for the ABAP platform.
     *
     * @constructor
     * @since 1.28.0
     * @private
     */
    sap.ushell_abap.adapters.abap.AppStateAdapter = function (oSystem, sParameters, oConfig) {
        this._oConfig = oConfig && oConfig.config;
        var sAppStateServiceURL = (jQuery.sap.getObject("services.appState.baseUrl", undefined,
                oConfig) || "/sap/opu/odata/UI2/INTEROP") + "/";
        var oODataWrapperSettings = {
            baseUrl:     sAppStateServiceURL,
            'sap-language': sap.ushell.Container.getUser().getLanguage(),
            'sap-client':   sap.ushell.Container.getLogonSystem().getClient()
        };
        this._oWrapper = sap.ui2.srvc.createODataWrapper(oODataWrapperSettings);
        function fnDefaultFailure(oMessage) {
            sap.ui2.srvc.Error(oMessage, "sap.ushell_abap.adapters.abap.AppStateAdapter");
        }
        sap.ui2.srvc.ODataService.call(this, this._oWrapper, fnDefaultFailure);
    };

    /**
     * Save the given data sValue for the given key at the persistence layer
     *
     * @param {string} sKey
     *   The generated key value of the application state to save
     * @param {string} sSessionKey
     *   A generated session key
     *   overwriting/modifying an existing record is only permitted if the
     *   session key matches the key of the initial creation.
     *   It shall be part of the save request, but shall not be returned on reading
     *   (it is not detectable from outside).
     * @param {string} sValue
     *   The value to persist under the given key
     * @param {string} sAppName
     *   The application name (the ui5 component name)
     *   should be stored with the data to allow to identify the data association
     * @param {string} sComponent
     *   A 24 character string representing the application component,
     *   (A sap support component)
     *   may be undefined if not available on the client
     *
     * @returns {object} promise
     *   whose done function's return is empty
     * @private
     */
    sap.ushell_abap.adapters.abap.AppStateAdapter.prototype.saveAppState = function (sKey, sSessionKey,
            sValue, sAppname, sComponent) {
        var oDeferred = new jQuery.Deferred(),
            sRelativeUrl = "GlobalContainers",
            oPayload = {
                "id": sKey,
                "sessionKey": sSessionKey,
                "component": sComponent,
                "appName": sAppname,
                "value": sValue
            };

        this._oWrapper.create(sRelativeUrl, oPayload, function (response) {
            oDeferred.resolve();
        }, function (sErrorMessage) {
            oDeferred.reject(sErrorMessage);
            jQuery.sap.log.error(sErrorMessage);
        });

        return oDeferred.promise();
    };

    /**
     * Read the application state sValue for the given key sKey from the persistence layer
     *
     * @param {string} sKey
     *   Key of the application state (less than 40 characters)
     *
     * @returns {object} promise
     *   whose done function returns the response ID and value as parameter
     * @private
     */
    sap.ushell_abap.adapters.abap.AppStateAdapter.prototype.loadAppState = function (sKey) {
        var oDeferredRead = new jQuery.Deferred(),
            sRelativeUrl = "GlobalContainers(id='" + encodeURIComponent(sKey) + "')";

        if (!sKey) {
            throw new sap.ushell.utils.Error("The sKey is mandatory to read the data from the persistence layer");
        }

        // wrap the read operation into a batch request
        // reason: Hiding of the application state key as part of the URL
        this._oWrapper.openBatchQueue();
        this._oWrapper.read(sRelativeUrl, function (response) {
            oDeferredRead.resolve(response.id, response.value);
        }, function (sErrorMessage) {
            jQuery.sap.log.error(sErrorMessage);
            oDeferredRead.reject(sErrorMessage);
        }, false);
        this._oWrapper.submitBatchQueue(function () { }, function (sErrorMessage) {
            jQuery.sap.log.error(sErrorMessage);
            oDeferredRead.reject(sErrorMessage);
        });

        return oDeferredRead.promise();
    };
}());

}; // end of sap/ushell_abap/adapters/abap/AppStateAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview ClientSideTargetResolutionAdapter for the abap platform.
 *
 * The ClientSideTargetResolutionAdapter must perform the following two task:
 * <ul>
 * <li>provide the getInbounds method to return the list of Target Mappings used by ClientSideTargetResolution service;</li>
 * <li>provide the resolveHashFragmentFallback function, a fallback method called by ClientSideTargetResolution service.</li>
 * </ul>
 *
 * @version 1.52.7
 */
(function () {
    "use strict";
    /*jslint nomen: true*/
    /*global jQuery, sap, setTimeout */
    jQuery.sap.declare("sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter");

    
    

    var S_COMPONENT = "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter";

    // list of parameters which are wd relevant and should not be compacted
    var aNotCompactedWDAParameters = [
        "sap-wd-configId",
        "SAP-WD-CONFIGID",
        "sap-client",
        "SAP-CLIENT",
        "System",
        "SYSTEM",
        "sap-language",
        "SAP-LANGUAGE",
        "sap-wd-htmlrendermode",
        "sap-wd-deltarendering",
        "wdallowvaluesuggest",
        "sap-wd-lightspeed",
        "sap-wd-remotedesktop",
        "sap-wd-flashdebug",
        "sap-accessibility",
        "sap-theme",
        "sap-*",
        "SAP-*",
        "wd*",
        "WD*"
    ];

    /**
    * Constructs a new instance of the ClientSideTargetResolutionAdapter for the ABAP
    * platform
    *
    * @param {object} oSystem
    *   The system served by the adapter
    * @param {string} sParameters
    *   Parameter string, not in use
    * @param {object} oAdapterConfig
    *   A potential adapter configuration
    *
    *
    * This adapter has the following peculiarity:
    *
    * a member initialSegmentPromise may be present as a configuration member.
    *
    * This member is a thenable which may resolve to invoke a function with a first argument:
    * <code>[aSegments, oTargetMappings, oSystemAliases]</code>
    *
    * When satisfying request to the inbounds, if aSegments is a subset of this initial request, this response may
    * be used if faster than the full request.
    *
    * There is at most one such promise.
    *
    * @constructor
    * @since 1.34.0
    *
    * @private
    */
   sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter = function (oSystem, sParameters, oAdapterConfig) {
       var that = this;

       /*
        * The local system alias. This adapter uses this hardcoded object to
        * resolve "", the local system alias.
        */
       this._oLocalSystemAlias = {
           http: {
               id: "",
               host: "",
               port: "",
               pathPrefix: "/sap/bc/"
           },
           https: {
               id: "",
               host: "",
               port: "",
               pathPrefix: "/sap/bc/"
           },
           rfc: {
               id: "",
               systemId: "",
               host: "",
               service: 0,
               loginGroup: "",
               sncNameR3: "",
               sncQoPR3: ""
           },
           id: "",
           client: "",
           language: ""
       };


       // if this property is true, the adapter can provide
       // a) efficiently cached Full Target resuts
       // and b) optionally a segemented result
       this.hasSegmentedAccess = true;
       //
       this._oAdapterConfig = oAdapterConfig && oAdapterConfig.config;

       // the Application container will add some more parameters, thus the URL limit here
       // is lower than the technical target url length limit (<2000).
       this._wdLengthLimit = 1800;

       this._oODataWrapper = undefined;
       this._getODataWrapper = function() {
           if (!this._oODataWrapper) {
               this._oODataWrapper = sap.ui2.srvc.createODataWrapper("/sap/opu/odata/UI2/INTEROP/");
           }
           return this._oODataWrapper;
       };

       /*
        * The variable below is the most complete list of inbounds (i.e.,
        * converted target mappings) received so far.
        *
        * Note that it is always overwritten when a full target mapping response is received.
        *
        * Note that it is only set by the initial request if it has not been set by a non-empty result yet!
        * So it's value evolves towards the full response either:
        * [] -> [initial response] -> [full response]
        * or
        * [] -> [full response]
        */
       this._aTargetMappings = []; // write in target mappings initially (convert when needed)
       this._aInbounds = [];     // read from here (the converted target mappings)

       // this variable *may* reflect an initial segment as received by the oInitialSegmentPromise
       this._aInitialSegment = undefined;

       this._oSystemAliasBuffer = new sap.ushell.utils.Map();

       this._storeFromFullStartupResponse = function (oFullStartupResult) {
           if (oFullStartupResult) {
               if (oFullStartupResult.targetMappings) {
                   // inbound conversion
                   that._aTargetMappings = oFullStartupResult.targetMappings;
               }
               if (oFullStartupResult.systemAliases) {
                   that._writeUserSystemAliasesToBuffer(oFullStartupResult.systemAliases);
               }
           }
       };

       this._fallbackToFullStartupRequest = function (fnResolve, fnReject) {
            jQuery.sap.log.debug(
                "Falling back to full start_up request from adapter",
                "",
                "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
            );
            that._requestAllTargetMappings()
                .done(function (oFullStartupResult) {
                    that._storeFromFullStartupResponse(oFullStartupResult);
                    fnResolve(); // resolve the full promise
                })
                .fail(function (sMsg) {
                    fnReject(sMsg); // reject the full promise
                });
       };

       this._iTargetMappingsUnusedPromiseRejectCount = 0;
       this._oInitialSegmentPromise = oAdapterConfig && oAdapterConfig.config && oAdapterConfig.config.initialSegmentPromise
           || (new Promise(function(fnResolve, fnReject1) {
               that._iTargetMappingsUnusedPromiseRejectCount++;
               if (that._iTargetMappingsUnusedPromiseRejectCount === 2) {
                   that._fallbackToFullStartupRequest(fnResolve, fnReject1);
               }
       }));
       this._oNavTargetPromise = oAdapterConfig && oAdapterConfig.config && oAdapterConfig.config.navTargetDataPromise
           || (new Promise(function(fnResolve, fnReject2) {
               that._iTargetMappingsUnusedPromiseRejectCount++;
               if (that._iTargetMappingsUnusedPromiseRejectCount === 2) {
                   that._fallbackToFullStartupRequest(fnResolve, fnReject2);
               }
       }));

       this._oInitialSegmentPromise.then(function(aArgs) {
           if (aArgs === null) {
               jQuery.sap.log.debug(
                   "Initial target mappings segment promise resolved with 'null'",
                   "Will not process initial target mappings segments again (mostly likely because this is no longer needed)",
                   "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
               );
               return;
           }

           if (that._aTargetMappings.length === 0) { // ignore if != 0, because the full response came already
               jQuery.sap.log.debug(
                   "Segmented start_up response returned",
                   "storing system aliases and inbounds from segment",
                   "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
               );
               var aRequestedSegments = aArgs[0],
                   aTargetMappings = aArgs[1],
                   aSystemAliases = aArgs[2];

               // we use this as an indicator whether the full request has succeeded
               // can't get worse
               that._aTargetMappings = aTargetMappings;
               that._writeUserSystemAliasesToBuffer(aSystemAliases);
               that._aInitialSegment = aRequestedSegments;
           } else {
               jQuery.sap.log.debug(
                   "Segmented start_up response returned",
                   "ignoring response because the full target mapping response returned before",
                   "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
               );
           }
       }).catch(function (sReason) {
           jQuery.sap.log.error(
            "Initial segment promise was rejected.",
            sReason,
            "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
           );
       });


       this._oNavTargetPromise.then(function (oFullStartupResult) {
           jQuery.sap.log.debug(
               "Full start_up response returned",
               "storing system aliases and inbounds",
               "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
           );
           that._storeFromFullStartupResponse(oFullStartupResult);
       });
    };


    /**
     * Provides fallback resolution for {@link sap.ushell.services.ClientSideTargetResolution#resolveHashFragment}
     * in case the resolution result cannot be determined on the client.
     *
     * @param {string} sOriginalShellHash
     *    the hash fragment string originally passed to the resolveHashFragment call
     * @param {object} oInbound
     *    the target mapping that matched <code>sOriginalShellHash</code> during
     *    {@link sap.ushell.services.ClientSideTargetResolution#resolveHashFragment}
     * @param {object} oParams
     *    the intent parameters (including default parameters) that should
     *    be added to the resulting shell hash.
     *    <p>This is an object like:</p>
     * <pre>
     *    {
     *       "paramName1": ["value1", "value2"], // multiple parameters in URL
     *       "paramName2": ["value3"]
     *    }
     * </pre>
     *
     * @return {jQuery.Deferred.Promise}
     *    a jQuery promise that resolves to an object containing the resolution result as in
     *    {@link sap.ushell.services.ClientSideTargetResolution#resolveHashFragment}
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype.resolveHashFragmentFallback = function (sOriginalShellHash, oInbound, oParams) {
        var sShellHashForLpdCust = this._constructShellHashForLpdCust(oInbound, oParams),
            sSapSystem = oParams && oParams["sap-system"] && oParams["sap-system"][0],
            oDeferredCB = new jQuery.Deferred();

        this._resolveHashFragmentBE(
            sShellHashForLpdCust
                ? sShellHashForLpdCust // LPD_CUST only
                : sOriginalShellHash   // full resolution
        ).done(function (oResult) {
            // if a sap-system is "only" added per defaulting in the Target
            // Mapping, it is not returned as part of the (NWBC/WDA/WebGui)
            // URL, thus it must be propagated here
            if (oResult && sSapSystem) {
                oResult["sap-system"] = oResult["sap-system"] || sSapSystem;
            }
            oDeferredCB.resolve(oResult);
        }).fail(oDeferredCB.reject.bind(oDeferredCB));

        return oDeferredCB.promise();
    };

    // functions past this point are helpers for the getInbounds function

    /**
     * Produces a list of Inbounds suitable for ClientSideTargetResolution.
     *
     * when aSegment is defined, an initial promise matching the segment may be used to supply the result
     * @param {array} aSegment if present, restricting segment
     * The function may then return the segment matching this
     * @returns {jQuery.Deferred.Promise}
     *   a jQuery promise that resolves to an array of Inbounds in
     *   ClientSideTargetResolution format.
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype.getInbounds = function (aSegment) {
        var oDeferred = new jQuery.Deferred(),
            that = this;

        this._oInitialSegmentPromise.then(function(aInitialSegmentAndTargetMappings) {

            if (aInitialSegmentAndTargetMappings === null) {
                /*
                 * When this promise resolved with null it means that
                 * target mappings won't be taken from an initial segment ever
                 * in the future (mostly likely because this is not needed,
                 * e.g., no direct start).
                 */
                return;
            }

            if (that._isInSegment(aSegment, that._aInitialSegment)) {
                jQuery.sap.log.debug(
                    "Got inbounds from initial segment",
                    "",
                    "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
                );
                that._aInbounds = that._formatDirectStart(that._aTargetMappings);
                oDeferred.resolve(that._aInbounds);
            } else {
                jQuery.sap.log.debug(
                    "Did not get inbound in initial segment",
                    "",
                    "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
                );
            }
        });

        // must wait on the full target mappings promise to complete before returning
        this._oNavTargetPromise.then(function () {
            jQuery.sap.log.debug(
                "Got inbounds from full start_up response",
                "",
                "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
            );

            // convert (once) when needed
            that._aInbounds = that._formatDirectStart(that._aTargetMappings);

            // we don't want to check for the initial segment in the future
            // anymore, since we've got all the inbounds now.
            that.getInbounds = function () {

                // replace implementation of this method (no conversion in future calls anymore!)
                return new jQuery.Deferred().resolve(that._aInbounds).promise();
            };

            oDeferred.resolve(that._aInbounds);
        }, function (sMsg) {
            oDeferred.reject(sMsg);
        });

        return oDeferred.promise();
    };

    /**
     * Test whether aSubSegment is completely contained in aSegment
     *
     * @param {object[]} aSubSegment
     *   the segment to test
     * @param {object[]} aSegment
     *   the full segment
     * @return {boolean}
     *   true if aSubSegment is contained in aSegment
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._isInSegment = function(aSubSegment, aSegment) {
        if (!jQuery.isArray(aSegment) || !jQuery.isArray(aSubSegment)) {
            return false;
        }
        return aSubSegment.every(function(oEntry) {
           return !aSegment.every(function(oTestEntry) {
               return !(oEntry.semanticObject === oTestEntry.semanticObject
                       && oEntry.action === oTestEntry.action);
           });
        });
    };

    /**
     * Obtain the full set of inbounds via the start_up service.
     *
     * @return {jQuery.Deferred.promise}
     *   a jQuery promise that is resolved with a
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._requestAllTargetMappings = function () {
        var mParameterMap = sap.ui2.srvc.getParameterMap();
        var oDeferred = new jQuery.Deferred();
        var sRequestUrl = "/sap/bc/ui2/start_up?so=*&action=*&",
            sCacheId = (jQuery.sap.getObject("services.targetMappings", 0, this._oAdapterConfig).cacheId &&
            ("&sap-cache-id=" + jQuery.sap.getObject("services.targetMappings", 0, this._oAdapterConfig).cacheId)) || "";

        // add client and language if in url

        /*
         * Copies the URL parameter with the given name from <code>mParameterMap</code> to
         * <code>sRequestUrl</code> if within the relevant list.
         *
         * @param {string} sName
         *   URL parameter name
         * @private
         */
        function copyParameter(sName) {
            var sValue = mParameterMap[sName];
            if (sValue) {
                sRequestUrl += sName + "=" + encodeURIComponent(sValue[0]) + "&";
            }
        }
        copyParameter("sap-language");
        copyParameter("sap-client");
        sap.ui2.srvc.get(
                sRequestUrl + "&shellType=" + sap.ushell_abap.getShellType() + "&depth=0" + sCacheId,
                false, /*xml=*/
                function (sNavTargetDataResult) {
                    var oNavTargetDataResult = JSON.parse(sNavTargetDataResult);
                    if (!oNavTargetDataResult) {
                        oDeferred.reject("Malformed Full TM Result");
                    }
                    oDeferred.resolve(oNavTargetDataResult);
                },
                function (sMessage) {
                    oDeferred.reject(sMessage);
                }
        );
        return oDeferred.promise();
    };


    /**
     * Formats a set of target mappings returned by the start_up result into inbounds.
     *
     * @param {object} [oDirectStartResponse]
     *   the targetMappings member of the start_up response. This is an object like:
     * <pre>
     *  {
     *    Object-action: {
     *       semanticObject: "Object",
     *       semanticAction: "action",
     *       allowParams: true,
     *       formFactors: {
     *           desktop: true,
     *           tablet: true,
     *           phone: true
     *       },
     *       parameterMappings: {
     *           NAME1: { target: "NEW_NAME1" },
     *           ...
     *       },
     *       text: "Text ",
     *       applicationType: "SAPUI5",
     *       applicationDependencies: "...",
     *       url: "/sap/bc/ui5_ui5/ui2/test_path",
     *       createdOn: "2015-08-04",
     *       catalogId: "X-SAP-UI2-CATALOGPAGE:/UI2/CATALOG",
     *       tmChipId: "01O2TR99M0M42Q838RE8YGK0Z"
     *    },
     *    ...
     * }
     * </pre>
     *
     * @return {object[]}
     *   <p>
     *   an array of inbounds suitable for ClientSideTargetResolution service
     *   consumption. This array may be empty in case the input
     *   oDirectStartResponse parameter was <code>undefined</code>.
     *   </p>
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._formatDirectStart = function (oDirectStartResponse) {
        var that = this;
        if (!oDirectStartResponse) {
            this._aInitialSegment = undefined; // disable for now!
            return []; //
        }

        function mapOne(sSrcId, oSrc) {
            // the result inbound
            var oTarget = {};

            var aMatch = sSrcId.match(/^([^-]+)-([^~]+)/);
            if (!aMatch) {
                jQuery.sap.log.warning(
                    "The target mapping id " + sSrcId + " is not valid",
                    "this target mapping will be discarded",
                    "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
                );
                return undefined;
            }

            // TODO: remove once this is fixed on the backend
            if (!oSrc.hasOwnProperty("text")) {
                oSrc.text = "";
            }

            oTarget.semanticObject = aMatch[1];
            oTarget.action = aMatch[2];
            oTarget.id = sSrcId;
            oTarget.title = oSrc.text;

            // resolution result
            var oFakeResolutionResult = {};
            ["applicationType", "applicationDependencies", "applicationData", "postParameters", "text", "url", "systemAlias"].forEach(function(sPropName) {
                oFakeResolutionResult[sPropName] = oSrc[sPropName];
            });

            // take component name from applicationDependencies if not supplied
            oTarget.resolutionResult = sap.ushell_abap.bootstrap.adjustNavTargetResult(oFakeResolutionResult);
            oTarget.resolutionResult.additionalInformation = oTarget.resolutionResult.additionalInformation || "";

            /*
             * ClientSideTargetResolution relies on different application
             * types than the ones returned by the OData service.
             */
            oTarget.resolutionResult.applicationType = that._formatApplicationType(sSrcId, oTarget.resolutionResult);

            // Forward the name of the systemAlias used to interpolate the URL
            // ClientSideTargetResolution will de-interpolate the URL before applying sap-system
            oTarget.resolutionResult.systemAlias = oSrc.systemAlias || ""; // NOTE: "" is the local system alias

            oTarget.deviceTypes = oSrc.formfactors;
            oTarget.resolutionResult["sap.ui"] = {};
            oTarget.resolutionResult["sap.ui"].technology = oTarget.resolutionResult.applicationType;
            if (oTarget.resolutionResult["sap.ui"].technology === "SAPUI5") {
                oTarget.resolutionResult["sap.ui"].technology = "UI5";
            }
            if (oTarget.resolutionResult["sap.ui"].technology === "TR") {
                oTarget.resolutionResult["sap.ui"].technology = "GUI";
            }
            if (!oTarget.deviceTypes) {
                oTarget.deviceTypes = oSrc.formFactors || {};
            }
            oTarget.deviceTypes.desktop = oTarget.deviceTypes.desktop || false;
            oTarget.deviceTypes.phone = oTarget.deviceTypes.phone || false;
            oTarget.deviceTypes.tablet = oTarget.deviceTypes.tablet || false;


            // signature
            if (jQuery.isArray(oSrc.signature)) {
                oTarget.signature = {};
                oTarget.signature.additionalParameters = oSrc.allowParams ? "allowed" : "ignored";
                oTarget.signature.parameters = {};
                oSrc.signature.forEach(function(oBadParam) {
                    var oParam = {};
                    var sUserDefaultValue;
                    var sName = oBadParam.name;
                    if (oBadParam.defaultValue && oBadParam.defaultValue.value) {
                        oParam.defaultValue = {};
                        oParam.defaultValue.value = oBadParam.defaultValue.value;
                        oParam.defaultValue.format  = oBadParam.defaultValue.format || "plain";
                        sUserDefaultValue = that._extractUserDefaultValue(oParam.defaultValue.value);
                        if (sUserDefaultValue) {
                            // a user default value
                            oParam.defaultValue = {
                                "value": sUserDefaultValue,
                                "format": "reference"
                            };
                        }
                    }
                    if (oBadParam.filter && oBadParam.filter.value) {
                        oParam.filter = {};
                        oParam.filter.value = oBadParam.filter.value;
                        oParam.filter.format  = oBadParam.filter.format || "plain";
                        sUserDefaultValue = that._extractUserDefaultValue(oParam.filter.value);
                        if (sUserDefaultValue) {
                            // a user default value
                            oParam.filter = {
                                "value": sUserDefaultValue,
                                "format": "reference"
                            };
                        }
                    }
                    if (oBadParam.renameTo) {
                        oParam.renameTo = oBadParam.renameTo;
                    }
                    oParam.required = oBadParam.required || false;
                    oTarget.signature.parameters[sName] = oParam;
                });
            } else {
                oTarget.signature = jQuery.extend(true, { parameters: {} }, oSrc.signature);
                oTarget.signature.additionalParameters = oTarget.signature.additionalParameters  || (oSrc.allowParams ? "allowed" : "ignored");
                Object.keys(oTarget.signature.parameters).forEach(function(sKey) {
                    var oParam = oTarget.signature.parameters[sKey];
                    if (oParam.filter) {
                        oParam.filter.format = oParam.filter.format || "plain";
                    }
                    if (oParam.defaultValue) {
                        oParam.defaultValue.format = oParam.defaultValue.format || "plain";
                    }
                    oParam.required = oParam.required || false;

                    // TODO: remove once fixed on backend
                    if (oParam.filter && oParam.filter.hasOwnProperty("format") && !(oParam.filter.hasOwnProperty("value"))) {
                        delete oParam.filter;
                    }
                    if (oParam.defaultValue && oParam.defaultValue.hasOwnProperty("format") && !(oParam.defaultValue.hasOwnProperty("value"))) {
                        delete oParam.defaultValue;
                    }
                });
            }

            var oSapHideIntentLinkParam = oTarget.signature && oTarget.signature.parameters && oTarget.signature.parameters["sap-hide-intent-link"];
            if (oSapHideIntentLinkParam && oSapHideIntentLinkParam.hasOwnProperty("defaultValue")) {
                oTarget.hideIntentLink = oSapHideIntentLinkParam.defaultValue.value === "true" ? true : false;
            }

            if (oSapHideIntentLinkParam && !oSapHideIntentLinkParam.required && oSapHideIntentLinkParam.hasOwnProperty("defaultValue")) {
               // NOTE: we actually delete it only if it's a default value
               delete oTarget.signature.parameters["sap-hide-intent-link"];
            }

            // process parameter mappings if they are there
            if (typeof oSrc.parameterMappings === "object") {
                Object.keys(oSrc.parameterMappings).forEach(function(sKey) {
                    var oMapping = oSrc.parameterMappings[sKey];
                    if (sKey && oMapping.target) {
                        oTarget.signature.parameters[sKey] = oTarget.signature.parameters[sKey] || {};
                        oTarget.signature.parameters[sKey].renameTo = oMapping.target;
                    }
                });
            }
            return oTarget;
        }

        var aRes = [];
        Object.keys(oDirectStartResponse).forEach(function(sKey) {
            var r = mapOne(sKey,oDirectStartResponse[sKey]);
            if (r) {
                aRes.push(r);
            }
        });
        return aRes;
    };
    /**
     * Extracts a valid <code>applicationType</code> field for
     * ClientSideTargetResolution from the given object.
     *
     * @param {string} sTargetMappingId
     *   A unique identified
     *
     * @param {object} oResolutionResult
     *   The (pre-resolution) resolutionResult of the navigation target.
     *
     * @returns {string}
     *   One of the following application types compatible with
     *   ClientSideTargetResolution service: "TR", "SAPUI5", "WDA", "URL".
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._formatApplicationType = function (sTargetMappingId, oResolutionResult) {
        var sApplicationType = oResolutionResult.applicationType,
            sUrl = oResolutionResult.url || "";

        function logErrorMessage(oNavTargetExpand, sDefault) {
            jQuery.sap.log.warning(
                "Cannot detect application type for TargetMapping id '" + sTargetMappingId + "', will default to " + sDefault + " application type",
                "TargetMapping URL is '" + sUrl + "'",
                S_COMPONENT
            );
        }

        if (sApplicationType === "SAPUI5") {
            return "SAPUI5";
        }

        if (sApplicationType === "URL" &&
            oResolutionResult.additionalInformation &&
            oResolutionResult.additionalInformation.indexOf("SAPUI5.Component=") === 0) {

            return "SAPUI5";
        }
        if (sApplicationType === "WDA" || sApplicationType === "TR") {
            // trust the server

            /*
             * NOTE: "WDA" is there for robustness, in case the right
             *       application type is sent at some point from the server.
             */
            return sApplicationType;
        }

        if (sApplicationType === "NWBC") {
            if (sUrl.indexOf("/~canvas;window=app/wda") >= 0) {
                return "WDA";
            }
            if (sUrl.indexOf("/~canvas;window=app/transaction") >= 0) {
                return "TR";
            }

            logErrorMessage(oResolutionResult, "TR" /*default*/);

            /*
             * There is no special reason the default is "TR" at this point,
             * it's 50% chance the right type is chosen for NWBC
             * applicationType.
             */
            return "TR";
        }

        if (sApplicationType !== "URL") {
            logErrorMessage(oResolutionResult, "URL" /*default*/);
        }

        return "URL";
    };

    /**
     * Extracts a user default value from the given string.
     *
     * @param {string} sString
     *     any string that may contain a user default placeholder. A valid
     *     placeholder has the following properties:
     *     <ul>
     *     <li>Starts with the sequence "%%"</li>
     *     <li>Ends with the sequence "%%"</li>
     *     <li>Contains at least one character between the start and the end sequence</li>
     *     </ul>
     *
     *     Example:<br/>
     *     <pre>
     *     %%UserDefault.desktopMode%%
     *     </pre>
     *
     * @returns {string}
     *     the recognized user default parameter contained within the
     *     placeholder, or undefined if not found or not valid placeholder
     *     was found in the string.
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._extractUserDefaultValue = function (sString) {
        var sRes,
            rPlaceholderParser = new RegExp("^%%(UserDefault[.].+)%%$"),
            aMatch = rPlaceholderParser.exec(sString);

        return aMatch ? aMatch[1] : sRes;
    };

    /**
     * Format a ABAP proprietary OData response signature
     * (TargetMapping/Signature) into a canonical "Signature" format as
     * used in the AppDescriptor.
     *
     * @param {object} oODataResponse
     *   the proprietary OData response parameter signature
     * @param {string} sAllowAdditionalParameters
     *   the value of allowAdditionalParameters in the ODataResponse
     *
     * @return {object} canonical response
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._formatSignature =  function (oODataResponse, sAllowAdditionalParameters) {
        var that = this,
            oRes = {
                "parameters": {},
                "additionalParameters": sAllowAdditionalParameters === false ? "ignored" : "allowed"
            };

        if (!oODataResponse.results) {
            return oRes;
        }

        oODataResponse.results.forEach(function (oEntry) {
           var oParam,
               sEntryName = oEntry.name,
               sEntryValue,
               sUserDefaultValue;

           if (Object.prototype.hasOwnProperty.call(oRes.parameters, sEntryName)) {
               jQuery.sap.log.error(
                   "Duplicate property name " + sEntryName + " in " + JSON.stringify(oODataResponse),
                   "sap.ui2.srvc.ClientSideTargetResolutionAdapter._formatSignature");
           }

           oRes.parameters[sEntryName] = {
               "required" : that._getObjectDefaulting(oEntry, "required", false)
           };

           oParam = oRes.parameters[sEntryName];
           sEntryValue = that._getObjectDefaulting(oEntry, "value", "");

           if (oEntry.regexp === true) {
               oParam.filter = {
                   "value": (sEntryValue === "" ? ".*" : sEntryValue),
                   "format": "regexp"
               };
               return;
           }

           if (oEntry.required === false) {
               // if not required, the value represents a default value
               sUserDefaultValue = that._extractUserDefaultValue(sEntryValue);

               if (sUserDefaultValue) {
                   // a user default value
                   oParam.defaultValue = {
                       "value": sUserDefaultValue,
                       "format": "reference"
                   };
                   return;
               }

               if (sEntryValue !== "") {  // note: empty string -> no default value
                   // a regular default value
                   oParam.defaultValue = { "value": sEntryValue };
               }
               return;
           }

           if (oEntry.required === true && oEntry.value){
               // if required, the value represents a filter value
               sUserDefaultValue = that._extractUserDefaultValue(sEntryValue);

               if (sUserDefaultValue) {
                   // a user default value
                   oParam.filter = {
                       "value": sUserDefaultValue,
                       "format": "reference"
                   };
                   return;
               }

               if (sEntryValue !== "") {  // note: empty string -> no filter value
                   oParam.filter = {
                       "value": sEntryValue
                   };
               }
           }

        });
        return oRes;
    };


    /**
     * Format a ABAP proprietary OData response parameter mappings
     * (TargetMappings/NavTargetFLP/ParameterMappings or
     * TargetMappings/NavTargetNWBC/ParameterMappings) by blending it into the
     * SignatureParameters section of a constructed oSignature object,
     * ("target" property becomes "renameTo" member of the Signature).
     *
     * If necessary, the parameter is created.
     *
     * @param {object} oSignature
     *    the signature object
     * @param {object} oODataParameterMappings
     *    the ParameterMappings object returned in the ODataResponse
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._mergeParameterMappingsIntoSignature =  function (oSignature, oODataParameterMappings) {
        var aParameterMappingsOriginal = oODataParameterMappings.results;
        // no results
        if (!aParameterMappingsOriginal) {
            return;
        }
        aParameterMappingsOriginal.forEach(function (oParameterMappingOriginal) {
            var sSource = oParameterMappingOriginal.source;
            var sTarget = oParameterMappingOriginal.target;
            // find a parameter, if not, create one
            if (sTarget) {
                oSignature.parameters[sSource] = oSignature.parameters[sSource] || { };
                if (oSignature.parameters[sSource].renameTo) {
                    jQuery.sap.log.warning(
                            "duplicate parameter mapping for'" + sSource + "'",
                            "OData Parameter mappings is " + JSON.stringify(oParameterMappingOriginal, null, "   "),
                            S_COMPONENT
                        );
                }
                oSignature.parameters[sSource].renameTo = sTarget;
            }
        });
    };
    /**
     * Format a ABAP proprietary OData response FormFactors object
     * into a canonical "deviceTypes" object as used in the AppDescriptor
     *
     * @param {object} oFormFactors
     *    form factors as they appear in the OData response
     *
     * @return {object} canonical response
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._formatDeviceTypes = function (oFormFactors) {
        var oRes = {},
            that = this;

        ["desktop", "tablet", "phone"].forEach(function(sProp) {
            oRes[sProp] = that._getObjectDefaulting(oFormFactors,sProp, false);
        });
        return oRes;
    };

    /**
     * Return the member of an object, if undefined, return the provided
     * default value.
     *
     * @param {object} oRoot root object
     * @param {string} sStr path to property
     * @param {variant} vDefault the default value
     *
     * @return {variant} the evaluated property value
     *   may be an original reference to a sub entity of root
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._getObjectDefaulting = function (oRoot, sStr, vDefault) {
        var o = jQuery.sap.getObject(sStr, undefined, oRoot);
        return (o === undefined) ? vDefault : o;
    };

    // functions past this point are helpers for the resolveHashFragmentFallback function

    /**
     * Constructs a shell hash for LPD_CUST resolution.
     *
     * @param {object} oInbound
     *    an inbound object matched via ClientSideTargetResolution
     *    service. This object is a structure like:
     * <pre>
     *    {
     *        "semanticObject": <string>,
     *        "action": <action>,
     *        "title": <string>,
     *        "deviceTypes": <object>,
     *        "signature": <object>,
     *        "resolutionResult": {
     *            "applicationType": <string>,
     *            "additionalInformation": <string>,
     *            "text": <string>,
     *            "ui5ComponentName": <string>,
     *            "applicationDependencies": <object>,
     *            "url": <string>,
     *            "systemAlias": <string>,
     *            "_original": {
     *                "__metadata": <object>,
     *                "id": <string>,
     *                "shellType": <string>,
     *                "postParameters": <string>,
     *                "text": <string>,
     *                "applicationData": <string>,
     *                "applicationAlias": <string>,
     *                "applicationType": <string>,
     *                "url": <string>,
     *                "xappState": <string>,
     *                "iappState": <string>,
     *                "systemAlias": <string>,
     *                "applicationDependencies": <string>
     *            }
     *        }
     *    }
     * </pre>
     *
     * @param {object} oParams
     *    the intent parameters (including default parameters) that should
     *    be added to the resulting shell hash.
     *
     *    This is an object like:
     * <pre>
     *    {
     *       "paramName1": ["value1", "value2"], // multiple parameters in URL
     *       "paramName2": ["value3"]
     *    }
     * </pre>
     *
     * @return {string}
     *    a shell hash suitable for LPD_CUST resolution, that is, with the
     *    tilde-prefixed Target Mapping id and parameters. Through these ids
     *    ResolveLink can be pointed to a specific target mapping, skipping
     *    the matching and filtering steps of nav target resolution.<br />
     *
     *    Example shell hash: <code>Action-toappnavsample~6cn?p1=v1&p2=v2</code>
     *    <br />
     *    Returns undefined if it is not possible to obtain the
     *    tilde-prefixed id from the given target mapping.
     *
     *    NOTE: the resulting shell hash does not have a leading "#".
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._constructShellHashForLpdCust = function (oInbound, oParams) {
        var sLpdCustShellHash = "",
            sFailReason;

        /*
         * Extract the id from the target mapping
         */
        var oTargetMappingOriginal = jQuery.sap.getObject(
            "resolutionResult._original", 2, oInbound);

        if (!jQuery.isPlainObject(oTargetMappingOriginal)) {
            sFailReason = "the given target mapping is not an object";
        }
        if (!sFailReason && !oTargetMappingOriginal.hasOwnProperty("id")) {
            sFailReason = "no id found in target mapping _original object";
        }
        if (!sFailReason && typeof oTargetMappingOriginal.id !== "string") {
            sFailReason = "the target mapping id was not a string";
        }
        if (!sFailReason && oTargetMappingOriginal.id.length === 0) {
            sFailReason = "the target mapping id was an empty string";
        }
        if (sFailReason) {
            jQuery.sap.log.error("Cannot construct Shell Hash for LPD_CUST resolution",
                sFailReason, "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter");

            return undefined;
        }


        sLpdCustShellHash += oTargetMappingOriginal.id;

        /*
         * Concatenate parameters if any
         */
        var sBusinessParams =
            sap.ushell.Container.getService("URLParsing").paramsToString(oParams);

        if (sBusinessParams.length > 0) {
            sLpdCustShellHash += "?" + sBusinessParams;
        }

        return sLpdCustShellHash;
    };

    /**
     * Open the batch queue if it is not already open.
     * The method has no effect if the queue is already open
     *
     * @param {object} oODataWrapper
     *   a {@link sap.ui2.srvc.ODataWrapper} object.
     *
     * @returns {boolean}
     *   true iff batch queue was opened by this method
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._openBatchQueueUnlessOpen = function(oODataWrapper) {
        if (oODataWrapper.isBatchQueueOpen()) {
            return false;
        } else {
            oODataWrapper.openBatchQueue();
            return true;
        }
    };

    /**
     * Returns the current shell type, without relying on the existence
     * of {@link sap.ushell_abap#getShellType}.
     *
     * @returns {string}
     *   the shell type ("NWBC" or "FLP"). Defaults to "FLP" in case
     *   the adapter is not running on the ABAP platform.
     *
     * @private
     * @see sap.ushell_abap.adapters.abap.LaunchPageAdapter.prototype._getShellType
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._getShellType = function () {
        if (sap && sap.ushell_abap && typeof sap.ushell_abap.getShellType === "function") {
            return sap.ushell_abap.getShellType();
        }
        return "FLP";
    };

    /**
     * Resolves the URL hash fragment.
     *
     * The hash fragment is resolved with the
     * /sap/opu/odata/UI2/INTEROP/ResolveLink OData function import. This
     * is an asynchronous operation. The form factor of the current device
     * is used to filter the navigation targets returned.
     *
     * @param {string} sFragmentNoHash
     *   The URL hash fragment in internal format (as obtained by the
     *   hasher service from SAPUI5, not as given in
     *   <code>location.hash</code>) without the leading "#".
     *
     * @returns {object}
     *   A jQuery.Promise. Its <code>done()</code> function gets an object that you can use
     *   to create a {@link sap.ushell.components.container.ApplicationContainer}
     *   or <code>undefined</code> in case the hash fragment was empty.
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._resolveHashFragmentBE = function (sFragmentNoHash) {
        var oDeferred = new jQuery.Deferred(),
            that = this,
            bBatchQueueOpened,
            sFormFactor = sap.ui2.srvc.getFormFactor();

        /**
         * @param {string} sUnencoded an OData URL query parameter
         *
         * @returns {string} the encoded OData URL query parameter
         */
        function encodeODataQueryParameter(sUnencoded) {
            // parameters for OData queries must be url-encoded and single quotes must be escaped
            // by an additional single quote (single quote is not encoded by encodeURIComponent)
            // see internal CSN 0003969932 2013
            return encodeURIComponent(sUnencoded).replace(/'/g, "''");
        }

        bBatchQueueOpened = this._openBatchQueueUnlessOpen(this._getODataWrapper());

        this._oODataWrapper.read("ResolveLink?linkId='"
            + encodeODataQueryParameter(sFragmentNoHash) + "'&shellType='" + that._getShellType() + "'"
            + (sFormFactor ?
                    "&formFactor='" + encodeODataQueryParameter(sFormFactor) + "'" : ""),
            function (oResult) {
                /*jslint nomen: true */
                var i,
                    sDetails = "",
                    oAdjustedResult;

                if (oResult.results.length) {

                    if (oResult.results.length > 1) {
                        // console log because of multiple targets
                        for (i = 0; i < oResult.results.length; i += 1) {
                            delete oResult.results[i].__metadata; // simplify output
                            sDetails += (i === 0 ? "used target: " : "\nignored target: ")
                                + JSON.stringify(oResult.results[i]);
                        }
                        jQuery.sap.log.error("INTEROP service's ResolveLink operation "
                            + "returned " + oResult.results.length + " targets for hash '#"
                            + sFragmentNoHash + "', first one is used.",
                            sDetails,
                            "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter");
                    }

                    oResult = oResult.results[0];
                    oAdjustedResult = sap.ushell_abap.bootstrap.adjustNavTargetResult(oResult);
                    oAdjustedResult.url = sap.ushell_abap.bootstrap.addPostParametersToNavTargetResultUrl(
                        oResult.postParameters, oAdjustedResult.url);

                    // Fix application type to ensure backward compatible
                    // behavior after incompatible server-side change.
                    if (oAdjustedResult && oAdjustedResult.applicationType === "SAPUI5") {
                        oAdjustedResult.applicationType = "URL";
                    }

                    that._compactTooLongWdaUrl(oAdjustedResult).done(function(oCompactedResult) {
                        oDeferred.resolve(oCompactedResult);
                    }).fail(function (sMsg) {
                        oDeferred.reject("Could not resolve link '" + sFragmentNoHash + "' due to compactation failure" + sMsg);
                    });
                } else {
                    oDeferred.reject("Could not resolve link '" + sFragmentNoHash + "'");
                }
            }, function (sMessage) {
                oDeferred.reject(sMessage);
            });

        if (bBatchQueueOpened) {
            that._getODataWrapper().submitBatchQueue(function () {}, oDeferred.reject.bind(oDeferred));
        }
        return oDeferred.promise();
    };

    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._compactTooLongWdaUrl = function(oResult) {
        var oDeferred = new jQuery.Deferred();
        if (oResult && oResult.applicationType === "NWBC" &&
            oResult.url &&
            oResult.url.indexOf("/ui2/nwbc/~canvas;window=") === 0 &&
            oResult.url.length > this._getWDAUrlShorteningLengthLimit()
        ) {
            this._compactUrl(oResult.url).done(function(sCompactedUrl) {
                oResult.url = sCompactedUrl;
                oDeferred.resolve(oResult);
            }).fail(oDeferred.reject.bind(oDeferred));
            return oDeferred.promise();
        } else {
            // we do not compact
            return oDeferred.resolve(oResult).promise();
        }
    };

    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._compactUrl = function(sUrl) {
        var m = sUrl.match(/\?.*/);
        var oUrlParsingService = sap.ushell.Container.getService("URLParsing");
        if (!( m && m[0] && m[0].length > this._getWDAUrlShorteningLengthLimit() - 200)) {
            return new jQuery.Deferred().resolve(sUrl).promise();
        }
        var oParams = oUrlParsingService.parseParameters(m[0]);
        var oDeferred = new jQuery.Deferred();
        sap.ushell.Container.getService("ShellNavigation").compactParams(oParams, aNotCompactedWDAParameters, undefined /* no Component*/).done(function(oCompactedParams) {
            var sReconstructedUrl = sUrl.match(/^[^?]*/)[0] + "?" + oUrlParsingService.paramsToString(oCompactedParams);
            oDeferred.resolve(sReconstructedUrl);
        }).fail(oDeferred.reject.bind(oDeferred));
        return oDeferred.promise();
    };

    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._getWDAUrlShorteningLengthLimit = function() {
        // URL compaction for WDA only works if the WDA backend is of a sufficient high release
        // thus this is potentially incompatible
        // if we start compacting URLs for an "old" release on a platform which supports longer urls
        // (where one may have gotten away with overly long URLs before).
        var vNoWDACompact = sap.ushell.utils.getParameterValueBoolean("sap-ushell-nowdaurlshortening");
        if (vNoWDACompact) {
            return 6000000;
        }
        return this._wdLengthLimit;
    };

    /**
     * Resolves a specific system alias.
     *
     * @param {string} sSystemAlias
     *    the system alias name to be resolved
     *
     * @return {jQuery.Deferred.Promise}
     *    a jQuery promise that resolves to a system alias data object.
     *    A live object is returned! The service must not change it.
     *    If the alias could not be resolved the promise is rejected.
     *
     *    Format of system alias data object. Example:
     *    <pre>{
     *        id: "AB1CLNT000",
     *        client: "000",
     *        language: "EN",
     *            http: {
     *                id: "AB1CLNT000_HTTP",
     *                host: "ldcab1.xyz.com",
     *                port: 10000,
     *                pathPrefix: "/abc/def/"
     *            },
     *            https: {
     *                id: "AB1CLNT000_HTTPS",
     *                host: "ldcab1.xyz.com",
     *                port: 20000,
     *                pathPrefix: "/abc/def/"
     *            },
     *            rfc: {
     *                id: "AB1CLNT000",
     *                systemId: "AB1",
     *                host: "ldcsab1.xyz.com",
     *                port: 0,
     *                loginGroup: "PUBLIC",
     *                sncNameR3: "",
     *                sncQoPR3: "8"
     *            }
     *    }</pre>
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype.resolveSystemAlias = function (sSystemAlias) {
        var sMessage,
            oDeferred = new jQuery.Deferred(),
            that = this;

        var oSystemAliasData;

        // check if we have it already
        oSystemAliasData = this._readSystemAliasFromBuffer(sSystemAlias); // note: already in ClientSideTargetResolutionAdapter format
        if (oSystemAliasData) {
            jQuery.sap.log.debug(
                "System alias '" + sSystemAlias + "' was already buffered",
                "",
                "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
            );
            setTimeout(function() {
                oDeferred.resolve(oSystemAliasData);
            }, 0);
        } else {
           jQuery.sap.log.debug(
               "System alias '" + sSystemAlias + "' is not in buffer",
               "",
               "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
           );

           // must wait at least on the small start_up response before using INTEROP

           /*
            * Trigger call to front-end server. This case may occur,
            * for example, during application direct start with a
            * system alias that is not sent by the backend. Backend
            * only sends data about the system aliases that are
            * mentioned in the systemAlias fields of the target
            * mappings (or for virtual target mappings).
            */
           var fnRetryBufferOrUseInterop = function () {
               oSystemAliasData = that._readSystemAliasFromBuffer(sSystemAlias); // note: already in ClientSideTargetResolutionAdapter format
               if (oSystemAliasData) {
                   jQuery.sap.log.debug(
                       "System alias '" + sSystemAlias + "' is now in buffer",
                       "Skipping INTEROP service call",
                       "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
                   );
                   oDeferred.resolve(oSystemAliasData);
               } else {
                   jQuery.sap.log.debug(
                       "System alias '" + sSystemAlias + "' still not in buffer",
                       "Resolving via INTEROP service",
                       "sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter"
                   );
                   that._readSystemAliasViaInterop(sSystemAlias)
                       .fail(function (sError) {
                           oDeferred.reject(sError);
                       })
                       .done(function (oOdataSystemAliasData) {
                           oSystemAliasData = that._fixSystemAlias(oOdataSystemAliasData);

                           if (oSystemAliasData && oSystemAliasData.id) {
                               that._writeSystemAliasToBuffer(oSystemAliasData);
                               oDeferred.resolve(oSystemAliasData);
                           } else {
                               sMessage = "Data returned for system alias is not valid";
                               jQuery.sap.log.warning("ClientSideTargetResolutionAdapter: " + sMessage);
                               oDeferred.reject(sMessage);
                           }

                       });
               }
           };

           this._oInitialSegmentPromise.then(fnRetryBufferOrUseInterop, fnRetryBufferOrUseInterop);
        }

        return oDeferred.promise();
    };

    /**
    * Writes an array of objects representing system alias data into the
    * runtime buffer.
    *
    * @param {object[]} [aSystemAliases]
    *   Array of system aliases
    *
    * @private
    */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._writeUserSystemAliasesToBuffer = function (aSystemAliases) {
        var that = this;

        if (typeof aSystemAliases === "undefined") {
            // nop in case no argument or undefined is passed
            return;
        }

        aSystemAliases.forEach(function (oSystemAlias) {
            that._writeSystemAliasToBuffer(that._fixSystemAlias(oSystemAlias));
        });
    };

    /**
     * Reads system alias data from the runtime buffer
     *
     * If there is no entry in the buffer for this ID <code>undefined</code> is returned.
     *
     * @param {string} sSystemAliasId
     *   ID of the system alias to be retrieved from the buffer.
     *
     * @returns {object}
     *   A system alias data object is returned which can be directly passed to the service.
     *   If the buffer does not contain data for that system alias <code> undefined</code> is returned.
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._readSystemAliasFromBuffer = function (sSystemAliasId) {
        // note "" means local system alias
        var oResolvedSystemAlias = this._oSystemAliasBuffer.get(sSystemAliasId);

        if (!oResolvedSystemAlias && sSystemAliasId === "") {
            return this._oLocalSystemAlias;
        }

        return oResolvedSystemAlias;
    };

    /**
     * Writes a system alias data from the runtime buffer
     *
     * If there is no entry in the buffer for this ID <code>undefined</code> is returned.
     *
     * @param {string} oSystemAliasData
     *   Data to be added to the buffer. The data format has to be the one described in
     *   <code>resolveSystemAlias</code>.
     *
     * @returns {object}
     *   The provided system alias data object.
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._writeSystemAliasToBuffer = function (oSystemAliasData) {
        if (oSystemAliasData && oSystemAliasData.id) {
            this._oSystemAliasBuffer.put(oSystemAliasData.id, oSystemAliasData);
        }
        return oSystemAliasData;
    };

    /**
     * Amends system alias sent from the backend for robustness. Mostly because
     * the backend serializer deletes any key that has an empty value.
     *
     * @param {string} oOdataFormat
     *   System alias data in Odata JSON format
     *
     * @returns {object}
     *   a jQuery promise that resolves to a system alias data object in OData JSON format.
     *   If the alias could not be resolved the promise is rejected.
     *   If an empty object is received the promise is resolved.
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._fixSystemAlias = function (oSystemAlias) {
       oSystemAlias = oSystemAlias || {};

       delete oSystemAlias.__metadata;

       var oFixedSystemAlias = {};
       oFixedSystemAlias.id = oSystemAlias.id || "";
       oFixedSystemAlias.client = oSystemAlias.client || "";
       oFixedSystemAlias.language = oSystemAlias.language || "";

       ["http", "https"].forEach(function (sDestination) {
           if (oSystemAlias.hasOwnProperty(sDestination)) {
              delete oSystemAlias[sDestination].__metadata;

              if (oSystemAlias[sDestination].id !== "") {
                  oFixedSystemAlias[sDestination] = jQuery.extend({
                    id: "",
                    host: "",
                    port: "",
                    pathPrefix: ""
                  }, oSystemAlias[sDestination]);
              }
           }
       });

       if (oSystemAlias.hasOwnProperty("rfc") && oSystemAlias.rfc.id) {
           delete oSystemAlias.rfc.__metadata;
           oFixedSystemAlias.rfc = jQuery.extend({
               id: "",
               systemId: "",
               host: "",
               service: 0,
               loginGroup: "",
               sncNameR3: "",
               sncQoPR3: ""
           }, oSystemAlias.rfc);
       }

       return oFixedSystemAlias;
    };

    /**
     * Reads the system alias data for one system alias ID using the interop service.
     *
     * @param {string} sSystemAliasId
     *   System alias ID
     *
     * @returns {object}
     *   a jQuery promise that resolves to a system alias data object in OData JSON format.
     *   If the alias could not be resolved the promise is rejected.
     *   If an empty object is received the promise is resolved.
     *
     * @private
     */
    sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._readSystemAliasViaInterop = function (sSystemAliasId) {
        var oDeferred = new jQuery.Deferred(),
            sRelativeUrl;

        sRelativeUrl = "SystemAliases(id='" + encodeURIComponent(sSystemAliasId) + "')?$format=json";
        this._getODataWrapper().read(sRelativeUrl,

            function (oSystemAliasData) {
                oDeferred.resolve(oSystemAliasData);
            },

            function (sMessage) {
                oDeferred.reject(sMessage);
            });

        return oDeferred.promise();
    };

}());

}; // end of sap/ushell_abap/adapters/abap/ClientSideTargetResolutionAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.ContainerAdapter') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's container adapter for the ABAP platform.
 *
 * @version 1.52.7
 */
/**
 * @namespace Default namespace for Unified Shell adapters for the ABAP platform. They can usually
 * be placed directly into this namespace, e.g.
 * <code>sap.ushell_abap.adapters.abap.ContainerAdapter</code>.
 *
 * @name sap.ushell_abap.adapters.abap
 * @see sap.ushell_abap.adapters.abap.ContainerAdapter
 * @since 1.11.0
 * @private
 */
(function () {
    "use strict";
    /*global document, jQuery, location, sap, window, URI, OData*/
    /*jslint nomen:true*/
    jQuery.sap.declare("sap.ushell_abap.adapters.abap.ContainerAdapter");

    jQuery.sap.require('sap.ushell.System'); // unlisted dependency retained

    jQuery.sap.require('sap.ushell.User'); // unlisted dependency retained


    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.services.initializeContainer("abap")</code>.
     * Constructs a new instance of the container adapter for the ABAP platform.
     *
     * @param {sap.ushell.System} oSystem
     *     the logon system (alias, platform, base URL)
     *
     * @class The Unified Shell's container adapter which does the bootstrap for the ABAP platform.
     *
     * @constructor
     * @see sap.ushell.services.initializeContainer
     * @since 1.11.0
     * @private
     */
    sap.ushell_abap.adapters.abap.ContainerAdapter = function (oSystem, sParameter, oProperties) {
        var oUser,
            that = this,
            S_LOGOFF_URL = "/sap/public/bc/icf/logoff";

        /**
         * Performs a logout to a remote system by adding a hidden IFRAME with an image pointing
         * to the logout URL. Resolves the Deferred when the image has been loaded (e.g. the logout
         * URL has been requested and the cookies processed).
         *
         * @param {object} oDeferred
         *   the deferred object of the logout
         * @param {string} sUrl
         *   the logout URL
         */
        sap.ui2.srvc.testPublishAt(that);
        function logoutViaHiddenIFrame(oDeferred, sUrl) {
            var oFrame = document.createElement("iframe"),
                sSafeUrl = sUrl.replace(/"/g, '\\"'); //TODO jQuery.sap.encodeJS

            window.addEventListener("message", function (oEvent) {
                if (oEvent.data === sUrl) {
                    oDeferred.resolve();
                }
            });

            oFrame.style.visibility = "hidden";
            document.body.appendChild(oFrame);
            // <html>
            // <body>
            // <script>
            //     function loaded() {
            //         parent.postMessage("http://remote.host/path/to/logout", "*");
            //     }
            //
            //     var element = document.createElement("img");
            //     element.src = "http://remote.host/path/to/logout";
            //     element.addEventListener("load", loaded);
            //     element.addEventListener("error", loaded);
            //     document.body.appendChild(element);
            // </script>
            // </body>
            // </html>
            oFrame.contentWindow.document.write('<html><body>\n'
                + '<script>function l(){parent.postMessage("' + sSafeUrl
                + '", "*");}\nvar e=document.createElement("img");e.src ="' + sSafeUrl
                + '";e.addEventListener("load",l);e.addEventListener("error",l);'
                + 'document.body.appendChild(e);<\/script><\/body><\/html>');
        }

        /**
         * Returns the logon system.
         *
         * @returns {sap.ushell.System}
         *     object providing information about the system where the container is logged in
         *
         * @since 1.11.0
         */
        this.getSystem = function () {
            return oSystem;
        };

        /**
         * Returns the logged-in user.
         *
         * @returns {sap.ushell.User}
         *      object providing information about the logged-in user
         *
         * @since 1.11.0
         */
        this.getUser = function () {
            return oUser;
        };

        sap.ui2.srvc.testPublishAt(that);
        function determineAccessibility(oStartupResult) {
            var vAccesibilityUrl = sap.ushell.utils.getParameterValueBoolean("sap-accessibility");
            if (vAccesibilityUrl !== undefined) {
                return vAccesibilityUrl;
            }
            vAccesibilityUrl = oStartupResult.accessibility;
            if (vAccesibilityUrl !== undefined) {
                return vAccesibilityUrl;
            }
            // as sap.ui.getCore().getConfiguration().getAccessibility(); //always true
            return false;
        }

        // propagate a) THEME editstate;
        //           b) ACCESSIBLITY and ACCESSIBLITY editstate to other properties of the
        // startup result (modified!)
        this._setThemeAccessibilityFlags = function (oStartupResult) {
            if (oStartupResult.userProfile && oStartupResult.userProfile.length) {
                var oUserProfileDataTheme,
                    oUserProfileDataAccessibility;
                oUserProfileDataTheme = oStartupResult.userProfile.filter(function (profileProperty) {
                    return profileProperty.id && profileProperty.id === 'THEME';
                })[0];
                // Theme
                if (oUserProfileDataTheme && oUserProfileDataTheme.value) {
                    oStartupResult.setThemePermitted = (oUserProfileDataTheme.editState === 3);
                    // it is not a good idea to disable theme editing when a url parameter is present
                    // if one has applied a messed up theme which corrupts the dialoge to set the theme,
                    // there is no non-expert easy way to get rid of the setting
                    //&& !(jQuery.sap.getUriParameters().get("sap-theme"));
                } else {
                    oStartupResult.oUserProfileDataTheme = false;
                }
                // AccessibilityPermitted: Note: we only register whether editing the Accessibility is allowed on the
                // ABAP Platform, we don't test whether accessibility is available!
                oUserProfileDataAccessibility = oStartupResult.userProfile.filter(function (profileProperty) {
                    return profileProperty.id && profileProperty.id === 'ACCESSIBILITY';
                })[0];
                if (oUserProfileDataAccessibility && oUserProfileDataAccessibility.id) {
                    oStartupResult.setAccessibilityPermitted = (oUserProfileDataAccessibility.editState === 3);
                } else {
                    oStartupResult.setAccessibilityPermitted = false;
                }
                if (oUserProfileDataAccessibility && oUserProfileDataAccessibility.value === "true") {
                    oStartupResult.accessibility = true;
                }
                if (oUserProfileDataAccessibility && oUserProfileDataAccessibility.value === "false") {
                    oStartupResult.accessibility = false;
                }
                // else present accessibility is retained!
                // set accessibility itself, respecting url parameters
                // note that currently sap.ui.getCore().getConfiguration().getAccessiblity() is always true per default
                oStartupResult.accessiblity = determineAccessibility(oStartupResult);
            }
        };

        /**
         * Propagates editState of profile properties
         * -> For further implementations please use this method instead of _setThemeAccessibilityFlags
         * -> should also fill the userProfile if some of the properties are missing e.g. 'value'
         * @param {object} oStartupResult
         *     Data which comes from Startup Service
         *
         * @private
         *
         * @since 1.30.0
         */
        this._setUserProfileFlags = function (oStartupResult) {

            if (oStartupResult.userProfile && oStartupResult.userProfile.length && jQuery.isArray(oStartupResult.userProfile)) {
                var oUserProfileIdHistory = {};
                //Initialize setContentDensityPermitted with a default value
                oStartupResult.setContentDensityPermitted = false;
                // ContentDensityPermitted: Note: we only register whether editing the ContentDensity is allowed on the
                // ABAP Platform, we don't test whether ContentDensity is available!
                oStartupResult.userProfile.forEach( function (oUserProfileParameter) {
                    //to avoid the treatment of duplicates -> so the first one will be used
                    if ((oUserProfileParameter.id in oUserProfileIdHistory)) {
                        return;
                    }
                    oUserProfileIdHistory[oUserProfileParameter.id] = oUserProfileParameter.id;
                    if (oUserProfileParameter.id === "CONTENT_DENSITY") {
                        oStartupResult.contentDensity = oUserProfileParameter.value;
                        oStartupResult.setContentDensityPermitted = (
                                oUserProfileParameter &&
                                oUserProfileParameter.editState === 3
                            ) || false;
                    }
                    if (oUserProfileParameter.id === "TRACKING_USAGE_ANALYTICS") {
                        if (typeof oUserProfileParameter.value === "string") {
                            //check if string is 'true' OR 'false' -> if 'yes' set the explicit boolean value
                            if (oUserProfileParameter.value.toLowerCase() === "true" || oUserProfileParameter.value.toLowerCase() === "false") {
                                oUserProfileParameter.value = (oUserProfileParameter.value.toLowerCase() === "true") || false;
                            } else {
                                oUserProfileParameter.value = undefined;
                            }
                        }

                        if (typeof oUserProfileParameter.value === "undefined" || typeof oUserProfileParameter.value === "boolean") {
                            oStartupResult.trackUsageAnalytics = oUserProfileParameter.value;
                        } else {
                            oStartupResult.trackUsageAnalytics = undefined;
                        }
                    }
                });
            }
        };

        /**
         * Does the bootstrap for the ABAP platform (and loads the container's configuration).
         *
         * @returns {jQuery.Promise}
         *     a promise that is resolved once the bootstrap is done
         *
         * @since 1.11.0
         */
        this.load = function () {
            var oDeferred = new jQuery.Deferred(),
                oStartupResult = oProperties.config;

            // recreate the system object as the oStartupResult contains more system
            // related information than oSystem
            oStartupResult.alias = oSystem.getAlias();
            oStartupResult.platform = oSystem.getPlatform();
            oSystem = new sap.ushell.System(oStartupResult);

            // Remove once oStartupResult is retrieved with 'setAccessibilityPermitted' & 'setThemePermitted' flags.
            this._setThemeAccessibilityFlags(oStartupResult);
            this._setUserProfileFlags(oStartupResult);
            oUser = new sap.ushell.User(oStartupResult);
            // set the SAP Language on the ODataWrapper,
            // if supplied, this will propagated to a sap-language header
            // assuring a consistent window language
            jQuery.sap.require("sap.ui2.srvc.ODataWrapper");
            sap.ui2.srvc.ODataWrapper["sap-language"] = oStartupResult.language;
            sap.ui2.srvc.ODataWrapper["sap-client"] = oStartupResult.client;

            if (oStartupResult.target) {
                // cache information about initial application resolution
                sap.ushell_abap.adapters.abap.ContainerAdapter.startUpApplication = {
                    adjustedInitialTarget: oStartupResult.adjustedInitialTarget, // "output"
                    target: oStartupResult.target // "input"
                };
            }

            //set user image
            if (oUser.isJamActive && oUser.isJamActive()) {
                OData.read('/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData/Self?$format=json',
                    function (oResponseData) {
                        var sJamUserId = oResponseData.results.Id,
                            sJamUserImageUrl = "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData/Members('" + sJamUserId + "')/ProfilePhoto/$value";

                        oUser.setImage(sJamUserImageUrl);
                    },
                    function (message) {
                        jQuery.sap.log.error("Could not recieve JAM user data");
                    });
            }

            return oDeferred.resolve().promise();
        };

        /**
         * Add further remote systems to be logged out
         *
         * @returns {jQuery.Promise}
         *      a <code>jQuery.Deferred</code> object's promise to be resolved
         *      after further remote systems are added in to local storage
         * @since 1.19.0
         */
        this.addFurtherRemoteSystems = function () {
            var oDeferredReadCatalogs = new jQuery.Deferred(),
                oPbs;

            oPbs = sap.ushell.Container.getService("PageBuilding").getFactory().
                getPageBuildingService();

            oPbs.readAllCatalogsForUser("type eq 'H' or type eq 'REMOTE'",
                function (oData) { //success handler
                    var aCatalogs = oData.results,
                        sSocialMediaUrl = "/sap/opu/odata/sap/SM_CATALOG_SRV/";
                    if (aCatalogs) {
                        aCatalogs.forEach(function (oCatalog) {
                            var bIsHANAUrl = /^\/sap\/hba\//.test(oCatalog.baseUrl);
                            if (oCatalog.type === 'H'
                                    || oCatalog.baseUrl === sSocialMediaUrl
                                    || bIsHANAUrl) {
                                sap.ushell.Container.addRemoteSystem(new sap.ushell.System({
                                    alias : oCatalog.systemAlias,
                                    platform: (bIsHANAUrl || oCatalog.type === 'H')
                                        ? "hana" : "abap",
                                    baseUrl: oCatalog.type === 'H' ? "" : ";o="
                                }));
                            }
                        });
                    }
                    oDeferredReadCatalogs.resolve();
                },
                function (sError) {//error handler
                    jQuery.sap.log.error("Reading REMOTE catalogs failed: "
                        + sError, null,
                        "sap.ushell_abap.adapters.abap.ContainerAdapter");
                    oDeferredReadCatalogs.reject();
                });
            return oDeferredReadCatalogs.promise();
        };

        /**
         * Returns the current URL. Mainly defined to ease testability.
         *
         * @returns {string}
         *    the URL displayed currently in the address bar
         *
         * @private
         */
        this.getCurrentUrl = function () {
            return window.location.href;
        };

        /**
         * Logs out the current user from this adapter's systems backend system.
         *
         * @param {boolean} bLogonSystem
         *      <code>true</code> if this system is the logon system
         * @returns {jQuery.Deferred}
         *      a <code>jQuery.Deferred</code> object's promise to be resolved when logout is
         *      finished, even when it failed
         * @since 1.11.0
         */
        this.logout = function (bLogonSystem) {
            var oDeferred = new jQuery.Deferred(),
                sUrl;

            if (bLogonSystem) {
                if (sap.ushell.utils.hasNativeLogoutCapability()) {
                    var sFullLogOffUrl = (new URI(S_LOGOFF_URL))
                        .absoluteTo(this.getCurrentUrl())
                        .search("")  // NOTE: remove query parameters
                        .toString();
                    window.external.getPrivateEpcm().doLogOff(sFullLogOffUrl);
                } else {
                    this.logoutRedirect();
                }
                jQuery.sap.log.info("ABAP system logged out: " + oSystem.getAlias(), null,
                    "sap.ushell_abap.adapters.abap.ContainerAdapter");
                oDeferred.resolve();
            } else {
                // construct fully qualified logoff URL (potentially adds scheme, authority, origin, sap-client)
                sUrl = oSystem.adjustUrl(S_LOGOFF_URL);

                // always logout via hidden iframe; this avoids implicit XHR re-logon in case the
                // logoff URL triggers a redirect (see BCP 0020079747 0000863255 2015)
                jQuery.sap.log.info("Logging out from system '" + oSystem.getAlias() + "' via hidden iframe");
                logoutViaHiddenIFrame(oDeferred, sUrl);
            }
            return oDeferred.promise();
        };

        /**
         * Does necessary url adjustments and triggers the technical
         * redirect to the logoff page
         *
         * @since 1.19.0
         */
        this.logoutRedirect = function () {
            var sUrl = oSystem.adjustUrl(S_LOGOFF_URL);
            this._setDocumentLocation(sUrl);
        };

        /**
         * Updates the document location forcing a redirect
         *
         * (Note: This functionality needs to be encapsulated
         * into an own helper function as it needs to be stubbed
         * in unit tests avoiding redirection to different locations)
         *
         * @param {string} sLocation
         * @private
         */
        this._setDocumentLocation = function (sLocation) {
            document.location = sLocation;
        };

    };
}());

}; // end of sap/ushell_abap/adapters/abap/ContainerAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.EndUserFeedbackAdapter') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The end user feedback adapter for the ABAP platform.
 *
 * @version 1.52.7
 */
(function () {
    "use strict";
    /*global jQuery, sap, setTimeout */
    jQuery.sap.declare("sap.ushell_abap.adapters.abap.EndUserFeedbackAdapter");
    
    

    sap.ushell_abap.adapters.abap.EndUserFeedbackAdapter = function (oSystem) {
        var oDataWrapperSettings = {
            baseUrl:     "/sap/opu/odata/UI2/INTEROP/",
            'sap-language': sap.ushell.Container.getUser().getLanguage(),
            'sap-client':   sap.ushell.Container.getLogonSystem().getClient()
        };
        var oODataWrapper = sap.ui2.srvc.createODataWrapper(oDataWrapperSettings),
            bLegalTextAlreadyCalled = false,
            sLegalText = "";
        /**
         * Sends a end user feedback to the backend system
         *
         * @param {JSON} JSON object containing the input fields required for
         *      the end user feedback.
         *
         * @class The Unified Shell's end user feedback adapter for the ABAP platform.
         *
         * @since 1.25.1
         * @private
         */
        this.sendFeedback = function (oEndUserFeedbackData) {
            var oDeferred,
                sRelativeUrl = "FeedbackHeaders",
                oEndUserFeedbackDataODataCreateObject = {
                    isAnonymous: oEndUserFeedbackData.isAnonymous,
                    feedbackText: oEndUserFeedbackData.feedbackText,
                    applicationType : oEndUserFeedbackData.applicationType || "<undefined>",
                    additionalInformation : oEndUserFeedbackData.additionalInformation,
                    url: oEndUserFeedbackData.url,
                    navigationIntent: oEndUserFeedbackData.navigationIntent,
                    formFactor: oEndUserFeedbackData.formFactor,
                    eMail: oEndUserFeedbackData.eMail,
                    userId: oEndUserFeedbackData.userId,
                    Ratings: oEndUserFeedbackData.ratings
                };

            oDeferred = new jQuery.Deferred();
            sap.ui2.srvc.ODataService.call(this, oODataWrapper, function () {
                return false;
            });

            oODataWrapper.create(sRelativeUrl, oEndUserFeedbackDataODataCreateObject, function (response) {
                oDeferred.resolve(response.feedbackCount);
            }, function (sErrorMessage) {
                oDeferred.reject(sErrorMessage);
            });

            return oDeferred.promise();
        };

        /**
         * Receives the legal text for the feedback dialog box
         * @returns promise with the legal text
         *
         * @public
         * @since 1.25.1
         */
        this.getLegalText = function () {
            var oDeferred,
                sRelativeUrl = "FeedbackLegalTexts('1')";

            oDeferred = new jQuery.Deferred();
            if (bLegalTextAlreadyCalled) {
                sap.ui2.srvc.call(function (response) {
                    oDeferred.resolve(sLegalText);
                });
                return oDeferred.promise();
            }

            sap.ui2.srvc.ODataService.call(this, oODataWrapper, function () {
                return false;
            });

            oODataWrapper.read(sRelativeUrl, function (response) {
                sLegalText = response.legalText;
                bLegalTextAlreadyCalled = true;
                oDeferred.resolve(response.legalText);
            }, function (sErrorMessage) {
                oDeferred.reject(sErrorMessage);
            });

            return oDeferred.promise();
        };

        /**
         * Checks if the service is enabled.
         * <p>
         * The service is only enabled if getLegalText can be invoked and returns a valid response
         *
         * @return {object} promise,
         *
         * @public
         * @since 1.25.1
         */
        this.isEnabled = function () {
            var oDeferred = new jQuery.Deferred(),
                oLegalTextPromise = this.getLegalText();
            oLegalTextPromise.done(function (sLegalText) {
                if (sLegalText) {
                    oDeferred.resolve();
                } else {
                    oDeferred.reject();
                }
            });
            oLegalTextPromise.fail(function (sErrorText) {
                oDeferred.reject();
            });
            return oDeferred.promise();
        };
    };
}());

}; // end of sap/ushell_abap/adapters/abap/EndUserFeedbackAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.LaunchPageAdapter') ) {

// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's page building adapter for the ABAP platform.
 *
 * @version 1.52.7
 */
(function () {
    "use strict";
    /*global jQuery, sap, URI, window */

    var sCOMPONENT = "sap.ushell_abap.adapters.abap.LaunchPageAdapter",
        sDEFAULT_PAGE_ID = "/UI2/Fiori2LaunchpadHome",
        sDEFAULT_CATALOG_ID = "/UI2/FLPD_CATALOG",
        sDYNAMIC_BASE_CHIP_ID = "X-SAP-UI2-CHIP:/UI2/DYNAMIC_APPLAUNCHER",
        sSTATIC_BASE_CHIP_ID = "X-SAP-UI2-CHIP:/UI2/STATIC_APPLAUNCHER",
        O_ERROR_TYPES = {
            catalogTileNotFound: "catalogTileNotFound",
            referenceTileNotFound: "referenceTileNotFound",
            noTargetMapping: "noTargetMapping",
            emptyConfiguration: "emptyConfiguration",
            tileIntentSupportException: "tileIntentSupportException"
        };

    jQuery.sap.declare("sap.ushell_abap.adapters.abap.LaunchPageAdapter");

    /**
     * This method MUST be called by the Unified Shell's container only.
     * Constructs a new instance of the launch page adapter for the ABAP platform.
     *
     * @param {object} oUnused
     *     the system served by the adapter
     * @param {string} sParam
     *     parameter as string (legacy, was used before oAdapterConfiguration was added)
     * @param {oject} oAdapterConfiguration
     *     configuration for the adapter. Enables configuration of OData service URLs and
     *     cache buster tokens, for example.
     *
     * @class The Unified Shell's launch page adapter for the ABAP platform.
     *
     * @constructor
     * @see sap.ushell.services.LaunchPage
     * @since 1.11.0
     * @private
     */
    sap.ushell_abap.adapters.abap.LaunchPageAdapter = function (oUnused, sParameter, oAdapterConfiguration) {
        var bCatalogsValid, // undefined = not yet valid
            oCurrentPageSet = null,
            bPageSetFullyLoaded = false,
            oGetGroupsDeferred, // used to synchronize parallel getGroups-requests
            oGetCatalogsDeferred, // used to synchronize parallel getCatalog-requests

            // Stores a boolean that indicates whether a target mapping is
            // supported on the current device. One should use
            // makeTargetMappingSupportKey to store and retrieve values to/from
            // this map.
            oTargetMappingSupport = new sap.ui2.srvc.Map(),

            oAdapterConfig = (oAdapterConfiguration && oAdapterConfiguration.config) || {},
            oTargetMappingServiceConfig = oAdapterConfig.services && oAdapterConfig.services.targetMappings,
            oLaunchPageServiceConfig = oAdapterConfig.services && oAdapterConfig.services.launchPage,
            mEarlyTileVisibilities = {},
            that = this;

        if (!oTargetMappingServiceConfig) {
            throw new Error("Configuration for target mappings service not passed");
        }
        if (!oTargetMappingServiceConfig.baseUrl) {
            throw new Error("baseUrl was not passed in Configuration for target mappings service");
        }
        if (!oTargetMappingServiceConfig.relativeUrl) {
            throw new Error("relativeUrl was not passed in Configuration for target mappings service");
        }
        /**
         * Robust call to <code>sap.ui2.srvc.ChipInstance#getImplementationAsSapui5()</code>.
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         * @param {string} sTitle
         * @param {string} sMessage
         * @returns {sap.ui.core.Control}
         */
        function getImplementationAsSapui5(oTile, sTitle, sMessage) {
            try {
                return oTile.getImplementationAsSapui5();
            } catch (ex) {
                // log errors, but do not fail
                jQuery.sap.log.error(sMessage + ": " + (ex.message || ex),
                    ex.stack, sCOMPONENT);
                return new sap.ushell.ui.tile.StaticTile({ //TODO remove as soon as RT has a own
                    icon: "sap-icon://error",
                    info: "",
                    infoState: "Critical",
                    subtitle: ex.message || ex,
                    title: sTitle
                }).addStyleClass("sapUshellTileError");
            }
        }

        /**
         * Checks if oChip has a bag with ID sBagId and if that bag contains a text with the name.
         * If so, the value for that text is returned. If not, undefined is returned.
         * The bag will not be created, in case it does not exist (calling getBag directly would do)!
         *
         * @param {object} oChip
         *  CHIP potentially containing the bag
         * @param {string} sBagId
         *  Bag ID to check for
         * @param {string} sTextName
         *  Text name to check for
         * @returns {string}
         *  Value for sTextName, or undefined if not found
         *
         * @private
         *
         * @see sap.ui2.srvc.ChipInstance#getBag
         * @see sap.ui2.srvc.ChipInstance#getBagIds
         * @see sap.ui2.srvc.Bag#getText
         * @see sap.ui2.srvc.Bag#getTextNames
         */
        sap.ui2.srvc.testPublishAt(that);
        function getBagText(oChip, sBagId, sTextName) {
            // calling getBag directly, will create the bag if it does not exist yet!
            if (oChip.getBagIds().indexOf(sBagId) > -1 &&
                oChip.getBag(sBagId).getTextNames().indexOf(sTextName) > -1) {
                return oChip.getBag(sBagId).getText(sTextName);
            }
        }

        /**
         * Checks if oChip has a bag with ID sBagId and if that bag contains a property with the ID.
         * If so, the value for that property is returned. If not, undefined is returned.
         * The bag will not be created, in case it does not exist (calling getBag directly would do)!
         *
         * @param {object} oChip
         *  CHIP potentially containing the bag
         * @param {string} sBagId
         *  Bag ID to check for
         * @param {string} sPropertyId
         *  Property ID to check for
         * @returns {string}
         *  Value for sPropertyId, or undefined if not found
         *
         * @private
         *
         * @see sap.ui2.srvc.ChipInstance#getBag
         * @see sap.ui2.srvc.ChipInstance#getBagIds
         * @see sap.ui2.srvc.Bag#getProperty
         * @see sap.ui2.srvc.Bag#getPropertyNames
         */
        sap.ui2.srvc.testPublishAt(that);
        function getBagProperty(oChip, sBagId, sPropertyId) {
            // calling getBag directly, will create the bag if it does not exist yet!
            if (oChip.getBagIds().indexOf(sBagId) > -1 &&
                oChip.getBag(sBagId).getPropertyNames().indexOf(sPropertyId) > -1) {
                return oChip.getBag(sBagId).getProperty(sPropertyId);
            }
        }

        /**
         * Checks if oChip has a configuration parameter with ID sConfigParameterId. Its value must be a stringified
         * JSON object. If that object contains a property named sPropertyName, it's value will be returned.
         * This method is save: In case the value cannot be read due to any reason undefined is returned.
         *
         * @param {object} oChip
         *  CHIP potentially containing the the configuration parameter and property and property name
         * @param {string} sConfigParameterId
         *  Configuration parameter ID to check for. The value must be a stringified JSON otherwise the method will
         *  return undefined
         * @param {string} sPropertyName
         *  Name of the property which is expected on the parsed object value from sConfigParameterId
         * @returns {string}
         *  Value for sPropertyName, or undefined if not found or an error occurred (e.g. due to failed parsing)
         *
         * @private
         *
         * @see sap.ui2.srvc.ChipInstance#getConfigurationParameter
         */
        sap.ui2.srvc.testPublishAt(that);
        function getConfigurationProperty(oChip, sConfigParameterId, sPropertyName) {
            var sTileConfig,
                oTileConfig;

            try {
                sTileConfig = oChip.getConfigurationParameter(sConfigParameterId);
                oTileConfig = JSON.parse(sTileConfig);
            } catch (e) {
                // most likely this is not an static or dynamic applauncher
                return;
            }

            if (oTileConfig[sPropertyName] !== undefined) { // also consider falsy values
               return oTileConfig[sPropertyName];
            }
        }

        /**
         * this method takes a configuration object and an array of elements (each must have a getId()
         * method) and returns a new array containing the ordered elements as defined in the
         * configuration.order
         *
         * Note1: elements not occurring in the string are appended to the end (as it was in aElements)
         * Note2: in case of double ids in configuration only the first one will take into account the
         *        following are ignored
         *
         * @param {object} [oConfiguration]
         *  object containing an order array, example: {order: ["id1", "id2", "id3"]}
         * @param {object[]} aElements
         *  array of objects. Each object must provide a getId method
         * @private
         * @since 1.11.0
         */
        sap.ui2.srvc.testPublishAt(that);
        function orderBasedOnConfiguration(oConfiguration, aElements) {
            var aOrder = oConfiguration && sap.ui2.srvc.isArray(oConfiguration.order) ?
                    oConfiguration.order : [],
                mElementsById = {},
                aOrderedElements = [],
                oElement,
                sId,
                i,
                n;

            aOrder = oConfiguration && sap.ui2.srvc.isArray(oConfiguration.order) ?
                oConfiguration.order : [];
            //append link tiles as they are exposed together with tiles via getGroupTiles
            aOrder = aOrder.concat(oConfiguration && sap.ui2.srvc.isArray(oConfiguration.linkOrder) ?
                oConfiguration.linkOrder : []);

            // create a map of instances by ID
            for (i = 0, n = aElements.length; i < n; i += 1) {
                oElement = aElements[i];
                mElementsById[oElement.getId()] = oElement;
            }
            // iterate over the order and move all found instances from the map to the result list
            for (i = 0, n = aOrder.length; i < n; i += 1) {
                sId = aOrder[i];
                if (Object.prototype.hasOwnProperty.call(mElementsById, sId)) {
                    aOrderedElements.push(mElementsById[sId]);
                    delete mElementsById[sId];
                }
            }
            // iterate again over the unordered list and add those that are still in the map
            for (i = 0, n = aElements.length; i < n; i += 1) {
                oElement = aElements[i];
                if (Object.prototype.hasOwnProperty.call(mElementsById, oElement.getId())) {
                    aOrderedElements.push(oElement);
                }
            }
            return aOrderedElements;
        }

        /**
         *  Orders the pages of oCurrentPageSet based on the configuration maintained in
         *  oCurrentPageSet and returns the result.
         *  @returns {sap.ui2.srvc.Page[]}
         *  @private
         */
        function getOrderedPages() {
            var oConfiguration;
            // always insert the default group ID at the first position, this moves the default
            // group to the beginning; it doesn't matter that the ID might be contained
            // twice, the order routine can handle this
            try {
                oConfiguration = JSON.parse(oCurrentPageSet.getConfiguration());
                oConfiguration.order.splice(0, 0, oCurrentPageSet.getDefaultPage().getId());
            } catch (e) {
                oConfiguration = {order: [oCurrentPageSet.getDefaultPage().getId()]};
            }
            return orderBasedOnConfiguration(oConfiguration, oCurrentPageSet.getPages());
        }

        /**
         * Stores the hidden groups under the existing configuration property of the pageset object
         * (by overriding the existing value or creating it if not yet exist).
         * A new property is added in order not to damage the existing groups order functionality
         * (i.e. configuration.order).
         *
         * @param {string[]} aHiddenGruopsIDs -
         *  The input parameter must be of type array, containing the IDs of the groups that should
         *  be set hidden. In case an empty array is provided all groups should be changed to
         *  visible.
         * @returns {object}
         *  promise object.
         *
         * @private
         */
        this.hideGroups = function (aHiddenGroupsIDs) {
            var oConf,
                oDeferred = new jQuery.Deferred();

            if (!aHiddenGroupsIDs || !(aHiddenGroupsIDs instanceof Array)) {
                oDeferred.reject('Input parameter must be of type Array.');
            } else {
                oConf = JSON.parse(oCurrentPageSet.getConfiguration() || "{}");

                // Replace the hidden groups array on the current configuration with the new hidden
                // groups array
                oConf.hiddenGroups = aHiddenGroupsIDs;
                oCurrentPageSet.setConfiguration(JSON.stringify(oConf),
                    /*fnSuccess*/oDeferred.resolve.bind(oDeferred),
                    /*fnFailure*/oDeferred.reject.bind(oDeferred));
            }
            return oDeferred.promise();
        };

        /**
         * Checks if the provided group should be visible or hidden.
         * It is decided according the group ID (oGroup should have a getId function).
         *
         *  @param {sap.ui2.srvc.Page} oGroup
         *    The group to be checked.
         *  @returns {boolean}
         *    true\false accordingly.
         *
         *  @private
         */
        this.isGroupVisible = function (oGroup) {
            var sConf = oCurrentPageSet.getConfiguration(),
                oConf,
                aHiddenGroups,
                i;

            if (!sConf) {
                return true;
            }

            oConf = JSON.parse(sConf);
            if (!oConf || !oConf.hiddenGroups) {
                return true;
            }

            //Go through the hidden groups array to check if we find the current group
            aHiddenGroups = oConf.hiddenGroups;
            for (i = 0; i < aHiddenGroups.length; i += 1) {
                if (aHiddenGroups[i] === oGroup.getId()) {
                    //If we found the group, it should not be visible
                    return false;
                }
            }
            //If the group is not in the hidden groups array then it should be visible
            return true;
        };

        /**
         * Triggers loading of a CHIP instance and adds the temporary property $loadingPromise
         * to it as it does not wait for the loading success or failure.
         * As soon as it is completely loaded (or loading failed) the $loadingPromise property
         * is removed again.
         */
        sap.ui2.srvc.testPublishAt(that);
        function triggerChipInstanceLoad(oChipInstance) {
            function fnSuccess() {
                oChipInstance.hasOwnProperty("_loadingDeferred") && oChipInstance._loadingDeferred.resolve();
                delete oChipInstance._loadingDeferred;
                delete oChipInstance.$loadingPromise; // was temporarily needed only
            }
            function fnFailure(sMessage) {
                // log errors, but do not fail
                jQuery.sap.log.error("Failed to load tile: " + sMessage,
                    oChipInstance.toString(), sCOMPONENT);
                oChipInstance.hasOwnProperty("_loadingDeferred") && oChipInstance._loadingDeferred.reject();
                delete oChipInstance._loadingDeferred;
                delete oChipInstance.$loadingPromise; // was temporarily needed only
            }
            oChipInstance.load(fnSuccess, fnFailure);
        }

        /**
         * Triggers loading of all ChipInstances of the given pages and calls fnLocalChipsLoaded
         * when all local CHIP instances are completely loaded.
         *
         * @param {sap.ui2.srvc.Page[]} aPages
         *  the pages
         * @param {function} fnLocalChipsLoaded
         *  Success handler which is called as soon as all LOCAL CHIPs are completely loaded.
         * @private
         */
        function loadApplaunchersAndDelayLoadingOfOtherChips(aPages, fnLocalChipsLoaded) {
            var iPendingRequests = 0, // counter used for loading app launchers only
                aLocalCustomTiles = [],
                aRemoteTiles = [];

            /**
             * if all pending requests are done the function triggers ordering of the array and
             * calls resolve afterwards
             */
            function finalize() {
                if (iPendingRequests <= 0) {
                    fnLocalChipsLoaded();
                }
            }

            /**
             * Loads dependent libraries (core-ext-light for custom tiles
             * and custom remote tiles) and triggers the loading of the chip instances.
             */
            function loadDependenciesAndTriggerChipInstanceLoad(oChipInstance) {
                // append the promise for loading to the instance, but only as long as loading is
                // pending. Note: will be used by getTileView
                oChipInstance._loadingDeferred = new jQuery.Deferred(); // used for KPI tiles and custom tiles
                oChipInstance.$loadingPromise = oChipInstance._loadingDeferred.promise();

                if (window["sap-ui-debug"]) {
                    triggerChipInstanceLoad(oChipInstance);
                } else {
                    // since 1.46, multiple calls of jQuery.sap._loadJSResourceAsync
                    // for the same module will return the same promise,
                    // i.e. there is no need to check if the module has been loaded before
                    // (which has been a weak implementation, see BCP 1770058772)

                    // we don't distinguish KPI tiles from other custom tiles, because the
                    // static preload optimization (sap/fiori/indicator-tiles.js bundle)
                    // was only valid for a certain set of old KPI tiles; for newer KPI tiles used in S4
                    // the bundle did not contain all depenencies and therefore the optimization
                    // led to even more round trips; in practice, chances are high that the homepage
                    // will contain some non-KPI custom tiles, so core-ext-light will probably be loaded
                    // in most cases
                    // see internal BCP 1770271005

                    // TODO: later, the core-ext-light loading should be implemented centrally in
                    // the UI5ComponentLoader service and all calls should delegate to a central
                    // method which can then also be changed centrally (further optimization might
                    // be using several core-ext-light modules)
                    jQuery.sap._loadJSResourceAsync("sap/fiori/core-ext-light.js").then(function () {
                        triggerChipInstanceLoad(oChipInstance);
                    }).catch(function (){
                        jQuery.sap.log.error("Failed to load sap/fiori/core-ext-light.js");
                    });
                }
            }

            /**
             * loads a CHIP instance and triggers finalize() or reject afterwards
             */
            function loadChipInstance(oChipInstance) {
                function onLoad() {
                    iPendingRequests -= 1;
                    finalize();
                }
                iPendingRequests += 1;
                oChipInstance.load(onLoad, function (sMessage) {
                    // log errors, but do not fail
                    jQuery.sap.log.error("Failed to load tile: " + sMessage,
                        oChipInstance.toString(), sCOMPONENT);
                    onLoad();
                });
            }

            aPages.forEach(function (oPage) {
                oPage.getChipInstances().forEach(function (oChipInstance) {
                    if (isAppLauncher(oChipInstance)) {
                        // load local CHIP instances completely (also wait for them)
                        loadChipInstance(oChipInstance);
                    } else if (isRemoteChipInstance(oChipInstance)) {
                        aRemoteTiles.push(oChipInstance);
                    } else {
                        aLocalCustomTiles.push(oChipInstance);
                    }
                });
            });

            // after loading of app launchers is done we load the local custom tiles
            aLocalCustomTiles.forEach(function (oChipInstance) {
                loadDependenciesAndTriggerChipInstanceLoad(oChipInstance);
            });

            // after loading local tiles we load the remote tiles
            aRemoteTiles.forEach(function (oChipInstance) {
                loadDependenciesAndTriggerChipInstanceLoad(oChipInstance);
            });
            finalize(); // if no CHIP instances exist
        }

        /**
         * This method reads all target mappings for the current user via
         * a) a compactTM promise if present in config
         * b) xor a start_up service call with tm_compact=true
         * @returns {object}
         *    a jQuery promise
         *  which resolves to an array
         *  <code>
         *  [ {
         *          semanticObject : "SO",
         *          semanticAction : "action",
         *          formFactors : { desktop : true , ...}
         *    },
         *    ...
         *  ]
         * </code>
         */
        sap.ui2.srvc.testPublishAt(that, "readTargetMappings");
        function readTargetMappings() {
            var oDeferred = new jQuery.Deferred(),
                oTargetMappingsConfig,
                sCacheId,
                sUrl;

            function formatResult(oDirectStartTargetMappings) {
                var aRes = [];
                Object.keys(oDirectStartTargetMappings).forEach(function(sKey) {
                    var x = {};
                    ["semanticObject", "semanticAction", "formFactors"].forEach(function (sMember) {
                        x[sMember] = oDirectStartTargetMappings[sKey][sMember];
                    });
                    aRes.push(x);
                });
                return aRes;
            }
            if (jQuery.sap.getObject("compactTMPromise", undefined, oAdapterConfig)) {
                oAdapterConfig.compactTMPromise.then(function(oResult) {
                    var aRes = formatResult(oResult || {});
                    oDeferred.resolve({ results : aRes});
                }, function(sFail) {
                    oDeferred.reject(sFail);
                });
                return oDeferred.promise();
            }
            oTargetMappingsConfig = jQuery.sap.getObject("services.targetMappings", 0, oAdapterConfig);
            sCacheId = oTargetMappingsConfig.cacheId || "";
            sUrl = "/sap/bc/ui2/start_up?so=*&action=*&tm-compact=true&shellType=" + that._getShellType() + "&depth=0";

            if (sCacheId) {
                sUrl += (sUrl.indexOf("?") < 0 ? "?" : "&" ) + "sap-cache-id=" + sCacheId;
            }
            var sUI2CacheDisable = oTargetMappingsConfig.sUI2CacheDisable
            if (sUI2CacheDisable) {
                sUrl += (sUrl.indexOf("?") < 0 ? "?" : "&" ) + "sap-ui2-cache-disable=" + sUI2CacheDisable;
            }

            sap.ui2.srvc.get(
                sUrl,
                false, /*xml=*/
                function (sDirectStartResult) {
                    var oDirectStartResult = JSON.parse(sDirectStartResult),
                        oDirectStartTargetMappings = oDirectStartResult.targetMappings || {};
                    var aRes = formatResult(oDirectStartTargetMappings);
                    oDeferred.resolve({ results : aRes});
                },
                function (sMessage) {
                    oDeferred.reject(sMessage);
                }
            );
            return oDeferred.promise();
        }

        /**
         * Returns the key to access the TargetMappingSupport map.
         *
         * @param {string} sSemanticObject
         *   the semantic object
         * @param {string} sSemanticAction
         *   the action
         * @returns {string}
         *   a key that can be used to access oTargetMappingsConfig
         * @private
         */
        sap.ui2.srvc.testPublishAt(that);
        function makeTargetMappingSupportKey(sSemanticObject, sSemanticAction) {
            return sSemanticObject + "-" + sSemanticAction;
        }

        /**
         * Tells whether the given tile is a CHIP instance wrapper only, i.e. does not contain
         * added value compared to the wrapped CHIP. This is the case for the results of
         * {@link #addTile}, but not for {@link #addBookmark}. Such wrappers must be unwrapped
         * by {@link #moveTile} or else the title becomes "hard coded" in the newly created CHIP
         * instance.
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         * @returns {boolean}
         */
        sap.ui2.srvc.testPublishAt(that);
        function isWrapperOnly(oTile) {
            // Note: getLayoutData() not relevant for LaunchPage service
            //       getTitle() relevant, but difficult and always together with getConfiguration()
            //       getBagIds() difficult due to CHIP bags, but not needed for our goal
            return !oTile.getConfiguration();
        }

        /**
         * Wraps the given CHIPs as CHIP instances, filtering out action CHIPs.
         *
         * @param {sap.ui2.srvc.Chip[]} aChips array of chips
         * @returns {sap.ui2.srvc.ChipInstance[]} array of chip instances
         */
        function wrapAsChipInstances(aChips) {
            var aChipInstances = [],
                oFactory = sap.ushell.Container.getService("PageBuilding").getFactory();

            aChips.forEach(function (oChip) {
                var oRemoteCatalog = oChip.getRemoteCatalog(),
                    oChipInstance;
                //Action CHIP filtered out in catalog; can thus also not be added to any group
                if (oChip.getBaseChipId() === "X-SAP-UI2-CHIP:/UI2/ACTION") {
                    return;
                }
                oChipInstance = oFactory.createChipInstance({
                    chipId: oChip.getId(),
                    remoteCatalogId: oRemoteCatalog && oRemoteCatalog.getId()
                });
                aChipInstances.push(oChipInstance);
            });

            return aChipInstances;
        }

        /**
         * Wraps the current <code>allCatalogs</code> collection into black box objects.
         *
         * @returns {Array}
         *
         * TODO cache result?!
         */
        function wrapCatalogs() {
            var oAllCatalogs = oCurrentPageSet.getDefaultPage().getAllCatalogs(),
                oCatalog,
                aCatalogs = oAllCatalogs.getCatalogs(),
                aWrappedCatalogs = [],
                i;

            for (i = 0; i < aCatalogs.length; i += 1) {
                oCatalog = aCatalogs[i];
                // handle catalog stubs gracefully
                aWrappedCatalogs.push({
                    data: {}, //TODO find out what shall be inside this property?
                    errorMessage: undefined,
                    id: oCatalog.getId(),
                    title: oCatalog.isStub()
                        ? oCatalog.getId() // title not available, use ID instead
                        : oCatalog.getTitle(),
                    tiles: oCatalog.isStub()
                        ? []
                        : wrapAsChipInstances(oCatalog.getChips()),
                    ui2catalog: oCatalog //for convenience
                });
            }

            return aWrappedCatalogs;
        }

        /**
         * Tells whether the given CHIP instance is a static or dynamic app launcher
         * @param {sap.ui2.srvc.ChipInstance} oChipInstance
         * @returns {boolean}
         */
        function isAppLauncher(oChipInstance) {
            var sBaseChipId = oChipInstance.getChip().getBaseChipId();
            return sBaseChipId === sDYNAMIC_BASE_CHIP_ID || sBaseChipId === sSTATIC_BASE_CHIP_ID;
        }

        /**
         * Tells whether the given CHIP instance is remote
         * @param {sap.ui2.srvc.ChipInstance} oChipInstance
         * @returns {boolean}
         */
        function isRemoteChipInstance(oChipInstance) {
            if (oChipInstance.getChip().getRemoteCatalog()) {
                return true;
            }
            return false;
        }

        /**
         * Returns the tile configuration of the given (app launcher) CHIP
         * instance. It logs an error message if the tile configuration cannot
         * be parsed.
         *
         * @param {sap.ui2.srvc.ChipInstance} oChipInstance
         *
         * @returns {object}
         *   the tile configuration
         */
        function getTileConfiguration(oChipInstance) {
            var oParsedTileConfiguration,
                sConfigParam = oChipInstance.getConfigurationParameter("tileConfiguration");
            try {
                oParsedTileConfiguration = JSON.parse(sConfigParam || "{}");
            } catch (oEx) {
                jQuery.sap.log.error("Tile with ID '" + oChipInstance.getId() +
                    "' has a corrupt configuration containing a 'tileConfiguration' value '" + sConfigParam +
                    "' which could not be parsed. If present, a (stringified) JSON is expected as value.",
                    oEx.message,
                    "sap.ushell_abap.adapters.abap.LaunchPageAdapter"
                );
                return {}; // the FLP must react robust on broken single tiles
            }
            return oParsedTileConfiguration;
        }

        /**
         * Identifies the parts of a full chip id.
         *
         * @param {string} sFullId
         *   A chip id, a string like:
         *   <ul>
         *      <li>X-SAP-UI2-PAGE:X-SAP-UI2-CATALOGPAGE:/UI2/FLP_DEMO_WDA_GUI:00O2TR99M0M42Q9E2AF196A2D</li>
         *      <li>X-SAP-UI2-CATALOGPAGE:/UI2/FLP_DEMO_WDA_GUI:00O2TR99M0M42Q9E2AF196A2D</li>
         *      <li>X-SAP-UI2-CHIP:/UI2/STATIC_APPLAUNCHER</li>
         *   </ul>
         *
         * @return {object}
         *   The parts that make up the full chip id. An object like:
         *   <pre>
         *   {
         *      id: "00O2TR99M0M42Q9E2AF196A2D",
         *      catalog: "X-SAP-UI2-CATALOGPAGE:/UI2/FLP_DEMO_WDA_GUI",
         *      prefix: "X-SAP-UI2-PAGE" // or null
         *   }
         *   </pre>
         */
        this._parseFullChipId = function (sFullId) {
            var aSplit = sFullId.split(":"),
                sId = aSplit.pop(),
                sPrefix = null;

            if (aSplit.length > 2) {
                sPrefix = aSplit.shift();
            }

            return {
                id: sId,
                prefix: sPrefix,
                catalog: aSplit.join(":")
            };
        };

        /**
         * Extracts catalog id and chip is from a text.
         *
         * This method logs a warning if the input text is not as expected.
         *
         * @param {string} sReferenceLost
         *   A text indicating that a certain reference is lost.
         *   The text is assumed to be a string in the format:
         *   'Reference lost: Note <NUMBER> Page <CATALOG_ID> , Instance ID <CHIP_ID>'
         *
         * @return {object}
         *   The catalog id and the chip id, in an object like:
         *   <pre>
         *   {
         *      id: <CHIP_ID>,
         *      catalog: <CATALOG_ID>
         *   }
         *   </pre>
         *
         *   or as follows in case <code>sReferenceLost</code> is not in the
         *   expected format:
         *   <pre>
         *   {
         *      id: "Unknown",
         *      catalog: "Unknown"
         *   }
         *   </pre>
         *
         * @private
         */
        this._parseReferenceLost = function (sReferenceLost) {
            var aCatalogAndChipId;

            var sReferenceLostSafe = sReferenceLost || Object.prototype.toString.apply(sReferenceLostSafe);

            if (!sReferenceLostSafe.match(/^Reference lost: Note \d+ Page.+\s,\sInstance ID.+$/)) {
                jQuery.sap.log.warning(
                    "The string that describes a lost reference is in an unexpected format",
                    "This is expected to be a string exactly like 'Reference lost: Note <#> Page <CATALOG_ID> , Instance ID <CHIP_ID>' instead of the given '" + sReferenceLost + "'",
                    "sap.ushell_abap.adapters.abap.LaunchPageAdapter"
                );

                return {
                    id: "Unknown",
                    catalog: "Unknown"
                };
            }

            aCatalogAndChipId = sReferenceLostSafe.split(" , ").map(function (sPart) {
                return sPart.split(" ").pop();
            });

            return {
                id: aCatalogAndChipId[1],
                catalog: aCatalogAndChipId[0]
            };
        };


        /**
         * Flattens an array of items (deeply nested at any level).
         *
         * @param {array} aItems
         *   An array of items to flatten
         *
         * @returns {array}
         *   The flattened array of items
         */
        this._flattenArray = function (aItems) {
            var that = this;

            if (Object.prototype.toString.apply(aItems) !== "[object Array]") {
                return aItems;
            }

            return aItems.reduce(function (aFlattened, vItem) {
                return aFlattened.concat(that._flattenArray(vItem));
            }, [] /* oResult */);
        };

        /**
         * Finds and reports possible tile errors in a given PageSet object.
         *
         * <p>
         * It logs at most two messages (one warning and one error), grouping
         * errors by groups and error type.
         * </p>
         *
         * @param {sap.ui2.srvc.Page[]} aPages
         *    an array of all the pages.
         * @param {sap.ui2.srvc.Map} oTargetMappingSupport
         *   a map containing whether an intent is supported taking into
         *   account its form factor.
         *
         * @private
         */
        this._findAndReportTileErrors = function (aPages, oTargetMappingSupport) {
            var aGroupTileErrors;

            aGroupTileErrors = this._getPossibleTileErrors(
                aPages,
                oTargetMappingSupport
            );

            if (aGroupTileErrors.length > 0) {
                this._reportTileErrors(aGroupTileErrors);
            }
        };


        /**
         * Finds errors on tiles in all Groups.
         *
         * @param {array} aPages
         *   an array of <code>sap.ui2.srvc.Page</code> objects representing
         *   groups of tiles.
         *
         * @param {sap.ui2.srvc.Map} oTargetMappingSupport
         *   a map containing whether an intent is supported taking into
         *   account its form factor.
         *
         * @returns {array}
         *   An array describing each error found.
         *
         * @private
         */
        this._getPossibleTileErrors = function(aPages, oTargetMappingSupport) {
            var that = this;

            return aPages.map(function (oPage) {
                return {
                    group: { id: oPage.getId(), title: oPage.getTitle() },
                    errors: that._getPossibleTileErrorsFromOnePage(oPage, oTargetMappingSupport)
                };
            });
        };

        /**
         * Finds possible errors on tiles in a given Group.
         *
         * @param {object} oPage
         *   an <code>sap.ui2.srvc.Page</code> object representing a
         *   group of tiles.
         *
         * @param {sap.ui2.srvc.Map} oTargetMappingSupport
         *   a map containing whether an intent is supported taking into
         *   account its form factor.
         *
         * @returns {array}
         *   An array describing each error found
         *
         * @private
         */
        this._getPossibleTileErrorsFromOnePage = function (oPage, oTargetMappingSupport) {
            var that = this;

            var aErrors = oPage.getChipInstances().reduce(function (aResult, oChipInstance) {
                var oTileSupport,
                    oChipId,
                    sSubTitle,
                    sTitle,
                    oLostReference,
                    oTileConfiguration,
                    sRawTileConfiguration,
                    oChip;

                oChip = oChipInstance.getChip();
                oChipId = that._parseFullChipId(oChip.getId());

                // The PageSets request uses $expand on Chips which means Chip
                // data should be included in the response.
                if (!oChip.isInitiallyDefined()) {
                    // i.e., chip === null
                    aResult.push({
                        type: O_ERROR_TYPES.catalogTileNotFound,
                        chipInstanceId: oChipInstance.getId(),
                        chipId: oChipId.id,
                        chipCatalogId: oChipId.catalog
                    });

                } else if (oChip.isReference() && oChip.isBrokenReference()) {
                    // title is guaranteed to be a string like:
                    // Reference lost: Page <PREFIX>:<CATALOG_ID> , Instance ID <CHIP_ID>
                    oLostReference = that._parseReferenceLost(oChip.getTitle());

                    aResult.push({
                        type: O_ERROR_TYPES.referenceTileNotFound,
                        chipInstanceId: oChipInstance.getId(),
                        referenceChipId: oChipId.id,
                        referenceChipCatalogId: oChipId.catalog,
                        missingReferredChipId: oLostReference.id,
                        missingReferredCatalogId: oLostReference.catalog
                    });

                } else {

                    try {
                        oTileSupport = that._checkTileIntentSupport(oChipInstance, oTargetMappingSupport);
                    } catch (oError) {
                        oTileSupport = {
                            isSupported: false,
                            reason: O_ERROR_TYPES.tileIntentSupportException,
                            exception: oError
                        };
                    }

                    if (!oTileSupport.isSupported) {
                        sTitle = getBagText(oChipInstance, "tileProperties", "display_title_text");
                        sSubTitle = getBagText(oChipInstance, "tileProperties", "display_subtitle_text");
                        switch (oTileSupport.reason) {
                            case O_ERROR_TYPES.noTargetMapping:
                                oTileConfiguration = getTileConfiguration(oChipInstance);
                                aResult.push({
                                    type: O_ERROR_TYPES.noTargetMapping,
                                    chipInstanceId: oChipInstance.getId(),
                                    chipInstanceTitle: sTitle || oTileConfiguration.display_title_text,
                                    chipInstanceSubtitle: sSubTitle || oTileConfiguration.display_subtitle_text,
                                    tileURL: oTileConfiguration.navigation_target_url
                                });
                                break;
                            case O_ERROR_TYPES.emptyConfiguration:
                                sRawTileConfiguration = oChipInstance.getConfigurationParameter("tileConfiguration");
                                aResult.push({
                                    type: O_ERROR_TYPES.emptyConfiguration,
                                    chipInstanceId: oChipInstance.getId(),
                                    chipInstanceTitle: sTitle || oChipInstance.getTitle(),
                                    chipInstanceSubtitle: sSubTitle || null,
                                    tileConfiguration: sRawTileConfiguration
                                });
                                break;
                            case O_ERROR_TYPES.tileIntentSupportException:
                                aResult.push({
                                    type: O_ERROR_TYPES.tileIntentSupportException,
                                    exception: oTileSupport.exception,
                                    chipInstanceId: oChipInstance.getId()
                                });
                                break;
                            case O_ERROR_TYPES.referenceTileNotFound:
                                // ignored because it's already handled above
                                // (for all tiles - not just AppLaunchers).
                                break;
                            default:
                                // nop
                        }
                    }
                }

                return aResult;

            }, [] /* aResult */);

            return aErrors;
        };

        /**
         * Formats information about one error into a string.
         *
         * @param {object} oTileError
         *
         * An object representing tile errors
         */
        this._formatTileError = function (oTileError) {
            switch (oTileError.type) {
                case O_ERROR_TYPES.catalogTileNotFound:
                    return "comes from catalog tile with ID '" + oTileError.chipId +
                        "' but this cannot be found in catalog '" + oTileError.chipCatalogId + "' (CATALOG TILE NOT FOUND).";
                case O_ERROR_TYPES.referenceTileNotFound:
                    return "comes from reference tile '" + oTileError.referenceChipId + "'" +
                          " in catalog '" + oTileError.referenceChipCatalogId + "'" +
                          " which in turn refers to the tile '" + oTileError.missingReferredChipId + "'" +
                          " from catalog '" + oTileError.missingReferredCatalogId + "', but this is missing (REFERENCED TILE NOT FOUND).";
                case O_ERROR_TYPES.noTargetMapping:
                    return "was hidden because a target mapping for the tile URL '" + oTileError.tileURL + "' was not found (TARGET MAPPING NOT FOUND).";
                case O_ERROR_TYPES.emptyConfiguration:
                    return "the tile configuration '" + oTileError.tileConfiguration + "' is empty or invalid (BAD CONFIGURATION).";
                case O_ERROR_TYPES.tileIntentSupportException:
                    return "exception occurred while checking tile intent support: " + oTileError.exception + " (EXCEPTION RAISED).";
                default:
                    return "unknown error type '" + oTileError.type + "' (UNKNOWN ERROR). Error data: " + JSON.stringify(oTileError, null, 3);
            }
        };

        /**
         * Logs a warning or an error message about possible tile errors.
         *
         * @param {array} aErrorsByGroup
         *    an array containing information about errors within one group
         * @private
         */
        this._reportTileErrors = function (aErrorsByGroup) {
            var that = this;
            var aWarningMessage = [];
            var aErrorMessage = [];

            // constructs a string like "Title (Subtitle)"
            function constructTileTitle(sTitle, sSubtitle) {
                var sCombined = [ sTitle, sSubtitle ]
                    .map(function (s, i) {
                        return i === 1 && s ? "(" + s + ")" : s;
                    })
                    .filter(function (s) {
                        return typeof s === "string" && s.length > 0;
                    })
                    .join(" ");

                return sCombined.length > 0
                    ? "'" + sCombined + "'"
                    : "";
            }

            aErrorsByGroup.forEach(function (oErrorByGroup) {
                var sGroupInformation = "  in Group '" + oErrorByGroup.group.title + "' with Group ID '" + oErrorByGroup.group.id + "'",
                    aGroupErrorMessage = [],
                    aGroupWarningMessage = [];

                oErrorByGroup.errors.forEach(function (oError) {
                    var sTileIdentifier = [
                        "  - tile instance",
                        constructTileTitle(oError.chipInstanceTitle, oError.chipInstanceSubtitle),
                        "with ID '" + oError.chipInstanceId + "'"
                    ]
                    .filter(function (s) { return s.length > 0; })
                    .join(" ");

                    if (oError.type === O_ERROR_TYPES.noTargetMapping) {
                        aGroupWarningMessage.push([
                            sTileIdentifier,
                            "    " + that._formatTileError(oError)
                        ].join("\n"));
                    } else {
                        aGroupErrorMessage.push([
                            sTileIdentifier,
                            "    " + that._formatTileError(oError)
                        ].join("\n"));
                    }
                });

                if (aGroupErrorMessage.length > 0) {
                    aErrorMessage.push([
                        sGroupInformation,
                        aGroupErrorMessage.join("\n")
                    ].join("\n"));
                }
                if (aGroupWarningMessage.length > 0) {
                    aWarningMessage.push([
                        sGroupInformation,
                        aGroupWarningMessage.join("\n")
                    ].join("\n"));
                }
            });

            if (aErrorMessage.length > 0) {
                aErrorMessage.unshift("Tile error(s) were detected:");
                jQuery.sap.log.error(aErrorMessage.join("\n"), null, "sap.ushell_abap.adapters.abap.LaunchPageAdapter");
            }

            if (aWarningMessage.length > 0) {
                aWarningMessage.unshift("Tile warning(s) were detected:");
                jQuery.sap.log.warning(aWarningMessage.join("\n"), null, "sap.ushell_abap.adapters.abap.LaunchPageAdapter");
            }
        };

        /**
         * Returns the groups of the user. This is an asynchronous function using a jQuery.Promise.
         * In case of success its <code>done</code> function is called and gets an array of
         * <code>sap.ui2.srvc.Page</code> objects. These page objects can be passed in to all
         * functions expecting a group.
         *
         * The first group in this list is considered the default group.
         *
         * In case of error the promise's <code>fail</code> function is called.
         *
         * @returns {object}
         *  jQuery.Promise object.
         * @since 1.11.0
         */
        this.getGroups = function () {
            var that = this,
                oDeferred, // the deferred used for page set loading
                oMappingPromise, // the promise of readMappingTargets
                oUshellPbs, // ushell service PageBuilding
                oPageSetsPromise;

            if (bPageSetFullyLoaded) {
                // return the already known page set (the order is recomputed because the page set
                // might have changed it since the last call)
                return (new jQuery.Deferred()).resolve(getOrderedPages()).promise();
            }
            if (!oGetGroupsDeferred) {
                // start a new request and remember it in oGetGroupsDeferred, so that parallel
                // calls don't start another one
                oGetGroupsDeferred = new jQuery.Deferred();
                oDeferred = new jQuery.Deferred();
                oUshellPbs = sap.ushell.Container.getService("PageBuilding");

                if (oLaunchPageServiceConfig && oLaunchPageServiceConfig.cacheId) {
                    // add PageSet cache buster token if configured
                    oUshellPbs.getFactory().getPageBuildingService().readPageSet.cacheBusterTokens
                        .put(sDEFAULT_PAGE_ID, oLaunchPageServiceConfig.cacheId);
                }
                if (oLaunchPageServiceConfig && oLaunchPageServiceConfig["sap-ui2-cache-disable"]
                    && oUshellPbs.getFactory().getPageBuildingService().readPageSet) {
                    oUshellPbs.getFactory().getPageBuildingService().readPageSet.appendedParameters =
                        { "sap-ui2-cache-disable" : oLaunchPageServiceConfig["sap-ui2-cache-disable"] };
                }

                oPageSetsPromise = oUshellPbs.getPageSet(sDEFAULT_PAGE_ID);

                oPageSetsPromise
                    .fail(oDeferred.reject.bind(oDeferred))
                    .done(function (oPageSet) {

                        oCurrentPageSet = oPageSet;
                        // remove unsupported pages before loading their chip instances
                        oCurrentPageSet.filter([sDEFAULT_PAGE_ID], [sDEFAULT_CATALOG_ID]);
                        // Trigger load of all CHIP instances, but wait for the locals only
                        loadApplaunchersAndDelayLoadingOfOtherChips(oPageSet.getPages(),
                            oDeferred.resolve.bind(oDeferred, oPageSet));
                    });

                oMappingPromise = readTargetMappings().done(function (oTargetMappings) {
                    var sFormFactor = sap.ui2.srvc.getFormFactor();

                    oTargetMappings.results.forEach(function (oTargetMapping) {
                        var sKey = makeTargetMappingSupportKey(
                            oTargetMapping.semanticObject,
                            oTargetMapping.semanticAction
                        );

                        oTargetMappingSupport.put(sKey,
                            // make sure it's boolean
                            oTargetMappingSupport.get(sKey)
                            || !!(oTargetMapping.formFactors && oTargetMapping.formFactors[sFormFactor]));
                    });
                });

                jQuery.when(oMappingPromise, oDeferred)
                    .done(function (oTargetMappings /* unused */, oPageSet) {
                        bPageSetFullyLoaded = true;

                        if (jQuery.sap.log.getLevel() >= jQuery.sap.log.Level.DEBUG) { // sap-ui-debug = true
                            that._findAndReportTileErrors(oPageSet.getPages(), oTargetMappingSupport);
                        }

                        oGetGroupsDeferred.resolve(getOrderedPages());
                    })
                    .fail(oGetGroupsDeferred.reject.bind(oGetGroupsDeferred));
            }
            return oGetGroupsDeferred.promise();
        };


        /**
         * Returns the default group. This is an asynchronous function using a jQuery.Promise.
         * In case of success its <code>done</code> function is called and gets the
         * <code>sap.ui2.srvc.Page</code> object representing the default group.
         *
         * In case of error the promise's <code>fail</code> function is called.
         *
         * @returns {object}
         *  jQuery.Promise object.
         * @since 1.11.0
         */
        this.getDefaultGroup = function () {
            var oDeferred = new jQuery.Deferred();

            this.getGroups().done(function () {
                //TODO test if getGroups()[0] is faster than getDefaultPage
                oDeferred.resolve(oCurrentPageSet.getDefaultPage());
            }).fail(oDeferred.reject.bind(oDeferred));

            return oDeferred.promise();
        };

        /**
         * Returns the title of the given group.
         *
         * @param {sap.ui2.srvc.Page} oGroup
         *     the group (as received via #getGroups())
         * @returns {string}
         *     the group title
         * @since 1.11.0
         */
        this.getGroupTitle = function (oGroup) {
            return oGroup.getTitle();
        };

        /**
         * Returns the unique identifier of the given group.
         *
         * @param {sap.ui2.srvc.Page} oGroup
         *     the group (as received via #getGroups())
         * @returns {string}
         *     the group id
         * @since 1.11.0
         */
        this.getGroupId = function (oGroup) {
            return oGroup.getId();
        };

        /**
         * Returns the tiles of the given group.
         *
         * @param {sap.ui2.srvc.Page} oGroup
         *     the group
         * @returns {sap.ui2.srvc.ChipInstance[]}
         *     the tiles in the order to be displayed.
         * @since 1.11.0
         */
        this.getGroupTiles = function (oGroup) {
            var oLayout;

            try {
                oLayout = JSON.parse(oGroup.getLayout());
            } catch (e) {
                jQuery.sap.log.warning("Group " + oGroup.getId() + ": invalid layout: "
                        + oGroup.getLayout(), null, sCOMPONENT);
                // no valid layout
            }
            return orderBasedOnConfiguration(oLayout, oGroup.getChipInstances());
        };

        /**
         * Adds a new group. This is an asynchronous function using a jQuery.Promise. In case of
         * success its <code>done</code> function is called and gets the added group as a
         * <code>sap.ui2.srvc.Page</code>.
         *
         * Intention: the page builder adds this group to the end of the home screen.
         *
         * In case of error the promise's <code>fail</code> function is called and gets the
         * consistent backend state of all groups as array of <code>sap.ui2.srvc.Page</code>.
         *
         * @param {string} sTitle
         *     the title of the new group
         * @returns {object}
         *     a jQuery.Promise.
         * @since 1.11.0
         */
        this.addGroup = function (sTitle) {
            var oDeferred = new jQuery.Deferred();

            oCurrentPageSet.appendPage(sTitle, sDEFAULT_CATALOG_ID,
                oDeferred.resolve.bind(oDeferred),
                oDeferred.reject.bind(oDeferred, getOrderedPages()));

            return oDeferred.promise();
        };


        /**
         * Removes a group. This is an asynchronous function using a jQuery.Promise. In case of
         * success its <code>done</code> function is called.
         *
         * In case of error the promise's <code>fail</code> function is called and gets the
         * consistent backend state of all groups as array of <code>sap.ui2.srvc.Page</code>.
         *
         * @param {object} oGroup
         *     the group to be removed
         * @returns {object}
         *     a jQuery.Promise
         * @since 1.11.0
         */
        this.removeGroup = function (oGroup) {
            var oDeferred = new jQuery.Deferred();

            if (oCurrentPageSet.isPageRemovable(oGroup)) {
                oCurrentPageSet.removePage(oGroup, oDeferred.resolve.bind(oDeferred),
                    oDeferred.reject.bind(oDeferred, getOrderedPages()));
            } else {
                oDeferred.reject(getOrderedPages());
            }
            return oDeferred.promise();
        };

        /**
         * Resets a group. Only groups can be reset for which <code>isGroupRemovable</code> returns
         * false. For others the fail handler is called.
         * This is an asynchronous function using a jQuery.Promise. In case of
         * success its <code>done</code> function is called.
         *
         * In case of error the promise's <code>fail</code> function is called and gets the
         * consistent backend state of all groups as array of <code>sap.ui2.srvc.Page</code>.
         *
         * @param {sap.ui2.srvc.Page} oGroup
         *     the group to be reset
         * @returns {object}
         *     a jQuery.Promise
         * @since 1.11.0
         */
        this.resetGroup = function (oGroup) {
            var oDeferred = new jQuery.Deferred();

            if (oCurrentPageSet.isPageRemovable(oGroup)) {
                // pages which are removable should be removed and cannot be reset
                oDeferred.reject(getOrderedPages());
            } else if (oCurrentPageSet.isPageResettable(oGroup)) {
                // pages which are resettable should be reset
                oCurrentPageSet.resetPage(oGroup, function () {
                    loadApplaunchersAndDelayLoadingOfOtherChips([oGroup],
                        oDeferred.resolve.bind(oDeferred, oGroup));
                }, oDeferred.reject.bind(oDeferred, getOrderedPages()));
            } else {
                // on all other pages an reset has simply no effect
                oDeferred.resolve();
            }

            return oDeferred.promise();
        };

        /**
         * Checks if a group can be removed. Returns a boolean indicating if the group is removable.
         *
         * @param {object} oGroup
         *     the group to be checked
         * @return {boolean}
         *  true if removable; false if only resettable
         * @since 1.11.0
         */
        this.isGroupRemovable = function (oGroup) {
            return oCurrentPageSet.isPageRemovable(oGroup);
        };

        /**
         * Checks if a group is locked (which means that the group is not changeable). Returns a boolean indicating this issue.
         *
         * @param {object} oGroup
         *     the group to be checked
         * @return {boolean}
         *  true if locked; false if not locked
         * @since 1.25.0
         */
        this.isGroupLocked = function (oGroup) {
            return oGroup.isPersonalizationLocked();
        };

        /**
         * Returns <code>true</code> if the tile's target intent is supported
         * taking into account the form factor of the current device.
         *
         * "Supported" means that the tile is not a broken reference
         * and that navigation to the intent is possible.
         *
         * <p>
         * This function may be called both for group tiles and for catalog tiles.
         *
         * <p>
         * This function will log a warning if a falsy value is returned.
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         *   the group tile or catalog tile
         * @returns {boolean}
         *   <code>true</code> if the tile's target intent is supported
         * @since 1.21.0
         */
        this.isTileIntentSupported = function (oTile) {
            var oTileConfiguration,
                sIntent,
                sSubTitle,
                sTitle;

            var oSupport = this._checkTileIntentSupport(oTile, oTargetMappingSupport);

            if (!oSupport.isSupported && oSupport.reason === O_ERROR_TYPES.noTargetMapping) {
                oTileConfiguration = getTileConfiguration(oTile);
                sTitle = getBagText(oTile, "tileProperties", "display_title_text") || oTileConfiguration.display_title_text;
                sSubTitle = getBagText(oTile, "tileProperties", "display_subtitle_text") || oTileConfiguration.display_subtitle_text;
                sIntent = oTileConfiguration.navigation_target_url;

                // This error is already logged in an aggregated log message by _reportTileErrors, but we keep it
                // because tiles may be added to the FLP home at a later point of time within the session (not covered by
                // the other log).
                jQuery.sap.log.warning("Group tile with ID '" + oTile.getId() + "' is filtered out as the current user has no target mapping assigned for the intent '" +
                        sIntent + "'",
                        "\nGroup Tile ID: '" + oTile.getId() + "'\n" +
                        "Title: '" + sTitle + "'\n" +
                        "Subtitle: '" + sSubTitle + "'\n" +
                        "Intent: '" + sIntent + "' - ",
                        "sap.ushell_abap.adapters.abap.LaunchPageAdapter");
            }

            return oSupport.isSupported;
        };

        /**
         * Implements the functionality described in the public
         * <code>#isTileIntentSupported</code> without logging.
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         *   the group tile or catalog tile
         *
         * @param {sap.ui2.srvc.Map} oTargetMappingSupport
         *   the tile target mapping support
         *
         * @returns {object}
         *   An object reporting the support of the tile intent that looks like
         *   the following objects based on whether the tile intent is
         *   supported:
         *   <pre>
         *   {
         *      isSupported: true
         *   }
         *   </pre>
         *   or
         *   <pre>
         *   {
         *      isSupported: false,
         *      reason: "<REASON>"
         *   }
         *   </pre>
         *   Where "<REASON>" is one of the following strings:
         *   <ul>
         *       <li>"brokenReference": the group tile references to a catalog
         *       reference tile that refers to a non-existing tile</li>
         *       <li>"emptyConfiguration": the tile configuration was found to be
         *       empty</li>
         *       <li>"noTargetMapping": no matching target mapping corresponds to
         *       the given group tile</li>
         *   </ul>
         * @private
         *
         * @see sap.ushell.services.LaunchPage#isTileIntentSupported
         */
        this._checkTileIntentSupport = function (oTile, oTargetMappingSupport) {
            var oTileConfiguration,
                bIsTileIntentSupported;

            var fnMkKey = makeTargetMappingSupportKey;

            if (!isAppLauncher(oTile)) {
                // Only for app launchers we are able to detect if they launch
                // a "valid" intent. For other tiles we do not even know if and
                // what will be launched, as it is a tile internal information.
                return {
                    isSupported: true
                };
            }
            if (oTile.isStub()) {
                // the assumption is that currently launcher tiles are always local CHIPs and for
                // those getGroups is waiting. Thus this Error should newer be reached.
                // If stub launchers shall be supported, it must found a way how to decided if they
                // are supported.
                throw new sap.ui2.srvc.Error("Applauncher Tile not loaded completely",
                    "sap.ushell_abap.adapters.abap.LaunchPageAdapter");
            }

            if (oTile.getChip() && typeof oTile.getChip().isBrokenReference === "function" && oTile.getChip().isBrokenReference()) {
                return {
                    isSupported: false,
                    reason: O_ERROR_TYPES.referenceTileNotFound
                };
            }

            oTileConfiguration = getTileConfiguration(oTile);

            if (jQuery.isEmptyObject(oTileConfiguration)) {
                // it seems as if there was an error in getTileConfiguration
                // the app launcher has no valid configuration, so hide it
                return {
                    isSupported: false,
                    reason: O_ERROR_TYPES.emptyConfiguration
                };
            }

            if (!oTileConfiguration.navigation_use_semantic_object) {
                // the tile launches an arbitrary URL which is always supported
                return {
                    isSupported: true
                };
            }

            bIsTileIntentSupported = oTargetMappingSupport.get(fnMkKey(
                oTileConfiguration.navigation_semantic_object,
                oTileConfiguration.navigation_semantic_action
            ));

            if (bIsTileIntentSupported) {
                return {
                    isSupported: true
                };
            }

            return {
                isSupported: false,
                reason: O_ERROR_TYPES.noTargetMapping
            };
        };

        /**
         * Moves a group to a new index. This is an asynchronous function using a jQuery.Promise.
         * In case of success its <code>done</code> function is called.
         *
         * In case of error the promise's <code>fail</code> function is called and gets the
         * consistent backend state of all groups as array of <code>sap.ui2.srvc.Page</code>.
         *
         * @param {object} oGroup
         *     the group to be moved
         * @param {integer} iNewIndex
         *     the new index for the group
         * @returns {object}
         *     a jQuery.Promise
         * @since 1.11.0
         */
        this.moveGroup = function (oGroup, iNewIndex) {
            // see wiki UICEI/PageSets+and+Groups#PageSetsandGroups-Rearrangegroupsonthehomepage
            var oDeferred = new jQuery.Deferred();

            function updateConfiguration(aPages) {
                var oConf,
                    aIds = [];

                aPages.forEach(function (oPage) {
                    aIds.push(oPage.getId());
                });

                // save new order without overwriting other parts of the configuration
                oConf = JSON.parse(oCurrentPageSet.getConfiguration() || "{}");
                oConf.order = aIds;
                oCurrentPageSet.setConfiguration(JSON.stringify(oConf),
                    oDeferred.resolve.bind(oDeferred),
                    oDeferred.reject.bind(oDeferred, getOrderedPages()));
            }

            this.getGroups().done(function (aPages) {
                var iIndex = aPages.indexOf(oGroup);

                aPages.splice(iIndex, 1);
                aPages.splice(iNewIndex, 0, oGroup);
                updateConfiguration(aPages);
            });

            return oDeferred.promise();
        };

        /**
         * Sets a new title to an existing group. This is an asynchronous function using a
         * jQuery.Promise. In case of success its <code>done</code> function is called.
         *
         * In case of error the promise's <code>fail</code> function is called and gets the
         * old title.
         *
         * @param {string} sTitle
         *     the new title of the group
         * @param {object} oGroup
         *     the group we need to set the title
         * @returns {object}
         *     a jQuery.Promise
         * @since 1.11.0
         */
        this.setGroupTitle = function (oGroup, sNewTitle) {

            var oDeferred = new jQuery.Deferred();

            oGroup.setTitle(sNewTitle,
                oDeferred.resolve.bind(oDeferred),
                function () { oDeferred.reject(oGroup.getTitle()); });

            return oDeferred.promise();

        };

        /**
         * Adds a tile to the end of a group. The group is optional. If no group is given, use
         * the default group. This is an asynchronous function using a jQuery.Promise. In case
         * of success its <code>done</code> function is called and gets the new tile as a
         * <code>sap.ui2.srvc.ChipInstance</code>.
         *
         * In case of error the promise's <code>fail</code> function is called and gets the
         * consistent backend state of all groups as array of <code>sap.ui2.srvc.Page</code>.

         * @param {sap.ui2.srvc.ChipInstance} oCatalogTile
         *     an 'anonymous' catalog tile from the catalog browser
         * @param {sap.ui2.srvc.Page} [oGroup]
         *     the group
         * @returns {object}
         *     a jQuery.Promise
         * @since 1.11.0
         */
        this.addTile = function (oCatalogTile, oGroup) {
            var oDeferred = new jQuery.Deferred(),
                oChip = oCatalogTile.getChip(); // unwrap (see wrapAsChipInstances)

            if (oCatalogTile.isStub()) {
                // this is a "Cannot load tile" tile, this should not be added to the group
                // BCP 1670300106
                oDeferred.reject(getOrderedPages(),
                    "Tile was not added to the group as the tile failed loading");
            } else {
                if (!oGroup) {
                    oGroup = oCurrentPageSet.getDefaultPage();
                }

                oGroup.addChipInstance(oChip,
                    oDeferred.resolve.bind(oDeferred),
                    oDeferred.reject.bind(oDeferred, getOrderedPages()));
            }

            return oDeferred.promise();
        };

        /**
         * Removes the given tile from the given group. This is an asynchronous function using a
         * jQuery.Promise. In case of success its <code>done</code> function is called.
         *
         * In case of error the promise's <code>fail</code> function is called and gets the
         * consistent backend state of all groups as array of <code>sap.ui2.srvc.Page</code>.
         *
         * @param {sap.ui2.srvc.Page} oGroup
         *     the group containing the tile
         * @param {sap.ui2.srvc.ChipInstance} oTile
         *     the tile
         * @returns {object}
         *     a jQuery.Promise
         * @since 1.11.0
         */
        this.removeTile = function (oGroup, oTile) {
            var oDeferred = jQuery.Deferred();

            oGroup.removeChipInstance(oTile,
                oDeferred.resolve.bind(oDeferred),
                oDeferred.reject.bind(oDeferred, getOrderedPages()));
            return oDeferred.promise();
        };

        /**
         * Moves a tile to another location in the same or a different group. This is an
         * asynchronous function using a jQuery.Promise. In case of success its <code>done</code>
         * function is called and gets the new target tile (which may be identical).
         *
         * In case of error the promise's <code>fail</code> function is called and gets the
         * consistent backend state of all groups as array of <code>sap.ui2.srvc.Page</code>.
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         *     the tile to be moved
         * @param {integer} iSourceIndex
         *     the index in the source group
         * @param {integer} iTargetIndex
         *     TODO discuss API: what does this "not supplied" mean?
         *     the index in the target group, in case this parameter is not supplied we assume the move tile is within the source group using iSourceIndex
         * @param {sap.ui2.srvc.Page} oSourceGroup
         *     the tile's group
         * @param {sap.ui2.srvc.Page} [oTargetGroup]
         *     the group the tile will be placed in or tile's group if not supplied
         * @returns {object}
         *     a jQuery.Promise
         * @since 1.11.0
         */
        this.moveTile = function (oTile, iSourceIndex, iTargetIndex, oSourceGroup, oTargetGroup) {
            var oDeferred = new jQuery.Deferred(),
                bIsWrapperOnly = isWrapperOnly(oTile),
                oPbs,
                oBagsContents = new sap.ui2.srvc.Map(),
                oCreatedChipInstance,
                aBagIds,
                aSourceChipInstances,
                aTargetChipInstances,
                fnFailure = oDeferred.reject.bind(oDeferred, getOrderedPages()),
                iCalls = 2;

            // Updates the page's layout value for the new CHIP instance order.
            function updateLayout(oPage, aChipInstances, fnSuccess) {
                var i,
                    oLayout;

                try {
                    oLayout = JSON.parse(oPage.getLayout());
                } catch (e) {
                    // invalid layout, must have been read before, so do not log again
                    oLayout = {};
                }
                oLayout.order = [];
                for (i = 0; i < aChipInstances.length; i += 1) {
                    oLayout.order.push(aChipInstances[i].getId());
                }
                oPage.setLayout(JSON.stringify(oLayout), fnSuccess, fnFailure);
            }

            function resolveMoveBetweenGroups(oNewChipInstance) {
                iCalls -= 1;

                // In case addChipInstance is faster then removeChipInstance, oNewChipInstance needs to be
                // cached for the removeChipInstance call
                oCreatedChipInstance = oCreatedChipInstance || oNewChipInstance;
                if (iCalls <= 0) {
                    oDeferred.resolve(oCreatedChipInstance);
                }
            }

            if (!oTargetGroup) {
                oTargetGroup = oSourceGroup;
            }
            aSourceChipInstances = this.getGroupTiles(oSourceGroup);
            iSourceIndex = aSourceChipInstances.indexOf(oTile);
            if (iSourceIndex < 0) {
                jQuery.sap.log.error("moveTile: tile not found in source group", null, sCOMPONENT);
                fnFailure();
                return oDeferred.promise();
            }
            aSourceChipInstances.splice(iSourceIndex, 1);
            if (oSourceGroup === oTargetGroup) {
                aSourceChipInstances.splice(iTargetIndex, 0, oTile);
                updateLayout(oSourceGroup, aSourceChipInstances,
                    oDeferred.resolve.bind(oDeferred, oTile),
                    fnFailure);
            } else {
                oPbs = sap.ushell.Container.getService("PageBuilding").getFactory()
                    .getPageBuildingService();

                // store bag contents for later storing them in the new CHIP instances
                aBagIds = oTile.getBagIds();
                aBagIds.forEach(function (sBagId) {
                    var oBagContent = {
                        texts : [],
                        properties : []
                    },
                    oBag = oTile.getBag(sBagId);
                    // ignore contents of CHIP bags
                    oBag.getOwnTextNames().forEach(function (sName) {
                        oBagContent.texts.push({name: sName, value: oBag.getText(sName)});
                    });
                    oBag.getOwnPropertyNames().forEach(function (sName) {
                        oBagContent.properties.push({name: sName, value: oBag.getProperty(sName)});
                    });
                    if (oBagContent.texts.length > 0 || oBagContent.properties.length > 0) {
                        oBagsContents.put(sBagId, oBagContent);
                    }
                });

                // one $batch to add tile to target group, remove old tile, update layout of
                // source group
                oPbs.openBatchQueue();

                aTargetChipInstances = this.getGroupTiles(oTargetGroup);
                oTargetGroup.addChipInstance(bIsWrapperOnly ? oTile.getChip() : oTile,
                    function (oChipInstance) {
                        var oCurrentBag, oBagContent;
                        aTargetChipInstances.splice(iTargetIndex, 0, oChipInstance);
                        // Note: additional requests after the $batch required, because new ID was
                        // previously unknown. So this requests could not be batched together

                        // Add bags to CHIP instance in target group
                        aBagIds.forEach(function (sBagId) {
                            oBagContent = oBagsContents.get(sBagId);
                            if (oBagContent) {
                                oCurrentBag = oChipInstance.getBag(sBagId);
                                oBagContent.texts.forEach(function (oText) {
                                    oCurrentBag.setText(oText.name, oText.value);
                                });
                                oBagContent.properties.forEach(function (oProperty) {
                                    oCurrentBag.setProperty(oProperty.name, oProperty.value);
                                });
                                oCurrentBag.save(function () {
                                    // don't wait for the save operation for performance reasons
                                }, function () {
                                    jQuery.sap.log.error("Bag " + sBagId + ": could not be saved"
                                        , null, sCOMPONENT);
                                });
                            }
                        });
                        // update order of tiles, which is stored in the layout property
                        updateLayout(oTargetGroup, aTargetChipInstances,
                            resolveMoveBetweenGroups.bind(this, oChipInstance));
                    }, fnFailure, oTile.isStub()); // do not load the tile if first load failed
                oSourceGroup.removeChipInstance(oTile, resolveMoveBetweenGroups, fnFailure);
                updateLayout(oSourceGroup, aSourceChipInstances, undefined);

                oPbs.submitBatchQueue(undefined, fnFailure);
            }
            return oDeferred.promise();
        };

        /**
         * Returns the tile's unique identifier
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         *     the tile
         * @returns {string}
         *     the id
         * @since 1.11.0
         */
        this.getTileId = function (oTile) {
            return oTile.getId();
        };

        /**
         * Returns the tile's type. This is even possible if the tile is not fully loaded so far.
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         *     the tile
         * @returns {string}
         *     the type. either <code>"tile"</code> or <code>"link"</code>.
         * @since 1.32.0
         */
        this.getTileType = function (oTile) {
            var oGroup = oTile.getPage(),
                oLayout;

            try {
                oLayout = JSON.parse(oGroup.getLayout());
                // oLayout.order -> contains ordered chip instance IDs to be displayed as a tile
                // oLayout.linkOrder -> contains ordered chip instance IDs to be displayed as a link
                if (oLayout.linkOrder && oLayout.linkOrder.indexOf(oTile.getId()) > -1) {
                    //Note: no verification if oTile.getChip().getAvailableTypes() contains "link".
                    // -> fail early in this case
                    return "link";
                }
            } catch (e) {
                jQuery.sap.log.warning("Group " + oGroup.getId() + ": invalid layout: "
                        + oGroup.getLayout(), null, sCOMPONENT);
            }

            return "tile";
        };

        /**
         * Returns the tile's title.
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         *     the tile
         * @returns {string}
         *     the title, might be <code>undefined</code> if tile has not finished loading
         *     (see {@link #getTileView}).
         * @since 1.11.0
         */
        this.getTileTitle = function (oTile) {
            return oTile.getTitle();
        };

        /**
         * Returns the tile's SAPUI5 representation. This is an asynchronous function using a
         * jQuery.Promise. In case of success its <code>done</code> function is called and gets the
         * {sap.ui.core.Control} of the tile.
         * In case of error the promise's <code>fail</code> function is called with the error
         * message as parameter.
         * <br>
         * Note: this function became async since 1.23.0.
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         *     the tile
         * @returns {object}
         *     jQuery.Promise object.
         * @since 1.11.0
         */
        this.getTileView = function (oTile) {
            var that = this,
                oDeferred = new jQuery.Deferred(),
                oTypesContract;

            function doResolve() {
                // if needed, notify the tile in which way it shall display itself
                oTypesContract = oTile.getContract("types");
                if (oTypesContract) {
                    // set the tile type before getting the view
                    // note: the contract caches the new type until the handler is attached
                    oTypesContract.setType(that.getTileType(oTile));
                }

                // Note: resolve.bind does not work as oTile.getImplementationAsSapui5()
                // will be called at binding time in that case
                // Note 2: getImplementationAsSapui5 catches exceptions (via sap.ui2.srvc.call)
                oDeferred.resolve(oTile.getImplementationAsSapui5());
            }

            function doReject(sMessage) {
                oDeferred.reject("Tile not successfully loaded" +
                    (sMessage ? (": " + sMessage) : ""));
            }

            // TODO cache the view for later re-use - might not work cause view can get destroyed
            // and is not reusable!
            // Needs further investigation - don't implement cache for now

            if (!oTile.$loadingPromise) { // loading resolved or failed
                if (!oTile.isStub()) { // success
                    // call getImplementationAsSapui5 async for non-AppLaunchers and resolves.
                    // For AppLaunchers, there is an optimization (requested by RT) to call it sync
                    // as the resources are already bundled and loaded at startup. As a result,
                    // the Home will initially at least display app launchers.
                    sap.ui2.srvc.call(doResolve, doReject, /*async*/!isAppLauncher(oTile));
                } else { //failed
                    doReject();
                }
            } else { // loading pending
                oTile.$loadingPromise
                    .fail(doReject)
                    .done(function () {
                        try {
                            doResolve();
                        } catch (ex) {
                            doReject((ex.message || ex));
                        }
                    });
            }

            return oDeferred.promise();
        };
        /**
         * Returns the tile size in the format <code>1x1</code> or <code>1x2</code>.
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         *     the tile
         * @returns {string}
         *     the tile size
         * @since 1.11.0
         */
        this.getTileSize = function (oTile) {
            var row = (!oTile.isStub() && oTile.getConfigurationParameter("row")) || "1",
                col = (!oTile.isStub() && oTile.getConfigurationParameter("col")) || "1";
            return row + "x" + col;
        };

        /**
         * Refresh a tile with its latest data.
         * Only dynamic data should be updated, not the tile configuration itself.
         *
         * @param {sap.ui2.srvc.ChipInstance} oTile
         *      the tile

         */
        this.refreshTile = function (oTile) {
            oTile.refresh();
        };

        /**
         * Notifies the given tile that the tile's visibility had been changed.
         *
         * @param {object} oTile
         *     the tile
         * @param {boolean} bNewVisible
         *   the CHIP visibility
         */
        this.setTileVisible = function (oTile, bNewVisible) {
            var oVisibleContract = !oTile.isStub() && oTile.getContract("visible"),
                sTileId,
                bOldVisibility;

            if (oVisibleContract) {
                // tile has been successfully loaded already
                oVisibleContract.setVisible(bNewVisible);
                return;
            }

            if (oTile.isStub() && oTile.$loadingPromise) {
                // the tile is currently loaded
                sTileId = this.getTileId(oTile);
                bOldVisibility = mEarlyTileVisibilities[sTileId];
                // update cached visibility also if handler was already attached
                mEarlyTileVisibilities[sTileId] = bNewVisible;

                if (bOldVisibility === undefined) {
                    // attach handler, but only once.
                    oTile.$loadingPromise.done(function () {
                        var oVisibleContract = oTile.getContract("visible");

                        if (oVisibleContract) {
                            // tile uses visibility contract and sets the latest visibilty
                            // NOTE: mEarlyTileVisibilities[sTileId] may be changed
                            // after handler was attached
                            oVisibleContract.setVisible(mEarlyTileVisibilities[sTileId]);
                        }
                    });
                }
                return;
            }

            // oTile.isStub() && ! oTile.$loadingPromise means that tile failed
            // loading ("cannot load tile"). In this case nothing needs to be done!
        };

        this.getTileActions = function (oTile) {
            var oActionsContract = !oTile.isStub() && oTile.getContract("actions");
            if (oActionsContract) {
                return oActionsContract.getActions();
            }
            return [];
        };


        /**
         * A function which returns the tile's navigation target.
         * Assigning this to <code>location.hash</code> will open the app.
         *
         * @param {object} oTile
         *     the tile
         * @returns {string}
         *  the tile target
         */
        this.getTileTarget = function (oTile) {
            //TODO method obsolete for now - TBD (don't implement)
            return null;
        };

        /**
         * A function which returns the technical information about the tile.
         * <p>
         * The ABAP adapter returns details about the chip instance corresponding to the tile.
         *
         * @param {object} oTile
         *     the tile
         * @returns {string}
         *     debug information for the tile
         */
        this.getTileDebugInfo = function (oTile) {
            var oDebugInfo, sDebugInfo, oChip = oTile.getChip(), oCatalog = oChip.getCatalog();

            oDebugInfo = {
                chipId: oChip.getId(),
                chipInstanceId: oTile.getId(),
                completelyLoaded: !oTile.isStub()
            };

            if (oCatalog) {
                oDebugInfo.catalogId = oCatalog.getId();
            }
            sDebugInfo = JSON.stringify(oDebugInfo);

            return sDebugInfo;
        };

        /**
         * Returns the user's catalogs. This operation provides graceful degradation and improved
         * responsiveness.
         * <p>
         * Only severe failures make the overall operation fail. If loading of a remote catalog
         * fails, this is handled gracefully by providing a "dummy" empty catalog (with ID instead
         * of title). Use {@link getCatalogError} to check if a (remote) catalog could not be
         * loaded from the backend.
         * <p>
         * Care has been taken to make sure that progress notifications are sent reliably for each
         * single catalog, i.e. attaching a <code>progress</code> handler gives you the same
         * possibilities as attaching a <code>done</code> handler, but with the advantage of
         * improved responsiveness.
         *
         * @example
         *   sap.ushell.Container.getService("LaunchPage").getCatalogs()
         *   .fail(function (sErrorMessage) { // string
         *     // handle error situation
         *   })
         *   .progress(function (oCatalog) { // object
         *     // do s.th. with single catalog
         *   })
         *   .done(function (aCatalogs) { // object[]
         *     aCatalogs.forEach(function (oCatalog) {
         *       // do s.th. with single catalog
         *     });
         *   });
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation.  In case of success, an array of black-box catalog
         *   objects is provided (which might be empty). In case of failure, an error message is
         *   passed. Progress notifications are sent for each single catalog, providing a single
         *   black-box catalog object each time.
         *
         * @since 1.11.0
         */
        this.getCatalogs = function () {
            var oDeferred,
                oOldGetCatalogsDeferred = oGetCatalogsDeferred,
                bRefreshRequired = bCatalogsValid === false;

            /**
             * Resolves the promise to return the user's catalogs...by refreshing the first remote
             * catalog found, failing gracefully.
             */
            function refreshRemoteCatalogs() {
                var iPendingRequests = 0, aWrappedCatalogs = wrapCatalogs();

                aWrappedCatalogs.forEach(function (oWrappedCatalog) {
                    var oCatalog = oWrappedCatalog.ui2catalog;
                    //TODO Improve performance: One invalid remote catalog causes refresh of all
                    if (oCatalog.isStub() || oCatalog.getType() === 'H'
                            || oCatalog.getType() === 'REMOTE') {
                        iPendingRequests += 1;
                        oCatalog.refresh(function () {
                            oWrappedCatalog.title = oCatalog.getTitle();
                            oWrappedCatalog.tiles = wrapAsChipInstances(oCatalog.getChips());
                            //TODO oRemoteCatalogWrapper.errorMessage once wrappers are cached

                            oDeferred.notify(oWrappedCatalog);

                            iPendingRequests -= 1;
                            if (iPendingRequests <= 0) {
                                oDeferred.resolve(aWrappedCatalogs);
                            }
                        }, function (sMessage) {
                            // log errors, but do not fail
                            jQuery.sap.log.error("Failed to load catalog: " + sMessage,
                                    oCatalog.toString(), sCOMPONENT);
                            oWrappedCatalog.errorMessage = sMessage || "Error"; // not undefined!

                            oDeferred.notify(oWrappedCatalog);

                            iPendingRequests -= 1;
                            if (iPendingRequests <= 0) {
                                oDeferred.resolve(aWrappedCatalogs);
                            }
                        });
                    } else {
                        oDeferred.notify(oWrappedCatalog);
                        oDeferred.$notified = true; // notifications have already been sent
                    }
                });

                if (iPendingRequests <= 0) {
                    oDeferred.resolve(aWrappedCatalogs);
                }
            }

            /**
             * Resolves the promise to return the user's catalogs...by just knowing them already.
             */
            function useKnownCatalogs() {
                var aWrappedCatalogs = wrapCatalogs();

                aWrappedCatalogs.forEach(function (oWrappedCatalog) {
                    oDeferred.notify(oWrappedCatalog);
                });

                oDeferred.resolve(aWrappedCatalogs);
            }

            /**
             * Resolves the promise to return the user's catalogs...either by loading them,
             * by refreshing them, or by just knowing them already.
             *
             * @param {boolean} bSynchronous
             *   whether this method is called synchronous to the original
             *   <code>this.getCatalogs()</code> call.
             */
            function doGetCatalogs(bSynchronous) {
                var oAllCatalogs = oCurrentPageSet.getDefaultPage().getAllCatalogs();

                if (oAllCatalogs.isStub()) {
                    oAllCatalogs.load(refreshRemoteCatalogs, oDeferred.reject.bind(oDeferred),
                        "type eq 'CATALOG_PAGE' or type eq 'H' or type eq 'SM_CATALOG'" +
                        " or type eq 'REMOTE'",
                        /*bPartially*/true,/*sorting field*/ "title");
                } else {
                    // Make sure that oDeferred is not notified _before_ progress handler has been
                    // registered! Delay calls in case we are still synchronous!
                    sap.ui2.srvc.call(
                        bRefreshRequired ? refreshRemoteCatalogs : useKnownCatalogs,
                        oDeferred.reject.bind(oDeferred),
                        bSynchronous // = bAsync
                    );
                }
            }

            /**
             * Starts loading of catalogs, after parallel calls and invalidation have been taken
             * care of.
             *
             * @param {boolean} bSynchronous
             *   whether this method is called synchronous to the original
             *   <code>this.getCatalogs()</code> call.
             */
            function startLoading(bSynchronous) {
                if (oTargetMappingServiceConfig && oTargetMappingServiceConfig.cacheId) {
                    // add cache buster token for the allCatalogs request. Reuse TargetMappings token as it is also
                    // invalidated in case the user's catalogs changed
                    sap.ushell.Container.getService("PageBuilding").getFactory().getPageBuildingService()
                        .readAllCatalogs.cacheBusterTokens
                        .put(sDEFAULT_PAGE_ID, oTargetMappingServiceConfig.cacheId);
                }

                if (bPageSetFullyLoaded) {
                    doGetCatalogs(bSynchronous);
                } else {
                    // call getGroups because it is the entry point of the LPA
                    that.getGroups().done(doGetCatalogs).fail(oDeferred.reject.bind(oDeferred));
                }
            }

            // Note: bCatalogsValid can be undefined, false, true
            if (oGetCatalogsDeferred && !oGetCatalogsDeferred.$notified && !bRefreshRequired) {
                // re-use existing Deferred object; we cannot miss any notifications!
                oDeferred = oGetCatalogsDeferred;
            } else {
                oDeferred = oGetCatalogsDeferred = new jQuery.Deferred();
                oDeferred.done(function () {
                    if (oDeferred === oGetCatalogsDeferred) {
                        // only the last call is allowed to change "global" variables
                        bCatalogsValid = true;
                    }
                }).always(function () {
                    if (oDeferred === oGetCatalogsDeferred) {
                        // only the last call is allowed to change "global" variables
                        oGetCatalogsDeferred = null;
                    }
                });

                if (oOldGetCatalogsDeferred) {
                    if (bRefreshRequired) {
                        bCatalogsValid = undefined; // not yet valid, refresh is in progress...
                    }
                    // if we cannot reuse the old Deferred object, wait until it is done;
                    // after invalidation, wait until old operations are complete and then start a
                    // new roundtrip
                    oOldGetCatalogsDeferred.always(startLoading);
                } else {
                    startLoading(true);
                }
            }

            return oDeferred.promise();
        };

        /**
         * Returns whether the catalogs collection previously returned by
         * <code>getCatalogs()</code> is still valid. Initially, this is <code>false</code>
         * until <code>getCatalogs()</code> has been called. Later, it might become
         * <code>false</code> again in case one of the catalogs has been invalidated, e.g. due to
         * the addition of a tile ("Add to catalog" scenario).
         *
         * @returns {boolean}
         * @since 1.16.4
         * @see #getCatalogs
         */
        this.isCatalogsValid = function () {
            return !!bCatalogsValid; // converts undefined to false
        };

        /**
         * Returns the catalog's technical data.
         *
         * @param {object} oConfigCatalog
         *     the catalog
         * @returns {object}
         *     an object with the following properties (the list may be incomplete):
         *     <ul>
         *     <li><code>id</code>: the catalog ID
         *     <li><code>systemId</code>: [remote catalogs] the ID of the remote system
         *     <li><code>remoteId</code>: [remote catalogs] the ID of the catalog in the
         *       remote system
         *     <li><code>baseUrl</code>: [remote catalogs] the base URL of the catalog in the
         *       remote system
         *     </ul>
         * @since 1.21.2
         */
        this.getCatalogData = function (oConfigCatalog) {
            return oConfigCatalog.ui2catalog.getCatalogData();
        };

        /**
         * Returns the catalog's technical error message in case it could not be loaded from the
         * backend.
         * <p>
         * <b>Beware:</b> The technical error message is not translated!
         *
         * @param {object} oConfigCatalog
         *     the catalog
         * @returns {string}
         *     the technical error message or <code>undefined</code> if the catalog was loaded
         *     properly
         * @since 1.17.1
         */
        this.getCatalogError = function (oConfigCatalog) {
            return oConfigCatalog.errorMessage;
        };

        /**
         * Returns the catalog's unique identifier
         *
         * @param {object} oConfigCatalog
         *     the catalog as received via #getCatalogs()
         * @returns {string}
         *     the id
         * @since 1.11.0
         */
        this.getCatalogId = function (oConfigCatalog) {
            return oConfigCatalog.id;
        };

        /**
         * Returns the catalog's title
         *
         * @param {object} oConfigCatalog
         *     the catalog
         * @returns {string}
         *     the title
         * @since 1.11.0
         */
        this.getCatalogTitle = function (oConfigCatalog) {
            return oConfigCatalog.title;
        };

        /**
         * Returns the catalog's tiles. This is an asynchronous function using a jQuery.Promise.
         * In case of success its <code>done</code> function is called and gets the tiles as array
         * of <code>sap.ui2.srvc.Chip</code>.
         *
         * In case of error the promise's <code>fail</code> function is called.
         *
         * @param {object} oConfigCatalog
         *     the catalog
         * @returns {object}
         *     a jQuery.Promise
         * @since 1.11.0
         */
        this.getCatalogTiles = function (oConfigCatalog) {
            var i,
                oChipInstance,
                oDeferred = new jQuery.Deferred(),
                iAsyncCount = 0;

            function onLoaded() {
                iAsyncCount -= 1;

                if (iAsyncCount === 0) {
                    oDeferred.resolve(oConfigCatalog.tiles);
                }
            }

            function onFailure(oCatalogTile, sMessage) {
                // log errors, but do not fail
                jQuery.sap.log.error("Failed to load catalog tile: " + sMessage,
                    oCatalogTile.toString(), sCOMPONENT);
                onLoaded();
            }

            for (i = 0; i < oConfigCatalog.tiles.length; i += 1) {
                oChipInstance = oConfigCatalog.tiles[i];
                if (oChipInstance.isStub()) {
                    iAsyncCount += 1;
                    oChipInstance.load(onLoaded, onFailure.bind(null, oChipInstance));
                }
            }

            if (iAsyncCount === 0) {
                oDeferred.resolve(oConfigCatalog.tiles);
            }

            return oDeferred.promise();
        };

        /**
         * Returns the unique identifier of the catalog tile. May be called for a catalog tile or
         * (since 1.21.0) for a group tile. In the latter case it returns the unique identifier of
         * the catalog tile on which the group tile is based.
         *
         * @param {sap.ui2.ChipInstance} oTile
         *     the tile or the catalog tile
         * @returns {string}
         *     the id
         * @since 1.11.0
         */
        this.getCatalogTileId = function (oTile) {
            var oChip = oTile.getChip(),
                sId = oChip.getId();

            if (oChip.getCatalog() &&
                    oChip.getCatalog().getCatalogData() &&
                    oChip.getCatalog().getCatalogData().systemAlias) {

                // Add system alias to the ID so the runtime distinguishes tiles with different
                // aliases. This is needed for the app finder (=tile catalog)
                sId += "_" + oChip.getCatalog().getCatalogData().systemAlias;
            }

            return sId;
        };

        /**
         * Returns the catalog tile's title. May be called for a catalog tile or
         * (since 1.32.0) for a group tile.
         *
         * @param {sap.ui2.ChipInstance} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *     the title
         * @since 1.11.0
         */
        this.getCatalogTileTitle = function (oCatalogTile) {
            // if we rely on the fallback inside oCatalogTile.getTitle() (which calls
            // chip.getTitle() if it has no own title), this method may not be cannot be called
            // with group tiles. -> this is used by Usage analysis reporting
            return oCatalogTile.getChip().getTitle();
        };

        /**
         * Returns the catalog tile's size in the format <code>1x1</code> or <code>1x2</code>.
         *
         * @param {sap.ui2.ChipInstance} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *     the size
         * @since 1.11.0
         */
        this.getCatalogTileSize = function (oCatalogTile) {
            return this.getTileSize(oCatalogTile);
        };

        /**
         * A function which returns UI5 view / control  of the catalog tile
         *
         * @param {sap.ui2.ChipInstance} oCatalogTile
         *     the catalog tile
         * @returns {sap.ui.core.Control}
         *     the UI5 representation
         * @since 1.11.0
         */
        this.getCatalogTileView = function (oCatalogTile) {
            var sTitle = this.getCatalogTileTitle(oCatalogTile);
            // TODO cache the view for later re-use - might not work cause view can get destroyed and is not reusable!
            // Needs further investigation - don't implement cache for now
            if (oCatalogTile.isStub()) {
                jQuery.sap.log.warning("CHIP (instance) is just a stub!", oCatalogTile.toString(true),
                    sCOMPONENT);
                return new sap.ushell.ui.tile.StaticTile({ //TODO remove as soon as RT has a own
                    icon: "sap-icon://hide",
                    info: "",
                    infoState: "Critical",
                    subtitle: "",
                    title: sTitle
                }).addStyleClass("sapUshellTileError");
            }
            if (oCatalogTile.getContract("preview")) {
                oCatalogTile.getContract("preview").setEnabled(true);
                return getImplementationAsSapui5(oCatalogTile, sTitle,
                    "Cannot get catalog tile view as SAPUI5");
            }
            return new sap.ushell.ui.tile.StaticTile({ //TODO remove as soon as RT has a own
                title : sTitle,
                subtitle: "",
                info: "",
                infoState: "Neutral",
                icon: "sap-icon://folder-full"
            });
        };

        /**
         * Get navigation target URL for a catalog tile.
         *
         * @param {sap.ui2.ChipInstance} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *     the target URL for the catalog tile's underlying application as provided via the
         *     "preview" contract
         * @since 1.11.0
         */
        this.getCatalogTileTargetURL = function (oCatalogTile) {
            var sAppLauncherTarget = getConfigurationProperty(oCatalogTile, "tileConfiguration", "navigation_target_url");
            return sAppLauncherTarget || (!oCatalogTile.isStub() && oCatalogTile.getContract("preview")
                    && oCatalogTile.getContract("preview").getTargetUrl())
                    || undefined;
        };

        /**
         * Get preview subtitle for a catalog tile.
         *
         * @param {sap.ui2.ChipInstance} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *     the preview subtitle for the catalog tile's underlying application as provided via the
         *     "preview" contract
         * @since 1.40.0
         */
        this.getCatalogTilePreviewSubtitle = function (oCatalogTile) {
            var sAppLauncherSubTitle = getBagText(oCatalogTile, "tileProperties", "display_subtitle_text");
            return sAppLauncherSubTitle || (!oCatalogTile.isStub() && oCatalogTile.getContract("preview")
                    && oCatalogTile.getContract("preview").getPreviewSubtitle())
                    || undefined;

        };

        /**
         * Get preview title for a catalog tile.
         *
         * @param {sap.ui2.ChipInstance} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *     the preview title for the catalog tile's underlying application as provided via the
         *     "preview" contract
         * @since 1.16.3
         */
        this.getCatalogTilePreviewTitle = function (oCatalogTile) {
            var sAppLauncherTitle = getBagText(oCatalogTile, "tileProperties", "display_title_text");
            return sAppLauncherTitle || (!oCatalogTile.isStub() && oCatalogTile.getContract("preview")
                    && oCatalogTile.getContract("preview").getPreviewTitle())
                    || undefined;
        };

        /**
         * Get preview icon for a catalog tile.
         *
         * @param {sap.ui2.ChipInstance} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *     the preview icon as URL/URI for the catalog tile's underlying application as provided via the
         *     "preview" contract
         * @since 1.16.3
         */
        this.getCatalogTilePreviewIcon = function (oCatalogTile) {
            var sAppLauncherIcon = getConfigurationProperty(oCatalogTile, "tileConfiguration", "display_icon_url");

            return sAppLauncherIcon || (!oCatalogTile.isStub() && oCatalogTile.getContract("preview")
                    && oCatalogTile.getContract("preview").getPreviewIcon())
                    || undefined;
        };

        /**
         * Returns the keywords associated with a catalog tile which can be used
         * to find the catalog tile in a search.
         * Note: getCatalogTileView <b>must</b> be called <b>before</b> this
         * method. Otherwise the keywords may be incomplete.
         *
         * @param {sap.ui2.ChipInstance} oCatalogTile
         *      The catalog tile
         * @returns string[]
         *      The keywords associated with this catalog tile
         * @since 1.11.0
         */
        this.getCatalogTileKeywords = function (oCatalogTile) {
            var oKeywordsSet = {},
            sCatalogTitle = oCatalogTile.getTitle(),
            sCatalogDescription = oCatalogTile.getChip().getDescription();

            function addKeywords(oKeywordsSet, aKeywordsList) {
                if (sap.ui2.srvc.isArray(aKeywordsList)) {
                    aKeywordsList.forEach(function (sKeyword) {
                        if (oKeywordsSet.hasOwnProperty(sKeyword)) {
                            return;
                        }

                        oKeywordsSet[sKeyword] = null;
                    });
                }
            }

            // Relevant for app launcher tiles which are not instantiated in the
            // app finder. It directly fetches keywords from catalogs data
            function getKeywordsDefinedInCatalogsData(oCatalogTile) {
                var sKeywordsText = getBagText(oCatalogTile, "tileProperties", "display_search_keywords");

                if (!sap.ui2.srvc.isString(sKeywordsText)) {
                    return [];
                }

                return sKeywordsText.trim().split(/\s*,\s*/g);
            }

            // Apply the 'search' contract when available
            function getKeywordsFromSearchContract(oCatalogTile) {
                var oSearchContract;

                if (oCatalogTile.isStub()){
                    return [];
                }

                oSearchContract = oCatalogTile.getContract("search");
                if (oSearchContract) {
                    return oSearchContract.getKeywords();
                }

                return [];
            }

            addKeywords(
                oKeywordsSet,
                getKeywordsDefinedInCatalogsData(oCatalogTile)
            );
            addKeywords(
                oKeywordsSet,
                getKeywordsFromSearchContract(oCatalogTile)
            );
            if (sCatalogTitle) {
                addKeywords(oKeywordsSet, [sCatalogTitle]);
            }
            if (sCatalogDescription) {
                addKeywords(oKeywordsSet, [sCatalogDescription]);
            }

            return Object.keys(oKeywordsSet);
        };

        /**
         * Adds a bookmark to the user's home page.
         *
         * @param {object} oParameters
         *   bookmark parameters. In addition to title and URL, a bookmark might allow additional
         *   settings, such as an icon or a subtitle. Which settings are supported depends
         *   on the environment in which the application is running. Unsupported parameters will be
         *   ignored.
         * @param {string} oParameters.title
         *   The title of the bookmark.
         * @param {string} oParameters.url
         *   The URL of the bookmark. If the target application shall run in the Shell the URL has
         *   to be in the format <code>"#SO-Action~Context?P1=a&P2=x&/route?RPV=1"</code>
         * @param {string} [oParameters.icon]
         *   The icon URL of the bookmark (e.g. <code>"sap-icon://home"</code>).
         * @param {string} [oParameters.info]
         *   The information text of the bookmark.
         * @param {string} [oParameters.subtitle]
         *   The subtitle of the bookmark.
         * @param {string} [oParameters.serviceUrl]
         *   The URL to a REST or OData service that provides some dynamic information for the
         *   bookmark.
         * @param {string} [oParameters.serviceRefreshInterval]
         *   The refresh interval for the <code>serviceUrl</code> in seconds.
         * @param {string} [oParameters.numberUnit]
         *   The unit for the number retrieved from <code>serviceUrl</code>.
         * @param {object} [oGroup=DefaultGroup]
         *   Group to which the bookmark will be added to. If not given the default group
         *   {@link #getDefaultGroup} is used.
         *
         * @returns {object}
         *   a jQuery promise.
         *
         * @see sap.ushell.services.URLParsing#getShellHash
         * @since 1.11.0
         */
        this.addBookmark = function (oParameters, oGroup) {
            /* eslint-disable camelcase */
            var sChipId = sSTATIC_BASE_CHIP_ID,
                oConfiguration = {
                    display_icon_url: oParameters.icon || "",
                    display_info_text: oParameters.info || "",
                    display_subtitle_text: oParameters.subtitle || "",
                    display_title_text: oParameters.title,
                    navigation_target_url: oParameters.url,
                    navigation_use_semantic_object: false
                },
                /* eslint-enable camelcase */
                oDeferred = new jQuery.Deferred(),
                oFactory = sap.ushell.Container.getService("PageBuilding").getFactory(),
                oUrlParsing,
                oLocationUri = new URI(),
                oBookmarkUri,
                oHash,
                oPbs = oFactory.getPageBuildingService(),
                oChipInstance,
                fnMkKey = makeTargetMappingSupportKey;

            function addBagAndResolve(oChipInstance, oConfiguration, oDeferred) {
                // add texts also to the bag, as this is prio 1 for applaunchers
                oChipInstance.getBag("tileProperties").setText("display_title_text",
                    oConfiguration.display_title_text || "");
                oChipInstance.getBag("tileProperties").setText("display_subtitle_text",
                    oConfiguration.display_subtitle_text || "");
                oChipInstance.getBag("tileProperties").setText("display_info_text",
                    oConfiguration.display_info_text || "");
                oChipInstance.getBag("tileProperties").save(function () {
                    //resolve w/o parameter as caller (app) does not need access the bookmark
                    // NOTE: until 1.30.4 resolve was called with oChipInstance as parameter if
                    // bPageSetFullyLoaded was true, and otherwise no parameter was given this was
                    // removed as the behaviour for apps were different depending on the startup
                    // mode
                    oDeferred.resolve();
                }, function (sMessage) {
                    oDeferred.reject(sMessage);
                });
            }

            // note: mandatory parameters have been checked by the service
            oBookmarkUri = new URI(oParameters.url); // http://medialize.github.io/URI.js/about-uris.html
            // check and process oParameters.url
            if (oParameters.url &&
                (oParameters.url[0] === '#' ||
                 oBookmarkUri.host() + oBookmarkUri.path() ===
                     oLocationUri.host() + oLocationUri.path())) {
                // try to figure out if SO navigation is used to enable form factor filtering
                // but only if bookmark URL points to the same domain. Foreign domains are not
                // expected to use intent based navigation.
                oUrlParsing = sap.ushell.Container.getService("URLParsing");
                oHash = oUrlParsing.parseShellHash(oUrlParsing.getShellHash(oParameters.url));
                if (oHash && // note: oTargetMappingSupport#get may return false
                    oTargetMappingSupport.get(fnMkKey(oHash.semanticObject, oHash.action)) !== undefined) {
                    // User has a target mapping matching the URL, so add this information to the
                    // bookmark for form factor based filtering
                    oConfiguration.navigation_use_semantic_object = true;
                    oConfiguration.navigation_semantic_object = oHash.semanticObject;
                    oConfiguration.navigation_semantic_action = oHash.action;
                    oConfiguration.navigation_semantic_parameters =
                        oUrlParsing.paramsToString(oHash.params);
                }
                // TODO add also display_search_keywords?
            }
            if (oParameters.serviceUrl) {
                sChipId = sDYNAMIC_BASE_CHIP_ID;
                oConfiguration.display_number_unit = oParameters.numberUnit;
                oConfiguration.service_refresh_interval = oParameters.serviceRefreshInterval || 0;
                oConfiguration.service_url = oParameters.serviceUrl;
            }
            if (oGroup && !(oGroup instanceof sap.ui2.srvc.Page)) {
                // same behavior like addCatalogTileToGroup of the Bookmark service:
                // if the group is unknown don't use the default group but reject.
                oDeferred.reject("The given object is not a group");
                return oDeferred.promise();
            }
            if (bPageSetFullyLoaded) {
                // use the default group if no group is specified
                oGroup = oGroup || oCurrentPageSet.getDefaultPage();
                oChipInstance = oFactory.createChipInstance({chipId: sChipId,
                    pageId: oGroup.getId(),
                    title: oParameters.title,
                    configuration: JSON.stringify({tileConfiguration:
                        JSON.stringify(oConfiguration)}),
                    layoutData: ""
                    // note: no deep insert, do not set the subtitle as bag property here, set later on the created chip!
                    // the create service does not support deep insert
                    // Chip ChipBags -> Chip
                    });
                oGroup.addChipInstance(oChipInstance, function (oNewChipInstance) {
                    addBagAndResolve(oNewChipInstance, oConfiguration, oDeferred);
                }, oDeferred.reject.bind(oDeferred), undefined);
            } else {
                // This can happen in the app cold-start use case, when the app creates a bookmark
                // createPageChipInstanceFromRawData might throw Errors
                try {
                    oPbs.createPageChipInstanceFromRawData({
                        chipId: sChipId,
                        configuration: JSON.stringify({tileConfiguration:
                            JSON.stringify(oConfiguration)}),
                        pageId: "/UI2/Fiori2LaunchpadHome", //Default Page
                        title: oParameters.title
                    }, function (oRawChipInstance) {
                        oFactory.createChipInstance(oRawChipInstance, function (oNewChipInstance) {
                            addBagAndResolve(oNewChipInstance, oConfiguration, oDeferred);
                        }, oDeferred.reject.bind(oDeferred), /*oPage*/undefined);
                    }, oDeferred.reject.bind(oDeferred));
                } catch (e) {
                    oDeferred.reject(e.toString());
                }
            }
            return oDeferred.promise();
        };

        /**
         * Tells whether the given CHIP instance represents a bookmark pointing to the given URL.
         *
         * @param {sap.ui2.srvc.ChipInstance} oChipInstance
         * @param {string} sUrl
         * @returns {boolean}
         *
         * @see #addBookmark
         * @since 1.17.1
         */
        sap.ui2.srvc.testPublishAt(that);
        function isBookmarkFor(oChipInstance, sUrl) {
            return isAppLauncher(oChipInstance)
                && getTileConfiguration(oChipInstance).navigation_target_url === sUrl;
        }

        /**
         * Visits <b>all</b> bookmarks pointing to the given URL from all of the user's groups and
         * calls the given visitor function on each such bookmark.
         * <p>
         * This is a potentially asynchronous operation in case the user's groups have not yet been
         * loaded completely!
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be visited, exactly as specified to {@link #addBookmark}.
         * @param {function(sap.ui2.srvc.ChipInstance)} [fnVisitor]
         *   The asynchronous visitor function returning a <code>jQuery.Deferred</code> object's
         *   promise. In case of success, no details are expected. In case of failure, an error
         *   message is passed.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, the count of visited bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @since 1.17.1
         */
        sap.ui2.srvc.testPublishAt(that);
        function visitBookmarks(sUrl, fnVisitor) {
            var aDeferreds = [],
                oDeferred = new jQuery.Deferred();

            that.getGroups().fail(oDeferred.reject.bind(oDeferred)).done(function (aGroups) {
                var iCount = 0;
                aGroups.forEach(function (oGroup) {
                    oGroup.getChipInstances().forEach(function (oChipInstance) {
                        if (isBookmarkFor(oChipInstance, sUrl)) {
                            iCount += 1;
                            if (fnVisitor) {
                                aDeferreds.push(fnVisitor(oChipInstance));
                            }
                        }
                    });
                });
                if (aDeferreds.length === 0) {
                    oDeferred.resolve(iCount);
                } else {
                    jQuery.when.apply(jQuery, aDeferreds)
                        .fail(function (sMessage) {
                            oDeferred.reject(sMessage);
                        })
                        .done(function () {
                            oDeferred.resolve(iCount);
                        });
                }
            });
            return oDeferred.promise();
        }

        /**
         * Counts <b>all</b> bookmarks pointing to the given URL from all of the user's pages. You
         * can use this method to check if a bookmark already exists.
         * <p>
         * This is a potentially asynchronous operation in case the user's pages have not yet been
         * loaded completely!
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be counted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, the count of existing bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @since 1.17.1
         */
        this.countBookmarks = function (sUrl) {
            return visitBookmarks(sUrl);
        };

        /**
         * Deletes <b>all</b> bookmarks pointing to the given URL from all of the user's pages.
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be deleted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, the number of deleted bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @see #countBookmarks
         * @since 1.17.1
         */
        this.deleteBookmarks = function (sUrl) {
            return visitBookmarks(sUrl, function (oChipInstance) {
                var oDeferred = new jQuery.Deferred();
                oChipInstance.remove(oDeferred.resolve.bind(oDeferred),
                    oDeferred.reject.bind(oDeferred));
                return oDeferred.promise();
            });
        };

        /**
         * Updates <b>all</b> bookmarks pointing to the given URL in all of the user's groups
         * with the given new parameters. Parameters which are omitted are not changed in the
         * existing bookmarks.
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be updated, exactly as specified to {@link #addBookmark}.
         *   In case you need to update the URL itself, pass the old one here and the new one as
         *   <code>oParameters.url</code>!
         * @param {object} oParameters
         *   The bookmark parameters as documented in {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation.  In case of success, the number of updated bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @see #countBookmarks
         * @see #deleteBookmarks
         * @since 1.17.1
         */
        this.updateBookmarks = function (sUrl, oParameters) {
            return visitBookmarks(sUrl, function (oChipInstance) {
                var oConfiguration = getTileConfiguration(oChipInstance),
                    oDeferred = new jQuery.Deferred(),
                    bBagUpdated = false;

                function configUpdated() {
                    // notify the tile, that it should updated itself as the configuration may have changed
                    oChipInstance.getContract("configuration").fireConfigurationUpdated(["tileConfiguration"]);
                    conditionalUpdateBag();
                }

                function bagsUpdated() {
                    // notify the tile, that it should updated the view based on the changed bag data
                    oChipInstance.getContract("bag").fireBagsUpdated(["tileProperties"]);
                    oDeferred.resolve();
                }

                function conditionalUpdateBag() {
                    // add texts also to the bag, as this is prio 1 for applaunchers
                    if (typeof oConfiguration.display_title_text === "string") {
                        oChipInstance.getBag("tileProperties")
                            .setText("display_title_text", oConfiguration.display_title_text);
                        bBagUpdated = true;
                    }
                    if (typeof oConfiguration.display_subtitle_text === "string") {
                        oChipInstance.getBag("tileProperties")
                            .setText("display_subtitle_text", oConfiguration.display_subtitle_text);
                        bBagUpdated = true;
                    }
                    if (typeof oConfiguration.display_info_text === "string") {
                        oChipInstance.getBag("tileProperties")
                            .setText("display_info_text", oConfiguration.display_info_text);
                        bBagUpdated = true;
                    }

                    // update bag only if necessary
                    if (bBagUpdated) {
                        oChipInstance.getBag("tileProperties").save(
                            bagsUpdated, oDeferred.reject.bind(oDeferred)
                        );
                    } else {
                        oDeferred.resolve();
                    }
                }

                /* eslint-disable camelcase */
                oConfiguration.display_icon_url = oParameters.icon
                    || oConfiguration.display_icon_url;
                oConfiguration.display_info_text = oParameters.info
                    || oConfiguration.display_info_text;
                oConfiguration.display_subtitle_text = oParameters.subtitle
                    || oConfiguration.display_subtitle_text;
                oConfiguration.display_title_text = oParameters.title
                    || oConfiguration.display_title_text;
                oConfiguration.navigation_target_url = oParameters.url
                    || oConfiguration.navigation_target_url;
                oConfiguration.display_number_unit = oParameters.numberUnit
                    || oConfiguration.display_number_unit;
                oConfiguration.service_refresh_interval = oParameters.serviceRefreshInterval
                    || oConfiguration.service_refresh_interval;
                oConfiguration.service_url = oParameters.serviceUrl
                    || oConfiguration.service_url;
                /* eslint-enable camelcase */

                // TODO is special treatment of semantic object + action needed here,
                //      e.g. updating old bookmarks whithout it?

                oChipInstance.updateConfiguration({
                    tileConfiguration: JSON.stringify(oConfiguration)
                }, configUpdated, oDeferred.reject.bind(oDeferred));

                return oDeferred.promise();
            });
        };

        /**
         * This method is called to notify that the given tile has been added to some remote
         * catalog which is not specified further.
         *
         * @param {string} sTileId
         *   the ID of the tile that has been added to the catalog (as returned by that OData POST
         *   operation)
         * @private
         * @since 1.16.4
         */
        this.onCatalogTileAdded = function (sTileId) {
            bCatalogsValid = false;
        };
    };

    /**
     * Returns the current shell type, without relying on the existence
     * of {@link sap.ushell_abap#getShellType}.
     *
     * @returns {string}
     *   the shell type ("NWBC" or "FLP"). Defaults to "FLP" in case
     *   the adapter is not running on the ABAP platform.
     *
     * @private
     * @see sap.ushell_abap.adapters.abap.ClientSideTargetResolutionAdapter.prototype._getShellType
     */
    sap.ushell_abap.adapters.abap.LaunchPageAdapter.prototype._getShellType = function () {
        if (sap && sap.ushell_abap && typeof sap.ushell_abap.getShellType === "function") {
            return sap.ushell_abap.getShellType();
        }
        return "FLP";
    };
}());

}; // end of sap/ushell_abap/adapters/abap/LaunchPageAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.NavTargetResolutionAdapter') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The NavTargetResolution adapter for the ABAP platform.
 *
 * This adapter is not implemented in the ABAP platform, but its stub is here
 * as it is always loaded by the Container currently. NavTargetResolution
 * service now calls the ClientSideTargetResolution service in the abap
 * platform.
 *
 * @version 1.52.7
 */
(function () {
    "use strict";
    /*global jQuery, sap, window */
    jQuery.sap.declare("sap.ushell_abap.adapters.abap.NavTargetResolutionAdapter");

    /**
     * @param {object} oUnused Unused constructor argument
     * @constructor
     * @private
     */
    sap.ushell_abap.adapters.abap.NavTargetResolutionAdapter = function (oUnused) {};

}());

}; // end of sap/ushell_abap/adapters/abap/NavTargetResolutionAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.PageBuildingAdapter') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's page building adapter for the ABAP platform.
 *
 * @version 1.52.7
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell_abap.adapters.abap.PageBuildingAdapter");

    
    jQuery.sap.require('sap.ushell.System'); // unlisted dependency retained


    /**
     * This method MUST be called by the Unified Shell's container only.
     * Constructs a new instance of the page building adapter for the ABAP platform.
     * <p>
     * The adapter knows the configuration property <code>remoteCatalogServices</code> which may
     * contain a map of remote catalog base URLs to corresponding remote catalog services. Each
     * such service is assumed to be a no-args constructor function. First the module is required
     * and then the constructor is called, passing the result to
     * {@link sap.ui2.srvc.Factory#addRemoteCatalogService}.
     * <p>
     * <b>Example:</b>
     * <pre>
     * window["sap-ushell-config"] = {
     *     PageBuilding: {
     *         adapter: {
     *             config: {
     *                  remoteCatalogServices: {
     *                      "/sap/opu/odata/UI2/PAGE_BUILDER_PERS/":
     *                          "sap.ui2.srvc.RemoteCatalogService",
     *                      "/foo": "acme.BarService"
     *                  }
     *             }
     *         }
     *     }
     * }
     * </pre>
     * With the given configuration the adapter registers remote catalog services for two base URLs
     * using <code>sap.ui2.srvc.RemoteCatalogService</code> and <code>acme.BarService</code> resp.
     * as remote catalog service constructor functions.
     * <p>
     * If not specified otherwise, <code>sap.ui2.srvc.RemoteCatalogService</code> is registered as
     * a remote catalog service for the following base URLs:
     * <ul>
     *   <li> "/sap/hba/apps/kpi/s/odata/hana_chip_catalog.xsodata/" (legacy HANA catalogs)</li>
     *   <li> "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata/" (SMART BUSINESS catalogs)
     *   </li>
     *   <li> "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata/" (SMART BUSINESS catalogs)
     *   </li>
     *   <li> "/sap/opu/odata/sap/SM_CATALOG_SRV/" (Social Media catalog)</li>
     * </ul>
     *
     * @param {sap.ushell.System} oSystem
     *     the system served by the adapter
     * @param {string} [sParameter="PERS"]
     *     a parameter "CUST" or "CONF" determining the scope (since 1.11.0)
     * @param {object} [oProperties]
     *   The configuration in the property <code>config</code> (since 1.19.1)
     *
     * @class The Unified Shell's page building adapter for the ABAP platform.
     *
     * @constructor
     * @see sap.ushell.services.PageBuilding
     * @since 1.11.0
     * @private
     */
    sap.ushell_abap.adapters.abap.PageBuildingAdapter = function (oSystem, sParameter, oProperties) {
        var oFactory,
            sScope = "PERS",
            sPageBuilderServiceUrl = "/sap/opu/odata/UI2/PAGE_BUILDER_PERS/", // 3rd Priority (fallback)
            mRemoteCatalogServices = oProperties.config.remoteCatalogServices || {},
            sConfigBaseUrl = jQuery.sap.getObject("config.services.pageBuilding.baseUrl",
                undefined, oProperties);

        // BEWARE: constructor code below!

        /**
         * Returns the UI2 page building factory.
         * @returns {sap.ui2.srvc.Factory}
         *     the page building factory
         */
        this.getFactory = function () {
            return oFactory;
        };

        // constructor code -------------------------------------------------------

        // accept lower case parameter as in FLPD this is set as query parameter the user alters manually
        sParameter = sParameter ? sParameter.toUpperCase() : "";

        if (sParameter === "CONF" || sParameter === "CUST") {
            // 1st priority: sParameter is used by FLP Designer to configure the scope
            sScope = sParameter;
            sPageBuilderServiceUrl = "/sap/opu/odata/UI2/PAGE_BUILDER_" + sScope + "/";
        } else if (sConfigBaseUrl &&
                jQuery.sap.getObject("config.services.pageBuilding.relativeUrl", undefined, oProperties)) {
            // 2nd priority: use configured URL from start_up response
            // overwrite default only if relativeUrl is also given. Otherwise here is a different
            // URL used than in the boottask
            sPageBuilderServiceUrl = sConfigBaseUrl;
        }

        oFactory = sap.ui2.srvc.createFactory(
            sPageBuilderServiceUrl,
            undefined,
            sScope === "PERS"
        );
        [ // predefined remote catalog services
            "/sap/hba/apps/kpi/s/odata/hana_chip_catalog.xsodata/",
            "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata/",
            "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata/",
            "/sap/opu/odata/sap/SM_CATALOG_SRV/"
        ].forEach(function (sBaseUrl) {
            if (!Object.prototype.hasOwnProperty.call(mRemoteCatalogServices, sBaseUrl)) {
                mRemoteCatalogServices[sBaseUrl] = "sap.ui2.srvc.RemoteCatalogService";
            }
        });
        Object.keys(mRemoteCatalogServices).forEach(function (sBaseUrl) {
            var sRemoteCatalogService = mRemoteCatalogServices[sBaseUrl];

            jQuery.sap.require(sRemoteCatalogService);
            oFactory.addRemoteCatalogService(sBaseUrl,
                new (jQuery.sap.getObject(sRemoteCatalogService))());
        });
    };
}());

}; // end of sap/ushell_abap/adapters/abap/PageBuildingAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.PersonalizationAdapter') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's personalization adapter for the ABAP
 *               platform.
 *               The internal data structure of the AdapterContainer corresponds to the
 *               ABAP EDM.
 *               Container header properties transported via pseudo-items are mapped to the
 *               respective header properties in setItem/getItem/delItem
 *
 * @version 1.52.7
 */
jQuery.sap.declare('sap.ushell_abap.adapters.abap.PersonalizationAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ushell.services.Personalization'); // unlisted dependency retained
jQuery.sap.require('sap.ushell.services._Personalization.constants'); // unlisted dependency retained
sap.ui.define("sap/ushell_abap/adapters/abap/PersonalizationAdapter",[
    "sap/ushell/services/Personalization",
    "sap/ushell/services/_Personalization/constants"
], function (Personalization, constants) {

    "use strict";
    /*jslint nomen: true*/
    /*global jQuery sap setTimeout */
    jQuery.sap.require("sap.ui2.srvc.ODataWrapper");
    jQuery.sap.require("sap.ui2.srvc.ODataService");

    var sABAPTIMESTAMPFORMAT = "yyyyMMddHHmmss",
        sInitialStorage = new Date(9999, 1, 1, 0, 0, 0),
        sInitialExpire = new Date(9999, 1, 1, 0, 0, 0, 0),
        sCONTAINERCOLLECTIONNAME = "PersContainers",
        sITEM_KEY_ADMIN_EXPIRE = "ADMIN#sap-ushell-container-expireUTCTimestamp",
        sITEM_KEY_ADMIN_STORAGEUTC = "ADMIN#sap-ushell-container-storageUTCTimestamp",
        sITEM_KEY_ADMIN_SCOPE = "ADMIN#sap-ushell-container-scope";

    // Ensure Namespace
    jQuery.sap.getObject("sap.ushell_abap.adapters.abap", 0 /* create namespace */);

    // --- Adapter ---

    /**
     * This method MUST be called by the Unified Shell's personalization service only.
     * Constructs a new instance of the personalization adapter for the ABAP
     * platform.
     *
     * @param {object}
     *            oSystem the system served by the adapter
     *
     * @class The Unified Shell's personalization adapter for the ABAP platform.
     *
     * @constructor
     * @since 1.11.0
     * @private
     */
    sap.ushell_abap.adapters.abap.PersonalizationAdapter = function (oSystem, sParameters, oConfig) {
        this._oConfig = oConfig && oConfig.config;
        var sPersonalizationServiceURL = (jQuery.sap.getObject("config.services.personalization.baseUrl",
            undefined, oConfig) || "/sap/opu/odata/UI2/INTEROP") + "/";
        var oODataWrapperSettings = {
            baseUrl:      sPersonalizationServiceURL,
            'sap-language': sap.ushell.Container.getUser().getLanguage(),
            'sap-client':   sap.ushell.Container.getLogonSystem().getClient()
        };
        this._oWrapper = sap.ui2.srvc.createODataWrapper(oODataWrapperSettings);
        function fnDefaultFailure(oMessage) {
            sap.ui2.srvc.Error(oMessage, "sap.ushell_abap.adapters.abap.PersonalizationAdapter");
        }
        sap.ui2.srvc.ODataService.call(this, this._oWrapper, fnDefaultFailure);
    };

    // historically, the service always called  getAdapterContainer and then load
    // thus an implementation was not required to initialize a fully implemented container on getAdapterContainer
    // if the following property is set to true, it indicates getAdapterContainer is sufficient and a load is not
    // required if an initial contain is requested.
    sap.ushell_abap.adapters.abap.PersonalizationAdapter.prototype.supportsGetWithoutSubsequentLoad = true;

    sap.ushell_abap.adapters.abap.PersonalizationAdapter.prototype.getAdapterContainer = function (sContainerKey, oScope, sAppName) {
        return new sap.ushell_abap.adapters.abap.AdapterContainer(sContainerKey, this, oScope, sAppName);
    };

    sap.ushell_abap.adapters.abap.PersonalizationAdapter.prototype.delAdapterContainer = function (sContainerKey, oScope) {
        return this.getAdapterContainer(sContainerKey, oScope).del();
    };

    function rectifyKey(sContainerKey) {
        var sCONTAINER_KEY_PREFIX = "sap.ushell.personalization#";
        if (sContainerKey.substring(0, sCONTAINER_KEY_PREFIX.length)  !== sCONTAINER_KEY_PREFIX) {
            jQuery.sap.log.error("Unexpected ContainerKey " + sContainerKey);
            return sContainerKey;
        }
        return sContainerKey.substring(sCONTAINER_KEY_PREFIX.length, sCONTAINER_KEY_PREFIX.length + 40);
    }

    /**
     * Determine the correct category resulting out of possible scope flag combinations
     * @returns {string}
     *  category information
     * @private
     */
    sap.ui2.srvc.testPublishAt(sap.ushell_abap.adapters.abap.PersonalizationAdapter);
    sap.ushell_abap.adapters.abap.PersonalizationAdapter.prototype._determineCategory = function (oScope) {
        if (!oScope) {
            return "U";
        }
        var oConstants = constants;
        if (oScope.keyCategory && oScope.keyCategory === oConstants.keyCategory.FIXED_KEY &&
                oScope.writeFrequency && oScope.writeFrequency === oConstants.writeFrequency.LOW &&
                    oScope.clientStorageAllowed && oScope.clientStorageAllowed === true) {
            return "P";
        }
        return "U";
    };

    sap.ushell_abap.adapters.abap.AdapterContainer = function (sContainerKey, oService, oScope, sAppName) {
        this._oService = oService;
        this._oScope = oScope;
        this["sap-cache-id"] = jQuery.sap.getObject("_oService._oConfig.services.personalization.cacheId", undefined, this);
        sCONTAINERCOLLECTIONNAME = jQuery.sap.getObject("_oService._oConfig.services.personalization.relativeUrl", undefined, this) || "PersContainers";
        this._sContainerKey = rectifyKey(sContainerKey);
        this._sAppName = sAppName || "";

        //Determine category resulting out of possible scope flag combinations
        this._category = sap.ushell_abap.adapters.abap.PersonalizationAdapter.prototype._determineCategory(oScope);

        this._oJSONContainer = {
            "category" : this._category,
            "clientExpirationTime" : sInitialExpire,
//            "Changedat" : sInitialStorage,
            "appName" : this._sAppName,
            "component" : "", //csn component
            "id" : this._sContainerKey,
            PersContainerItems : []
        };
//          "Changedat" : "\/Date(1402911849000)\/",
//          "Expiredat" : "\/Date(1401109666000)\/",
//          "Achcomponent" : "SCM-BAS-DF",
//          "Validity" : 30,
//          "Changedby" : "FORSTMANN",
//          "items" : [
//              {
//                  "Itemvalue" : "Fiori Rocks" + new Date(),
//                  "Itemid" : "ITEM#ITEM1",
//                  "Itemtype" : " ",
//                  "Containerid" : sKey,
//                  "Containertype" : "P"
//              },
//              {{}; // OData model container -> items
//        obj = {
//                "Containertype" : "P",
//                "Containerid" : sKey,
//                "Changedat" : "\/Date(1402911849000)\/",
//                "Expiredat" : "\/Date(1401109666000)\/",
//                "Achcomponent" : "SCM-BAS-DF",
//                "Validity" : 30,
//                "Changedby" : "FORSTMANN",
//                "items" : [
//                    {
//                        "Itemvalue" : "Fiori Rocks" + new Date(),
//                        "Itemid" : "ITEM#ITEM1",
//                        "Itemtype" : " ",
//                        "Containerid" : sKey,
//                        "Containertype" : "P"
//                    },
//                    {
//                        "Itemvalue" : "3REALLLYCLIENTDF" + new Date(),
//                        "Itemid" : "ITEM#ITEM2",
//                        "Itemtype" : " ",
//                        "Containerid" : sKey,
//                        "Containertype" : "P"
//                    },
//                    {
//                        "Itemvalue" : "3REALLLYCLIENTDF" + new Date(),
//                        "Itemid" : "ITEM#ITEM3",
//                        "Itemtype" : " ",
//                        "Containerid" : sKey,
//                        "Containertype" : "P"
//                    },
//                    {
//                        "Itemvalue" : "3REALLLYCLIENTDF" + new Date(),
//                        "Itemid" : "ITEM#ITEM4",
//                        "Itemtype" : " ",
//                        "Containerid" : sKey,
//                        "Containertype" : "P"
//                    }
//                ]
//            };
        this._oPropertyBag = {};
        this._aOperationQueue = [];
    };

    /**
     * Resets the container item values to initial ( retaining key, validity, etc!)
     */
    sap.ushell_abap.adapters.abap.AdapterContainer.prototype._reset = function () {
        this._oJSONContainer.PersContainerItems = [];
    };

    sap.ushell_abap.adapters.abap.AdapterContainer.prototype._obtainODataWrapper = function () {
        return this._oService._oWrapper;
    };

    // loads data from backend, when done, oPropertyBag contains the items
    sap.ushell_abap.adapters.abap.AdapterContainer.prototype.load = function () {
        var oDeferred = new jQuery.Deferred(),
            that = this,
            oDataWrapper = this._obtainODataWrapper(),
            // load container data with _sContainerKey data into _oPoprertyBag
            sRelativeUrl = sCONTAINERCOLLECTIONNAME + "(category='" + this._category + "',id='" + encodeURIComponent(this._sContainerKey) + "')?$expand=PersContainerItems";
        if (this._category && (this._category === 'P') && this["sap-cache-id"]) {
            sRelativeUrl = sRelativeUrl + "&sap-cache-id=" + this["sap-cache-id"];
        }
        sap.ui2.srvc.ODataService.call(this, oDataWrapper, function () {
            return false;
        });

        oDataWrapper.read(sRelativeUrl, function (oData) {
            // TODO : align container id?
            that._oJSONContainer = oData;
            // overwrite key and category, do not trust server response
            that._oJSONContainer.category = that._category;
            that._oJSONContainer.id = that._sContainerKey;
            that._oJSONContainer.appName = that._sAppName;
            // response contains items.results (!)
            that._oJSONContainer.PersContainerItems = (that._oJSONContainer.PersContainerItems && that._oJSONContainer.PersContainerItems.results) || [];
            oDeferred.resolve(that);
        }, function (sErrorMessage) {
            jQuery.sap.log.warning(sErrorMessage);
            // load errors are ok (at least 404), return empty(!) container
            that._reset();
            oDeferred.resolve(that);
        });
        return oDeferred.promise();
    };

    sap.ushell_abap.adapters.abap.AdapterContainer.prototype.save = function () {
        var oDeferred = new jQuery.Deferred(),
            that = this,
            oDataWrapper = this._obtainODataWrapper(),
            sRelativeURL = sCONTAINERCOLLECTIONNAME;
        // serialize the current JSON
        sap.ui2.srvc.ODataService.call(this, oDataWrapper, function () {
            return false;
        });

        oDataWrapper.create(sRelativeURL, this._oJSONContainer, function (response) {
            oDeferred.resolve(that);
        }, function (sErrorMessage) {
            oDeferred.reject(sErrorMessage);
        });
        return oDeferred.promise();
    };

    sap.ushell_abap.adapters.abap.AdapterContainer.prototype.del = function () {
        var oDeferred = new jQuery.Deferred(),
            that = this,
            oDataWrapper = this._obtainODataWrapper(),
            sRelativeURL = sCONTAINERCOLLECTIONNAME + "(category='" + this._category + "',id='" + encodeURIComponent(this._sContainerKey) + "')";
            //sRelativeURL = "containers(Containertype='',Containerid='" + encodeURIComponent(this._sContainerKey) + "')";
        // serialize the current JSON
        sap.ui2.srvc.ODataService.call(this, oDataWrapper, function () {
            return false;
        });

        oDataWrapper.del(sRelativeURL, function (response) {
            oDeferred.resolve(that);
        }, function (sErrorMessage) {
            oDeferred.reject(sErrorMessage);
        });
        this._reset();
        return oDeferred.promise();
    };

    sap.ushell_abap.adapters.abap.AdapterContainer.prototype.getItemKeys = function () {
        var res = [];
        // collect item names from types
        this._oJSONContainer.PersContainerItems.forEach(function (oMember) {
            if (oMember.category === "V") {
                res.push("VARIANTSET#" + oMember.id);
            } else if (oMember.category === "I") {
                res.push("ITEM#" + oMember.id);
            }
        });
        // add "artifical item names if present
        if (this._oJSONContainer.validity >= 0) {
            res.push(sITEM_KEY_ADMIN_STORAGEUTC); //  + this._oJSONContainer.Validity);
            res.push(sITEM_KEY_ADMIN_EXPIRE); //  + this._oJSONContainer.Expiredat);
            res.push(sITEM_KEY_ADMIN_SCOPE); //  + this._oJSONContainer.Expiredat);
        }
        return res;
    };
    sap.ushell_abap.adapters.abap.AdapterContainer.prototype.containsItem = function (sItemKey) {
        return this.getItemKeys().indexOf(sItemKey) >= 0 ? true : false;
    };

    function fnABAPDateToEDMDate(sABAPDate) {
        if (sABAPDate === undefined || sABAPDate === null) {
            return null;
        }
        var oFormatter = sap.ui.core.format.DateFormat.getDateInstance({ pattern : sABAPTIMESTAMPFORMAT});
        return oFormatter.parse(JSON.parse(sABAPDate), true);
    }

    function fnEDMDateToABAPDate(oDate) {
        var oFormatter = sap.ui.core.format.DateFormat.getDateInstance({ pattern : sABAPTIMESTAMPFORMAT});
        if (oDate === null) {
            oDate = sInitialExpire;
        }
        if (typeof oDate === "string") {
            if (/\/Date\(([0-9]+)\)\//.exec(oDate)) {
                oDate = new Date(parseInt(/\/Date\(([0-9]+)\)\//.exec(oDate)[1], 10));
            } else {
                jQuery.sap.log.error("Expected Date format " + oDate);
            }
        }
        // beware, Date comparision returns false, use + to compare the milliseconds values (!)
        if (+oDate === +sInitialExpire) {
            // undefined is mapped to sInitialExpire in ABAP OData representation
            return undefined;
        }
        return oFormatter.format(oDate, true);
    }

    sap.ushell_abap.adapters.abap.AdapterContainer.prototype._findItemIndex = function (sItemId, sCategory) {
        var i;
        for (i = 0; i < this._oJSONContainer.PersContainerItems.length; i = i + 1) {
            if (this._oJSONContainer.PersContainerItems[i].id === sItemId && this._oJSONContainer.PersContainerItems[i].category === sCategory) {
                return i;
            }
        }
        return undefined;
    };
    /**
     * Locates an item for the key sItemKey,
     * returns  { index : nr,  TrueItemKey : truekey,  containerProperty : }
     * either trueKey xor containerProperty is set.
     * index is filled iff it is a present item
     */
    sap.ushell_abap.adapters.abap.AdapterContainer.prototype._locateItem = function (sItemKey) {
        var res = { index : -1};
        if (sItemKey === sITEM_KEY_ADMIN_EXPIRE) {
            return { containerProperty : "clientExpirationTime",
                initialValue : sInitialExpire,
                convToABAP : fnABAPDateToEDMDate,
                convFromABAP : fnEDMDateToABAPDate
                };
        }
        if (sItemKey === sITEM_KEY_ADMIN_SCOPE) {
            // extract validity, and save as scope property
            return { containerProperty : "validity",
                initialValue : 0,
                convToABAP : function (oArg) {
                    if (!oArg) {
                        return null;
                    }
                    return JSON.parse(oArg).validity;
                },
                convFromABAP : function (oValue, oItem) {
                    if (oValue <= 0) {
                        return undefined;
                    }
                    oItem = oItem || {};
                    oItem.validity = oValue;
                    return oItem;
                }
                //// with the following lines uncommented, scope would be serialized as item 'A' 'scope' in addition!
                // currently in ABAP, only validity is stored in the Container Header
                // trueItemKey : "scope",
                // category : "A",
                // index : this._findItemIndex("scope", "A")
                };
        }
        // this is no longer present !
        if (sItemKey === sITEM_KEY_ADMIN_STORAGEUTC) {
            return { containerProperty : " ignore", // ChangedatNOLONGERPRESENT",
                initialValue : sInitialStorage,
                convToABAP : fnABAPDateToEDMDate,
                convFromABAP : fnEDMDateToABAPDate
                };
        }
        // Remove prefix, mapping into category,
        // Strip prefix from itemkey and truncate to 40 effective characters
        if (sItemKey.indexOf("ITEM#") === 0) {
            res.trueItemKey = sItemKey.substring("ITEM#".length, "ITEM#".length + 40);
            res.category = "I";
        } else if (sItemKey.indexOf("VARIANTSET#") === 0) {
            res.trueItemKey = sItemKey.substring("VARIANTSET#".length, "VARIANTSET#".length + 40);
            res.category = "V";
        } else if (sItemKey.indexOf("ADMIN#") !== 0) {
            jQuery.sap.log.error("Unknown itemkey prefix" + sItemKey);
        }
        res.index = this._findItemIndex(res.trueItemKey, res.category);
        return res;
    };

    sap.ushell_abap.adapters.abap.AdapterContainer.prototype.getItemValue = function (sItemKey) {
        var sItemValue = "",
            oItemValue,
            oItemRef = this._locateItem(sItemKey);
        if (oItemRef.containerProperty === " ignore") {
            return undefined; // not present in persistence
        }
        if (oItemRef.index >= 0) {
            sItemValue = this._oJSONContainer.PersContainerItems[oItemRef.index].value;
            try {
                oItemValue = JSON.parse(sItemValue);
            } catch (e) {
                // Workaround for
                // GW Bug "true" => "X" and false => "" at the backend
                // can be removed once Correction of Note 2013368 is implemented in landscape
                if (sItemValue === "X") {
                    oItemValue = true;
                } else {
                    oItemValue = undefined;
                }
            }
        }
        if (oItemRef.containerProperty) {
            if (typeof oItemRef.convFromABAP === "function") {
                return oItemRef.convFromABAP(this._oJSONContainer[oItemRef.containerProperty], oItemValue); // TODO Conversion!
            }
            return this._oJSONContainer[oItemRef.containerProperty];
        }
        return oItemValue;
    };


    /**
     * set oItemValue under sItemKey
     * returns undefined
     */
    sap.ushell_abap.adapters.abap.AdapterContainer.prototype.setItemValue = function (sItemKey, oItemValue) {
        var sItemValue = JSON.stringify(oItemValue),
            oItemRef = this._locateItem(sItemKey);
        if (oItemRef.containerProperty === " ignore") {
            return; // not present in persistence
        }
        if (oItemRef.containerProperty) {
            if (typeof oItemRef.convToABAP === "function") {
                this._oJSONContainer[oItemRef.containerProperty] = oItemRef.convToABAP(sItemValue); // TODO Conversion!
            } else {
                this._oJSONContainer[oItemRef.containerProperty] = sItemValue; // TODO Conversion!
            }
            if (!oItemRef.trueItemKey) {
                return;
            }
        }
        if (oItemRef.index >= 0) {
            this._oJSONContainer.PersContainerItems[oItemRef.index].value = sItemValue;
            return;
        }
        // not yet present
        this._oJSONContainer.PersContainerItems.push({
            "value" : sItemValue,
            "id" : oItemRef.trueItemKey,
            "category" : oItemRef.category,
            "containerId" : this._sContainerKey,
            "containerCategory" : this._category
        });
    };

    /**
     * delete (1st) item with key sItemKey
     */
    sap.ushell_abap.adapters.abap.AdapterContainer.prototype.delItem = function (sItemKey) {
        var oItemRef = this._locateItem(sItemKey);
        if (oItemRef.containerProperty === " ignore") {
            return; // not present in persistence
        }
        if (oItemRef.containerProperty) {
            this._oJSONContainer[oItemRef.containerProperty] = oItemRef.initialValue;
            return;
        }
        if (oItemRef.index >= 0) {
            this._oJSONContainer.PersContainerItems.splice(oItemRef.index, 1);
            return;
        }
        // TODO throw?
    };

    return sap.ushell_abap.adapters.abap.PersonalizationAdapter;

});

}; // end of sap/ushell_abap/adapters/abap/PersonalizationAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.SearchAdapter') ) {
/*global jQuery, sap, window */
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The Search adapter for the ABAP platform.
 *
 * @version 1.52.7
 */
jQuery.sap.declare('sap.ushell_abap.adapters.abap.SearchAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ushell.renderers.fiori2.search.SearchConfiguration'); // unlisted dependency retained
jQuery.sap.require('sap.ushell.renderers.fiori2.search.esh.api.release.sina'); // unlisted dependency retained
sap.ui.define("sap/ushell_abap/adapters/abap/SearchAdapter",[
    'sap/ushell/renderers/fiori2/search/SearchConfiguration',
    'sap/ushell/renderers/fiori2/search/esh/api/release/sina'
], function(SearchConfiguration) {
    "use strict";

    /**
     *
     * @param oSystem
     * @returns {sap.ushell_abap.adapters.abap.SearchAdapter}
     * @private
     */
    sap.ushell_abap.adapters.abap.SearchAdapter = function (oSystem) {

        //@deprecated
        if (!this.isSearchRegistered) {
            var config = new SearchConfiguration.getInstance();
            this.sina = config.getSina();
            this.isSearchRegistered = true;
        }

        //@deprecated
        this.getSina = function () {
            return this.sina;
        };
    };
    return sap.ushell_abap.adapters.abap.SearchAdapter;
});

}; // end of sap/ushell_abap/adapters/abap/SearchAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.SupportTicketAdapter') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The SupportTicket adapter for the ABAP platform.
 *
 * @version 1.52.7
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell_abap.adapters.abap.SupportTicketAdapter");
    
    

    sap.ushell_abap.adapters.abap.SupportTicketAdapter = function (oSystem) {

        /**
         * Convert the clientContext JSON into a human-readable form
         *
         * @param {JSON} oJson
         * @return {string} Human-readable representation of the JSON object
         *
         * @since 1.19.1
         * @private
         */
        function convertToReadable(oJson) {
            var sConvertedJson;

            if (oJson && !jQuery.isEmptyObject(oJson)) {
                sConvertedJson = JSON.stringify(oJson);
                return sConvertedJson
                    .replace(/\{|\}|\\n|,/g, "\n");
            }
            return "";
        }

        /**
         * Create a support ticket in the backend system
         *
         * @param {JSON} JSON object containing the input fields required for
         *      the support ticket.
         *
         * @class The Unified Shell's Support Ticket adapter for the ABAP platform.
         *
         * @since 1.19.1
         * @private
         */
        this.createTicket = function (oSupportTicketData) {
            var oDeferred,
                sBaseUrl = "/sap/opu/odata/UI2/INTEROP/",
                sRelativeUrl = "Messages",
                sUrl,
                sHash,
                sCatalogId,
                oDataWrapper;

            // text is mandatory for ABAP backend OData service
            if (!oSupportTicketData.text) {
                throw new sap.ushell.utils.Error("Support Ticket data does not contain text member");
            }

            sUrl = jQuery.sap.getObject("clientContext.navigationData.applicationInformation.url", 0, oSupportTicketData);
            sHash = jQuery.sap.getObject("clientContext.navigationData.navigationHash", 0, oSupportTicketData);
            sCatalogId = jQuery.sap.getObject("clientContext.navigationData.tileDebugInfo", 0, oSupportTicketData);

            sUrl = typeof sUrl === "string" ? sUrl : "";
            sHash = typeof sHash === "string" ? sHash : "";
            sCatalogId = typeof sCatalogId === "string" ? JSON.parse(sCatalogId).catalogId || '' : "";

            oSupportTicketData.url = sUrl;
            oSupportTicketData.catalogId = sCatalogId;
            oSupportTicketData.hash = sHash;
            oSupportTicketData.clientContext = convertToReadable(oSupportTicketData.clientContext);

            oDeferred = new jQuery.Deferred();
            var oODataWrapperSettings = {
                baseUrl:     sBaseUrl,
                'sap-language': sap.ushell.Container.getUser().getLanguage(),
                'sap-client':   sap.ushell.Container.getLogonSystem().getClient()
            };
            oDataWrapper = new sap.ui2.srvc.createODataWrapper(oODataWrapperSettings);
            sap.ui2.srvc.ODataService.call(this, oDataWrapper, function () {
                return false;
            });

            oDataWrapper.create(sRelativeUrl, oSupportTicketData, function (response) {
                oDeferred.resolve(response.messageNumber);
            }, function (sErrorMessage) {
                oDeferred.reject(sErrorMessage);
            });

            return oDeferred.promise();
        };
    };
}());

}; // end of sap/ushell_abap/adapters/abap/SupportTicketAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.abap.UserInfoAdapter') ) {
(function () {
    "use strict";
    /*global jQuery, sap, window, OData*/
    /*jslint nomen: true */
    jQuery.sap.declare("sap.ushell_abap.adapters.abap.UserInfoAdapter");
    
    

    /**
     *
     * @returns {sap.ushell_abap.adapters.abap.UserInfoAdapter}
     * @private
     */

    var oDataWrapper;

    sap.ushell_abap.adapters.abap.UserInfoAdapter = function () {

        this._updateODataObjectBasedOnDatatype = function (oValue, oDataObj) {
            if (jQuery.type(oValue) === "string") {
                oDataObj.value = oValue.toString();
                oDataObj.dataType = "Edm.String";
            }
            if (jQuery.type(oValue) === "boolean") {
                oDataObj.value = oValue.toString();
                oDataObj.dataType = "Edm.Boolean";
            }
            return oDataObj;
        };

        /**
         * Returns the list of themes available for the user.
         * In case of success, the <code>done</code> function returns an 'anonymous' object
         * representing the list of themes.
         * In case of failure, the <code>fail</code> function of the jQuery.promise object is called.
         *
         * @returns {object}
         *  jQuery.promise object.
         */
        this.getThemeList = function () {
            var oDeferred = new jQuery.Deferred(),
                sUri = "/sap/opu/odata/UI2/INTEROP/Themes";

            // read semantic objects from interop service
            OData.read({requestUri: sUri},
                // sucess
                function (oData, oResponse) {
                    var i,
                        themes = [];

                    for (i = 0; i < oData.results.length; i = i + 1) {
                        themes.push(oData.results[i]);
                    }
                    oDeferred.resolve({
                        options : themes
                    });
                },
                // fail
                function (oError) {
                    jQuery.sap.log.error(oError.message, null, "sap.ushell_abap.adapters.abap.UserInfoAdapter");
                    oDeferred.reject(oError.message);
                });

            return oDeferred.promise();
        };

        this._createWrapper = function (sBaseUrl) {
            return sap.ui2.srvc.createODataWrapper(sBaseUrl, false, function (sError) { /*default error handler*/ });
        };

        /**
         * Sends the updated user attributes to the adapter.
         * In case of success, the <code>done</code> function returns nothing.
         * In case of failure, the <code>fail</code> function of the jQuery.promise object is called.
         *
         *  @returns {object}
         *  jQuery.promise object
         */
        this.updateUserPreferences = function (oUser) {
            var that = this,
                oDeferred,
                sRelativeUrl,
                aUserChangedProperties,
                iODataRequestsRunning,
                oDataObj,
                fnSuccess = function () {
                    iODataRequestsRunning -= 1;
                    if (iODataRequestsRunning === 0) {
                        oDeferred.resolve();
                    }
                },
                fnFailure = function (sErrorMessage) {
                    oDeferred.reject(sErrorMessage);
                };

            oDataWrapper = this._createWrapper("/sap/opu/odata/UI2/INTEROP/");
            oDeferred = new jQuery.Deferred();

            // prepare
            oDataWrapper.openBatchQueue();

            // put the preferences to update in the OData batch queue
            aUserChangedProperties = oUser.getChangedProperties() || [];
            iODataRequestsRunning = aUserChangedProperties.length;
            aUserChangedProperties.forEach(function (oUserChangedProperty) {
                sRelativeUrl = "UserProfileProperties(" + [
                    "id='" + oUserChangedProperty.name + "'",
                    "shellType='FLP')"
                ].join(",");

                // the preference to update
                oDataObj = {
                    id: oUserChangedProperty.name,
                    shellType: "FLP",
                    value: oUserChangedProperty.newValue
                };
                //check for the datatype of the value & process oDataObj
                that._updateODataObjectBasedOnDatatype(oUserChangedProperty.newValue, oDataObj);
                oDataWrapper.put(sRelativeUrl, oDataObj, fnSuccess, fnFailure);
            });

            // submit
            oDataWrapper.submitBatchQueue(function () {
                // request accepted but does not mean that the single requests
                // have been successfully resolved - see above
                if (iODataRequestsRunning === 0) {
                    oDeferred.resolve();
                }
            }, fnFailure);

            return oDeferred.promise();
        };

    };
}());

}; // end of sap/ushell_abap/adapters/abap/UserInfoAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.adapters.hana.ContainerAdapter') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's container adapter for the HANA platform.
 *
 * @version 1.52.7
 */
/**
 * @namespace Default namespace for Unified Shell adapters for the HANA platform. They can usually
 * be placed directly into this namespace, e.g.
 * <code>sap.ushell_abap.adapters.hana.ContainerAdapter</code>.
 *
 * @name sap.ushell_abap.adapters.hana
 * @see sap.ushell_abap.adapters.hana.ContainerAdapter
 * @since 1.11.0
 * @private
 */
(function () {
    "use strict";
    /*global document, jQuery, sap */
    jQuery.sap.declare("sap.ushell_abap.adapters.hana.ContainerAdapter");

    
    jQuery.sap.require('sap.ushell.System'); // unlisted dependency retained

    jQuery.sap.require('sap.ushell.User'); // unlisted dependency retained


    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.services.initializeContainer("hana")</code>.
     * Constructs a new instance of the container adapter for the HANA platform.
     *
     * @param {sap.ushell.System} oSystem
     *     the logon system (alias, platform, base URL)
     *
     * @class The Unified Shell's container adapter which does the bootstrap for the HANA platform.
     *
     * @constructor
     * @see sap.ushell.services.initializeContainer
     * @since 1.11.0
     * @private
     */
    sap.ushell_abap.adapters.hana.ContainerAdapter = function (oSystem) {

        var oUser;

        /**
         * Returns the logon system.
         *
         * @returns {sap.ushell.System}
         *     object providing information about the system where the container is logged in
         *
         * @since 1.11.0
         */
        this.getSystem = function () {
            return oSystem;
        };

        /**
         * Returns the logged-in user.
         *
         * @returns {sap.ushell.User}
         *      object providing information about the logged-in user
         *
         * @since 1.11.0
         */
        this.getUser = function () {
            return oUser;
        };

        /**
         * Does the bootstrap for the HANA platform (and loads the container's configuration).
         *
         * @returns {jQuery.Promise}
         *     a promise that is resolved once the bootstrap is done
         *
         * @since 1.11.0
         */
//        this.load = function () {
//        };

        /**
         * Logs out the current user from this adapter's systems backend system.
         *
         * @returns {jQuery.Deferred}
         *      a <code>jQuery.Deferred</code> object's promise to be resolved when logout is
         *      finished, even when it failed
         * @since 1.11.0
         */
        this.logout = function () {
            var oDeferred = new jQuery.Deferred();

            jQuery.ajax({
                type: "HEAD",
                url: oSystem.adjustUrl("/sap/hana/xs/formLogin/token.xsjs"),
                headers: {
                    "X-CSRF-Token": "Fetch"
                },
                success: function (oData, oStatus, oXhr) {
                    jQuery.ajax({
                        type: "POST",
                        url:  oSystem.adjustUrl("/sap/hana/xs/formLogin/logout.xscfunc"),
                        headers: {
                            "X-CSRF-Token": oXhr.getResponseHeader("X-CSRF-Token")
                        },
                        success: function () {
                            jQuery.sap.log.info("HANA system logged out: " + oSystem.getAlias(),
                                null, "sap.ushell_abap.adapters.hana.ContainerAdapter");
                            oDeferred.resolve();
                        },
                        error: function () {
                            jQuery.sap.log.error("Logging out HANA system failed: "
                                + oSystem.getAlias(), null,
                                "sap.ushell_abap.adapters.hana.ContainerAdapter");
                            oDeferred.resolve();
                        }
                    });
                },
                error: function () {
                    jQuery.sap.log.error("Fetching X-CSRF-Token failed: " + oSystem.getAlias(),
                        null, "sap.ushell_abap.adapters.hana.ContainerAdapter");
                    oDeferred.resolve();
                }
            });
            return oDeferred.promise();
        };
    };
}());

}; // end of sap/ushell_abap/adapters/hana/ContainerAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell_abap.library') ) {
/*!
 * Copyright (c) 2009-2017 SAP SE, All Rights Reserved
 */

jQuery.sap.declare('sap.ushell_abap.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ushell_abap/library",[],
	function() {
	"use strict";

	/**
	 * SAP library: sap.ushell_abap
	 * provides base functions for the Fiori Launchpad running under SAP NetWeaver
	 *
	 * @namespace
	 * @name sap.ushell_abap
	 * @author SAP SE
	 * @version 1.52.7
	 * @private
	 * @sap-restricted
	 *
	 */
	sap.ui.getCore().initLibrary({
		name:"sap.ushell_abap",
		version:"1.52.7",
		dependencies:["sap.ui.core","sap.m"],
		noLibraryCSS: true,
		extensions: {
			"sap.ui.support": {
				diagnosticPlugins: [
					"sap/ushell_abap/support/plugins/app-infra/AppInfraOnSapNetWeaverSupportPlugin"
				]
			}
		}
	});

	return sap.ushell_abap;

}, /* bExport= */ true);
}; // end of sap/ushell_abap/library.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.PageBuildingService') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview A facade to the page building service, providing all needed
 * CRUD operations based on OData4SAP for the entities page, catalog, CHIP,
 * and CHIP instance.
 */

(function () {
  "use strict";
  /*global jQuery, OData, sap */
  jQuery.sap.declare("sap.ui2.srvc.PageBuildingService");

   // call, Error
  
  

  // Note: Only the section between @begin and @end is included in pbs-template.js.
  // In pbs-template fnRequire is differently initialized (in case UI5 is not available)!
  // Thus this variable is used in the coding below and not directly jQuery.sap.require.
  // avoid fnRequire = jQuery.sap.require as require cannot be spied on afterwards
  var fnRequire = function () {
    jQuery.sap.require.apply(this, arguments);
  };

  sap.ui2.srvc.testPublishAt = sap.ui2.srvc.testPublishAt || function () {
    // intentionally left blank
  };

/// @begin
  // "public class" ************************************************************

  /**
   * Constructs a facade to the page building service with the given
   * base URI, providing all needed CRUD operations based on OData for the
   * entities page, catalog, bag, CHIP, and CHIP instance.
   * <p>
   * <strong>Ensure that datajs library is available at runtime</strong>. If
   * SAPUI5 is available this script automatically imports their datajs implementation.
   * <p>
   * This facade automatically takes care of Gateway's CSRF protection mechanism
   * via a token. Please perform a read request first, because read requests acquire this token.
   * Otherwise write requests will have fail on first attempt, but automatically acquire this token
   * via reading the service document before repeating the write request. This is a slight
   * performance penalty.
   * <p>
   * The objects returned by this facade are <strong>de-serialized JSON representations</strong>
   * of the entities in question, as converted from the OData's response by datajs.
   * They may be decorated with new properties as long as the property names start with a dollar
   * symbol ("$"). This is needed to tell original properties and decorations apart for the purpose
   * of update operations.
   *
   * @param {string|sap.ui2.srvc.ODataWrapper} vODataBase
   *   either the base URI of the page building service or (since 1.19.0) a corresponding
   *   <code>sap.ui2.srvc.ODataWrapper</code>
   * @param {function (string, [object])} [fnDefaultFailure]
   *   error handler taking an error message and, since version 1.28.6, an
   *   optional object containing the complete error information as delivered
   *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
   *   for more details.
   * @param {boolean} [bIsPersonalization=false]
   *   defines the return value of {@link #isPersonalization}; nothing else (since 1.16.1)
   *
   * @class
   * @augments sap.ui2.srvc.ODataService
   * @since 1.2.0
   */
  sap.ui2.srvc.PageBuildingService = function (vODataBase, fnDefaultFailure, bIsPersonalization) {
    var oWrapper,
      that = this;

    // BEWARE: constructor code below!

    // "private" methods -------------------------------------------------------
    /**
    * Encodes a sting to be used in an OData $filter parameter.
    *
    * @param {string} sString
    *   string to be encoded.
    * @returns {string}
    *   the encoded string
    * @public
    * @since 1.28.0
    */
    function encodeODataFilterValue(sString) {
      return sString.replace(/\'/g, "''").replace(/&/g, "%26");
    }

    /**
     * Returns the URL for accessing a bag.
     *
     * @param {string|object} vParent
     *   ID of the page or parent object (either page or page CHIP instance; must be the result
     *   of a previous create or read operation) of the bag to be read
     * @param {string} sBagId
     *  the bag ID
     * @param {boolean} bExpand
     *  tells if the properties of the bag should be expanded in the OData call
     * @returns {string}
     *  relative(!) URL
     *
     * @private
     */
    function getBagUrl(vParent, sBagId, bExpand) {
      var sPageId;

      if (typeof vParent === "string") {
        // for backwards compatibility, allow passing page ID
        sPageId = vParent;
      } else {
        if (vParent.instanceId) {
          // parent is a CHIP instance
          return "ChipInstanceBags(pageId='" + encodeURIComponent(vParent.pageId)
            + "',instanceId='" + encodeURIComponent(vParent.instanceId)
            + "',id='" + encodeURIComponent(sBagId) + "')"
            + (bExpand ? "?$expand=ChipInstanceProperties" : "");
        }
        // parent is a page
        sPageId = vParent.id;
      }
      return "Bags(pageId='" + encodeURIComponent(sPageId)
        + "',id='" + encodeURIComponent(sBagId) + "')"
        + (bExpand ? "?$expand=Properties" : "");
    }

    /**
     * Evaluates status code from OData batch response entry and returns the corresponding OData
     * entity or the status message.
     * @param oEntry The batch response entry which is an element of
     *     (For change) oData.__batchResponses[0]._changeResponses array
     *     (For read) oData.__batchResponses array (without the element for change responses)
     * @returns OData entity (object or undefined) or status message as string
     *
     * @private
     */
    sap.ui2.srvc.testPublishAt(that);
    function extractBatchResponseEntry(oEntry) {
      if (oEntry.statusCode === "201") {
        // POST was ok, return the new entity
        return oEntry.data;
      }
      if (oEntry.statusCode === "204") {
        // PUT or DELETE was ok, return nothing
        return undefined;
      }
      // request failed, return error message or empty string
      return oEntry.message || "";
    }

    /**
     * Sends a batch request to the OData server. The batch request contains a
     * sequence of change requests (PUT, POST) contained in a single changeset.
     *
     * @param {array} [aChangeRequests=[]]
     *   array of objects representing the change requests as specified by datajs. See
     *   <a href="http://datajs.codeplex.com/wikipage?title=OData%20Code%20Snippets&referringTitle=Documentation">
     *   datajs batch coding sample</a> and
     *   <a href="http://datajs.codeplex.com/wikipage?title=OData%20Payload%20Formats#Batch Requests">
     *   datajs payload format for batch</a>
     * @param {array} [aGetRequests]
     *   array of objects representing the read requests as specified by datajs
     * @param {function(array,array)} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking
     *   an array of response objects with responses for each change request
     *   and an array with responses for each read request. For a successful
     *   POST, the response object is the new entity, for a successful PUT it
     *   is undefined and for a successful GET it is the entity returned. For a
     *   failed request it is the corresponding error message.
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @private
     * @deprecated Used only by {@link sap.ui2.srvc.PageBuildingService#updateBagProperties}.
     */
    sap.ui2.srvc.testPublishAt(that);
    function batch(aChangeRequests, aGetRequests, fnSuccess, fnFailure) {
      /*jslint nomen:true */
      var aRequests = [];

      function extract(aResponses) {
        var i, aResult = [];

        for (i = 0; i < aResponses.length; i += 1) {
          aResult[i] = extractBatchResponseEntry(aResponses[i]);
        }
        return aResult;
      }

      fnSuccess = fnSuccess || function () {/* null object pattern */};
      fnFailure = fnFailure || that.getDefaultErrorHandler();
      oWrapper.check(fnSuccess, fnFailure);

      aChangeRequests = aChangeRequests || [];
      aGetRequests = aGetRequests || [];
      if (aChangeRequests.length > 0) {
        aRequests.push({ __changeRequests: aChangeRequests});
      }
      aRequests = aRequests.concat(aGetRequests);
      if (aRequests.length === 0) {
        sap.ui2.srvc.call(fnSuccess.bind(null, [], []), fnFailure, true);
        return;
      }
      oWrapper.batch({ __batchRequests: aRequests },
        function (oData) {
          var aBatchResponses = oData.__batchResponses,
            aChangeResponses = aBatchResponses[0].__changeResponses;

          if (aBatchResponses[0].response && aBatchResponses[0].message) { // error
            oWrapper.onError("POST", oWrapper.getBaseUrl() + "$batch", fnFailure, undefined,
              oData.__batchResponses[0]);
            return;
          }
          if ((aChangeResponses && (aChangeResponses.length !== aChangeRequests.length))
              || (aBatchResponses.length !== aRequests.length)) {

            fnFailure("Number of requests differs from number of responses in $batch");
            return;
          }
          if (aChangeResponses) { // change requests and (maybe) additional read requests
            sap.ui2.srvc.call(
              fnSuccess.bind(null, extract(aChangeResponses), extract(aBatchResponses.slice(1))),
              fnFailure,
              false
            );
          } else { //read requests only
            sap.ui2.srvc.call(
              fnSuccess.bind(null, [], extract(aBatchResponses)),
              fnFailure,
              false
            );
          }
        },
        fnFailure);
    }

    // "public" methods --------------------------------------------------------

    /**
     * Tells whether this facade is reading from and writing to the "PERSONALIZATION" scope.
     *
     * @returns {boolean}
     *   whether this facade is reading from and writing to the "PERSONALIZATION" scope
     * @since 1.16.1
     */
    this.isPersonalization = function () {
      return !!bIsPersonalization;
    };

    /**
     * Reads the metadata document of the page building service.
     *
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking
     *   the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @param {boolean} bNoCache
     *   (since 1.5.0) whether to avoid caching
     * @since 1.2.0
     *
     * @deprecated Since 1.17.0 it is no longer necessary to fetch a CSRF token first; this is
     *   done automatically.
     */
    this.readMetadata = function (fnSuccess, fnFailure, bNoCache) {
      var sRequestUrl = oWrapper.getBaseUrl() + "$metadata" + (bNoCache ? "?" + Date.now() : "");

      fnFailure = fnFailure || this.getDefaultErrorHandler();
      oWrapper.check(fnSuccess, fnFailure);

      OData.read(sRequestUrl, function (oData) {
        // Note: drop excess parameters; try/catch
        sap.ui2.srvc.call(fnSuccess.bind(null, oData), fnFailure);
      }, oWrapper.onError.bind(oWrapper, "GET", sRequestUrl, fnFailure, /*oDeferred*/undefined),
        OData.metadataHandler);
    };

    /**
     * Deletes the bag with given IDs.
     * It is not an error if the bag does not exist.
     *
     * @param {string|object} vParent
     *   ID of the page or parent object (either page or page CHIP instance; must be the result
     *   of a previous create or read operation) of the bag to be deleted
     * @param {string} sBagId
     *   ID of the bag to be deleted
     * @param {function ()} [fnSuccess]
     *   a callback function that is executed if delete succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.3.0
     */
    this.deleteBag = function (vParent, sBagId, fnSuccess, fnFailure) {
      if (!vParent) {
        throw new sap.ui2.srvc.Error("Missing parent ID or object",
          "sap.ui2.srvc.PageBuildingService");
      }
      if (!sBagId) {
        throw new sap.ui2.srvc.Error("Missing bag ID", "sap.ui2.srvc.PageBuildingService");
      }

      oWrapper.del(getBagUrl(vParent, sBagId, false), fnSuccess, fnFailure);
    };

    /**
     * Reads the bag with the given IDs.
     *
     * @param {string|object} vParent
     *   ID of the page or parent object (either page or page CHIP instance; must be the result
     *   of a previous create or read operation) of the bag to be read
     * @param {string} sBagId
     *   ID of the bag to be read. If the bag does not exist the error handler will be called.
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.3.0
     */
    this.readBag = function (vParent, sBagId, fnSuccess, fnFailure) {
      if (!vParent) {
        throw new sap.ui2.srvc.Error("Missing parent ID or object",
          "sap.ui2.srvc.PageBuildingService");
      }
      if (!sBagId) {
        throw new sap.ui2.srvc.Error("Missing bag ID", "sap.ui2.srvc.PageBuildingService");
      }
      oWrapper.read(getBagUrl(vParent, sBagId, true), fnSuccess, fnFailure);
    };

    /**
     * Reads the "allCatalogs" collection (ordered by ID) that belongs to the page with the given
     * ID.
     *
     * @param {string} sPageId
     *   ID of the page
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @param {string} [sFilter]
     *   filter value as defined by OData specification e.g. "type eq 'H'" for HANA catalogs.
     *   Filter has been introduced with version 1.16.2.
     * @param {string} sSorting
     *   name of the field to be sorted on via $orderby as defined by OData specification.
     *   If not defined the dafault sorting would be on the field id (since 1.44)
     * @since 1.7.0
     */
    this.readAllCatalogs = function (sPageId, fnSuccess, fnFailure, sFilter, sSorting) {
      var sSortField = "id";
      if(sSorting && typeof sSorting === "string") {
        sSortField = sSorting;
      }
      var sUrl = "Pages('" + encodeURIComponent(sPageId)
          + "')/allCatalogs?$expand=Chips/ChipBags/ChipProperties&"
          +  "$orderby=" + sSortField;
      if (sFilter && typeof sFilter === "string") {
        sUrl = sUrl + "&$filter=" + encodeURIComponent(sFilter);
      }
      if (this.readAllCatalogs.cacheBusterTokens && this.readAllCatalogs.cacheBusterTokens.get(sPageId)) {
        // There is a cache buster token maintained (!== "") for this ID, so add it to the URL
        sUrl += "&sap-cache-id=" + this.readAllCatalogs.cacheBusterTokens.get(sPageId);
      }
      oWrapper.read(sUrl, fnSuccess, fnFailure);
    };

    /**
     * Reads all catalogs ordered by ID.
     *
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @param {string} [sFilter]
     *   filter value as defined by OData specification e.g. "type eq 'H'" for HANA catalogs.
     *   Filter has been introduced with version 1.26.0
     * @since 1.2.0
     */
    this.readCatalogs = function (fnSuccess, fnFailure, sFilter) {
      var sUrl = "Catalogs?$orderby=id";
      if (sFilter && typeof sFilter === "string") {
        sUrl = sUrl + "&$filter=" + encodeURIComponent(sFilter);
      }
      oWrapper.read(sUrl, fnSuccess, fnFailure);
    };

    /**
     * Reads all catalogs for current user filtered by given expression.
     * @param {string} sFilter
     *   filter value as defined by OData specification e.g. "type eq 'H'" for HANA catalogs
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @private
     */
    this.readAllCatalogsForUser = function (sFilter, fnSuccess, fnFailure) {
      var sUrlParameter = sFilter ? "?$filter=" + encodeURIComponent(sFilter) : "";
      // Page ID for the allCatalogs relation is not relevant
      oWrapper.read("Pages('unused')/allCatalogs" + sUrlParameter, fnSuccess, fnFailure);
    };

    /**
     * Detect if a CHIP is referenced by other CHIPs, also within other catalogs.
     * The CHIP which is checked is specified by its ID (not the ID of its CHIP instance
     * representation on the catalog page).
     * The success handler receives an array of all catalog IDs which contain at least
     * one CHIP which references the CHIP with sReferenceChipId.
     * If the request fails, fnFailure is invoked.
     *
     * @param {string} sReferencedChipId
     *   ID of the CHIP for which references are searched
     * @param {function (array)} fnSuccess
     *   A callback function that is executed if the request succeeds. It is taking an array of
     *   catalog IDs which contain the referenced CHIP ID.
     *   The list may be in arbitrary order, notably not the order of the initial array
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.28.0
     */
    this.getReferencingCatalogIds = function (sReferencedChipId, fnSuccess, fnFailure) {
      // support SP11 interface: sReferencedChipId, aCatalogIds, fnSuccess, fnFailure
      if (typeof fnSuccess !== "function") {
        fnSuccess = fnFailure;
        // note: using arguments[3] leads to Lint warnings but a named arg will be visible in JSDoc
        fnFailure = arguments[3];
      }

      function success(oResponse) {
        var aRefCatalogIds = [],
          aReferenceChips = oResponse.results || [];

        aReferenceChips.forEach(function (oChip) {
          if (oChip.referenceChipId === sReferencedChipId) { //remove when CSN 1570015473 is solved
            // no redundant catalog Ids in aRefCatalogIds
            if (aRefCatalogIds.indexOf(oChip.catalogId) === -1) {
              aRefCatalogIds.push(oChip.catalogId);
            }
          }
        });

        fnSuccess(aRefCatalogIds);
      }

      // parameter checks
      if (typeof sReferencedChipId !== "string") {
        throw new sap.ui2.srvc.Error("sReferencedChipId must be a string",
          "sap.ui2.srvc.test.PageBuildingService");
      }
      if (typeof fnSuccess !== "function") {
        throw new sap.ui2.srvc.Error("fnSuccess is mandatory",
          "sap.ui2.srvc.test.PageBuildingService");
      }

      oWrapper.read("Chips?$filter=" + encodeURIComponent("referenceChipId eq '" +
        encodeODataFilterValue(sReferencedChipId) + "'"),
        success,
        function (sMsg /*, oErrorInformation */) {
          /* eslint-disable no-new */
          new sap.ui2.srvc.Error(sMsg, "sap.ui2.srvc.PageBuildingService");
          /* eslint-enable no-new */
          fnFailure.apply(null, arguments);
        });
    };

    /**
     * Creates a new catalog based on a catalog page, using the given domain ID and title. Note
     * that the page building service will default to a certain type (e.g. "CATALOG_PAGE" in case
     * of ABAP) and will create an ID from that type and the given domain-specific ID (e.g. by
     * adding the prefix "X-SAP-UI2-CATALOGPAGE:" in case of ABAP). Access the object passed to the
     * success callback in order to learn the resulting ID! Note that the catalog page has the
     * same ID as the corresponding catalog and can be retrieved by {@link #readPage}.
     *
     * @param {string} sDomainId
     *   the catalog's domain-specific ID
     * @param {string} [sTitle]
     *   the catalog's title, also used for the catalog page
     * @param {function (object)} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking the processed data
     *   (as a catalog, not as a page)
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link #getDefaultErrorHandler}
     *
     * @since 1.19.1
     */
    this.createPageBasedCatalog = function (sDomainId, sTitle, fnSuccess, fnFailure) {
      if (!sDomainId) {
        throw new sap.ui2.srvc.Error("Missing domain ID", "sap.ui2.srvc.PageBuildingService");
      }
      // TODO: test if type: "CATALOG_PAGE" is the default so we dont need to set it here.
      oWrapper.create("Catalogs", {domainId: sDomainId, title: sTitle, type: "CATALOG_PAGE"},
          fnSuccess, fnFailure);
    };

    /**
     * Creates a new catalog based on the given raw data. Typically, this will be used to create
     * "remote catalogs", i.e. pointers to existing catalogs on a remote server.
     *
     * @param {object} oCatalog
     *   the raw catalog representation (<code>__metadata</code> not needed!), e.g.
     *   <pre>
     *   {
     *     baseUrl: "/sap/hba/apps/kpi/s/odata/hana_chip_catalog.xsodata/",
     *     domainId: "Z_REMOTE_HANA_CATALOG",
     *     remoteId: "HANA_CATALOG",
     *     systemAlias: "sanssouci",
     *     title: "Remote HANA catalog",
     *     type: "REMOTE"
     *   }
     *   </pre>
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *
     * @since 1.19.1
     */
    this.createCatalog = function (oCatalog, fnSuccess, fnFailure) {
      oWrapper.create("Catalogs", oCatalog, fnSuccess, fnFailure);
    };

    /**
     * Deletes the catalog with the given representation which must be the result of a previous
     * create or read operation. If the catalog is based on a catalog page
     * ({@link #createPageBasedCatalog}), that page is also deleted including all of its CHIP
     * instances and bags.
     *
     * @param {object} oCatalog
     *   the de-serialized JSON representing the catalog to be deleted
     * @param {function ()} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link #getDefaultErrorHandler}
     *
     * @since 1.19.1
     */
    this.deleteCatalog = function (oCatalog, fnSuccess, fnFailure) {
      oWrapper.del(oCatalog, fnSuccess, fnFailure);
    };

    /**
     * Creates a new catalog in the backend as a clone of the catalog with given ID, using the
     * given new domain ID. Note that the page building service will create an ID from the
     * catalog's type and the given domain-specific ID (e.g. by adding the prefix
     * "X-SAP-UI2-CATALOGPAGE:" for type "CATALOG_PAGE" in case of ABAP). Access the object passed
     * to the success callback in order to learn the resulting ID!
     *
     * @param {string} sCatalogId
     *   the old catalog's ID as returned from the page building service
     * @param {string} sNewDomainId
     *   the new catalog's domain-specific ID which must not contain a colon
     * @param {string} [sNewTitle]
     *   the new catalog's title; if the parameter is <code>undefined</code>,
     *   the old catalog's title will be used
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     *   (BEWARE: the Chips relation is not expanded, but still deferred!)
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link #getDefaultErrorHandler}
     * @since 1.19.1
     */
    this.cloneCatalog = function (sCatalogId, sNewDomainId, sNewTitle, fnSuccess, fnFailure) {
      if (!sCatalogId) {
        throw new sap.ui2.srvc.Error("Missing source catalog ID",
          "sap.ui2.srvc.PageBuildingService");
      }
      if (!sNewDomainId) {
        throw new sap.ui2.srvc.Error("Missing new domain ID", "sap.ui2.srvc.PageBuildingService");
      }
      if (sNewDomainId.indexOf(":") >= 0) {
        throw new sap.ui2.srvc.Error("Illegal domain ID: " + sNewDomainId,
          "sap.ui2.srvc.PageBuildingService");
      }

      oWrapper.create("CloneCatalog?sourceId='" + encodeURIComponent(sCatalogId)
        + "'&targetId='" + encodeURIComponent(sNewDomainId)
        + (sNewTitle !== undefined  ? "'&title='" + encodeURIComponent(sNewTitle) + "'" : "'"),
        {}, //payload
        fnSuccess,
        fnFailure);
    };

    /**
     * Adds a reference CHIP instance to the page with ID <code>sTargetPageId</code>. The new
     * reference refers to the CHIP instance with the given ID located on the source page with the
     * given ID.
     *
     * @param {string} sSourcePageId
     *   ID of the source page the CHIP instance with ID <code>sSourceChipInstanceId</code> is
     *   located on
     * @param {string} sSourceChipInstanceId
     *   ID of the CHIP instance referenced to
     * @param {string} sTargetPageId
     *   ID of the page where the reference CHIP Instance shall be added to
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   Default: see {@link #getDefaultErrorHandler}
     *
     * @since 1.21.1
     */
    this.clonePageChipInstance = function (sSourcePageId, sSourceChipInstanceId,
      sTargetPageId, fnSuccess, fnFailure) {

      if (!sSourcePageId) {
        throw new sap.ui2.srvc.Error("Missing source page ID",
          "sap.ui2.srvc.PageBuildingService");
      }
      if (!sSourceChipInstanceId) {
        throw new sap.ui2.srvc.Error("Missing source CHIP instance ID",
          "sap.ui2.srvc.PageBuildingService");
      }
      if (!sTargetPageId) {
        throw new sap.ui2.srvc.Error("Missing target page ID",
          "sap.ui2.srvc.PageBuildingService");
      }
      oWrapper.create("ClonePageChipInstance?sourcePageId='" + encodeURIComponent(sSourcePageId)
        + "'&sourceChipInstanceId='" + encodeURIComponent(sSourceChipInstanceId)
        + "'&targetPageId='" + encodeURIComponent(sTargetPageId) + "'",
        {}, //payload
        function (oRawChipInstance) {
          // ClonePageChipInstance cannot expand the result
          // Note: the CHIP instance cannot be remote and the CHIP has already been loaded
          oWrapper.read("PageChipInstances(pageId='" + encodeURIComponent(oRawChipInstance.pageId)
            + "',instanceId='" + encodeURIComponent(oRawChipInstance.instanceId) + "')"
            + "?$expand=ChipInstanceBags/ChipInstanceProperties",
            fnSuccess,
            fnFailure);
        },
        fnFailure);
    };

    /**
     * Reads the catalog with the given ID including all contained CHIPs (unless specified
     * otherwise). Note that the corresponding catalog page (if applicable) has the same ID and can
     * be retrieved by {@link #readPage}.
     *
     * @param {string} sCatalogId
     *   ID of the catalog to be loaded
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @param {boolean} [bNoChips=false]
     *   whether to avoid including all contained CHIPs
     * @param {boolean} [bNoChipBags=false]
     *   whether to avoid including CHIP bags and properties
     * @since 1.2.0
     */
    this.readCatalog = function (sCatalogId, fnSuccess, fnFailure, bNoChips, bNoChipBags) {
      var sUrl;

      if (!sCatalogId) {
        throw new sap.ui2.srvc.Error("Missing catalog ID", "sap.ui2.srvc.PageBuildingService");
      }

      sUrl = "Catalogs('" + encodeURIComponent(sCatalogId) + "')";
      if (!bNoChips) {
        sUrl += "?$expand=Chips";
        if (!bNoChipBags) {
          sUrl += "/ChipBags/ChipProperties";
        }
      }
      oWrapper.read(sUrl, fnSuccess, fnFailure);
    };

    /**
     * Updates the catalog with the given representation which must be the result of a previous
     * create or read operation. Note that you cannot update keys, in this case the "id" property.
     * Note that for a catalog based on a catalog page ({@link #createPageBasedCatalog}), the
     * "title" property is shared between the catalog and its corresponding catalog page!
     *
     * @param {object} oCatalog
     *   the de-serialized JSON representing the catalog to be updated
     * @param {function ()} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *
     * @since 1.19.1
     */
    this.updateCatalog = function (oCatalog, fnSuccess, fnFailure) {
      oWrapper.update(oCatalog, fnSuccess, fnFailure);
    };

    /**
     * Reads the given CHIPs from the catalog with the given ID.
     *
     * @param {string} sCatalogId
     *   ID of the catalog to be loaded
     * @param {string[]} [aChipIds]
     *   the IDs of the CHIPs to be loaded. If <code>undefined</code>, all CHIPs will be loaded.
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @throws Error if an empty array is given for filtering
     * @since 1.16.4
     */
    this.readCatalogChips = function (sCatalogId, aChipIds, fnSuccess, fnFailure) {
      var sUrl,
        sFilter = "",
        sPrefix = "?$filter=";

      if (!sCatalogId) {
        throw new sap.ui2.srvc.Error("Missing catalog ID", "sap.ui2.srvc.PageBuildingService");
      }

      // TODO: read also CHIP bags
      sUrl = "Catalogs('" + encodeURIComponent(sCatalogId) + "')/Chips";
      if (aChipIds) {
        if (!aChipIds.length) {
          throw new sap.ui2.srvc.Error("No CHIP IDs given", "sap.ui2.srvc.PageBuildingService");
        }
        aChipIds.forEach(function (sId) {
          sFilter = sFilter + sPrefix + "id%20eq%20'" + encodeURIComponent(sId) + "'";
          sPrefix = "%20or%20";
        });
        // ensure that the resulting URL does not exceed length limits
        if (oWrapper.getBaseUrl().length + sUrl.length + sFilter.length > 2000) {
          sFilter = "";
        }
      }
      oWrapper.read(sUrl + sFilter, fnSuccess, fnFailure);
    };

    /**
     * Creates a new page with the given properties.
     *
     * @param {string} sId
     *   ID of the new page
     * @param {string} sCatalogId
     *   ID of the catalog for the new page
     * @param {string} sLayout
     *   value of the layout property for the new page
     * @param {string} sTitle
     *   title of the new page
     * @param {function (object)} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.2.0
     */
    this.createPage = function (sId, sCatalogId, sLayout, sTitle, fnSuccess, fnFailure) {
      if (!sId) {
        throw new sap.ui2.srvc.Error("Missing page ID", "sap.ui2.srvc.PageBuildingService");
      }

      oWrapper.create("Pages", {
        id: sId,
        catalogId: sCatalogId,
        layout: sLayout,
        title: sTitle
      }, fnSuccess, fnFailure);
    };

    /**
     * Reads all pages ordered by ID including all contained catalogs (unless specified otherwise).
     *
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @param {boolean} [bNoCatalogs=false]
     *   whether to avoid including all contained catalogs
     * @since 1.2.0
     */
    this.readPages = function (fnSuccess, fnFailure, bNoCatalogs) {
      var sUrl = "Pages?";
      if (!bNoCatalogs) {
        sUrl += "$expand=Catalog&";
      }
      oWrapper.read(sUrl + "$orderby=id", fnSuccess, fnFailure);
    };

    /**
     * Reads the page with the given ID including all contained <br>
     * - CHIP instances and their CHIPs, <br>
     * - bags and properties (page, CHIP and CHIP instance bags), <br>
     * - RemoteCatalog data.
     * <p>
     * Via the parameter <code>sCustomExpand</code> you can specify a different $expand statement.
     *
     * @param {string} sId
     *   ID of the page to be read
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @param {string} [sCustomExpand="Bags/Properties,PageChipInstances/Chip/ChipBags/ChipProperties,PageChipInstances/RemoteCatalog,PageChipInstances/ChipInstanceBags/ChipInstanceProperties"]
     *   (since 1.30.0) can be used to overwrite the default $expand value. If "" is used, the
     *   entire $expand parameter will be skipped
     * @since 1.2.0
     */
    this.readPage = function (sId, fnSuccess, fnFailure, sCustomExpand) {
      var sUrl = "Pages('" + encodeURIComponent(sId) + "')";
      if (!sId) {
        throw new sap.ui2.srvc.Error("Missing page ID", "sap.ui2.srvc.PageBuildingService");
      }

      if (sCustomExpand === undefined) {
        // use default expand
        sUrl += "?$expand=Bags/Properties,PageChipInstances/Chip/ChipBags/ChipProperties,"
          + "PageChipInstances/RemoteCatalog,"
          + "PageChipInstances/ChipInstanceBags/ChipInstanceProperties";
      } else if (sCustomExpand !== "") {
        sUrl += "?$expand=" + sCustomExpand;
      }

      oWrapper.read(sUrl, fnSuccess, fnFailure);
    };

    /**
     * Reads the page set with the given ID including all contained pages and their CHIP instances.
     * Property bags are not loaded.
     * Note: Cache buster tokens (sap-cache-id), can be set via
     * <code>oPbs.readPageSet.cacheBusterTokens.put("PageSetId", "cbtoken")</code>
     *
     * @param {string} sId
     *   ID of the page set to be read
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.11.0
     * @private
     */
    this.readPageSet = function (sId, fnSuccess, fnFailure) {
      var sUrl;
      var that = this;
      var appendedParametersKeys;

      if (!sId) {
        throw new sap.ui2.srvc.Error("Missing page set ID", "sap.ui2.srvc.PageBuildingService");
      }

      sUrl = "PageSets('" + encodeURIComponent(sId) + "')?$expand="
        + "Pages/PageChipInstances/Chip/ChipBags/ChipProperties,"
        + "Pages/PageChipInstances/RemoteCatalog,"
        + "Pages/PageChipInstances/ChipInstanceBags/ChipInstanceProperties,"
        + "AssignedPages,"
        + "DefaultPage";

      if (this.readPageSet.cacheBusterTokens && this.readPageSet.cacheBusterTokens.get(sId)) {
        // There is a cache buster token maintained (!== "") for this ID, so add it to the URL
        // Note: Same parameter order as in ABAP bootstrap must be used as the response is cached
        // in OData.read.$cache under exactly that URL string
        sUrl += "&sap-cache-id=" + this.readPageSet.cacheBusterTokens.get(sId);
      }
      if (this.readPageSet.appendedParameters) {
        appendedParametersKeys = Object.keys(this.readPageSet.appendedParameters);
        if (appendedParametersKeys.length > 0 ) {
          appendedParametersKeys.sort();
          appendedParametersKeys.forEach(function(key) {
            sUrl += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(that.readPageSet.appendedParameters[key]);
          });
        }
      }
      oWrapper.read(sUrl, fnSuccess, fnFailure, /*bCache*/true);
    };

    /**
     * Updates the page set with the given representation which must be the result of
     * a previous read operation.
     *
     * @param {object} oPageSet
     *   the de-serialized JSON representing the page set to be updated
     * @param {function ()} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.11.0
     * @private
     */
    this.updatePageSet = function (oPageSet, fnSuccess, fnFailure) {
      oWrapper.update(oPageSet, fnSuccess, fnFailure);
    };

    /**
     * Creates a new page with given title in given page set.
     *
     * @param {string} sPageSetId
     *   ID of the page set
     * @param {string} sPageTitle
     *   title (might be an empty) of the new page
     * @param {string} sCatalogId
     *   ID of the default catalog of the new page
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @private
     */
    this.createPageInPageSet = function (sPageSetId, sPageTitle, sCatalogId, fnSuccess, fnFailure) {
      // TODO refactor parameters use one object instead of multiple strings
      if (!sPageSetId) {
        throw new sap.ui2.srvc.Error("Missing page set ID", "sap.ui2.srvc.PageBuildingService");
      }
      oWrapper.create("PageSets('" + encodeURIComponent(sPageSetId) + "')/Pages", {
        catalogId: sCatalogId || "",
        layout: "",
        title: sPageTitle || ""
      }, fnSuccess, fnFailure);
    };


    /**
     * Updates the page with the given representation which must be the result of
     * a previous create or read operation.
     *
     * @param {object} oPage
     *   the de-serialized JSON representing the page to be updated
     * @param {function ()} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.2.0
     */
    this.updatePage = function (oPage, fnSuccess, fnFailure) {
      oWrapper.update(oPage, fnSuccess, fnFailure);
    };

    /**
     * Deletes the page with the given ID.
     *
     * @param {string} sId
     *   ID of page to be deleted
     * @param {function ()} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.2.0
     */
    this.deletePage = function (sId, fnSuccess, fnFailure) {
      if (!sId) {
        throw new sap.ui2.srvc.Error("Missing page ID", "sap.ui2.srvc.PageBuildingService");
      }

      oWrapper.del("Pages('" + encodeURIComponent(sId) + "')",
        fnSuccess, fnFailure);
    };

    /**
     * Creates a CHIP instance with the given properties inside the page with given ID.
     *
     * @param {string} sPageId
     *   ID of page containing the new CHIP instance
     * @param {string} [sInstanceId]
     *   ID of new CHIP instance (optional, a UUID will be created as a default)
     * @param {string} sChipId
     *   ID of CHIP to be used
     * @param {string} sTitle
     *   title of CHIP instance
     * @param {string} sConfiguration
     *   configuration of CHIP instance
     * @param {string} sLayoutData
     *   layout data of CHIP instance
     * @param {function (object)} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking the processed data
     *   (Note: The instance's "Chips" relation will not be expanded!)
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.2.0
     */
    this.createPageChipInstance = function (sPageId, sInstanceId,
      sChipId, sTitle, sConfiguration, sLayoutData, fnSuccess, fnFailure) {
      this.createPageChipInstanceFromRawData({
        pageId: sPageId,
        instanceId: sInstanceId,
        chipId: sChipId,
        title: sTitle,
        configuration: sConfiguration,
        layoutData: sLayoutData
      }, fnSuccess, fnFailure);
    };

    /**
     * Creates a CHIP instance with the given properties inside the page with given ID.
     *
     * @param {object} oChipInstance
     *   the de-serialized JSON representing the CHIP instance to be created
     * @param {string} oChipInstance.pageId
     *   ID of page containing the new CHIP instance
     * @param {string} [oChipInstance.instanceId]
     *   ID of new CHIP instance (optional, a UUID will be created as a default)
     * @param {string} oChipInstance.chipId
     *   ID of CHIP to be used
     * @param {string} [oChipInstance.title]
     *   title of CHIP instance
     * @param {string} [oChipInstance.configuration]
     *   configuration of CHIP instance
     * @param {string} [oChipInstance.layoutData]
     *   layout data of CHIP instance
     * @param {function (object)} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking the processed data
     *   (Note: The instance's "Chips" relation will not be expanded!)
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.9.0
     */
    this.createPageChipInstanceFromRawData = function (oChipInstance, fnSuccess, fnFailure) {
      if (typeof oChipInstance !== "object") {
        throw new sap.ui2.srvc.Error("Invalid raw data", "sap.ui2.srvc.PageBuildingService");
      }
      if (!oChipInstance.pageId) {
        throw new sap.ui2.srvc.Error("Missing page ID", "sap.ui2.srvc.PageBuildingService");
      }
      if (!oChipInstance.chipId) {
        throw new sap.ui2.srvc.Error("Missing CHIP ID", "sap.ui2.srvc.PageBuildingService");
      }
      oChipInstance.instanceId = oChipInstance.instanceId || "";
      oChipInstance.title = oChipInstance.title || "";
      oChipInstance.configuration = oChipInstance.configuration || "";
      oChipInstance.layoutData = oChipInstance.layoutData || "";
      //oChipInstance.remoteCatalogId = oChipInstance.remoteCatalogId || "";

      //TODO the equivalent of "?$expand=Chips/ChipBags/ChipProperties" is missing!
      oWrapper.create("PageChipInstances", oChipInstance, fnSuccess, fnFailure);
    };

    /**
     * Updates the CHIP instance with the given representation which must be the
     * result of a previous create or read operation.
     *
     * @param {object} oChipInstance
     *   the de-serialized JSON representing the CHIP instance to be updated
     * @param {function ()} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.2.0
     */
    this.updatePageChipInstance = function (oChipInstance, fnSuccess, fnFailure) {
      oWrapper.update(oChipInstance, fnSuccess, fnFailure);
    };

    /**
     * Deletes the CHIP instance with the given ID inside the page with given ID.
     *
     * @param {string} sPageId
     *   ID of page from which CHIP instance is to be deleted
     * @param {string} sInstanceId
     *   ID of CHIP instance to be deleted
     * @param {function ()} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.2.0
     */
    this.deletePageChipInstance = function (sPageId, sInstanceId, fnSuccess, fnFailure) {
      if (!sPageId) {
        throw new sap.ui2.srvc.Error("Missing page ID", "sap.ui2.srvc.PageBuildingService");
      }
      if (!sInstanceId) {
        throw new sap.ui2.srvc.Error("Missing instance ID", "sap.ui2.srvc.PageBuildingService");
      }

      oWrapper.del("PageChipInstances(pageId='" + encodeURIComponent(sPageId)
        + "',instanceId='" + encodeURIComponent(sInstanceId) + "')",
        fnSuccess, fnFailure);
    };

    /**
     * Updates all changed properties for the specified bag using a single batch request.
     *
     * @param {object} oParent
     *   parent of the bag to be updated (either page or page CHIP instance)
     * @param {string} sBagId
     *   ID of the bag
     * @param {array} [aChangedProperties=[]]
     *   array of existing properties to be changed
     * @param {array} [aNewProperties=[]]
     *   array of properties to be created
     * @param {array} [aResetProperties=[]]
     *   array of properties to be reset (since 1.17.1)
     * @param {function(array,array,array)} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking three arrays of
     *   response objects for changed, new and reset properties respectively.
     *   For a successful creation, the response object is the new entity. For a successful
     *   change, it is undefined. For a successful reset it is the entity from the underlying scope
     *   or undefined if this does not exist.
     *   For a failed request, it is the corresponding error message.
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     *   <br/>
     *   <b>NOTE:</b> it is called only in case the whole
     *   <code>$batch</code> request fails!)
     *
     * @since 1.11.0
     * @deprecated Use {@link sap.ui2.srvc.ODataService#openBatchQueue} instead.
     */
    this.updateBagProperties = function (oParent, sBagId, aChangedProperties, aNewProperties,
      aResetProperties, fnSuccess, fnFailure) {
      var aChangeRequests = [],
        aGetRequests = [],
        i,
        pos,
        oProperty,
        sRequestUri,
        sMETADATA = "__metadata"; // constant to make JSLint happy

      /* @returns {object} */
      function extractPayload(oEntity) {
        var oResult = {
            "__metadata": {
              type: oEntity[sMETADATA].type,
              uri: oEntity[sMETADATA].uri
            }
          },
          sPropertyName;

        // filter out unnecessary properties
        for (sPropertyName in oEntity) {
          if (Object.prototype.hasOwnProperty.call(oEntity, sPropertyName)
              && sPropertyName !== sMETADATA
              && sPropertyName.indexOf('$') !== 0
              && typeof oEntity[sPropertyName] !== "object") {
            oResult[sPropertyName] = oEntity[sPropertyName];
          }
        }
        return oResult;
      }

      if (!oParent) {
        throw new sap.ui2.srvc.Error("Missing parent object",
          "sap.ui2.srvc.PageBuildingService");
      }

      if (!sBagId) {
        throw new sap.ui2.srvc.Error("Missing bag ID", "sap.ui2.srvc.PageBuildingService");
      }

      //Compatibility for callers not having newly inserted parameter aResetProperties
      if (typeof aResetProperties === "function") {
        this.updateBagProperties(oParent, sBagId, aChangedProperties, aNewProperties, [],
            /*fnSuccess=*/aResetProperties, /*fnFailure=*/fnSuccess);
        return;
      }

      aChangedProperties = aChangedProperties || [];
      aNewProperties = aNewProperties || [];
      aResetProperties = aResetProperties || [];

      if (aChangedProperties.length === 0 && aNewProperties.length === 0 &&
          aResetProperties.length === 0) {
        throw new sap.ui2.srvc.Error("No properties to update, create or reset",
          "sap.ui2.srvc.PageBuildingService");
      }

      // PUT requests
      for (i = 0; i < aChangedProperties.length; i += 1) {
        oProperty = aChangedProperties[i];
        sRequestUri = oProperty[sMETADATA].uri;
        // cut protocol, hostname and base URI from request URI
        pos = sRequestUri.indexOf(oWrapper.getBaseUrl());
        if (pos >= 0) {
          sRequestUri = sRequestUri.slice(pos + oWrapper.getBaseUrl().length);
        }
        aChangeRequests.push({
          requestUri: sRequestUri,
          method: "PUT",
          data: extractPayload(oProperty)
        });
      }

      // POST requests
      sRequestUri = oParent.instanceId ? "ChipInstanceProperties" : "Properties";
      for (i = 0; i < aNewProperties.length; i += 1) {
        oProperty = aNewProperties[i];
        if (!oProperty.name) {
          throw new sap.ui2.srvc.Error("Missing property name", "sap.ui2.srvc.PageBuildingService");
        }
        if (oParent.instanceId) {
          oProperty.instanceId = oParent.instanceId;
          oProperty.pageId = oParent.pageId;
        } else {
          oProperty.pageId = oParent.id;
        }
        oProperty.bagId = sBagId;
        aChangeRequests.push({
          requestUri: sRequestUri,
          method: "POST",
          data: oProperty
        });
      }

      // Reset property maps to DELETE and GET request
      for (i = 0; i < aResetProperties.length; i += 1) {
        oProperty = aResetProperties[i];
        sRequestUri = oProperty[sMETADATA].uri;
        // cut protocol, hostname and base URI from request URI
        pos = sRequestUri.indexOf(oWrapper.getBaseUrl());
        if (pos >= 0) {
          sRequestUri = sRequestUri.slice(pos + oWrapper.getBaseUrl().length);
        }
        aChangeRequests.push({
          requestUri: sRequestUri,
          method: "DELETE"
        });
        aGetRequests.push({
          requestUri: sRequestUri,
          method: "GET"
        });
      }

      batch(aChangeRequests, aGetRequests,
        function (aChangeResponses, aGetResponses) {
          var aResetResponses =
            aChangeResponses.slice(aNewProperties.length + aChangedProperties.length),
            i;

          for (i = 0; i < aResetResponses.length; i += 1) {
            if (aResetResponses[i] === undefined) { //DELETE ok
              if (typeof aGetResponses[i] === "object") { //GET ok
                aResetResponses[i] = aGetResponses[i];
              }
            }
          }
          if (fnSuccess) {
            fnSuccess(
              aChangeResponses.slice(0, aChangedProperties.length), // PUT responses
              aChangeResponses.slice(aChangedProperties.length,
                  aNewProperties.length + aChangedProperties.length), // POST responses
              aResetResponses
            );
          }
        }, fnFailure);
    };

    /**
     * Creates a new property with the given value.
     *
     * @param {string|object} vParent
     *   ID of the page or parent object (either page or page CHIP instance; must be the result
     *   of a previous create or read operation) of the bag for which a property needs to be
     *   created
     * @param {string} sBagId
     *   ID of the bag
     * @param {string} sPropertyName
     *   the property name
     * @param {string} sValue
     *   the property value
     * @param {string} [sTranslatable]
     *   determines if the new property is a translatable one (since 1.19.0)
     *   <b>Note:</b> this is treated here as a plain string by intent, although the backend will
     *   treat it like a boolean (<code>" "</code> vs. <code>"X"</code>)
     * @param {function (object)} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.3.0
     */
    this.createProperty = function (vParent, sBagId, sPropertyName, sValue, sTranslatable,
      fnSuccess, fnFailure) {
      var oProperty;

      if (!vParent) {
        throw new sap.ui2.srvc.Error("Missing parent ID or object",
          "sap.ui2.srvc.PageBuildingService");
      }
      if (!sBagId) {
        throw new sap.ui2.srvc.Error("Missing bag ID", "sap.ui2.srvc.PageBuildingService");
      }
      if (!sPropertyName) {
        throw new sap.ui2.srvc.Error("Missing property name", "sap.ui2.srvc.PageBuildingService");
      }
      if (typeof sTranslatable === "function") {
        // sTranslatable missing, shift arguments appropriately
        this.createProperty(vParent, sBagId, sPropertyName, sValue, undefined,
          /*fnSuccess=*/sTranslatable, /*fnFailure=*/fnSuccess);
        return;
      }

      oProperty = {
        bagId: sBagId,
        name: sPropertyName,
        pageId: vParent,
        translatable: sTranslatable,
        value: sValue
      };
      if (typeof vParent !== "string") {
        if (vParent.instanceId) {
          oProperty.instanceId = vParent.instanceId;
          oProperty.pageId = vParent.pageId;
        } else {
          oProperty.pageId = vParent.id;
        }
      }

      oWrapper.create((oProperty.instanceId ? "ChipInstanceProperties" : "Properties"),
        oProperty, fnSuccess, fnFailure);
    };

    /**
     * Updates the property with the given representation which must be the result of
     * a previous create or read operation.
     *
     * @param {object} oProperty
     *   the de-serialized JSON representing the property to be updated
     * @param {function ()} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.3.0
     */
    this.updateProperty = function (oProperty, fnSuccess, fnFailure) {
      oWrapper.update(oProperty, fnSuccess, fnFailure);
    };

    /**
     * Deletes the property with the given representation which must be the result of
     * a previous create or read operation.
     *
     * @param {object} oProperty
     *   the de-serialized JSON representing the property to be deleted
     * @param {function ()} [fnSuccess]
     *   a callback function that is executed if the request succeeds, taking no data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.19.0
     */
    this.deleteProperty = function (oProperty, fnSuccess, fnFailure) {
      oWrapper.del(oProperty, fnSuccess, fnFailure);
    };

    /**
     * Reads the CHIP with the given ID.
     *
     * @param {string} sChipId
     *   ID of the CHIP to be loaded
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @since 1.2.0
     */
    this.readChip = function (sChipId, fnSuccess, fnFailure) {
      if (!sChipId) {
        throw new sap.ui2.srvc.Error("Missing CHIP ID", "sap.ui2.srvc.PageBuildingService");
      }

      oWrapper.read("Chips('" + encodeURIComponent(sChipId) + "')" +
        "?$expand=ChipBags/ChipProperties", fnSuccess, fnFailure);
    };

    // constructor code -------------------------------------------------------
    if (!sap.ui2.srvc.Error) {
      fnRequire("sap.ui2.srvc.error");
    }
    if (typeof vODataBase === "string") {
      oWrapper = new sap.ui2.srvc.ODataWrapper(vODataBase, this, /*bSupportsChangeSets=*/true);
    } else {
      oWrapper = vODataBase;
    }

    /*
     * Add cache buster token maps as property of the corresponding method.
     * Entries must look like:
     *  key: ID of entity
     *  value: cache buster token
     */
    this.readAllCatalogs.cacheBusterTokens = new sap.ui2.srvc.Map();
    this.readPageSet.cacheBusterTokens = new sap.ui2.srvc.Map();

    /*
     * Enable sticky session in non PERS scopes: All operations in PERS should be
     * faster and synchronous than in CONF and CUST. So the user must be really
     * fast to obtain an error because of load balancing inconsistencies. Another
     * reason is client-side caching. If the response is cached, the load balancing
     * mechanism may be bypassed. This may not be fine for users of the launchpad.
     */
    if (!oWrapper.isStickySessionEnabled() && !bIsPersonalization) {
        oWrapper.enableStickySession();
    }

    sap.ui2.srvc.ODataService.call(this, oWrapper, fnDefaultFailure);
  };

  // public factory function ***************************************************

  if (!sap.ui2.srvc.createPageBuildingService) {
    /**
     * Constructs a facade to the page building service with the given base URI.
     *
     * @param {string} sBaseUri
     *   base URI of the page building service
     * @param {function (string)} [fnDefaultFailure]
     *   default error handler, taking an error message
     * @param {boolean} [bIsPersonalization=false]
     *   defines the return value of {@link sap.ui2.srvc.PageBuildingService#isPersonalization} of
     *   the returned instance (since 1.16.1)
     * @returns {sap.ui2.srvc.PageBuildingService}
     *   a facade to the page building service
     * @since 1.2.0
     *
     * @see sap.ui2.srvc.PageBuildingService
     */
    sap.ui2.srvc.createPageBuildingService = function (sBaseUri, fnDefaultFailure,
      bIsPersonalization) {
      return new sap.ui2.srvc.PageBuildingService(sBaseUri, fnDefaultFailure, bIsPersonalization);
    };
  }
/// @end
}());

}; // end of sap/ui2/srvc/PageBuildingService.js
if ( !jQuery.sap.isDeclared('sap.ui2.srvc.RemoteCatalogService') ) {
// Copyright (c) 2009-2017 SAP SE, All Rights Reserved
/**
 * @fileOverview A catalog service which is able to read CHIPs from a remote server.
 */

(function () {
  "use strict";
  /*global jQuery, sap */

  jQuery.sap.declare("sap.ui2.srvc.RemoteCatalogService");

  

  // "public class" ************************************************************

  /**
   * Constructs a remote catalog service which is able to read CHIPs from a remote server.
   *
   * @class
   * @constructor
   * @since 1.19.1
   */
  sap.ui2.srvc.RemoteCatalogService = function () {

    // "public" methods --------------------------------------------------------

    /**
     * Reads the CHIPs with given IDs from the catalog with the given ID, using the given base URL.
     *
     * @param {string} sBaseUrl
     *   the base URL of the remote catalog
     * @param {string} sCatalogId
     *   the ID of the remote catalog
     * @param {string[]} [aChipIds]
     *   the IDs of the CHIPs to be loaded; if <code>undefined</code>, all CHIPs are loaded
     * @param {function (object)} fnSuccess
     *   a callback function that is executed if the request succeeds, taking the processed data
     * @param {function (string, [object])} [fnFailure]
     *   error handler taking an error message and, since version 1.28.6, an
     *   optional object containing the complete error information as delivered
     *   by the ODataService. See fnFailure parameter of {@link sap.ui2.srvc.ODataWrapper#onError}
     *   for more details.
     * @throws Error if <code>aChipIds === []</code>
     * @since 1.19.1
     */
    this.readChips = function (sBaseUrl, sCatalogId, aChipIds, fnSuccess, fnFailure) {
      sap.ui2.srvc.createPageBuildingService(sBaseUrl)
        .readCatalogChips(sCatalogId, aChipIds, fnSuccess, fnFailure);
    };
  };
}());

}; // end of sap/ui2/srvc/RemoteCatalogService.js
