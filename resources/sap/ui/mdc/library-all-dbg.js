// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.mdc.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.mdc.FilterBar.designtime') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.FilterBar.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/FilterBar.designtime",[], function () {
	"use strict";

	return {
		aggregations: {}
	};

}, /* bExport= */ false);

}; // end of sap/ui/mdc/FilterBar.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.Table.designtime') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.Table.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/Table.designtime",[], function () {
	"use strict";

	return {
		aggregations: {
			columns: {
				//childNames: {
				//	singular: "COLUMN_NAME",
				//	plural: "COLUMN_NAME_PLURAL"
				//},
				actions: {
					addODataProperty : "addColumn",
					move: "moveColumns",
					remove : "removeColumn"
				}
			},
			actions: {
			},
			_content : {
				ignore : true
			}
		},
		name: "{name}",
		description: "{description}",
		properties: {
			context: {
				ignore: true
			},
			tableBindingPath : {
				ignore : true
			},
			type : {
				ignore : false
			},
			interactionType : {
				ignore : false
			},
			filterBarId : {
				ignore : true
			},
			enabled : {
				ignore : true
			}
		}
	};

}, /* bExport= */ false);

}; // end of sap/ui/mdc/Table.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.FilterFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.base.FilterFieldRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/FilterFieldRenderer",['jquery.sap.global', 'sap/ui/core/Renderer', 'sap/ui/core/IconPool'],
	function(jQuery, Renderer, IconPool) {
		"use strict";

		//initialize the Icon Pool
		IconPool.insertFontFaceStyle();

		var FilterFieldRenderer = Renderer.extend("sap.ui.mdc.base.FilterFieldRenderer");

		FilterFieldRenderer.render = function(oRm, oControl) {
			var control = {
				content: oControl.getContent(),
				editable: oControl.getEditable()
			};

			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUiMdcBaseFilterField");
			oRm.writeClasses();
			oRm.addStyle("display", "inline-block");
			oRm.addStyle("width", oControl.getWidth());
			oRm.writeStyles();
			oRm.write(">");

			if (control.content) {
				oRm.renderControl(control.content);
			}
			oRm.write("</div>");
		};

		return FilterFieldRenderer;

	}, /* bExport= */ true);
}; // end of sap/ui/mdc/base/FilterFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.FilterOperatorConfig') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.base.FilterOperatorConfig'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/FilterOperatorConfig",["sap/ui/base/Object", "sap/ui/model/FilterOperator", "sap/ui/model/Filter"],

	function(BaseObject, ModelOperator, Filter) {
		"use strict";


		/**
		 *
		 * @class Configuration of model-specific filter operators depending on data types.
		 * @extends sap.ui.base.Object
		 *
		 * @author SAP SE
		 * @version 1.52.7
		 * @since 1.48.0
		 * @alias sap.ui.mdc.base.FilterOperatorConfig
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var FilterOperatorConfig = BaseObject.extend("sap.ui.mdc.base.FilterOperatorConfig", /** @lends sap.ui.mdc.base.FilterOperatorConfig.prototype */ {

			/**
			 * Not to be called by applications, just by models
			 * @protected
			 */
			constructor: function() {
				BaseObject.apply(this);

				// use clone of default config map for this instance
				this.mOperators = jQuery.extend(true, {}, FilterOperatorConfig._mOperators);
				this.mTypes = jQuery.extend(true, {}, FilterOperatorConfig._mTypes);
				this.mOpsForType = jQuery.extend(true, {}, FilterOperatorConfig._mOpsForType);
			}
		});




		// base config of types and operators

		sap.ui.model.type.String.extend("sap.ui.model.type.Key", {});

		// default types, operators, and mappings - could be static settings for ALL FilterOperatorConfigs or defined by an extended FilterOperatorConfig for a certain model type

		FilterOperatorConfig._mTypes = {
			// basic
			"base": undefined, // TODO: needed?
			"string": "base",
			"numeric": "base",
			"date": "base",
			"time": "base",
			"boolean": "base",
			"int": "numeric",
			"float": "numeric",

			// simple
			"sap.ui.model.type.Boolean": "boolean",
			"sap.ui.model.type.Date": "date",
			"sap.ui.model.type.FileSize": "string",
			"sap.ui.model.type.Float": "float",
			"sap.ui.model.type.Integer": "int",
			"sap.ui.model.type.String": "string",
			"sap.ui.model.type.Time": "time",
			// odata
			"sap.ui.model.odata.type.Boolean": "boolean",
			"sap.ui.model.odata.type.Byte": "int",
			"sap.ui.model.odata.type.Date": "date",
			"sap.ui.model.odata.type.DateTime": "datetime",
			"sap.ui.model.odata.type.DateTimeOffset": "datetime",
			"sap.ui.model.odata.type.Decimal": "float",
			"sap.ui.model.odata.type.Double": "float",
			"sap.ui.model.odata.type.Float": "float",
			"sap.ui.model.odata.type.Guid": "string",
			"sap.ui.model.odata.type.Int": "int",
			"sap.ui.model.odata.type.Int16": "int",
			"sap.ui.model.odata.type.Int32": "int",
			"sap.ui.model.odata.type.Int64": "int",
			"sap.ui.model.odata.type.Raw": "string",
			"sap.ui.model.odata.type.SByte": "int",
			"sap.ui.model.odata.type.Single": "int",
			"sap.ui.model.odata.type.String": "string",
			"sap.ui.model.odata.type.Time": "time",
			"sap.ui.model.odata.type.TimeOfDay": "time",

			//edm
			"Edm.Boolean": "sap.ui.model.odata.type.Boolean",
			"Edm.Byte": "sap.ui.model.odata.type.Byte",
			"Edm.Date": "sap.ui.model.odata.type.Date", // V4 Date
			"Edm.DateTime": "sap.ui.model.odata.type.DateTime", // only for V2  constraints: {displayFormat: 'Date' }
			"Edm.DateTimeOffset": "sap.ui.model.odata.type.DateTimeOffset", //constraints: { V4: true, precision: n }
			"Edm.Decimal": "sap.ui.model.odata.type.Decimal", //constraints: { precision, scale, minimum, maximum, minimumExclusive, maximumExclusive}
			"Edm.Double": "sap.ui.model.odata.type.Double",
			"Edm.Float": "sap.ui.model.odata.type.Single",
			"Edm.Guid": "sap.ui.model.odata.type.Guid",
			"Edm.Int16": "sap.ui.model.odata.type.Int16",
			"Edm.Int32": "sap.ui.model.odata.type.Int32",
			"Edm.Int64": "sap.ui.model.odata.type.Int64",
			//Edm.Raw not supported
			"Edm.SByte": "sap.ui.model.odata.type.SByte",
			"Edm.Single": "sap.ui.model.odata.type.Single",
			"Edm.String": "sap.ui.model.odata.type.String", //constraints: {maxLength, isDigitSequence}
			"Edm.Time": "sap.ui.model.odata.type.Time", // only V2
			"Edm.TimeOfDay": "sap.ui.model.odata.type.TimeOfDay" // V4 constraints: {precision}			
		};
		Object.freeze(FilterOperatorConfig._mTypes);

		FilterOperatorConfig._mOpsForType = { // defines operators for types
			"base": {
				operators: ["Contains", "EQ", "BT", "StartsWith", "EndsWith", "LE", "LT", "GE", "GT", "NE"], // all operators are supported
				defaultOperator: "EQ"
			},
			"string": {
				operators: ["EEQ", "Contains", "EQ", "BT", "StartsWith", "EndsWith", "LE", "LT", "GE", "GT", "NE"], // all operators are supported
				defaultOperator: "StartsWith"
			},
			"date": {
				operators: ["EQ", "BT", "LE", "LT", "GE", "GT", "NE"]
			},
			"numeric": {
				operators: ["EQ", "BT", "LE", "LT", "GE", "GT", "NE"]
			},
			"time": {
				operators: ["EQ", "BT", "LE", "LT", "GE", "GT"]
			},
			"boolean": {
				operators: ["EQ", "NE"]
			}
		};
		Object.freeze(FilterOperatorConfig._mOpsForType);

		FilterOperatorConfig._mOperators = {};




		// translation utils

		var oMessageBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc");
		sap.ui.getCore().attachLocalizationChanged(function() {
			oMessageBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc");
		});

		function getText(sKey, sType) {
			var key = sKey + (sType ? "." + sType : ""),
				sText;

			if (oMessageBundle.hasText(key)) {
				sText = oMessageBundle.getText(key);
			} else
			if (sType) {
				sText = oMessageBundle.getText(sKey);
			} else {
				sText = key;
			}
			return sText;
		}




		// Managing different FilterOperatorConfigs


		FilterOperatorConfig._mInstances = {}; // FilterOperatorConfig instances for all model instances needing one will be registered here  TODO: remove on destroy

		FilterOperatorConfig._mClasses = { // Model classes can register their own instances here
			undefined: FilterOperatorConfig // the default if a model type has no specific config registered (and none of its base classes): this base FilterOperatorConfig
		};


		/**
		 * Returns the FilterOperatorConfig for a specific model instance (and creates it lazily if required).
		 *
		 * @param oModel the model for which the filter operator configuration is requested
		 *
		 * @public
		 * @since 1.48
		 */
		FilterOperatorConfig.getFor = function(oModel) {
			var sKey = oModel && oModel.getId();
			var oFOC = FilterOperatorConfig._mInstances[sKey];

			if (!oFOC) {
				var oModelMeta = oModel && oModel.getMetadata();
				var oClass = FilterOperatorConfig._mClasses[oModelMeta && oModelMeta.getName()];
				while (!oClass) {
					oModelMeta = oModelMeta.getParent();
					oClass = FilterOperatorConfig._mClasses[oModelMeta && oModelMeta.getName()]; // try parent class - or use undefined, which returns the base config
				}

				oFOC = new oClass(); // instantiate the config and assign to the model in the map
				FilterOperatorConfig._mInstances[sKey] = oFOC;
			}

			return oFOC;
		};


		/**
		 * Registers a certain type of FilterOperatorConfig for the given model type.
		 * When someone requests the FilterOperatorConfig for a model of the given type, an instance of the config will be created and assigned to the model instance.
		 *
		 * This method may only be called by the model whose type is given as first parameter <code>sModelClassName</code>.
		 *
		 * @param {string} sModelClassName the name of the model class for which the given config should be used
		 * @param {object} oFOC the FilterOperatorConfig class (not an instance) to be used for the given model type
		 *
		 * @protected
		 */
		FilterOperatorConfig.registerFor = function(sModelClassName, oFOC) { // TODO: class or class name? Class name allows lazy require, but leads to async APIs all over the place
			FilterOperatorConfig._mClasses[sModelClassName] = oFOC;
		};



		// Using the configuration


		/**
		 * Gets the config defined for exactly this type, does not go up the type hierarchy.
		 *
		 * @param {string} sType
		 * @param {string} sConfigName
		 * @return {object} the config defined for exactly the given type
		 *
		 * @private
		 */
		FilterOperatorConfig.prototype._getConfig = function(sType, sConfigName) { // no vType support here, because called often
			var oConfig = this.mOpsForType[sType];
			if (oConfig) {
				return oConfig[sConfigName];
			}
		};


		/**
		 * Returns the required configuration, looks up the type hierarchy if required. Result might still be undefined.
		 * @param {string|sap.ui.model.SimpleType} vType
		 * @param {string} sConfigName
		 * @return {object} the config applicable for the given type (defined for this type or a base type)
		 *
		 * @private
		 */
		FilterOperatorConfig.prototype._findConfig = function(vType, sConfigName) {
			if (typeof vType === "object") {
				vType = vType.getMetadata().getName();
			}

			var oConfig;
			while (vType && !(oConfig = this._getConfig(vType, sConfigName))) { // search until we have a type with known operators
				vType = this.getParentType(vType); // go to parent type
			}
			// either vType is undefined because no type in the hierarchy had the config, or oConfig does now have the desired information

			return oConfig; // TODO: return base config if undefined? However, this only makes a difference when a type is not derived from base. Would this be intentional or an error?
		};


		/**
		 * Returns all available operators for the given type; see FilterOperatorConfig.getOperators()
		 *
		 * @param {string|sap.ui.model.SimpleType} vType
		 * @return {string[]} an array with the names of the supported filter operators
		 *
		 * @public
		 */
		FilterOperatorConfig.prototype.getOperatorsForType = function(vType) {
			return this._findConfig(vType, "operators");
		};


		/**
		 * Returns the default operator for the given type
		 *
		 * @param {string|sap.ui.model.SimpleType} vType a type or its name
		 * @return {string} the name of the default filter operator for the given type
		 *
		 * @public
		 */
		FilterOperatorConfig.prototype.getDefaultOperator = function(vType) {
			return this._findConfig(vType, "defaultOperator");
		};


		/**
		 * Returns the possible operators for the given type and (if given) value.
		 *
		 * @param {string|sap.ui.model.SimpleType} vType
		 * @param {string} [sValue] the value entered so far
		 * @return {object[]} the operator objects suitable to the given input string, considering the given type
		 *
		 * @public
		 */
		FilterOperatorConfig.prototype.getMatchingOperators = function(vType, sValue) {
			var aOperators = this.getOperatorsForType(vType);

			return this._getMatchingOperators(aOperators, sValue);
		};


		/**
		 * Returns those of the given operators which match the given value
		 *
		 * @param {string[]} aOperators the names of the operators which should be checked for matching; must be valid for the current type: this function only checks the operator against values
		 * @param {string} sValue the value to check the operators with
		 * @return {object[]} the operator objects suitable to the given input string
		 *
		 * @private
		 */
		FilterOperatorConfig.prototype._getMatchingOperators = function(aOperators, sValue) {
			// TODO: sType will be needed for checking the value content:   "=5" matches the EQ operator, but should only match when type is e.g. number, not for e.g. boolean
			var aResult = [],
				oOperator;

			aOperators.some(function(sOperatorName) {
				oOperator = this.getOperator(sOperatorName);
				if (oOperator && oOperator.test(sValue)) {
					aResult.push(oOperator);
				}
			}.bind(this));

			return aResult;
		};


		// TODO: doc
		FilterOperatorConfig.prototype.addType = function(sType, sBaseType) {
			if (this.mTypes[sType]) {
				// FIXME
				throw new Error("Type already exists: " + sType);
			} else {
				this.mTypes[sType] = sBaseType;
			}
		};

		FilterOperatorConfig.prototype.getParentType = function(sType) {
			return this.mTypes[sType];
		};


		/**
		 * Adds one or more operator(s) (given by name or array of names) to the given type
		 *
		 * @public
		 */
		FilterOperatorConfig.prototype.addOperatorsToType = function(vType, vOperators) {
			var sType = vType;
			if (typeof sType === "object") {
				sType = sType.getMetadata().getName();
			}
			var aOperators = this.getOperatorsForType(vType);

			if (!aOperators) {
				aOperators = [];
			}

			if (!(typeof vOperators === "string")) { // vOperators is array
				aOperators = aOperators.concat(vOperators);
			} else {
				aOperators.push(vOperators); // vOperators is a plain string
			}

			this.mOpsForType[sType] = this.mOpsForType[sType] || {};
			this.mOpsForType[sType].operators = aOperators;
		};


		/**
		 * Adds a operator to the list of operators
		 * Initially the bDefaultConfiguration is true and the operators are added globally
		 *
		 * @param {object} oOperator the operator configuration object
		 * @param {string} oOperator.name the operator's name
		 * @param {string} oOperator.filterOperator the operator's default filter operator that is created as defined in sap.ui.model.FilterOperator
		 * @param {string} oOperator.tokenParse the string representation of the regular expression that is used to parse the operator by a control
		 *                 within the string, placeholder can refer to the translated tokenText can be used. #tokenText# will refer to the
		 *                 given oOperator.tokenText property if given.
		 * @param {string} oOperator.tokenFormat the string representation of the regular expression that is used to parse the operator by a control
		 *                 within the string, placeholder can refer to the translated tokenText can be used. #tokenText# will refer to the
		 *                 given oOperator.tokenText property if given.
		 * @param {string[]} oOperator.valueTypes array of type name to be used. The length of the array defines the number of values that
		 *                 need to be entered with the operator.
		//  * @param {string} [oOperator.shortText] string representation of the operator as a short text.
		//  *                If the shortText is not given it will be looked up in the resource bundle of the sap.ui.mdc library by the key
		//  *                operators.{oOperator.name}.shortText
		 * @param {string} [oOperator.longText] string representation of the operator as a long text.
		 *                If the longText is not given it will be looked up in the resource bundle of the sap.ui.mdc library by the key
		 *                operators.{oOperator.name}.longText
		 * @param {string} [oOperator.tokenText] string representation of the operator as a short text.
		 *                If the token Text is not given it will be looked up in the resource bundle of the sap.ui.mdc library by the key
		 *                operators.{oOperator.name}.tokenText
		 */
		FilterOperatorConfig.prototype.addOperator = function(oOperator) {
			FilterOperatorConfig._addOperatorTo(oOperator, this.mOperators);
		};

		/**
		 * @static
		 */
		FilterOperatorConfig._addOperatorTo = function(oOperator, mOperators) {
			var mCurrent = mOperators;
			if (!oOperator.name) {
				jQuery.sap.log.warning("Operator configuration expects a name property");
			}
			if (!oOperator.filterOperator && !oOperator.getModelFilter) {
				jQuery.sap.log.error("Operator configuration for " + oOperator.name + " needs a default filter operator from sap.ui.model.FilterOperator or the function getModelFilter");
				return;
			}
			if (!bDefaultConfiguration) {
				if (mCurrent[oOperator.name] && !mCurrent[oOperator.name].custom) {
					jQuery.sap.log.warning("Duplicate Type Configuration: " + oOperator.name + ". A default type cannot be extended or overwritten.");
					return;
				}
				oOperator.custom = true;
			} else {
				jQuery.sap.log.debug("Operator Configuration for " + oOperator.name + " defined as default configuration");
			}
			oOperator = extendOperator(oOperator);
			if (bDefaultConfiguration) {
				//freeze the default operators for changes
				// not possible because we need to add context later?!?  TODO          Object.freeze(oOperator);
			}
			mOperators[oOperator.name] = oOperator;
		};


		//private function for configuration
		//enhance the operators from the configuration, create regexps and load texts
		function extendOperator(oObj) {
			var i;
			var sTextKey = oObj.textKey || "operators." + oObj.name;
			// oObj.shortText = oObj.shortText || getText(sTextKey + ".shortText") || "";
			oObj.longText = oObj.longText || getText(sTextKey + ".longText") || "";
			oObj.tokenText = oObj.tokenText || getText(sTextKey + ".tokenText") || "";

			// create token parsing RegExp
			if (oObj.tokenParse) {
				if (oObj.tokenText) {
					oObj.tokenParse = oObj.tokenParse.replace(/#tokenText#/g, oObj.tokenText);
					var iCount = oObj.valueTypes.length;
					for (i = 0; i < iCount; i++) {
						var sReplace = oObj.paramTypes ? oObj.paramTypes[i] : oObj.valueTypes[i];
						oObj.tokenParse = oObj.tokenParse.replace(new RegExp("\\$" + i, "g"), sReplace);
					}
					oObj.tokenParseRegExp = new RegExp(oObj.tokenParse, "i");
				}
			} else if (oObj.tokenText) {
				oObj.tokenParseRegExp = new RegExp(oObj.tokenText, "i"); // operator without value
			}

			// create token formatter
			if (oObj.tokenFormat) {
				if (oObj.tokenText) {
					oObj.tokenFormat = oObj.tokenFormat.replace(/\#tokenText\#/g, oObj.tokenText);
				}
			} else if (oObj.tokenText) {
				oObj.tokenFormat = oObj.tokenText; // static operator with no value (e.g. "THIS YEAR")
			}
			oObj.format = oObj.format || formatOperator.bind(oObj);
			oObj.parse = oObj.parse || parseOperator.bind(oObj);
			oObj.test = oObj.test || testOperator.bind(oObj);
			oObj.getCondition = oObj.getCondition || getOperatorCondition.bind(oObj);
			oObj.getModelFilter = oObj.getModelFilter || getModelFilterObject.bind(oObj);
			oObj._setOwner = setOwnerForOperator.bind(oObj);
			oObj.getTypeText = getText.bind(oObj);
			oObj._createLocalType = _createLocalType.bind(oObj);
			oObj.isEmpty = oObj.isEmpty || _isEmpty.bind(oObj);

			//more enhancements to be done...
			return oObj;
		}

		function setOwnerForOperator(oFilterOperatorConfig) { // creates the connection from operator to its FilterOperatorConfig instance (lazily done in getOperator)
			this.oFilterOperatorConfig = oFilterOperatorConfig;
			return this;
		}

		function getModelFilterObject(oCondition) {
			var oOperator = this.oFilterOperatorConfig.getOperator(oCondition.operator);
			return new Filter({ path: oCondition.fieldPath, operator: oOperator.filterOperator, value1: oCondition.values[0], value2: oCondition.values[1] }); // TODO: hardcoded for 2 values
		}

		function _isEmpty(oCondition, oType) {
			var isEmpty = false;
			for (var i = 0; i < this.valueTypes.length; i++) {
				var v = oCondition.values[i];
				if (v === null || v === undefined || v === "") { // empty has to use the oType information
					isEmpty = true;
					break;
				}
			}
			return isEmpty;
		}

		function formatOperator(aValues, oCondition, oType) {
			var sTokenText = this.tokenFormat,
				iCount = this.valueTypes.length;
			for (var i = 0; i < iCount; i++) {
				var v = aValues[i] !== undefined && aValues[i] !== null ? aValues[i] : "";
				if (this.valueTypes[i] !== "self") {
					oType = this._createLocalType(this.valueTypes[i]);
				}
				var sReplace = oType ? oType.formatValue(v, "string") : v;
				sTokenText = sTokenText.replace(new RegExp("\\$" + i, "g"), sReplace);
			}
			return sTokenText;
		}

		function parseOperator(sText, oType) {
			var aMatch = sText.match(this.tokenParseRegExp);
			var aResult; // might remain undefined - if no match
			if (aMatch) {
				aResult = [];
				for (var i = 0; i < this.valueTypes.length; i++) {
					if (this.valueTypes[i] !== "self") {
						oType = this._createLocalType(this.valueTypes[i]);
					}
					try {
						var v = oType ? oType.parseValue(aMatch[i + 1], "string") : aMatch[i + 1];
						if (oType) {
							oType.validateValue(v);
							if (oType.oConstraints && oType.oConstraints.toUpperCase === true) {
								v = v.toUpperCase ? v.toUpperCase() : v;
							}
						}
						aResult.push(v);
					} catch (err) {
						// Error
						jQuery.sap.log.warning(err.message);
						throw new sap.ui.base.Exception(err.message);
					}
				}
			}
			return aResult; // currently returns empty array for operators without values, undefined for no match
		}

		function _createLocalType(sType) {
			if (!this._oType) {
				jQuery.sap.require(sType);
				var oTypeClass = jQuery.sap.getObject(sType);
				this._oType = new oTypeClass();
			}
			return this._oType;
		}

		function testOperator(sText, oType) {
			var bMatch = this.tokenParseRegExp.test(sText);
			if (bMatch && oType) {
				// try {
				var aValues = this.parse(sText, oType);
				bMatch = aValues.length == this.valueTypes.length;
				// } catch (err) {
				// bMatch = false;
				// }
			}
			return bMatch;
		}

		function getOperatorCondition(sText, oType) {
			if (this.test(sText, oType)) {
				var aValues = this.parse(sText, oType);
				return { operator: this.name, values: aValues };
			}
			return null;
		}

		/**
		 * Returns the operator object for the given operator name
		 * @param {string} sOperator the name of the operator
		 * @returns {object} the operator object, or undefined if the operator with the requested name does not exist
		 */
		FilterOperatorConfig.prototype.getOperator = function(sOperator) {
			var oOperator = this.mOperators[sOperator];
			return oOperator ? oOperator._setOwner(this) : undefined; // TODO: could also be done when cloning the initial map!
		};






		/**
		 * Adding default operators
		 *
		 */
		bDefaultConfiguration = true;

		FilterOperatorConfig._addOperatorTo({
			name: "EEQ",
			showInSuggest: false,
			filterOperator: ModelOperator.EQ,
			tokenParse: "^==(.*)$",
			tokenFormat: "$1 ($0)",
			valueTypes: ["self"],
			longText: "EEQ",
			displayFormats: {
				DescriptionValue: "$1 ($0)",
				ValueDescription: "$0 ($1)",
				Description: "$1",
				Value: "$0"
			},
			format: function(aValues, oContext, oType) {
				var sTokenText = this.tokenFormat,
					iCount = this.valueTypes.length + 1, // we get the code and description as input for EEQ
					sReplace;

				var displayFormat = oType.oFormatOptions && oType.oFormatOptions.displayFormat ? oType.oFormatOptions.displayFormat : "DescriptionValue";
				sTokenText = this.displayFormats[displayFormat];

				// if (oContext.description) {
				// 	//TODO workaround to handle the old .description values. 
				// 	// Can be removed when the fe is using the aValues for the description
				// 	aValues[1] = oContext.description;
				// 	delete oContext.description;
				// }

				if (!aValues[1]) {
					sTokenText = this.displayFormats["Value"];
					iCount = 1;
				}

				for (var i = 0; i < iCount; i++) {
					sReplace = aValues[i] || "";
					sTokenText = sTokenText.replace(new RegExp("\\$" + i, "g"), sReplace);
				}

				return sTokenText;
			}
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "EQ",
			filterOperator: ModelOperator.EQ,
			tokenParse: "^=([^=].*)$",
			tokenFormat: "=$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "BT",
			filterOperator: ModelOperator.BT,
			tokenParse: "^(.+)\\.\\.\\.(.+)$", // TODO: does this work?? At least also matches crap like ".....". I guess validation of value types needs to get rid of those.
			tokenFormat: "$0...$1",
			valueTypes: ["self", "self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "LT",
			filterOperator: ModelOperator.LT,
			tokenParse: "^<(.*)$",
			tokenFormat: "<$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "GT",
			filterOperator: ModelOperator.GT,
			tokenParse: "^>(.*)$",
			tokenFormat: ">$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "LE",
			filterOperator: ModelOperator.LE,
			tokenParse: "^<=(.*)$",
			tokenFormat: "<=$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "GE",
			filterOperator: ModelOperator.GE,
			tokenParse: "^>=(.*)$",
			tokenFormat: ">=$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "StartsWith",
			filterOperator: ModelOperator.StartsWith,
			tokenParse: "^([^\*].*)\\*$",
			tokenFormat: "$0*",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "EndsWith",
			filterOperator: ModelOperator.EndsWith,
			tokenParse: "^\\*(.*[^\*])$",
			tokenFormat: "*$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "Contains",
			filterOperator: ModelOperator.Contains,
			tokenParse: "^\\*(.*)\\*$",
			tokenFormat: "*$0*",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		/* TODO
		 *
		FilterOperatorConfig._addOperatorTo({
			name: "ANY",
			filterOperator: ModelOperator.ANY,
			tokenParse: "^#tokenText#(.*)\\*$",
			tokenFormat: "#tokenText#$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "ALL",
			filterOperator: ModelOperator.ALL,
			tokenParse: "^#tokenText#(.*)$",
			tokenFormat: "#tokenText#$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);
		*/

		FilterOperatorConfig._addOperatorTo({
			name: "NE",
			filterOperator: ModelOperator.NE,
			tokenParse: "^!=(.+)$",
			tokenFormat: "!=$0",
			valueTypes: ["self"],
			exclude: true
		}, FilterOperatorConfig._mOperators);


		/**
		 * Initially the bDefaultConfiguration is true and the types are added globally
		 * Types can extend from a base type and will overwrite the default settings
		 */

		var bDefaultConfiguration = false;

		Object.freeze(FilterOperatorConfig._mOperators); // this is the general operator config, which all instances clone first before doing any custom modification


		return FilterOperatorConfig;
	},
	/* bExport= */
	true);
}; // end of sap/ui/mdc/base/FilterOperatorConfig.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.FilterToken') ) {
jQuery.sap.declare('sap.ui.mdc.base.FilterToken'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.m.Tokenizer'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/FilterToken",['jquery.sap.global', 'sap/ui/base/ManagedObject', 'sap/m/Token', 'sap/m/Tokenizer'],
	function(jQuery, ManagedObject, Token, Tokenizer) {
		"use strict";

		/**
		 * Constructor for a new FilterToken.
		 * A FilterToken is used in a FilterField to visualize a condition.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 *
		 * @extends sap.m.Token
		 *
		 * @author SAP SE
		 * @version 1.52.7
		 *
		 * @constructor
		 * @alias sap.ui.mdc.base.FilterToken
		 * @author SAP SE
		 * @version 1.52.7
		 * @since 1.48.0
		 *
		 * @private
		 */
		var FilterToken = Token.extend("sap.ui.mdc.base.FilterToken", /** @lends sap.ui.mdc.base.FilterToken.prototype */ {
			metadata: {
				library: "sap.ui.mdc",
				properties: {

					/**
					 * Indicates that the token text can be edited by the user.
					 */
					changeable: {
						type: "boolean",
						defaultValue: false
					}
				},
				events: {
					/**
					 * This event is fired if a token changed.
					 */
					tokenChanged: {
						parameters: {
							text: {
								type: "string"
							}
						}
					}
				}
			}
		});
		//initialize some state
		FilterToken.prototype.init = function() {
			Token.prototype.init.apply(this);
			this.bAllowTextSelection = true;
			this._bEditing = false; //becomes true if the user starts editing the token text
		};

		FilterToken.prototype.setParent = function(oParent) {
			if (oParent instanceof Tokenizer) {
				oParent.bAllowTextSelection = true;
			}
			ManagedObject.prototype.setParent.apply(this, arguments);
		};

		/**
		 * Sets the text of the filter token to the given value
		 * @param {string} sValue the new text of the token
		 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
		 * @public
		 */
		FilterToken.prototype.setText = function(sValue) {
			Token.prototype.setText.call(this, sValue, true);
			this.getDomRef() && (this.getDomRef().firstChild.innerText = this.getText());
			return this;
		};

		// activates the input field within the filter token.
		FilterToken.prototype._activateInput = function() {
			if (!this._bEditing) {
				var oInput = this.getDomRef().firstChild;
				oInput.tabIndex = "0";
				oInput.focus();
				oInput.setAttribute("contenteditable", "true");
				this._bEditing = true;
				this.$().addClass("sapMTokenEditing");
			}
		};

		// deactivates the input field within the filter token.
		FilterToken.prototype._deactivateInput = function() {
			this.getDomRef().firstChild.tabIndex = "-1";
			this.focus();
			var oInput = this.getDomRef().firstChild;
			var sText = oInput.innerText;
			if (sText !== this.getText()) {
				var sOldText = this.getText();
				this.setText(this.getDomRef().firstChild.innerText);
				this.fireTokenChanged({
					text: this.getText(),
					oldText: sOldText
				});
			}
			this._bEditing = false;
			oInput.removeAttribute("contenteditable");
			this.$().removeClass("sapMTokenEditing");
		};

		/**
		 * Function is called when token is pressed to select/deselect token.
		 *
		 * @param {jQuery.Event} oEvent
		 *
		 * @private
		 */
		FilterToken.prototype._onTokenPress = function(oEvent) {
			var bSelected = this.getSelected(),
				bCtrlKey = oEvent.ctrlKey || oEvent.metaKey,
				bShiftKey = oEvent.shiftKey;
			Token.prototype._onTokenPress.apply(this, arguments);
			if (bSelected && this.getChangeable() && !bCtrlKey && !bShiftKey) {
				this._activateInput();
			}
		};

		/**
		 * Event handler called when control is loosing the focus, removes selection from token
		 *
		 * @param {jQuery.Event} oEvent
		 * @private
		 */
		FilterToken.prototype.onsapfocusleave = function(oEvent) {
			if (this._bEditing) {
				this._deactivateInput();
			} else {
				this._callBaseEventHandler(oEvent, "onsapfocusleave");
			}
		};

		/**
		 * Event handler called when user presses the return/enter key
		 *
		 * @param {jQuery.Event} oEvent
		 * @private
		 */
		FilterToken.prototype.onsapenter = function(oEvent) {
			if (this._bEditing) {
				this._deactivateInput();
			} else {
				this._callBaseEventHandler(oEvent, "onsapfocusleave");
			}
		};

		/**
		 * Event handler called when the entered a text in the input
		 *
		 * @param {jQuery.Event} oEvent
		 * @private
		 */
		FilterToken.prototype.oninput = function(oEvent) {
			if (this._bEditing || oEvent.target === this.getDomRef().firstChild) {
				oEvent.stopImmediatePropagation();
			} else {
				this._callBaseEventHandler(oEvent, "oninput");
			}
		};

		/**
		 * Event handler called when key down happend on the
		 *
		 * @param {jQuery.Event} oEvent
		 * @private
		 */
		FilterToken.prototype.onkeydown = function(oEvent) {
			if (this._bEditing || oEvent.target === this.getDomRef().firstChild) {
				oEvent.stopImmediatePropagation();
				if (oEvent.keyCode === jQuery.sap.KeyCodes.F2) {
					this._deactivateInput();
				}
			} else {
				if (this.getChangeable() && oEvent.keyCode === jQuery.sap.KeyCodes.F2) {
					this._activateInput();
				}
				this._callBaseEventHandler(oEvent, "onkeydown");
			}
		};

		FilterToken.prototype.onsapspace = function(oEvent) {
			if (this._bEditing || oEvent.target === this.getDomRef().firstChild) {
				oEvent.stopImmediatePropagation();
			} else {
				this._callBaseEventHandler(oEvent, "onsapspace");
			}
		};

		FilterToken.prototype.onsapescape = function(oEvent) {
			if (this._bEditing || oEvent.target === this.getDomRef().firstChild) {
				this._deactivateInput();
				oEvent.stopImmediatePropagation();
			} else {
				this._callBaseEventHandler(oEvent, "onsapescape");
			}
		};

		FilterToken.prototype.onkeyup = function(oEvent) {
			if (this._bEditing || oEvent.target === this.getDomRef().firstChild) {
				oEvent.stopImmediatePropagation();
			} else {
				this._callBaseEventHandler(oEvent, "onkeyup");
			}
		};

		FilterToken.prototype._callBaseEventHandler = function(oEvent, sName) {
			var oParent = this.getMetadata().getParent();
			if (oParent) {
				oParent = oParent.getClass();
				if (oParent.prototype[sName]) {
					oParent.prototype[sName].apply(this, [oEvent]);
				}
			}
		};

		return FilterToken;
	}, true);
}; // end of sap/ui/mdc/base/FilterToken.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.FilterTokenRenderer') ) {
/*!

* SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved

*/
jQuery.sap.declare('sap.ui.mdc.base.FilterTokenRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/FilterTokenRenderer",['jquery.sap.global', 'sap/ui/core/Renderer'],
	function(jQuery, Renderer) {
		"use strict";


		/**
		 * Token renderer.
		 * @namespace
		 */
		var FilterTokenRenderer = Renderer.extend("sap.ui.mdc.base.FilterTokenRenderer");

		/**
		 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
		 *
		 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
		 */
		FilterTokenRenderer.render = function(oRm, oControl) {
			// write the HTML into the render manager
			oRm.write("<div tabindex=\"-1\"");
			oRm.writeControlData(oControl);
			oRm.addClass("sapMToken");
			oRm.addClass("sapMFilterToken");

			oRm.writeAttribute("role", "listitem");
			oRm.writeAttribute("aria-readonly", !oControl.getEditable());
			oRm.writeAttribute("aria-selected", oControl.getSelected());

			if (oControl.getSelected()) {
				oRm.addClass("sapMTokenSelected");
			}

			if (!oControl.getEditable()) {
				oRm.addClass("sapMTokenReadOnly");
			}

			oRm.writeClasses();

			// add tooltip if available
			var sTooltip = oControl.getTooltip_AsString();
			if (sTooltip) {
				oRm.writeAttributeEscaped("title", sTooltip);
			}

			var oAccAttributes = {}; // additional accessibility attributes

			//ARIA attributes
			oAccAttributes.describedby = {
				value: oControl._sAriaTokenLabelId,
				append: true
			};

			if (oControl.getEditable()) {
				oAccAttributes.describedby = {
					value: oControl._sAriaTokenDeletableId,
					append: true
				};
			}

			oRm.writeAccessibilityState(oControl, oAccAttributes);

			oRm.write(">");

			this._renderInnerControl(oRm, oControl);

			if (oControl.getEditable()) {
				oRm.renderControl(oControl._deleteIcon);
			}

			oRm.write("</div>");
		};

		FilterTokenRenderer._renderInnerControl = function(oRm, oControl) {
			var sTextDir = oControl.getTextDirection();

			oRm.write("<div");
			oRm.addClass("sapMTokenText");
			oRm.addClass("sapMFilterTokenText");

			oRm.writeStyles();
			oRm.writeClasses();
			// set text direction
			if (sTextDir !== sap.ui.core.TextDirection.Inherit) {
				oRm.writeAttribute("dir", sTextDir.toLowerCase());
			}
			oRm.writeAttribute("tabIndex", "-1");
			oRm.write(">");
			oRm.writeEscaped(oControl.getText());
			oRm.write("</div>");
		};


		return FilterTokenRenderer;

	}, /* bExport= */ true);
}; // end of sap/ui/mdc/base/FilterTokenRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.FixedValueListProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.base.FixedValueListProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/FixedValueListProvider",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {
		"use strict";

		/**
		 *
		 * @class simple item list Provider for FilterField.
		 * @extends sap.ui.base.Object
		 *
		 * @author SAP SE
		 * @version 1.52.7
		 * @since 1.48.0
		 * @alias sap.ui.mdc.base.FixedValueListProvider
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var FixedValueListProvider = BaseObject.extend("sap.ui.mdc.base.FixedValueListProvider", /** @lends sap.ui.mdc.base.FixedValueListProvider.prototype */ {

			constructor: function(mParameters) {
				BaseObject.apply(this);

				this._bShowAll = true;
				this._bShowHint = false;

				if (mParameters) {
					this._fInit = mParameters.init;
					this._fSuggest = mParameters.suggest;
					this._fSelect = mParameters.select;
					this._bShowAll = mParameters.enableShowAll !== undefined ? mParameters.enableShowAll : true;
					this._bShowHint = mParameters.showHint !== undefined ? mParameters.showHint : false;
					this._maxWidth = mParameters.maxWidth;
					this._bEnableFilterSuggest = mParameters.enableFilterSuggest;
					this._keyPath = mParameters.keyPath;
					this._descriptionPath = mParameters.descriptionPath;
					if (mParameters.control) {
						this.associateFilterField(mParameters.control);
					}
				}

			}
		});

		FixedValueListProvider.prototype.destroy = function() {
			this._oFilterField = null;
			this._oInput = null;
			this._oTable = null;
		};

		FixedValueListProvider.prototype.getTable = function() {
			return this._oTable;
		};

		FixedValueListProvider.prototype.setKeyPath = function(sKeyPath) {
			this._keyPath = sKeyPath;
		};

		FixedValueListProvider.prototype.setDescriptionPath = function(sDescriptionPath) {
			this._descriptionPath = sDescriptionPath;
		};

		FixedValueListProvider.prototype.setTable = function(oTable) {
			this._oTable = oTable;

			var oMultiInput = this._oFilterField.getAggregation("_input");

			// remove old suggestion list
			oMultiInput.removeAllSuggestionColumns();
			oMultiInput.removeAllSuggestionRows();

			if (oTable) {
				var oBindingInfo = oTable.getBindingInfo("items");

				var aColumns = oTable.getColumns();
				for (var i = 0; i < aColumns.length; i++) {
					var oColumn = aColumns[i].clone();
					oMultiInput.addSuggestionColumn(oColumn);
				}
				oMultiInput.setMaxSuggestionWidth(this._maxWidth ? this._maxWidth : (aColumns.length * 8 + 2) + "em");

				oMultiInput.setModel(oTable.getModel());

				oMultiInput.bindAggregation("suggestionRows", {
					path: oBindingInfo.path,
					template: oBindingInfo.template,
					parameters: oBindingInfo.parameters
				});
			} else {
				oMultiInput.bindAggregation("suggestionRows", null);
			}
		};

		FixedValueListProvider.prototype.associateFilterField = function(oFilterField) {
			this._oFilterField = oFilterField;
			this._oInput = oFilterField.getAggregation("_input");

			if (!this._oInput) {
				var that = this;
				setTimeout(function() { that.associateFilterField(oFilterField); }, 100);
				return;
			}

			if (!(this._oInput instanceof sap.m.MultiInput)) {
				jQuery.sap.log.error("mdc:FixedValueListProvider", "associateFilterField for " + (this._oInput ? this._oInput.getId() : "none") + " not possible!");
				return;
			}

			this._oInput.setShowSuggestion(true);
			this._oInput.setEnableSuggestionsHighlighting(false);
			this._oInput.setFilterSuggests(this._bEnableFilterSuggest);
			this._oInput.setShowTableSuggestionValueHelp(false);
			if (this._bShowHint) {
				this._oInput.setPlaceholder("press space to get help");
			}

			// if (oFilterField.getMaxConditions() == 1) {
			//TODO workaround to change the valueHelpIcon
			this._oInput._getValueHelpIcon = function() {
				var _oValueHelpIcon = sap.m.MultiInput.prototype._getValueHelpIcon.apply(this, arguments);

				if (_oValueHelpIcon) {
					_oValueHelpIcon.setSrc(sap.ui.core.IconPool.getIconURI("slim-arrow-down"));
				}
				return _oValueHelpIcon;
			};

			//TODO workaround to open the suggest - simulates the open trigger 
			this._oInput.attachValueHelpRequest(function(oEvent) {
				var oInner = oEvent.oSource;
				oInner._$input.val(" ");
				oInner._triggerSuggest(" ");
			});
			// }

			this._oInput.attachSuggest(function(oEvent) {
				if (this._fInit && !this.getTable()) {
					this._fInit(this);
				}
				if (this._fSuggest) {
					this._fSuggest(this, oEvent);
				}
			}.bind(this));

			this._oInput.setFilterFunction(function(sValue, oItem) {
				var bShowAll = (sValue.lastIndexOf(" ") == sValue.length - 1) && this._bShowAll;
				sValue = sValue.trim();
				if (bShowAll) {
					return true;
				}
				return sap.m.Input._DEFAULTFILTER_TABULAR(sValue, oItem);
			}.bind(this));

			this._oInput.addValidator(function(oData) {
				var sText = oData.text,
					oRow = oData.suggestionObject,
					oSource = this._oInput,
					oBinding = this._oFilterField.getBinding("conditions"),
					oType = this._oFilterField._getDataType(),
					type = oType.getMetadata().getName(),
					oOperator, oCondition,
					sFieldPath = this._oFilterField.getFieldPath(),
					oDataModelRow, sKey, sDescription, sValue;

				if (oRow) {
					if (this._fSelect) {
						if (this._fSelect(this, oData)) {
							return null;
						}
					}

					// handle the selected item as EEQ with key
					var bc = oRow.getBindingContext();
					oDataModelRow = bc.getObject();

					sKey = this._keyPath && oDataModelRow[this._keyPath] ? oDataModelRow[this._keyPath] : null;
					sDescription = this._descriptionPath && oDataModelRow[this._descriptionPath] ? oDataModelRow[this._descriptionPath] : null;
					sValue = "==" + sKey;

					oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
					if (oOperator && oOperator.test(sValue, oType)) {
						oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sKey, sDescription));
						oSource.setValue("");
						this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
					}
				} else {
					jQuery.sap.log.info("mdc:FixedValueListProvider", "validator check if one suggestionRow exist for " + sText);

					if (oSource._getIsSuggestionPopupOpen && oSource._getIsSuggestionPopupOpen()) {
						var aSuggestionItems = oSource.getSuggestionRows();
						var n = 0,
							i = -1;
						aSuggestionItems.some(function(oItem, index) {
							if (oItem.getVisible()) {
								n++;
								i = index;
							}
							return n >= 2;
						});
						if (n === 1) {
							oDataModelRow = aSuggestionItems[i].getBindingContext().getObject();

							if (this._fSelect) {
								oData.suggestionObject = aSuggestionItems[i];
								if (this._fSelect(this, oData)) {
									return null;
								}
							}

							sKey = this._keyPath && oDataModelRow[this._keyPath] ? oDataModelRow[this._keyPath] : null;
							sDescription = this._descriptionPath && oDataModelRow[this._descriptionPath] ? oDataModelRow[this._descriptionPath] : null;
							sValue = "==" + sKey;

							oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
							if (oOperator && oOperator.test(sValue, oType)) {
								oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sKey, sDescription));
								oSource.setValue("");
								this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
								return null;
							}
						}
					}

					// first try to check if the input match to an operator
					var aOperators = this._oFilterField.getFilterOperatorConfig().getMatchingOperators(type, sText);

					// use default operator if nothing found
					if (aOperators.length !== 0) {
						oOperator = aOperators[0];
						oCondition = oOperator.getCondition(sText, oType);
						if (oCondition) {
							oCondition.fieldPath = sFieldPath;
							oBinding.getModel().addCondition(oCondition);
							oSource.setValue("");
							this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
							return null;
						}
					}

					// handle the input as a full key value and EEQ
					oSource.setValue("");
					jQuery.sap.delayedCall(100, this, function() {
						var sValue = "==" + sText;

						var oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
						if (oOperator && oOperator.test(sValue, oType)) {
							oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sText, sText));
							this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
						}
					});
				}

				return null;
			}.bind(this));

		};

		return FixedValueListProvider;
	},
	/* bExport= */
	true);
}; // end of sap/ui/mdc/base/FixedValueListProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.ODataSuggestProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.base.ODataSuggestProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/ODataSuggestProvider",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {
		"use strict";

		/**
		 *
		 * @class OData Model based Suggest Provider for FilterField.
		 * @extends sap.ui.base.Object
		 *
		 * @author SAP SE
		 * @version 1.52.7
		 * @since 1.48.0
		 * @alias sap.ui.mdc.base.ODataSuggestProvider
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var ODataSuggestProvider = BaseObject.extend("sap.ui.mdc.base.ODataSuggestProvider", /** @lends sap.ui.mdc.base.ODataSuggestProvider.prototype */ {

			constructor: function(mParameters) {
				BaseObject.apply(this);

				this._bShowAll = true;
				this._bShowHint = false;

				if (mParameters) {
					this._fInit = mParameters.init;
					this._fSuggest = mParameters.suggest;
					this._fSelect = mParameters.select;
					this._bShowAll = mParameters.enableShowAll !== undefined ? mParameters.enableShowAll : true;
					this._bShowHint = mParameters.showHint !== undefined ? mParameters.showHint : false;
					this._maxWidth = mParameters.maxWidth;
					this._bEnableFilterSuggest = mParameters.enableFilterSuggest;
					this._keyPath = mParameters.keyPath;
					this._descriptionPath = mParameters.descriptionPath;
					if (mParameters.control) {
						this.associateFilterField(mParameters.control);
					}
				}

			}
		});

		ODataSuggestProvider.prototype.destroy = function() {
			this._oFilterField = null;
			this._oInput = null;
			this._oTable = null;
		};

		ODataSuggestProvider.prototype.getTable = function() {
			return this._oTable;
		};

		ODataSuggestProvider.prototype.setKeyPath = function(sKeyPath) {
			this._keyPath = sKeyPath;
		};

		ODataSuggestProvider.prototype.setDescriptionPath = function(sDescriptionPath) {
			this._descriptionPath = sDescriptionPath;
		};

		ODataSuggestProvider.prototype.setTable = function(oTable) {
			this._oTable = oTable;

			var oMultiInput = this._oFilterField.getAggregation("_input");

			// remove old suggestion list
			oMultiInput.removeAllSuggestionColumns();
			oMultiInput.removeAllSuggestionRows();

			if (oTable) {
				var oBindingInfo = oTable.getBindingInfo("items");

				var aColumns = oTable.getColumns();
				for (var i = 0; i < aColumns.length; i++) {
					var oColumn = aColumns[i].clone();
					oMultiInput.addSuggestionColumn(oColumn);
				}
				oMultiInput.setMaxSuggestionWidth(this._maxWidth ? this._maxWidth : (aColumns.length * 8 + 2) + "em");

				oMultiInput.setModel(oTable.getModel());

				oMultiInput.bindAggregation("suggestionRows", {
					path: oBindingInfo.path,
					template: oBindingInfo.template,
					parameters: oBindingInfo.parameters
				});
			} else {
				oMultiInput.bindAggregation("suggestionRows", null);
			}
		};

		ODataSuggestProvider.prototype.associateFilterField = function(oFilterField) {
			this._oFilterField = oFilterField;
			this._oInput = oFilterField.getAggregation("_input");

			if (!this._oInput) {
				var that = this;
				setTimeout(function() { that.associateFilterField(oFilterField); }, 100);
			}

			if (!(this._oInput instanceof sap.m.MultiInput)) {
				jQuery.sap.log.error("mdc:ODataSuggestProvider", "associateFilterField for " + (this._oInput ? this._oInput.getId() : "none") + " not possible!");
				return;
			}

			this._oInput.setShowSuggestion(true);
			this._oInput.setEnableSuggestionsHighlighting(false);
			this._oInput.setFilterSuggests(this._bEnableFilterSuggest);
			this._oInput.setShowTableSuggestionValueHelp(false);
			if (this._bShowHint) {
				this._oInput.setPlaceholder("press space to get help");
			}

			this._oInput.attachSuggest(function(oEvent) {
				if (this._fInit && !this.getTable()) {
					this._fInit(this);
				}
				if (this._fSuggest) {
					this._fSuggest(this, oEvent);
				}
			}.bind(this));

			this._oInput.setFilterFunction(function(sValue, oItem) {
				var bShowAll = (sValue.lastIndexOf(" ") == sValue.length - 1) && this._bShowAll;
				sValue = sValue.trim();
				if (bShowAll) {
					return true;
				}
				return sap.m.Input._DEFAULTFILTER_TABULAR(sValue, oItem);
			}.bind(this));

			this._oInput.addValidator(function(oData) {
				var sText = oData.text,
					oRow = oData.suggestionObject,
					oSource = this._oInput,
					oBinding = this._oFilterField.getBinding("conditions"),
					oType = this._oFilterField._getDataType(),
					type = oType.getMetadata().getName(),
					oOperator, oCondition,
					sFieldPath = this._oFilterField.getFieldPath();
				var oDataModelRow;
				var sKey, sDescription, sValue;

				if (oRow) {
					if (this._fSelect) {
						if (this._fSelect(this, oData)) {
							return null;
						}
					}

					// handle the selected item as EEQ with key
					var bc = oRow.getBindingContext();
					oDataModelRow = bc.getObject();

					sKey = this._keyPath && oDataModelRow[this._keyPath] ? oDataModelRow[this._keyPath] : null;
					sDescription = this._descriptionPath && oDataModelRow[this._descriptionPath] ? oDataModelRow[this._descriptionPath] : null;
					sValue = "==" + sKey;

					jQuery.sap.log.info("mdc:ODataSuggestProvider", "validator suggestionObject handled sValue " + sValue);

					oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
					if (oOperator && oOperator.test(sValue, oType)) {
						oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sKey, sDescription));
						oSource.setValue("");
						this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
					}
				} else {
					jQuery.sap.log.info("mdc:ODataSuggestProvider", "validator check if one suggestionRow exist for " + sText);

					if (oSource._getIsSuggestionPopupOpen && oSource._getIsSuggestionPopupOpen()) {
						var aSuggestionItems = oSource.getSuggestionRows();
						var n = 0,
							i = -1;
						aSuggestionItems.some(function(oItem, index) {
							if (oItem.getVisible()) {
								n++;
								i = index;
							}
							return n >= 2;
						});
						if (n === 1) {
							oDataModelRow = aSuggestionItems[i].getBindingContext().getObject();

							if (this._fSelect) {
								oData.suggestionObject = aSuggestionItems[i];
								if (this._fSelect(this, oData)) {
									return null;
								}
							}

							sKey = this._keyPath && oDataModelRow[this._keyPath] ? oDataModelRow[this._keyPath] : null;
							sDescription = this._descriptionPath && oDataModelRow[this._descriptionPath] ? oDataModelRow[this._descriptionPath] : null;
							sValue = "==" + sKey;

							oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
							if (oOperator && oOperator.test(sValue, oType)) {
								oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sKey, sDescription));
								oSource.setValue("");
								this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
								return null;
							}
						}
					}

					jQuery.sap.log.info("mdc:ODataSuggestProvider", "validator text handled " + sText);

					// first try to check if the input match to an operator
					var aOperators = this._oFilterField.getFilterOperatorConfig().getMatchingOperators(type, sText);

					// use default operator if nothing found
					if (aOperators.length !== 0) {
						oOperator = aOperators[0];
						oCondition = oOperator.getCondition(sText, oType);
						if (oCondition) {
							oCondition.fieldPath = sFieldPath;
							oBinding.getModel().addCondition(oCondition);
							oSource.setValue("");

							this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
							return null;
						}
					}

					// handle the input as a full key value and EEQ
					oSource.setValue("");
					jQuery.sap.delayedCall(100, this, function() {
						var sValue = "==" + sText;

						jQuery.sap.log.info("mdc:ODataSuggestProvider", "validator EEQ text handling " + sValue);

						var oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
						if (oOperator && oOperator.test(sValue, oType)) {
							oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sText, sText));
							this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
						}
					});
				}

				return null;
			}.bind(this));

		};

		return ODataSuggestProvider;
	},
	/* bExport= */
	true);
}; // end of sap/ui/mdc/base/ODataSuggestProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.OperatorSuggestProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.base.OperatorSuggestProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/OperatorSuggestProvider",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {
		"use strict";

		/**
		 *
		 * @class Operator Suggest Provider for FilterField. Makes all type specific operators available via suggest.
		 * @extends sap.ui.base.Object
		 *
		 * @author SAP SE
		 * @version 1.52.7
		 * @since 1.48.0
		 * @alias sap.ui.mdc.base.OperatorSuggestProvider
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var OperatorSuggestProvider = BaseObject.extend("sap.ui.mdc.base.OperatorSuggestProvider", /** @lends sap.ui.mdc.base.OperatorSuggestProvider.prototype */ {

			constructor: function(mParameters) {
				BaseObject.apply(this);

				this._bShowAll = true;
				this._bShowHint = false;

				if (mParameters) {
					this._bShowAll = mParameters.enableShowAll !== undefined ? mParameters.enableShowAll : true;
					this._bShowHint = mParameters.showHint !== undefined ? mParameters.showHint : false;
					if (mParameters.control) {
						this.associateFilterField(mParameters.control);
					}
				}

			}
		});

		OperatorSuggestProvider.prototype.destroy = function() {
			this._oFilterField = null;
			this._oInput = null;
		};

		OperatorSuggestProvider.prototype.associateFilterField = function(oFilterField) {
			this._oFilterField = oFilterField;
			this._oInput = oFilterField.getAggregation("_input");

			if (!this._oInput) {
				var that = this;
				setTimeout(function() { that.associateFilterField(oFilterField); }, 100);
			}

			if (!(this._oInput instanceof sap.m.MultiInput)) {
				jQuery.sap.log.error("mdc:OperatorSuggestProvider", "associateFilterField for " + (this._oInput ? this._oInput.getId() : "null") + " not possible!");
				return;
			}
			this._oInput.setShowSuggestion(true);
			this._oInput.setFilterSuggests(true);
			this._oInput.setEnableSuggestionsHighlighting(false);
			this._oInput.setMaxLength(0);
			this._oInput.setMaxSuggestionWidth("auto");
			if (this._bShowHint) {
				this._oInput.setPlaceholder("press space to get help");
			}
			this._aOperators = [];

			this._oInput.bindAggregation("suggestionItems", {
				path: "suggest>/",
				template: new sap.ui.core.ListItem({
					key: "{suggest>key}",
					text: "{suggest>text}",
					additionalText: "{suggest>additionalText}"
				}),
				templateShareable: false
			});

			this._oInput.attachSuggest(function(oEvent) {

				if (this._aOperators.length === 0) {
					// var sTerm = oEvent.getParameter("suggestValue");
					var oOperatorConfig = this._oFilterField.getFilterOperatorConfig();
					var aOperators = oOperatorConfig.getOperatorsForType(this._oFilterField._getDataType().getMetadata().getName());

					aOperators.forEach(function(element) {
						var oOperator = oOperatorConfig.getOperator(element);
						if (oOperator.showInSuggest !== undefined && oOperator.showInSuggest == false) {
							return;
						}
						var sTxtKey = oOperator.textKey || "operators." + oOperator.name + ".longText";
						var sText = oOperator.getTypeText(sTxtKey, this._oFilterField._getDataType().getName().toLowerCase());
						if (sText === sTxtKey) {
							sText = oOperator.longText;
						}
						this._aOperators.push({
							key: element,
							additionalText: sText
						});
					}, this);

					var oSuggestModel = new sap.ui.model.json.JSONModel();
					oSuggestModel.setData(this._aOperators);
					this._oInput.setModel(oSuggestModel, "suggest");
				}
			}.bind(this));

			this._oInput.addValidator(function(oData) {
				//TODO This empty validator is required!!!
				// if we remove it the multiInpupt will automatically create a token when you enter a simple value without operator.
			});

			this._oInput.setFilterFunction(function(sValue, oItem) {
				var sKey = oItem.getKey();
				var oType = this._oFilterField._getDataType();
				var type = oType.getMetadata().getName();
				var bShowAll = true;
				var sExample;

				sValue = sValue.trim();

				var oOperatorConfig = this._oFilterField.getFilterOperatorConfig();

				var aOperators = oOperatorConfig.getMatchingOperators(type, sValue);
				if (aOperators.length !== 0) {
					bShowAll = false;
				}

				var oOperator = oOperatorConfig.getOperator(sKey);
				if (oOperator) {

					if (bShowAll && this._bShowAll) {
						var v1 = sValue,
							v2 = "";
						if (v1 === "") {
							//TODO workaround for default value in suggest 
							//TODO getName() from the odata.type returns the fullname and not only "Date"
							if (oType.getName() === "Date") {
								v1 = new Date();
							} else if (oType.getName() === "Integer") {
								v1 = 123;
							} else if (oType.getName() === "Float") {
								v1 = 123.45;
							} else if (oType.getName() === "Boolean") {
								v1 = true;
							} else {
								v1 = "abc";
							}
						}
						if (v2 === "") {
							//TODO workaround for default value in suggest 
							//TODO getName() from the odata.type returns the fullname and not only "Date"
							if (oType.getName() === "Date") {
								v2 = new Date();
								if (typeof v1 === "string") {
									v2.setFullYear(v2.getFullYear() + 1);
									v2 = oType.formatValue(v2, "string");
								} else {
									v2.setFullYear(v1.getFullYear() + 1);
								}
							} else if (oType.getName() === "Integer") {
								v2 = v1 + 1000;
							} else if (oType.getName() === "Float") {
								v2 = v1 + 1000;
							} else if (oType.getName() === "Boolean") {
								v2 = false;
							} else {
								v2 = "xyz";
							}
						}

						try {
							sExample = oOperator.format([v1, v2], null, typeof v1 === "string" ? null : oType);
						} catch (error) {
							sExample = oOperator.format([]);
						}
						oItem.setText(sExample);
						return true;
					}

					if (oOperator.test(sValue, oType)) {
						var aValues = oOperator.parse(sValue, oType);
						sExample = oOperator.format(aValues, null, oType);
						oItem.setText(sExample);
						return true;
					}
					return false;
				} else {
					return false;
				}
			}.bind(this));

		};

		return OperatorSuggestProvider;
	},
	/* bExport= */
	true);
}; // end of sap/ui/mdc/base/OperatorSuggestProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.ValueHelpDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.base.ValueHelpDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.XMLComposite'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/ValueHelpDialog",[
	'jquery.sap.global',
	'sap/ui/core/XMLComposite'
], function(jQuery, XMLComposite) {
	"use strict";

	// TODO: the metadata context shall not be needed here???
	var ValueHelpDialog = XMLComposite.extend("sap.ui.mdc.base.ValueHelpDialog", {
		metadata: {
			properties: {
				title: {
					type: "string",
					invalidate: false
				}
			},
			aggregations: {
				// We do not need this!!!! it is only used in  the mergedConditions function via the Ok button.
				conditionModel: { type: "sap.ui.mdc.base.ConditionModel", multiple: false }
			},
			events: {},
			publicMethods: []
		},

		alias: "this",
		fragment: "sap.ui.mdc.base.ValueHelpDialog"
	});


	ValueHelpDialog.prototype.init = function() {
		if (this.get_content() instanceof sap.m.Dialog) {
			var oDialog = this.get_content();
			oDialog.setBusyIndicatorDelay(0);
			oDialog.setBusy(true);
			//ValueHelp control destroyed(the XML composite control)
			oDialog.attachAfterClose(function(oEvent) {
				this.destroy();
			}.bind(this));
		}
	};

	ValueHelpDialog.prototype.open = function() {
		return this.get_content().open();
	};

	ValueHelpDialog.prototype.close = function() {
		this.get_content().close();
	};

	ValueHelpDialog.prototype.addContent = function(oContent) {
		var oDialog = this.get_content();
		oDialog.addContent(oContent);
		return oDialog.setBusy(false);
	};

	ValueHelpDialog.prototype.onOk = function() {
		var oDialog = this.get_content();
		var sLocalFieldPath = oDialog.getContent()[0].getController().sFieldPath;
		var oLocalCMModel = oDialog.getContent()[0].getModel("cm");
		var oConditionModel = this.getConditionModel();
		oConditionModel.merge(sLocalFieldPath, oLocalCMModel);
		oDialog.close();
	};

	ValueHelpDialog.prototype.onCancel = function() {
		this.close();
	};

	ValueHelpDialog.prototype.onReset = function() {
		var oDialog = this.get_content();
		var sLocalFieldPath = oDialog.getContent()[0].getController().sFieldPath;
		var oConditionModel = oDialog.getContent()[0].getModel("cm");
		var oTableConditionModel = oDialog.getContent()[0].getModel("vltcm");
		var oFilterLayoutFlag = oDialog.getContent()[0].getModel("FilterLayoutFlag");
		var oFieldPaths = oTableConditionModel.getData().sFieldPath;

		//Clearing Conditions in main Value Help condition model
		oConditionModel.removeAllConditions(sLocalFieldPath);

		//Clearing all conditions from Value help table condition model
		if (oFieldPaths) {
			for (var sTableFieldPath in oFieldPaths) {
				oTableConditionModel.removeAllConditions(sTableFieldPath);
			}
		}

		oFilterLayoutFlag.setProperty("/sSearchFieldValue", "");
		oFilterLayoutFlag.setProperty("/visible", "HideMode");
		oFilterLayoutFlag.setProperty("/listView", false);
		oFilterLayoutFlag.setProperty("/tableView", true);
		oFilterLayoutFlag.setProperty("/sSelectedRowCount", 0);

		oDialog.getContent()[0].getController().updateTableSelections();
		//		oDialog.getContent()[0].getController().updateDefineConditions();
	};

	return ValueHelpDialog;

}, /* bExport= */ true);
}; // end of sap/ui/mdc/base/ValueHelpDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.type.DateRange') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.base.type.DateRange'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.CompositeType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FormatException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/type/DateRange",[
	"jquery.sap.global",
	"sap/ui/model/CompositeType",
	"sap/ui/model/FormatException",
	"sap/ui/model/ParseException"
], function(jQuery, CompositeType, FormatException, ParseException) {
	"use strict";

	var DateRange = CompositeType.extend("sap.ui.mdc.base.type.DateRange", {
		constructor: function(oFormatOptions, oConstraints) {
			CompositeType.call(this, oFormatOptions, oConstraints);
		}
	});

	DateRange.prototype.formatValue = function(aValues, sTargetType) {
		if (!aValues || (!aValues[0] && !aValues[1])) {
			return null;
		}
		switch (sTargetType) {
			case "any":
				return aValues;
			case "string":
				return aValues.join(" - ");
			default:
				throw new FormatException("Don't know how to format " + this.getName() + " to " +
					sTargetType);
		}
	};

	DateRange.prototype.parseValue = function(sValue, sSourceType) {
		if (sValue === null || sValue === "") {
			return null;
		}
		switch (sSourceType) {
			case "string":
				return sValue.split(" - ");
			default:
				throw new ParseException("Don't know how to parse " + this.getName() + " from " +
					sSourceType);
		}
	};

	DateRange.prototype.validateValue = function(aValues) {
		//TODO what could be usefully checked here? the parts are validated by their type, I hope...
	};

	return DateRange;
});
}; // end of sap/ui/mdc/base/type/DateRange.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.Action') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.Action'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/Action",[
	'sap/m/Button',
	'sap/m/library'
], function (Button, mLibrary) {
	"use strict";

	var ButtonType = mLibrary.ButtonType;

	var Button = Button.extend("sap.ui.mdc.experimental.Action", {
		metadata: {
			properties: {
				actionName: "string",
				emphasized: 'boolean',
				mode: 'string',           // TODO: create enum: Inline / Isolated / ChangeSet etc
				multiplicityFrom: {
					type: "int"
				},
				multiplicityTo: {
					type: "int"
				}

			},
			events: {
				"callAction": {}
			}
		},

		onBeforeRendering: function () {
			if (this.getEmphasized()) {
				this.setType(ButtonType.Emphasized);
			}
		},

		onclick: function (evt) {
			this.fireCallAction({
				actionName: this.getActionName(),
				actionLabel: this.getText()
			});
		},

		renderer: {}
	});

	return Button;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/Action.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.ControlSelector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.experimental.ControlSelector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/ControlSelector",['jquery.sap.global', 'sap/ui/core/Control'
], function(jQuery, Control) {
	"use strict";

	/**
	 * Provides a declarative factory for a control list that selects one of the given controls based on a selected index.
	 * This index can be bound and can have a formatter/expression to decide which index of the content aggregation should be shown and cloned if used as a template.
	 *
	 * In case the ControlSelector is used a a template the cloned instances keep a reference to the original template.
	 * Changing the original ControlSelectors index will update all clones created from it.
	 *
	 * By setting the reuseControls property the ControlSelector will reuse old clones that are no longer used instead of creating new clones for
	 * the same index. This is an experimental feature and should not yet be used
	 *
	 * A ControlSelector can act as a proxy to another control selector if the association "use" is set.
	 * Then the ControlSelector uses the associated control selector to return instances and clones.
	 * It is not possible to have at the same time individual content control and associate another ControlSelector.
	 * It is not possible to nest a ControlSelector another control selector directly.
	 *
	 * @since 1.46.0
	 * @private
	 * */
	var ControlSelector = Control.extend("sap.ui.mdc.experimental.ControlSelector", /* @lends sap.ui.mdc.experimental.ControlSelector.prototype */ {
		constructor : function() {
			Control.apply(this, arguments);
		},
		metadata: {
			properties : {
				/**
				 * The index of the selected content instance used for the ControlSelector.
				 */
				selectedIndex : {
					type: "int",
					defaultValue: -1
				},
				/**
				 * The index used as the default index if index refers to a not existing index
				 */
				defaultIndex : {
					type: "int",
					defaultValue: 0
				},
				/**
				 * Sets whether the ControlSelector should render its own root dem element.
				 * If set to false the dom reference of the inner control is used to render and rerender the ControlSelector
				 */
				renderRoot : {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Sets whether the ControlSelector should reuse old clones of an index instead of creating new instances.
				 * This property is only taken into account if the ControlSelector is used as a template of a list binding.
				 * @experimental
				 */
				reuseControls : {
					type: "boolean",
					defaultValue: false
				}
			},
			aggregations : {
				/**
				 * List of content controls of the control selector.
				 */
				content : {
					type : "sap.ui.core.Control",
					multiple : true
				},
				/**
				 * Currently selected content control based on the index
				 * @private
				 */
				_current : {
					type : "sap.ui.core.Control",
					multiple : false,
					hidden: true
				}
			},
			associations: {
				/**
				 * Reference to another ControlSelector instance that is defined elsewhere.
				 * If
				 */
				use: {
					type: "sap.ui.mdc.ControlSelector",
					multiple: false
				}
			},
			defaultAggregation: "content"
		},
		renderer: function(oRm, oControl) {
			//simple renderer to render the content. this is always a clone therefore only one content is contained.
			var oContent = oControl.getCurrentContent(),
				bRenderRoot = oControl.getRenderRoot();
			if (!bRenderRoot && oContent && oContent.getVisible()) {
				var oDomRef = oControl.getDomRef();
				if (jQuery.sap.log.isLoggable(jQuery.sap.log.Level.DEBUG) && oDomRef) {
					oRm.write("<!-- sap.ui.mdc.experimental.ControlSelector with id='" + oControl.getId() + "' and renderRoot=false, used old id='" + oDomRef.id + "' for rerendering -->");
					if (oDomRef.previousSibling && oDomRef.previousSibling.nodeType === 8) {
						oDomRef.previousSibling.parentNode.removeChild(oDomRef.previousSibling);
					}
				}
				if (oDomRef) {
					oDomRef.parentNode.removeChild(oDomRef);
				}
				oRm.renderControl(oContent);
				oControl._sOldId = oContent.getId();
			} else {
				oRm.write("<div ");
				if (!bRenderRoot) {
					oRm.write(" style=\"display:none\"");
				}
				oRm.writeControlData(oControl);
				oRm.write(">");
				if (bRenderRoot) {
					oRm.renderControl(oContent);
				}
				oRm.write("</div>");
			}
		}
	});

	var byId = sap.ui.getCore().byId;
	var iCloneIndex = -1;

	ControlSelector.prototype.init = function() {
		//the main instance is used to create clones. keep a reference to the clones created from the main instance
		this._mClones = null;
		this._sOldId = null;
		this._oFree = {};
	};

	/**
	 * Sets the current control
	 * @param {sap.ui.core.Control} oCurrent the current control
	 * @private
	 */
	ControlSelector.prototype._setCurrent = function(oCurrent) {
		this.setAggregation("_current", oCurrent);
	};

	/**
	 * Returns the dom reference of the ControlSelector.
	 * If renderRoot is set to false the dom ref of the currently selected control inner control is
	 * used.
	 * @returns {DOMElement} the dom element
	 * @private
	 */
	ControlSelector.prototype.getDomRef = function() {
		var oDomRef = jQuery.sap.domById(this.getId());
		if (oDomRef || this.getRenderRoot()) {
			return oDomRef;
		} else if (this._sOldId) {
			return jQuery.sap.domById(this._sOldId);
		}
		return null;
	};

	/**
	 * Sets the template reference to a clone and applies the current control from the template if there is no current content
	 * @param oTemplate
	 * @param iIndex
	 * @private
	 */
	ControlSelector.prototype._setTemplate = function(oTemplate, iIndex) {
		this.oTemplate = oTemplate;
		if (!this.getAggregation("_current")) {
			var oCurrent = this.oTemplate._getCurrent(iIndex);
			if (oCurrent) {
				this._setCurrent(oCurrent.clone(this.getId() + "-content"));
				this.setProperty("selectedIndex", iIndex, true);
			} else {
				this.oTemplate._unregisterClone(this);
				this.destroyContent();
			}
		}
	};

	/**
	 * Validates the aggregation.
	 * If ControlSelectors are nested within ControlSelectors this method throws an error.
	 *
	 * @param sName
	 * @param oObject
	 * @returns
	 */
	ControlSelector.prototype.validateAggregation = function(sName, oObject) {
		var oResult = Control.prototype.validateAggregation.apply(this, arguments);
		if (sName === "content" && oObject instanceof ControlSelector) {
			throw new Error("sap.ui.mdc.experimental.ControlSelector cannot be used as content of another sap.ui.mdc.experimental.ControlSelector");
		}
		return oResult;
	};

	/**
	 * Returns the index of the pool instance
	 * @experimental
	 * @param iValue
	 * @returns {Number}
	 * @private
	 */
	ControlSelector.prototype._getPoolIndex = function(iValue) {
		if (!this.oTemplate) {
			return 0;
		}
		var aContent = this.oTemplate.getContent();
		if (!aContent || iValue < 0 || iValue >= aContent.length - 1) {
			iValue = 0;
		}
		return iValue;
	};

	/**
	 * Retunrs the current instance
	 * @param iValue
	 * @returns
	 * @private
	 */
	ControlSelector.prototype._getCurrentInstance = function(iIndex) {
		var iPoolIndex = this._getPoolIndex(iIndex),
			oCurrentInstance = null;
		if (this.oTemplate.getReuseControls() && this.oTemplate._oFree[iPoolIndex] && this.oTemplate._oFree[iPoolIndex].length) {
			oCurrentInstance = this.oTemplate._oFree[iPoolIndex].pop();
		} else {
			var oCurrent = this.oTemplate._getCurrent(iIndex);
			if (oCurrent) {
				oCurrentInstance = oCurrent.clone(this.getId() + "-" + iCloneIndex + "-content");
			}
			iCloneIndex++;
		}
		return oCurrentInstance;
	};

	/**
	 * Sets the index that should be used for the current instance, if the instance is not a clone update all clones with the new index
	 * @param iIndex
	 * @returns {ControlSelector}
	 * @pivate
	 */
	ControlSelector.prototype.setSelectedIndex = function(iIndex) {
		var iOldIndex = this.getSelectedIndex();
		this.setProperty("selectedIndex", iIndex, true);
		if (iOldIndex != iIndex) {
			if (this.oTemplate) {
				var oContent = this.getAggregation("_current");
				if (oContent) {
					if (this.oTemplate.getReuseControls()) {
						var iPoolIndex = this._getPoolIndex(iOldIndex);
						if (!this.oTemplate._oFree[iPoolIndex]) {
							this.oTemplate._oFree[iPoolIndex] = [];
						}
						this.oTemplate._oFree[iPoolIndex].push(oContent);
					} else {
						oContent.destroy("KeepDom");
					}
				}
				var oCurrent = this._getCurrentInstance(iIndex);
				if (oCurrent) {
					this._setCurrent(oCurrent);
				}
			} else {
				if (this._mClones) {
					for (var n in this._mClones) {
						byId(n).setSelectedIndex(iIndex);
					}
				} else {
					this.invalidate();
				}
			}
		}
		return this;
	};

	/**
	 * Registers a clone.
	 * @param oInstance
	 * @private
	 */
	ControlSelector.prototype._registerClone = function(oInstance) {
		if (!this._mClones) {
			this._mClones = {};
			this._attachModifyAggregation("content", this._updateClones, this);
		}
		this._mClones[oInstance.getId()] = null;
	};

	/**
	 * Unregisters a clone
	 * @param oInstance
	 * @private
	 */
	ControlSelector.prototype._unregisterClone = function(oInstance) {
		if (this._mClones) {
			if (typeof oInstance === "string") {
				delete this._mClones[oInstance];
			} else if (oInstance instanceof Control) {
				delete this._mClones[oInstance.getId()];
			}
			if (Object.keys(this._mClones).length === 0) {
				this._detachModifyAggregation("content", this._updateClones, this);
				this._mClones = null;
			}
		}
	};

	/**
	 * Updates the clones if the content aggregation has changed
	 * The index used by the clones is not automatically shifted. Therefore it is recommended to setIndex after removal.
	 * If a newly added content becomes a valid template for the clones, it is applied immediately.
	 * Example: A column of a table currently contains only a ControlSelector with a sap.m.Text as content but the index is set to 1.
	 * As there is only a text in the content the text is rendered initially. To switch the column to edit a new content is added sap.m.Input.
	 * Now the index 1 becomes valid and all clones are updated.
	 * If the removeContent(1) is called the column switches to text again as the index 1 becomes invalid again.
	 * @private
	 *
	 */
	ControlSelector.prototype._updateClones = function() {
		if (this._mClones) {
			for (var n in this._mClones) {
				var oClone = byId(n);
				if (oClone) {
					oClone.destroyContent();
					oClone._setTemplate(this, oClone.getSelectedIndex());
				} else {
					this._unregisterClone(n);
				}
			}
		}
	};

	/**
	 * Creates a clone of the current instance. The cloned instance will keep a reference to the this instance
	 * to be able to switch the template based on the index. The cloned instance will only keep the currently selected content
	 * as the "only" content. The content itself is not cloned as cloneChildren is false.
	 * The clone is also registed at this instance to enabled the possibility to centrally change the index for all cloned instances
	 * @param sId
	 * @returns
	 * @private
	 */
	ControlSelector.prototype.clone = function(sId) {
		var oClone;
		if (!this.oTemplate) {
			//do not clone the children
			oClone = Control.prototype.clone.apply(this, [arguments[0], arguments[1], {
				cloneChildren: false,
				cloneBindings: true
			}]);
			//apply myself as template owner
			oClone._setTemplate(this, this.getSelectedIndex());
			this._registerClone(oClone);
			//register the clone
			return oClone;
		} else {
			oClone = Control.prototype.clone.apply(this, arguments);
			oClone._setTemplate(this.oTemplate, this.getSelectedIndex());
			this.oTemplate._registerClone(oClone);
			return oClone;
		}
	};

	/**
	 * Returns the current control of the ControlSelector
	 * @returns
	 * @private
	 */
	ControlSelector.prototype.getCurrentContent = function() {
		if (this.oTemplate) {
			return this.getAggregation("_current");
		} else {
			return this._getCurrent(this.getSelectedIndex());
		}
	};

	/**
	 * Returns the content of the ControlSelector.
	 * If the it has an associated ControlSelector only the currently selected instance is returned.
	 * @returns
	 * @private
	 */
	ControlSelector.prototype.getContent = function() {
		if (this.oTemplate) {
			return this.getAggregation("_current");
		}
		return this.getAggregation("content");
	};

	/**
	 * Returns the currently selected content based on given index. The index is changed via the property index, which can be databound.
	 * If no content with the given index is available the defaultIndex or 0 is used. If there is no content at all the null is returned.
	 * @param iIndex
	 * @returns
	 * @private
	 */
	ControlSelector.prototype._getCurrent = function(iIndex) {
		var aContent = this.getAggregation("content");
		if (aContent && (iIndex < 0  || iIndex >= aContent.length)) {
			jQuery.sap.log.debug("Changing index of ControlSelector to defaultIndex: current is " + iIndex);
			var iDefaultIndex = this.getDefaultIndex();
			if (iDefaultIndex < 0  || iDefaultIndex >= aContent.length) {
				jQuery.sap.log.debug("Changing index of ControlSelector to 0: current is " + iIndex);
				iIndex = 0;
			} else {
				iIndex = iDefaultIndex;
			}
		}
		if (aContent && aContent[iIndex]) {
			return aContent[iIndex];
		}
		return null;
	};


	/**
	 * Sets the use association.
	 * @param sId
	 * @private
	 */
	ControlSelector.prototype.setUse = function(sId) {
		var aContent = this.getAggregation("content");
		if (aContent && aContent.length > 0) {
			jQuery.sap.log.warning("Content is ignored for " + this.getId() + " because association 'use' is set to reference another ControlSelector instance.");
			this.destroyAggregation("content");
		}
		var oUse = byId(sId);
		if (!oUse) {
			jQuery.sap.log.warning("ControlSelector with id " + sId + " is not available.");
			return;
		}
		if (!(oUse instanceof ControlSelector)) {
			jQuery.sap.log.warning("Control with id " + sId + " is not a ControlSelector.");
			return;
		}
		this.setAssociation("use", sId);
		this.oTemplate = oUse;
		this._setTemplate(this.oTemplate, this.getSelectedIndex());
		this.oTemplate._registerClone(this);
	};

	/**
	 * Destroys the ControlSelector and all clones that were created based on it.
	 * @private
	 */
	ControlSelector.prototype.destroy = function() {
		if (this._mClones) {
			for (var n in this._mClones) {
				var oClone = byId(n);
				if (oClone) {
					oClone.destroy();
				}
			}
		} else if (this.oTemplate) {
			this.oTemplate._unregisterClone(this);
		}
		Control.prototype.destroy.apply(this, arguments);
	};

	return ControlSelector;

}, /* bExport= */true);


}; // end of sap/ui/mdc/experimental/ControlSelector.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.DataObjectMetadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.experimental.DataObjectMetadata
jQuery.sap.declare('sap.ui.mdc.experimental.DataObjectMetadata'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Metadata'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/DataObjectMetadata",['jquery.sap.global', 'sap/ui/base/DataType', 'sap/ui/base/Metadata'],
	function(jQuery, DataType, Metadata) {
	"use strict";

	/**
	 * Creates a new metadata object that describes a subclass of DataObject.
	 *
	 * @author SAP SE
	 * @version 1.52.7
	 * @since 1.46.0
	 * @alias sap.ui.experimental.DataObjectMetadata
	 * @experimental
	 * @private
	 */
	var DataObjectMetadata = function(sClassName, oClassInfo) {

		// call super constructor
		Metadata.apply(this, arguments);

	};

	// chain the prototypes
	DataObjectMetadata.prototype = Object.create(Metadata.prototype);

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function capitalize(sName) {
		return sName.charAt(0).toUpperCase() + sName.slice(1);
	}

//	var rPlural = /(children|ies|ves|oes|ses|ches|shes|xes|s)$/i;
//	var mSingular = {'children' : -3, 'ies' : 'y', 'ves' : 'f', 'oes' : -2, 'ses' : -2, 'ches' : -2, 'shes' : -2, 'xes' : -2, 's' : -1 };

//	function guessSingularName(sName) {
//		return sName.replace(rPlural, function($,sPlural) {
//			var vRepl = mSingular[sPlural.toLowerCase()];
//			return typeof vRepl === "string" ? vRepl : sPlural.slice(0,vRepl);
//		});
//	}

	function deprecation(fn, name) {
		return function() {
			jQuery.sap.log.warning("Usage of deprecated feature: " + name);
			return fn.apply(this, arguments);
		};
	}

//	function remainder(obj, info) {
//		var result = null;
//
//		for (var n in info) {
//			if ( hasOwnProperty.call(info, n) && typeof obj[n] === 'undefined' ) {
//				result = result || {};
//				result[n] = info[n];
//			}
//		}
//
//		return result;
//	}
	var Kind = {
		SPECIAL_SETTING : -1, PROPERTY : 0, EVENT : 5
	};

	// ---- SpecialSetting --------------------------------------------------------------------

	/**
	 * SpecialSetting info object
	 * @private
	 * @since 1.27.1
	 */
	function SpecialSetting(oClass, name, info) {
		info = typeof info !== 'object' ? { type: info } : info;
		this.name = name;
		this.type = info.type || 'any';
		this.visibility = info.visibility || 'public';
		this._oParent = oClass;
		this._sUID = "special:" + name;
		this._iKind = Kind.SPECIAL_SETTING;
	}

	// ---- Property --------------------------------------------------------------------------

	/**
	 * Property info object
	 * @private
	 * @since 1.27.1
	 */
	function Property(oClass, name, info) {
		info = typeof info !== 'object' ? { type: info } : info;
		this.name = name;
		this.type = info.type || 'string';
		this.group = info.group || 'Misc';
		this.defaultValue = info.defaultValue !== null ? info.defaultValue : null;
		this.sGetter = "get" + this.name.substring(0,1).toUpperCase() + this.name.substring(1);
		this.mandatory = !!info.mandatory;
		this.visibility = 'private';
		this._oParent = oClass;
		this._sUID = name;
		this._iKind = Kind.PROPERTY;
		this._oType = null;
	}

	/**
	 * @private
	 */
	Property.prototype.generate = function(add) {
		var that = this;
		add(
			that.name,
			function() {
				return this.getProperty(that);
			},
			function (value) {
				return this.setProperty(that, value);
			}
		);
	};

	Property.prototype.getType = function() {
		return this._oType || (this._oType = DataType.getType(this.type));
	};


	// ---- Event -----------------------------------------------------------------------------

	/**
	 * Event info object
	 * @private
	 * @since 1.27.1
	 */
	function Event(oClass, name, info) {
		this.name = name;
		this.allowPreventDefault = info.allowPreventDefault || false;
		this.deprecated = info.deprecated || false;
		this.visibility = 'public';
		this.allowPreventDefault = !!info.allowPreventDefault;
		this.enableEventBubbling = !!info.enableEventBubbling;
		this._oParent = oClass;
		this._sUID = 'event:' + name;
		this._iKind = Kind.EVENT;
		var N = capitalize(name);
		this._sMutator = 'attach' + N;
		this._sDetachMutator = 'detach' + N;
		this._sTrigger = 'fire' + N;
	}

	/**
	 * @private
	 */
	Event.prototype.generate = function(add) {
		var that = this,
			n = that.name,
			allowPreventDefault = that.allowPreventDefault,
			enableEventBubbling = that.enableEventBubbling;

		add(that._sMutator, function(d,f,o) { this.attachEvent(n,d,f,o); return this; }, that);
		add(that._sDetachMutator, function(f,o) { this.detachEvent(n,f,o); return this; });
		add(that._sTrigger, function(p) { return this.fireEvent(n,p, allowPreventDefault, enableEventBubbling); });
	};

	Event.prototype.attach = function(instance,data,fn,listener) {
		return instance[this._sMutator](data,fn,listener);
	};

	Event.prototype.detach = function(instance,fn,listener) {
		return instance[this._sDetachMutator](fn,listener);
	};

	Event.prototype.fire = function(instance,params, allowPreventDefault, enableEventBubbling) {
		return instance[this._sTrigger](params, allowPreventDefault, enableEventBubbling);
	};

	// ----------------------------------------------------------------------------------------

	DataObjectMetadata.prototype.metaFactorySpecialSetting = SpecialSetting;
	DataObjectMetadata.prototype.metaFactoryProperty = Property;
	DataObjectMetadata.prototype.metaFactoryEvent = Event;

	/**
	 * @private
	 */
	DataObjectMetadata.prototype.applySettings = function(oClassInfo) {

		var that = this,
			oStaticInfo = oClassInfo.metadata;

		Metadata.prototype.applySettings.call(this, oClassInfo);

		function normalize(mInfoMap, FNClass) {
			var mResult = {},
				sName;

			if ( mInfoMap ) {
				for (sName in mInfoMap) {
					if ( hasOwnProperty.call(mInfoMap, sName) ) {
						mResult[sName] = new FNClass(that, sName, mInfoMap[sName]);
					}
				}
			}

			return mResult;
		}

		var rLibName = /([a-z][^.]*(?:\.[a-z][^.]*)*)\./;

		function defaultLibName(sName) {
			var m = rLibName.exec(sName);
			return (m && m[1]) || "";
		}

		// init basic metadata from static infos and fallback to defaults
		this._sLibraryName = oStaticInfo.library || defaultLibName(this.getName());
		this._mSpecialSettings = normalize(oStaticInfo.specialSettings, this.metaFactorySpecialSetting);
		this._mProperties = normalize(oStaticInfo.properties, this.metaFactoryProperty);
		this._mEvents = normalize(oStaticInfo.events, this.metaFactoryEvent);

		if ( oClassInfo.metadata.__version > 1.0 ) {
			this.generateAccessors();
		}

	};

	/**
	 * @private
	 */
	DataObjectMetadata.prototype.afterApplySettings = function() {

		Metadata.prototype.afterApplySettings.call(this);

		// if there is a parent class, produce the flattened "all" views for the element specific metadata
		// PERFOPT: this could be done lazily
		var oParent = this.getParent();
		if ( oParent && oParent instanceof DataObjectMetadata ) {
			this._mAllEvents = jQuery.extend({}, oParent._mAllEvents, this._mEvents);
			this._mAllProperties = jQuery.extend({}, oParent._mAllProperties, this._mProperties);
			this._mAllSpecialSettings = jQuery.extend({}, oParent._mAllSpecialSettings, this._mSpecialSettings);
		} else {
			this._mAllEvents = this._mEvents;
			this._mAllProperties = this._mProperties;
			this._mAllSpecialSettings = this._mSpecialSettings;
		}
	};

	DataObjectMetadata.Kind = Kind;

	/**
	 * Returns the name of the library that contains the described UIElement.
	 * @return {string} the name of the library
	 * @public
	 */
	DataObjectMetadata.prototype.getLibraryName = function() {
		return this._sLibraryName;
	};

	// ---- properties ------------------------------------------------------------------------

	/**
	 * Declares an additional property for the described class.
	 *
	 * Any property declaration via this method must happen before the described class
	 * is subclassed, or the added property will not be visible in the subclass.
	 *
	 * Typically used to enrich UIElement classes in an aspect oriented manner.
	 * @param {string} sName name of the property to add
	 * @param {object} oInfo metadata for the property
	 * @public
	 * @see sap.ui.core.EnabledPropagator
	 */
	DataObjectMetadata.prototype.addProperty = function(sName, oInfo) {
		var oProp = this._mProperties[sName] = new Property(this, sName, oInfo);
		if (!this._mAllProperties[sName]) {// ensure extended AllProperties meta-data is also enriched
			this._mAllProperties[sName] = oProp;
		}
		// TODO notify listeners (subclasses) about change
	};

	/**
	 * Checks the existence of the given property by its name
	 * @param {string} sName name of the property
	 * @return {boolean} true, if the property exists
	 * @public
	 */
	DataObjectMetadata.prototype.hasProperty = function(sName) {
		return !!this._mAllProperties[sName];
	};

	/**
	 * Returns an info object for the named public property of the described class,
	 * no matter whether the property was defined by the class itself or by one of its
	 * ancestor classes.
	 *
	 * If neither the described class nor its ancestor classes define a property with the
	 * given name, <code>undefined</code> is returned.
	 *
	 * @param {string} sName name of the property
	 * @returns {Object} An info object describing the property or <code>undefined</code>
	 * @public
	 * @since 1.27.0
	 * @experimental Type, structure and behavior of the returned info object is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getProperty = function(sName) {
		var oProp = this._mAllProperties[sName];
		// typeof is used as a fast (but weak) substitute for hasOwnProperty
		return typeof oProp === 'object' ? oProp : undefined;
	};

	/**
	 * Returns a map of info objects for the public properties of the described class.
	 * Properties declared by ancestor classes are not included.
	 *
	 * The returned map keys the property info objects by their name.
	 *
	 * @return {map} Map of property info objects keyed by the property names
	 * @public
	 * @experimental Type, structure and behavior of the returned info objects is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getProperties = function() {
		return this._mProperties;
	};

	/**
	 * Returns a map of info objects for all public properties of the described class,
	 * including public properties from the ancestor classes.
	 *
	 * The returned map keys the property info objects by their name.
	 *
	 * @return {map} Map of property info objects keyed by the property names
	 * @public
	 * @experimental Type, structure and behavior of the returned info objects is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getAllProperties = function() {
		return this._mAllProperties;
	};

	/**
	 * Returns an info object for a public setting with the given name that either is
	 * a managed property or a managed aggregation of cardinality 0..1 and with at least
	 * one simple alternative type. The setting can be defined by the class itself or
	 * by one of its ancestor classes.
	 *
	 * If neither the described class nor its ancestor classes define a suitable setting
	 * with the given name, <code>undefined</code> is returned.
	 *
	 * @param {string} sName name of the property like setting
	 * @returns {Object} An info object describing the property or aggregation or <code>undefined</code>
	 * @public
	 * @since 1.27.0
	 * @experimental Type, structure and behavior of the returned info object is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getPropertyLikeSetting = function(sName) {
		// typeof is used as a fast (but weak) substitute for hasOwnProperty
		var oProp = this._mAllProperties[sName];
		if ( typeof oProp === 'object' ) {
			return oProp;
		}
		oProp = this._mAllAggregations[sName];
		// typeof is used as a fast (but weak) substitute for hasOwnProperty
		return ( typeof oProp === 'object' && oProp.altTypes && oProp.altTypes.length > 0 ) ? oProp : undefined;
	};

	// ---- events ----------------------------------------------------------------------------

	/**
	 * Checks the existence of the given event by its name
	 *
	 * @param {string} sName name of the event
	 * @return {boolean} true, if the event exists
	 * @public
	 */
	DataObjectMetadata.prototype.hasEvent = function(sName) {
		return !!this._mAllEvents[sName];
	};

	/**
	 * Returns an info object for the named public event of the described class,
	 * no matter whether the event was defined by the class itself or by one of its
	 * ancestor classes.
	 *
	 * If neither the described class nor its ancestor classes define an event with the
	 * given name, <code>undefined</code> is returned.
	 *
	 * @param {string} sName name of the event
	 * @returns {Object} An info object describing the event or <code>undefined</code>
	 * @public
	 * @since 1.27.0
	 * @experimental Type, structure and behavior of the returned info object is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getEvent = function(sName) {
		var oEvent = this._mAllEvents[sName];
		// typeof is used as a fast (but weak) substitute for hasOwnProperty
		return typeof oEvent === 'object' ? oEvent : undefined;
	};

	/**
	 * Returns a map of info objects for the public events of the described class.
	 * Events declared by ancestor classes are not included.
	 *
	 * The returned map keys the event info objects by their name.
	 *
	 * @return {map} Map of event info objects keyed by event names
	 * @public
	 * @experimental Type, structure and behavior of the returned info objects is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getEvents = function() {
		return this._mEvents;
	};

	/**
	 * Returns a map of info objects for all public events of the described class,
	 * including public events form the ancestor classes.
	 *
	 * The returned map keys the event info objects by their name.
	 *
	 * @return {map} Map of event info objects keyed by event names
	 * @public
	 * @experimental Type, structure and behavior of the returned info objects is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getAllEvents = function() {
		return this._mAllEvents;
	};

	// ---- special settings ------------------------------------------------------------------


	/**
	 * Adds a new special setting.
	 * Special settings are settings that are accepted in the mSettings
	 * object at construction time or in an {@link sap.ui.experimental.DataObject.applySettings}
	 * call but that are neither properties, aggregations, associations nor events.
	 *
	 * @param {string} sName name of the setting
	 * @param {object} oInfo metadata for the setting
	 * @private
	 * @experimental since 1.35.0
	 */
	DataObjectMetadata.prototype.addSpecialSetting = function (sName, oInfo) {
		var oSS = new SpecialSetting(this, sName, oInfo);
		this._mSpecialSettings[sName] = oSS;
		if (!this._mAllSpecialSettings[sName]) {
			this._mAllSpecialSettings[sName] = oSS;
		}
	};

	/**
	 * Checks the existence of the given special setting.
	 * Special settings are settings that are accepted in the mSettings
	 * object at construction time or in an {@link sap.ui.experimental.DataObject.applySettings}
	 * call but that are neither properties, aggregations, associations nor events.
	 *
	 * @param {string} sName name of the settings
	 * @return {boolean} true, if the special setting exists
	 * @private
	 * @experimental Since 1.27.0
	 */
	DataObjectMetadata.prototype.hasSpecialSetting = function (sName) {
		return !!this._mAllSpecialSettings[sName];
	};

	// ----------------------------------------------------------------------------------------

	/**
	 * Returns a map of default values for all properties declared by the
	 * described class and its ancestors, keyed by the property name.
	 *
	 * @return {map} Map of default values keyed by property names
	 * @public
	 */
	DataObjectMetadata.prototype.getPropertyDefaults = function() {

		var mDefaults = this._mDefaults,
			oType;
		if ( mDefaults ) {
			return mDefaults;
		}

		if ( this.getParent() instanceof DataObjectMetadata ) {
			mDefaults = jQuery.sap.newObject(this.getParent().getPropertyDefaults());
		} else {
			mDefaults = {};
		}

		for (var s in this._mProperties) {
			if ( this._mProperties[s].defaultValue !== null ) {
				mDefaults[s] = this._mProperties[s].defaultValue;
			} else {
				oType = DataType.getType(this._mProperties[s].type);
				if (oType instanceof DataType) {
					mDefaults[s] = oType.getDefaultValue();
				}
			}
		}
		this._mDefaults = mDefaults;
		return mDefaults;
	};

	DataObjectMetadata.prototype.createPropertyBag = function() {
		if ( !this._fnPropertyBagFactory ) {
			this._fnPropertyBagFactory = jQuery.sap.factory(this.getPropertyDefaults());
		}
		return new (this._fnPropertyBagFactory)();
	};

	/**
	 * Returns a map with all settings of the described class..
	 * Mainly used for the {@link sap.ui.experimental.DataObject#applySettings} method.
	 *
	 * @see sap.ui.experimental.DataObject#applySettings
	 * @private
	 */
	DataObjectMetadata.prototype.getJSONKeys = function() {

		if ( this._mJSONKeys ) {
			return this._mJSONKeys;
		}

		var mAllSettings = {},
			mJSONKeys = {};

		function addKeys(m) {
			var sName, oInfo, oPrevInfo;
			for (sName in m) {
				oInfo = m[sName];
				oPrevInfo = mAllSettings[sName];
				if ( !oPrevInfo || oInfo._iKind < oPrevInfo._iKind ) {
					mAllSettings[sName] = mJSONKeys[sName] = oInfo;
				}
				mJSONKeys[oInfo._sUID] = oInfo;
			}
		}

		addKeys(this._mAllSpecialSettings);
		addKeys(this.getAllProperties());
		addKeys(this.getAllEvents());

		this._mJSONKeys = mJSONKeys;
		this._mAllSettings = mAllSettings;
		return this._mJSONKeys;
	};

	/**
	 * @private
	 */
	DataObjectMetadata.prototype.getAllSettings = function() {
		if ( !this._mAllSettings ) {
			this.getJSONKeys();
		}
		return this._mAllSettings;
	};


	DataObjectMetadata.prototype.generateAccessors = function() {

		var proto = this.getClass().prototype,
			prefix = this.getName() + ".",
			methods = this._aPublicMethods,
			n;

		function add(name, getter, setter) {
			if (!proto.hasOwnProperty(name) ) {
				Object.defineProperty(proto, name, {
					get : getter,
					set : setter
				});
			}
		}
		function addEvent(name, fn, info) {
			if ( !proto[name] ) {
				proto[name] = (info && info.deprecated) ? deprecation(fn, prefix + info.name) : fn;
			}
			methods.push(name);
		}

		for (n in this._mProperties) {
			this._mProperties[n].generate(add);
		}
		for (n in this._mEvents) {
			this._mEvents[n].generate(addEvent);
		}
	};

	return DataObjectMetadata;

}, /* bExport= */ true);

}; // end of sap/ui/mdc/experimental/DataObjectMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.FieldHelpBase') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.FieldHelpBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/FieldHelpBase",[
	'sap/ui/core/Element', 'sap/m/Popover'
], function(Element, Popover) {
	"use strict";

	/**
	 * Constructor for a new FieldHelpBase.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Base type for <code>fieldFelp</code> aggregation in <code>Field</code> controls.
	 * @extends sap.ui.core.Element
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.50.0
	 * @alias sap.ui.mdc.experimental.FieldHelpBase
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FieldHelpBase = Element.extend("sap.ui.mdc.experimental.FieldHelpBase", /** @lends sap.ui.mdc.experimental.FieldHelpBase.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * The key of the selected item
				 *
				 * <b>Note:</b> This has only effects for FildHelps supporting keys.
				 */
				selectedKey: {
					type: "string",
					defaultValue: ""
				},
				/**
				 * The value for what the help should filter
				 *
				 * <b>Note:</b> This has only effects for FildHelps supporting filtering.
				 */
				filterValue: {
					type: "string",
					defaultValue: ""
				}
			},
			aggregations: {
				/**
				 * internal popover
				 */
				_popover: {
					type: "sap.m.Popover",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {
				/**
				 * This event is fired when a value is selected in the valueHelp
				 */
				select: {
					parameters: {

						/**
						 * The selected <code>value</code>.
						 */
						value: { type: "any" },

						/**
						 * The selected <code>additionalValue</code>.
						 */
						additionalValue: { type: "any" },

						/**
						 * The selected <code>key</code>.
						 */
						key: { type: "string" }
					}
				},
				/**
				 * This event is fired when a value is navigated in the valueHelp
				 */
				navigate: {
					parameters: {

						/**
						 * The navigated <code>value</code>.
						 */
						value: { type: "any" },

						/**
						 * The navigated <code>additionalValue</code>.
						 */
						additionalValue: { type: "any" },

						/**
						 * The navigated <code>key</code>.
						 */
						key: { type: "string" }
					}
				},
				/**
				 * This event is fired when the data of the FieldHelp has changed
				 *
				 * This is needed to determine the text of a key
				 */
				dataUpdate: {
				}
			}
		}
	});

	// define empty to add it to inherited FieldHelps, maybe later it might be filled and other fFielfHelps must not changed.
	FieldHelpBase.prototype.init = function() {

//		this._createPopover();

	};

	// define empty to add it to inherited FieldHelps, maybe later it might be filled and other fFielfHelps must not changed.
	FieldHelpBase.prototype.exit = function() {

	};

	FieldHelpBase.prototype.setSelectedKey = function(sKey) {

		this.setProperty("selectedKey", sKey, true); // do not invalidate while FieldHelp

	};

	FieldHelpBase.prototype.setFilterValue = function(sFilterValue) {

		this.setProperty("filterValue", sFilterValue, true); // do not invalidate while FieldHelp

	};

	/**
	 * Opens the FieldHelp on the parent <code>Field</code> control
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.open = function() {

		var oPopover = this._getPopover();
		var oField = this.getParent();

		if (oField && !oPopover.isOpen()) {
			var iWidth = oField.$().outerWidth();
			oPopover.setContentMinWidth(iWidth + "px");
			oPopover.openBy(oField);
		}

	};

	/**
	 * closes the FieldHelp
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.close = function() {

		var oPopover = this.getAggregation("_popover");

		if (oPopover) {
			oPopover.close();
		}

	};

	/**
	 * toggles the open state of the FieldHelp on the parent <code>Field</code> control
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.toggleOpen = function() {

		var oPopover = this._getPopover();

		if (oPopover.isOpen()) {
			this.close();
		} else {
			this.open();
		}

	};

	/**
	 * creates the internal Popover
	 *
	 * To be used by an inherited FieldHelp, not from outside.
	 *
	 * @return {sap.m.Popover} Popover
	 * @protected
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype._createPopover = function() {

		var oPopover = new sap.m.Popover(this.getId() + "-pop", {
			placement: sap.m.PlacementType.Bottom,
			showHeader: false,
			showArrow: false,
			afterOpen: this._handleAfterOpen.bind(this)
		});

		this.setAggregation("_popover", oPopover, true);

		return oPopover;

	};

	/**
	 * returns the internal Popover. If the Popover not exist it will be created
	 *
	 * To be used by an inherited FieldHelp, not from outside.
	 *
	 * @return {sap.m.Popover} Popover
	 * @protected
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype._getPopover = function() {

		var oPopover = this.getAggregation("_popover");

		if (!oPopover) {
			oPopover = this._createPopover();
		}

		return oPopover;

	};

	/**
	 * Executed after the Popup has opened
	 *
	 * To be used by an inherited FieldHelp, not from outside.
	 *
	 * @protected
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype._handleAfterOpen = function() {
	};

	/**
	 * Determines if the field help should be opened if something is typed into the field
	 *
	 * @return {boolean} if true the field help should open by typing
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.openByTyping = function() {

		return false;

	};

	/**
	 * Determines if the field should be rendered as link
	 *
	 * @return {boolean} if true the field should be rendered as link
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.showLink = function() {

		return false;

	};

//	/**
//	 * Determines if the focus should stay on the field if the help is open
//	 *
//	 * @return {boolean} if true the focus stays on the field
//	 * @public
//	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
//	 */
//	FieldHelpBase.prototype.getFocusOnField = function() {
//
//		return false;
//
//	};

	/**
	 * triggers navigation in the fieldHelp
	 *
	 * @param {int} iStep number of steps for navigation (e.g. 1 means next item, -1 means previous item)
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.navigate = function(iStep) {
		// to be implements by the concrete FieldHelp
	};

	/**
	 * Determines the text for an given key
	 *
	 * @param {string} sKey key
	 * @return {string} text for key
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.getTextForKey = function(sKey) {
		// to be implements by the concrete FieldHelp
		return "";
	};

	/**
	 * Determines the key for an given text
	 *
	 * <b>Note:</b> As this must not unique the result key may be just one for one of the matching texts
	 *
	 * @param {string} sText text
	 * @return {string} key for text
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.getKeyForText = function(sText) {
		// to be implements by the concrete FieldHelp
		return "";
	};

	/**
	 * Sets the content of the FieldHelp
	 *
	 * To be used by an inherited FieldHelp, not from outside.
	 *
	 * @param {string} oContent content control to be placed at the Popover
	 * @return {sap.ui.mdc.experimental.FieldHelpBase} Reference to <code>this</code> to allow method chaining
	 * @protected
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype._setContent = function(oContent) {

		var oPopover = this._getPopover();
		oPopover.removeAllContent();
		oPopover.addContent(oContent);
		return this;

	};

	return FieldHelpBase;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/FieldHelpBase.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.FieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.FieldRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/FieldRenderer",['jquery.sap.global', 'sap/ui/core/Renderer', 'sap/ui/core/IconPool', 'sap/ui/core/ValueState'],
	function(jQuery, Renderer, IconPool, ValueState) {
		"use strict";

		//initialize the Icon Pool
		IconPool.insertFontFaceStyle();

		var FieldRenderer = Renderer.extend("sap.ui.mdc.experimental.FieldRenderer");

		FieldRenderer.render = function(oRm, oField) {
			var control = {
				content: oField._getContent(),
				editMode: oField.getEditMode(),
				width: oField.getWidth(),
				valueState: oField.getValueState()
			};

			oRm.write("<div");
			oRm.writeControlData(oField);
			oRm.addClass("sapUiMdcBaseField");

			if (control.width) {
				if (control.width === "content") {
					oRm.addStyle("width", "auto");
				} else {
					oRm.addStyle("width", control.width);
				}
			}
			oRm.writeStyles();
			oRm.writeClasses();
			oRm.write(">");

			if (control.content) {
				oRm.renderControl(control.content);
			}

			oRm.write("</div>");

		};


		return FieldRenderer;

	}, /* bExport= */ true);
}; // end of sap/ui/mdc/experimental/FieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.LinkList') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.LinkList'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.base.ManagedObjectModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/LinkList",[
	'sap/ui/mdc/experimental/FieldHelpBase', 'sap/ui/model/base/ManagedObjectModel', 'sap/m/VBox'
], function(FieldHelpBase, ManagedObjectModel, VBox) {
	"use strict";

	/**
	 * Constructor for a new LinkList.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A field help used in the <code>FieldFelp</code> aggregation in <code>Field</code> controls that shows a list of Links
	 * @extends sap.ui.core.Element
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.52.0
	 * @alias sap.ui.mdc.experimental.LinkList
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var LinkList = FieldHelpBase.extend("sap.ui.mdc.experimental.LinkList", /** @lends sap.ui.mdc.experimental.LinkList.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				},
			aggregations: {
				/**
				 * links of the Field
				 */
				links: {
					type: "sap.m.Link",
					multiple: true,
					singularName : "link"
				}
			},
			defaultAggregation: "links",
			events: {

			}
		}
	});

	LinkList.prototype.showLink = function() {

		var aLinks = this.getLinks();
		var bLinks = false;

		for (var i = 0; i < aLinks.length; i++) {
			var oLink = aLinks[i];
			if (oLink.getEnabled()) {
				bLinks = true;
				break;
			}
		}

		return bLinks;

	};

	LinkList.prototype._createPopover = function() {

		var oPopover = FieldHelpBase.prototype._createPopover.apply(this, arguments);

		this._oVBox = new VBox(this.getId() + "-VBox", {
			width: "100%",
			items: this.getAggregation("links")
		});

		this._setContent(this._oVBox);

		return oPopover;

	};

	LinkList.prototype.getLinks = function() {

		if (this._oVBox) {
			return this._oVBox.getItems();
		} else {
			return this.getAggregation("links", []);
		}

	};

	LinkList.prototype.indexOfLink = function(oLink) {

		if (this._oVBox) {
			return this._oVBox.indexOfItem(oLink);
		} else {
			return this.indexOfAggregation("links", oLink);
		}

	};

	LinkList.prototype.addLink = function(oLink) {

		if (this._oVBox) {
			this._oVBox.addItem(oLink);
		} else {
			this.addAggregation("links", oLink);
		}

		oLink.attachEvent("_change", _handleLinkChange, this);

		this.fireDataUpdate();

		return this;

	};

	LinkList.prototype.insertLink = function(oLink, iIndex) {

		if (this._oVBox) {
			this._oVBox.insertItem(oLink, iIndex);
		} else {
			this.insertAggregation("links", oLink, iIndex);
		}

		oLink.attachEvent("_change", _handleLinkChange, this);

		this.fireDataUpdate();

		return this;

	};

	LinkList.prototype.removeLink = function(vLink) {

		var oRemoved;

		if (this._oVBox) {
			oRemoved = this._oVBox.removeItem(vLink);
		} else {
			oRemoved = this.removeAggregation("links", vLink);
		}

		if (oRemoved) {
			oRemoved.detachEvent("_change", _handleLinkChange, this);
		}

		this.fireDataUpdate();

		return oRemoved;

	};

	LinkList.prototype.removeAllLinks = function() {

		var aRemoved;

		if (this._oVBox) {
			aRemoved = this._oVBox.removeAllItema();
		} else {
			aRemoved = this.removeAllAggregation("links");
		}

		for (var i = 0; i < aRemoved.length; i++) {
			var oLink = aRemoved[i];
			oLink.detachEvent("_change", _handleLinkChange, this);
		}

		this.fireDataUpdate();

		return aRemoved;

	};

	LinkList.prototype.destroyLinks = function() {

		var aLinks = this.getLinks();
		for (var i = 0; i < aLinks.length; i++) {
			var oLink = aLinks[i];
			oLink.detachEvent("_change", _handleLinkChange, this);
		}

		if (this._oVBox) {
			this._oVBox.destroyItema();
		} else {
			this.destroyAggregation("links");
		}

		this.fireDataUpdate();

		return this;

	};

	function _handleLinkChange(oEvent) {

		var sName = oEvent.getParameter("name");

		if (sName == "enabled" || sName == "visible") {
			this.fireDataUpdate();
		}

	}

	return LinkList;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/LinkList.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.ListFieldHelp') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.ListFieldHelp'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.base.ManagedObjectModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObjectObserver'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.DisplayListItem'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/ListFieldHelp",[
	'sap/ui/mdc/experimental/FieldHelpBase', 'sap/ui/model/base/ManagedObjectModel',
	'sap/ui/base/ManagedObjectObserver', 'sap/m/List', 'sap/m/DisplayListItem'
], function(FieldHelpBase, ManagedObjectModel, ManagedObjectObserver, List, DisplayListItem) {
	"use strict";

	/**
	 * Constructor for a new ListFieldHelp.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A field help used in the <code>FieldFelp</code> aggregation in <code>Field</code> controls that shows a list of items
	 * @extends sap.ui.core.Element
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.50.0
	 * @alias sap.ui.mdc.experimental.ListFieldHelp
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ListFieldHelp = FieldHelpBase.extend("sap.ui.mdc.experimental.ListFieldHelp", /** @lends sap.ui.mdc.experimental.ListFieldHelp.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				},
			aggregations: {
				/**
				 * items of the Field help
				 */
				items: {
					type: "sap.ui.core.ListItem",
					multiple: true,
					singularName : "item"
				}
			},
			defaultAggregation: "items",
			events: {

			}
		}
	});

	ListFieldHelp.prototype.init = function() {

		FieldHelpBase.prototype.init.apply(this, arguments);

		this._oManagedObjectModel = new ManagedObjectModel(this);

		this._oObserver = new ManagedObjectObserver(_observeChanges.bind(this));

		this._oObserver.observe(this, {
			properties: ["selectedKey", "filterValue"],
			aggregations: ["items"]
		});

	};

	ListFieldHelp.prototype.exit = function() {

		FieldHelpBase.prototype.exit.apply(this, arguments);

		this._oManagedObjectModel.destroy();
		delete this._oManagedObjectModel;

		this._oObserver.disconnect();
		this._oObserver = undefined;

	};

	ListFieldHelp.prototype._createPopover = function() {

		var oPopover = FieldHelpBase.prototype._createPopover.apply(this, arguments);

		var oParent = this.getParent();
		if (oParent) {
			oPopover.setInitialFocus(oParent);
		}

		var oItemTemplate = new DisplayListItem({
			label: "{$field>text}",
			value: "{$field>additionalText}"//,
		});

		var oFilter = new sap.ui.model.Filter("text", _suggestFilter.bind(this));

		this._oList = new List(this.getId() + "-List", {
			width: "100%",
			showNoData: false,
			mode: sap.m.ListMode.SingleSelectMaster,
			rememberSelections: false,
			items: {path: "$field>items", template: oItemTemplate, filters: oFilter},
//			itemPress: _handleItemPress.bind(this),
			selectionChange: _handleSelectionChange.bind(this)
		});

		this._oList.setModel(this._oManagedObjectModel, "$field");
		this._oList.bindElement({ path: "/", model: "$field" });
		_updateSelection.call(this, this.getSelectedKey());

		this._setContent(this._oList);

		return oPopover;

	};

	ListFieldHelp.prototype.setParent = function(oParent, sAggregationName, bSuppressInvalidate) {

		FieldHelpBase.prototype.setParent.apply(this, arguments);

		// focus should stay on Field
		var oPopover = this.getAggregation("_popover");
		if (oPopover) {
			oPopover.setInitialFocus(oParent);
		}

		return this;

	};

	function _observeChanges(oChanges) {

		if (oChanges.name == "items") {
			this.fireDataUpdate();
		}

		if (oChanges.name == "selectedKey") {
			_updateSelection.call(this, oChanges.current);
		}

		if (oChanges.name == "filterValue") {
			if (this._oList) {
				var oBinding = this._oList.getBinding("items");
				oBinding.update();
				this._oList.updateItems();
				this._oList.invalidate();
				_updateSelection.call(this, this.getSelectedKey()); // to update selection
			}
		}

	}

	ListFieldHelp.prototype.openByTyping = function() {

		return true;

	};

	ListFieldHelp.prototype.navigate = function(iStep) {

		var oPopover = this._getPopover();
		var oSelectedItem = this._oList.getSelectedItem();
		var aItems = this._oList.getItems();
		var iItems = aItems.length;
		var iSelectedIndex = 0;

		if (oSelectedItem) {
			iSelectedIndex = this._oList.indexOfItem(oSelectedItem);
			iSelectedIndex = iSelectedIndex + iStep;
			if (iSelectedIndex < 0) {
				iSelectedIndex = 0;
			} else if (iSelectedIndex >= iItems - 1) {
				iSelectedIndex = iItems - 1;
			}
		} else if (iStep >= 0){
			iSelectedIndex = iStep - 1;
		} else {
			iSelectedIndex = iItems + iStep;
		}

		var oItem = aItems[iSelectedIndex];
		if (oItem) {
			var oOriginalItem = _getOriginalItem.call(this, oItem);
			oItem.setSelected(true);
			this.setProperty("selectedKey", oOriginalItem.getKey(), true); // do not invalidate while FieldHelp

			if (!oPopover.isOpen()) {
				this.open();
			}

			this.fireNavigate({value: oItem.getLabel(), additionalValue: oItem.getValue(), key: oOriginalItem.getKey()});
		}

	};

	ListFieldHelp.prototype.getTextForKey = function(sKey) {

		var aItems = this.getItems();

		for (var i = 0; i < aItems.length; i++) {
			var oItem = aItems[i];
			if (oItem.getKey() == sKey) {
				return oItem.getText();
			}
		}

		return "";

	};

	ListFieldHelp.prototype.getKeyForText = function(sText) {

		var aItems = this.getItems();

		for (var i = 0; i < aItems.length; i++) {
			var oItem = aItems[i];
			if (oItem.getText() == sText) {
				return oItem.getKey();
			}
		}

		return "";

	};

//	function _handleItemPress(oEvent) {
//		var oItem = oEvent.getParameter("listItem");
//
//	}

	function _handleSelectionChange(oEvent) {
		var oItem = oEvent.getParameter("listItem");
		var bSelected = oEvent.getParameter("selected");

		if (bSelected) {
			var oOriginalItem = _getOriginalItem.call(this, oItem);
			this.setProperty("selectedKey", oOriginalItem.getKey(), true); // do not invalidate while FieldHelp
			this.close();
			this.fireSelect({value: oItem.getLabel(), additionalValue: oItem.getValue(), key: oOriginalItem.getKey()});
		}
	}

	// returns ListFieldHelp item for inner list item
	function _getOriginalItem(oItem) {

		var sPath = oItem.getBindingContextPath();
		return this._oManagedObjectModel.getProperty(sPath);

	}

	function _suggestFilter(sText) {

		var sFilterValue = this.getFilterValue();

		if (!sFilterValue || jQuery.sap.startsWithIgnoreCase(sText, sFilterValue)) {
			return true;
		} else {
			return false;
		}

	}

	function _updateSelection(sSelectedKey) {

		if (this._oList) {
			var aItems = this._oList.getItems();
			for (var i = 0; i < aItems.length; i++) {
				var oItem = aItems[i];
				var oOriginalItem = _getOriginalItem.call(this, oItem);
				if (oOriginalItem.getKey() == sSelectedKey) {
					oItem.setSelected(true);
				} else {
					oItem.setSelected(false);
				}
			}
		}

	}

	return ListFieldHelp;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/ListFieldHelp.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nInternalModel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nInternalModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.personalization.Util'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nInternalModel",[
	'jquery.sap.global', 'sap/ui/base/ManagedObject', 'sap/ui/model/json/JSONModel', 'sap/ui/comp/personalization/Util'
], function(jQuery, ManagedObject, JSONModel, PersonalizationUtil) {
	"use strict";

	/**
	 * The JSON model is used for several reasons:
	 *  1. the column representation in the panel (internal view) is different then the column representation
	 *  in aggregation 'items' of P13nXXXPanel which is external view of columns.
	 *  For example:
	 *    External view: [oX, xB, oA, xC] Columns B and C are selected. Columns X and A are not selected.
	 *    Internal view: [xB, xC, oA, oX] On the top all selected columns are displayed. On the bottom all unselected columns sorted in alphabetical order are displayed.
	 *  2. When we define a table sorter (sorter:{path:'selected', descending:true}) then the presentation will
	 *  be automatically changed when end user select a column (it will jump to the selected columns). This behaviour is not desired.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The P13nInternalModel is used to...
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nInternalModel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nInternalModel = JSONModel.extend("sap.ui.mdc.experimental.P13nInternalModel", /** @lends sap.ui.mdc.experimental.P13nInternalModel.prototype */
	{
		constructor: function(sId, mSettings) {
			JSONModel.apply(this, arguments);
			this._initialize();
		}
	});

	/**
	 *
	 * @private
	 */
	P13nInternalModel.prototype._initialize = function() {
		var aMItems = this.getProperty("/tableItems").map(function(oP13nItem) {
			if (typeof oP13nItem === "string") {
				oP13nItem = sap.ui.getCore().byId(oP13nItem);
			}
			return {
				columnKey: oP13nItem.getColumnKey(),
				selected: oP13nItem.getSelected(),
				position: oP13nItem.getPosition(),
				// needed for initial sorting
				text: oP13nItem.getText()
			};
		});
		this._sortBySelectedAndPosition(aMItems);
		this.setData({
			items: aMItems
		});
		this.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);
		this.setSizeLimit(1000);
	};

	/**
	 * @returns {object || undefined}
	 * @public
	 */
	P13nInternalModel.prototype.getModelItemByColumnKey = function(sColumnKey) {
		var aMItem = this.getProperty("/items").filter(function(oMItem) {
			return oMItem.columnKey === sColumnKey;
		});
		return aMItem[0];
	};

	/**
	 *
	 * @public
	 */
	P13nInternalModel.prototype.getIndexOfModelItem = function(oMItem) {
		return this.getProperty("/items").indexOf(oMItem);
	};

	/**
	 * Moves a model item depending on the real position in the table.
	 * @public
	 */
	P13nInternalModel.prototype.selectModelItem = function(oMItemFrom, bIsSelected) {
		// Update the internal model item
		oMItemFrom.selected = bIsSelected;

		var aMItems = this.getProperty("/items");
		// Get selected items ordered from previous item of the current one to the top item (i.g. aMItemsSelected[0]
		// the item above of current item)
		var aMItemsSelected = this._getSelectedModelItemsBetween(oMItemFrom, aMItems[0]);
		// Check if the position of current item in the table is lower then the previous item. If so the item
		// should be moved.
		if (aMItemsSelected.length && aMItemsSelected[0].position > oMItemFrom.position) {
			this.moveModelItemPosition(oMItemFrom, aMItemsSelected[0]);
		} else {
			// Get selected items ordered from next item of the current one to the bottom item (i.g. aMItemsSelected[0]
			// the item below of current item)
			aMItemsSelected = this._getSelectedModelItemsBetween(oMItemFrom, aMItems[aMItems.length - 1]);
			// Check if the position of current item in the table is higher then the next item. If so the item
			// should be moved.
			if (aMItemsSelected.length && aMItemsSelected[0].position < oMItemFrom.position) {
				this.moveModelItemPosition(oMItemFrom, aMItemsSelected[0]);
			}
		}
	};

	/**
	 * Moves model item.
	 *
	 * @param {object} oMItemFrom Model item which will be removed
	 * @param {object} oMItemTo Model item at which index the removed model item will be inserted
	 * @public
	 */
	P13nInternalModel.prototype.moveModelItem = function(oMItemFrom, oMItemTo) {
		if (!oMItemFrom || !oMItemTo) {
			return;
		}
		var aMItems = this.getProperty("/items");
		var iIndexFrom = aMItems.indexOf(oMItemFrom);
		var iIndexTo = aMItems.indexOf(oMItemTo);
		if (iIndexFrom < 0 || iIndexTo < 0 || iIndexFrom > aMItems.length - 1 || iIndexTo > aMItems.length - 1) {
			return;
		}

		// Move item
		var oMItemRemoved = aMItems.splice(iIndexFrom, 1)[0];
		aMItems.splice(iIndexTo, 0, oMItemRemoved);
		this.setProperty("/items", aMItems);
	};

	/**
	 * Moves a JSON model item.
	 * @param {object} oMItemFrom
	 * @param {object} oMItemTO
	 * @public
	 */
	P13nInternalModel.prototype.moveModelItemPosition = function(oMItemFrom, oMItemTo) {
		var aSelectedMItems = this._getSelectedModelItemsBetween(oMItemFrom, oMItemTo);
		if (!aSelectedMItems.length) {
			return;
		}
		var aMItems = this.getProperty("/items");

		var iIndexFrom = aMItems.indexOf(oMItemFrom);
		var iIndexTo = aMItems.indexOf(oMItemTo);
		// Convert to last selected item
		if (iIndexFrom < iIndexTo) {
			// From up to down
			oMItemTo = aSelectedMItems[aSelectedMItems.length - 1];
		} else {
			// From down to up
			oMItemTo = aSelectedMItems[aSelectedMItems.length - 1];
		}

		// Calculate new 'position'
		var aMItemsSorted = jQuery.extend(true, [], aMItems);
		aMItemsSorted.sort(function(a, b) {
			if (a.position < b.position) {
				return -1;
			} else if (a.position > b.position) {
				return 1;
			} else {
				return 0;
			}
		});
		// 1. We can remove the item because the array is sorted by 'position'
		var oMItemCopyRemoved = aMItemsSorted.splice(oMItemFrom.position, 1)[0];
		// 2. Assign new 'position'
		aMItemsSorted.forEach(function(oMItem, iIndex) {
			oMItem.position = iIndex;
		});
		// 3. Insert the removed item
		aMItemsSorted.splice(oMItemTo.position, 0, oMItemCopyRemoved);
		// 4. Assign new 'position'
		aMItemsSorted.forEach(function(oMItem, iIndex) {
			oMItem.position = iIndex;
		});
		// Take over the position
		aMItems.forEach(function(oMItem, iIndex) {
			var oMItemCopy = PersonalizationUtil.getArrayElementByKey("columnKey", oMItem.columnKey, aMItemsSorted);
			this.setProperty("/items/" + iIndex + "/position", oMItemCopy.position);
		}, this);
	};

	/**
	 * @param {object} oMItemFrom Excluded item. The index of item can be higher or lower then the index of <code>oMItemTo</code>
	 * @param {object} oMItemTo Included item. The index of item can be higher or lower then the index of <code>oMItemFrom</code>
	 * @returns {array}
	 * @private
	 */
	P13nInternalModel.prototype._getSelectedModelItemsBetween = function(oMItemFrom, oMItemTo) {
		var aMItems = this.getProperty("/items");
		var iIndexFrom = aMItems.indexOf(oMItemFrom);
		var iIndexTo = aMItems.indexOf(oMItemTo);
		if (iIndexFrom === iIndexTo) {
			// As the 'iIndexFrom' should be excluded of calculation, there is nothing in between
			return [];
		}
		var aMItemsCopy = [];
		if (iIndexFrom < iIndexTo) {
			// From top down
			// Convert oMItemFrom to 'included' item
			// Increase oMItemTo with 1 for slice
			aMItemsCopy = aMItems.slice(iIndexFrom + 1, iIndexTo + 1);
			return aMItemsCopy.filter(function(oMItem) {
				return !!oMItem.selected;
			});
		}
		// From bottom up
		aMItemsCopy = aMItems.slice(iIndexTo, iIndexFrom).reverse();
		return aMItemsCopy.filter(function(oMItem) {
			return !!oMItem.selected;
		});
	};

	/**
	 * @private
	 */
	P13nInternalModel.prototype._sortBySelectedAndPosition = function(aMItems) {
		aMItems.sort(function(a, b) {
			if (a.selected === true && (b.selected === false || b.selected === undefined)) {
				return -1;
			} else if ((a.selected === false || a.selected === undefined) && b.selected === true) {
				return 1;
			} else if (a.selected === true && b.selected === true) {
				if (a.position < b.position) {
					return -1;
				} else if (a.position > b.position) {
					return 1;
				} else {
					return 0;
				}
			} else if ((a.selected === false || a.selected === undefined) && (b.selected === false || b.selected === undefined)) {
				if (a.text < b.text) {
					return -1;
				} else if (a.text > b.text) {
					return 1;
				} else {
					return 0;
				}
			}
		});
	};

	return P13nInternalModel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nInternalModel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nItem",[
	'sap/ui/core/Element'
], function(Element) {
	"use strict";

	/**
	 * Constructor for a new P13nItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Base type for <code>items</code> aggregation in <code>P13nXXXPanel</code> controls.
	 * @extends sap.ui.core.Element
	 * @version 1.52.7
	 * @constructor
	 * @abstract
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nItem = Element.extend("sap.ui.mdc.experimental.P13nItem", /** @lends sap.ui.mdc.experimental.P13nItem.prototype */
	{
		metadata: {
			"abstract": true,
			library: "sap.ui.mdc",
			properties: {
				/**
				 * The unique key of the item.
				 */
				columnKey: {
					type: "string",
					defaultValue: undefined
				},
				/**
				 * The text to be displayed for the item.
				 */
				text: {
					type: "string",
					defaultValue: undefined
				},
				/**
				 * The tooltip to be displayed for the item.
				 */
				tooltip: {
					type: "string",
					defaultValue: undefined
				}
			}
		}
	});

	return P13nItem;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nItem.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nPanelFormatter') ) {
jQuery.sap.declare('sap.ui.mdc.experimental.P13nPanelFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/P13nPanelFormatter",[], function() {
	"use strict";
	var P13nPanelFormatter = {

		showCount: function(iCountOfSelectedItems, iCountOfItems) {
			return sap.ui.getCore().getLibraryResourceBundle("sap.m").getText('COLUMNSPANEL_SELECT_ALL_WITH_COUNTER', [
				iCountOfSelectedItems, iCountOfItems
			]);
		},

		determineCount: function(aItems) {
			this._updateCounts();
			return P13nPanelFormatter.showCount(this.getCountOfSelectedItems(), this.getCountOfItems());
		},

		isTrue: function(oValue) {
			return !!oValue;
		},

		showDimMeasureType: function(oMItem) {
			if (oMItem.aggregationRole === "dimension") {
				return sap.ui.getCore().getLibraryResourceBundle("sap.m").getText('COLUMNSPANEL_TYPE_DIMENSION');
			}
			if (oMItem.aggregationRole === "measure") {
				return sap.ui.getCore().getLibraryResourceBundle("sap.m").getText('COLUMNSPANEL_TYPE_MEASURE');
			}
			return;
		},

		createChartRoleTypes: function(sId, oBindingContext) {
			var oAvailableRoleType = oBindingContext.getObject();
			return new sap.ui.core.Item({
				key: oAvailableRoleType.key,
				text: oAvailableRoleType.text
			});
		}
	};

	return P13nPanelFormatter;
}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nPanelFormatter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSelectionItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSelectionItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/P13nSelectionItem",[
	'sap/ui/mdc/experimental/P13nItem'
], function(P13nItem) {
	"use strict";

	/**
	 * Constructor for a new P13nSelectionItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Type for <code>items</code> aggregation in <code>P13nSelectionPanel</code> control.
	 * @extends sap.ui.mdc.experimental.P13nItem
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nSelectionItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSelectionItem = P13nItem.extend("sap.ui.mdc.experimental.P13nSelectionItem", /** @lends sap.ui.mdc.experimental.P13nSelectionItem.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Defines visibility of the item.
				 */
				selected: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Defines position of the item.
				 */
				position: {
					type: "int"
				},
				/**
				 * Defines href of a link.
				 */
				href: {
					type: "string",
					defaultValue: undefined
				},
				/**
				 * Defines target of a link.
				 */
				target: {
					type: "string",
					defaultValue: undefined
				},
				/**
				 * Defines press handler of a link.
				 */
				press: {
					type: "object",
					defaultValue: null
				}
			}
		}
	});

	return P13nSelectionItem;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSelectionItem.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSortItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSortItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/P13nSortItem",[
	'sap/ui/mdc/experimental/P13nItem'
], function(P13nItem) {
	"use strict";

	/**
	 * Constructor for a new P13nSortItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Type for <code>items</code> aggregation in <code>P13nColumnPanel</code> control.
	 * @extends sap.ui.mdc.experimental.P13nItem
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.46.0
	 * @alias sap.ui.mdc.experimental.P13nSortItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSortItem = P13nItem.extend("sap.ui.mdc.experimental.P13nSortItem", /** @lends sap.ui.mdc.experimental.P13nSortItem.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Defines visibility of the item.
				 */
				selected: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Defines position of the item.
				 */
				position: {
					type: "int"
				},
				/**
				 * Defines sort order of the item.
				 */
				sortOrder: {
					type: "string"
				}
			}
		}
	});

	return P13nSortItem;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSortItem.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSortModel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSortModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.personalization.Util'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nSortModel",[
	'jquery.sap.global', 'sap/ui/base/ManagedObject', 'sap/ui/model/json/JSONModel', 'sap/ui/comp/personalization/Util'
], function(jQuery, ManagedObject, JSONModel, PersonalizationUtil) {
	"use strict";

	/**
	 * The JSON model is used for several reasons:
	 *  1. the column representation in the panel (internal view) is different then the column representation
	 *  in aggregation 'items' of P13nXXXPanel which is external view of columns.
	 *  For example:
	 *    External view: [oX, xB, oA, xC] Columns B and C are selected. Columns X and A are not selected.
	 *    Internal view: [xB, xC, oA, oX] On the top all selected columns are displayed. On the bottom all unselected columns sorted in alphabetical order are displayed.
	 *  2. When we define a table sorter (sorter:{path:'selected', descending:true}) then the presentation will
	 *  be automatically changed when end user select a column (it will jump to the selected columns). This behaviour is not desired.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The P13nSortModel is used to...
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nSortModel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSortModel = JSONModel.extend("sap.ui.mdc.experimental.P13nSortModel", /** @lends sap.ui.mdc.experimental.P13nSortModel.prototype */
	{
		constructor: function(sId, mSettings) {
			JSONModel.apply(this, arguments);
			this._initialize();
		}
	});

	/**
	 *
	 * @private
	 */
	P13nSortModel.prototype._initialize = function() {
		var aTableItems = this.getProperty("/tableItems");
		var aMItems = aTableItems.map(function(oP13nItem) {
			if (typeof oP13nItem === "string") {
				oP13nItem = sap.ui.getCore().byId(oP13nItem);
			}
			return {
				columnKey: oP13nItem.getColumnKey(),
				selected: oP13nItem.getSelected(),
				position: oP13nItem.getPosition(),
				// needed for initial sorting
				text: oP13nItem.getText(),

				sortOrder: oP13nItem.getSortOrder(),
				// New value in ComboBox. It can be
				// * empty value - if user removes the value in input field
				// * valid value - if user take value from popover
				// * dummy value - if user writes wrong value in input field
				comboboxKey: oP13nItem.getColumnKey(),
				availableItems: []
			};
		}, this);
		this._sortBySelectedAndPosition(aMItems);
		this.setProperty("/items", aMItems);

		this.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);
		this.setSizeLimit(1000);

		this._updateMItemsAvailableItems();
	};

	P13nSortModel.prototype.insertModelItemOfIndex = function(iIndex) {
		// var oMItem = this.getModelItemByIndex(iIndex);

		// Insert new model item
		var aMItems = this.getProperty("/items");
		aMItems.splice(iIndex + 1, 0, {
			columnKey: "(none)",
			comboboxKey: "(none)",
			text: "(none)",
			// Default value
			sortOrder: "Ascending",
			// Disable the 'sortOrder'
			selected: false,
			// will be determined later based on all model items
			position: undefined,
			// will be determined later based on all model items
			availableItems: []
		});
		this.setProperty("/items", aMItems);

		this._updateMItemsAvailableItems();
		this._updateAndSyncMItemsPosition();
	};

	P13nSortModel.prototype.removeModelItemOfIndex = function(iIndex) {
		// var oMItem = this.getModelItemByIndex(iIndex);

		// Reset properties of aggregation item
		this._updateAndSyncProperties(iIndex, {
			sortOrder: undefined,
			selected: false,
			position: undefined
		});

		// Remove model item
		var aMItems = this.getProperty("/items");
		aMItems.splice(iIndex, 1);

		// Keep '(none)' as first model item
		if (!aMItems.length) {
			aMItems.splice(0, 0, {
				columnKey: "(none)",
				comboboxKey: "(none)",
				text: "(none)",
				// Default value
				sortOrder: "Ascending",
				// Disable the 'sortOrder'
				selected: false,
				// will be determined later based on all model items
				position: undefined,
				// will be determined later based on all model items
				availableItems: []
			});
		}
		this.setProperty("/items", aMItems);

		this._updateMItemsAvailableItems();
		this._updateAndSyncMItemsPosition();
	};

	P13nSortModel.prototype.replaceModelItemOfIndex = function(iIndex) {
		var oMItem = jQuery.extend(true, {}, this.getModelItemByIndex(iIndex));

		// Reset properties of 'old' aggregation item
		this._updateAndSyncProperties(iIndex, {
			sortOrder: undefined,
			selected: false,
			position: undefined
		});

		// Replace the 'columnKey' of model item
		var oItem = this.getItemByColumnKey(oMItem.comboboxKey);
		this.setProperty("/items/" + iIndex + "/columnKey", oMItem.comboboxKey ? oMItem.comboboxKey : "(none)");
		this.setProperty("/items/" + iIndex + "/comboboxKey", oMItem.comboboxKey ? oMItem.comboboxKey : "(none)");
		this.setProperty("/items/" + iIndex + "/text", oItem ? oItem.getText() : "(none)");

		// Update properties of 'new' aggregation item
		this._updateAndSyncProperties(iIndex, {
			sortOrder: oMItem.sortOrder,
			selected: !!oItem,
			position: oMItem.position
		});

		this._updateMItemsAvailableItems();
	};

	P13nSortModel.prototype._updateItemsPosition = function() {
		this.getProperty("/availableItems").forEach(function(oItem) {
			var oMItem = this.getModelItemByColumnKey(oItem.getColumnKey());
			if (oMItem) {
				oItem.setPosition(oMItem.position);
			} else {
				oItem.setPosition(undefined);
			}
		}, this);
	};

	P13nSortModel.prototype.updateProperties = function(iIndex, oMItem) {
		this._updateAndSyncProperties(iIndex, oMItem);

		// this._updateMItemsAvailableItems();
		// this._updateItemsPosition();
	};

	P13nSortModel.prototype._updateAndSyncProperties = function(iIndex, oMItemUpd) {
		var oMItem = this.getModelItemByIndex(iIndex);
		// In case of '(none)' we do not have appropriate aggregation item
		var oItem = this.getItemByColumnKey(oMItem.columnKey);

		// Update model item and appropriate aggregation item
		if (oMItem) {
			if (oMItemUpd.hasOwnProperty("selected")) {
				this.setProperty("/items/" + iIndex + "/selected", oMItemUpd.selected);
				if (oItem) {
					oItem.setSelected(oMItemUpd.selected);
				}
			}
			if (oMItemUpd.hasOwnProperty("sortOrder")) {
				this.setProperty("/items/" + iIndex + "/sortOrder", oMItemUpd.sortOrder);
				if (oItem) {
					oItem.setSortOrder(oMItemUpd.sortOrder);
				}
			}
			if (oMItemUpd.hasOwnProperty("position")) {
				this.setProperty("/items/" + iIndex + "/position", oMItemUpd.position);
				if (oItem) {
					oItem.setPosition(oMItemUpd.position);
				}
			}
		}
	};

	P13nSortModel.prototype._updateAndSyncMItemsPosition = function() {
		var iPosition = -1;
		var aMItems = this.getProperty("/items");
		aMItems.forEach(function(oMItem, iIndex) {
			this._updateAndSyncProperties(iIndex, {
				position: oMItem.selected === true ? ++iPosition : undefined
			});
		}, this);
	};

	P13nSortModel.prototype._updateMItemsAvailableItems = function() {
		if (!this.getProperty("/availableItems")) {
			return;
		}
		var aAvailableItems = this.getProperty("/availableItems").filter(function(oTableItem) {
			return !this.getModelItemByColumnKey(oTableItem.getColumnKey());
		}, this).map(function(oTableItem) {
			return {
				comboboxKey: oTableItem.getColumnKey(),
				text: oTableItem.getText()
			};
		});

		this.getProperty("/items").forEach(function(oMItem, iIndex) {
			var aCurrentAvailableItems = jQuery.extend(true, [], aAvailableItems);
			aCurrentAvailableItems.splice(0, 0, {
				comboboxKey: oMItem.columnKey,
				text: oMItem.text
			});
			this.setProperty("/items/" + iIndex + "/availableItems", aCurrentAvailableItems);
		}, this);
	};

	P13nSortModel.prototype.getItemByColumnKey = function(sColumnKey) {
		var aItem = this.getProperty("/availableItems").filter(function(oItem) {
			return oItem.getColumnKey() === sColumnKey;
		});
		return aItem[0];
	};

	/**
	 *
	 * @public
	 */
	P13nSortModel.prototype.getModelItemByColumnKey = function(sColumnKey) {
		var aMItem = this.getProperty("/items").filter(function(oMItem) {
			return oMItem.columnKey === sColumnKey;
		});
		return aMItem[0];
	};

	/**
	 *
	 * @public
	 */
	P13nSortModel.prototype.getModelItemByIndex = function(iIndex) {
		return this.getProperty("/items/" + iIndex);
	};

	/**
	 *
	 * @public
	 */
	P13nSortModel.prototype.getIndexOfModelItem = function(oMItem) {
		return this.getProperty("/items").indexOf(oMItem);
	};

	/**
	 * Moves a model item depending on the real position in the table.
	 * @public
	 */
	P13nSortModel.prototype.selectModelItem = function(iIndex, bIsSelected) {
		var oMItem = this.getModelItemByIndex(iIndex);

		// Update the internal model item: first 'selected' and then 'position'
		this._updateAndSyncProperties(iIndex, {
			selected: bIsSelected
		});
		this._updateAndSyncMItemsPosition();

		var aMItems = this.getProperty("/items");
		// Get selected items ordered from previous item of the current one to the top item (i.g. aMItemsSelected[0]
		// the item above of current item)
		var aMItemsSelected = this._getSelectedModelItemsBetween(oMItem, aMItems[0]);
		// Check if the position of current item in the table is lower then the previous item. If so the item
		// should be moved.
		if (aMItemsSelected.length && aMItemsSelected[0].position > oMItem.position) {
			this.moveModelItemPosition(oMItem, aMItemsSelected[0]);
		} else {
			// Get selected items ordered from next item of the current one to the bottom item (i.g. aMItemsSelected[0]
			// the item below of current item)
			aMItemsSelected = this._getSelectedModelItemsBetween(oMItem, aMItems[aMItems.length - 1]);
			// Check if the position of current item in the table is higher then the next item. If so the item
			// should be moved.
			if (aMItemsSelected.length && aMItemsSelected[0].position < oMItem.position) {
				this.moveModelItemPosition(oMItem, aMItemsSelected[0]);
			}
		}
	};

	/**
	 * Moves model item.
	 *
	 * @param {object} oMItemFrom Model item which will be removed
	 * @param {object} oMItemTo Model item at which index the removed model item will be inserted
	 * @public
	 */
	P13nSortModel.prototype.moveModelItem = function(iIndexFrom, iIndexTo) {
		var oMItemFrom = this.getModelItemByIndex(iIndexFrom);
		var oMItemTo = this.getModelItemByIndex(iIndexTo);
		if (!oMItemFrom || !oMItemTo) {
			return;
		}
		var aMItems = this.getProperty("/items");
		var iIndexFrom = aMItems.indexOf(oMItemFrom);
		var iIndexTo = aMItems.indexOf(oMItemTo);
		if (iIndexFrom < 0 || iIndexTo < 0 || iIndexFrom > aMItems.length - 1 || iIndexTo > aMItems.length - 1) {
			return;
		}

		// Move item
		var oMItemRemoved = aMItems.splice(iIndexFrom, 1)[0];
		aMItems.splice(iIndexTo, 0, oMItemRemoved);
		this.setProperty("/items", aMItems);
	};

	/**
	 * Moves a JSON model item.
	 * @param {int} iIndexFrom
	 * @param {int} iIndexTo
	 * @public
	 */
	P13nSortModel.prototype.moveModelItemPosition = function(iIndexFrom, iIndexTo) {
		var oMItemFrom = this.getModelItemByIndex(iIndexFrom);
		var oMItemTo = this.getModelItemByIndex(iIndexTo);
		var aSelectedMItems = this._getSelectedModelItemsBetween(oMItemFrom, oMItemTo);
		if (!aSelectedMItems.length) {
			return;
		}

		var aMItems = this.getProperty("/items");
		var iIndexFromLocal = aMItems.indexOf(oMItemFrom);
		var iIndexToLocal = aMItems.indexOf(oMItemTo);
		var aMItemsSorted = jQuery.extend(true, [], aMItems);
		aMItemsSorted.sort(function(a, b) {
			if (a.position < b.position) {
				return -1;
			} else if (a.position > b.position) {
				return 1;
			} else {
				return 0;
			}
		});

		// Calculate new 'position'

		// 1. We can remove the item from temporary stack because the array is sorted by 'position'
		var oMItemCopyRemoved = aMItemsSorted.splice(iIndexFromLocal, 1)[0];
		// 2. Assign new 'position'
		var iPosition = -1;
		aMItemsSorted.forEach(function(oMItem) {
			oMItem.position = oMItem.selected === true ? ++iPosition : undefined;
		});
		// 3. Insert the removed item to temporary stack
		aMItemsSorted.splice(iIndexToLocal, 0, oMItemCopyRemoved);
		// 4. Assign new 'position'
		iPosition = -1;
		aMItemsSorted.forEach(function(oMItem) {
			oMItem.position = oMItem.selected === true ? ++iPosition : undefined;
		});
		// 5. Take over the position from the temporary stack
		aMItems.forEach(function(oMItem, iIndex) {
			var oMItemCopy = PersonalizationUtil.getArrayElementByKey("columnKey", oMItem.columnKey, aMItemsSorted);
			this._updateAndSyncProperties(iIndex, {
				position: oMItemCopy.position
			});
		}, this);
	};

	/**
	 * @param {object} oMItemFrom Excluded item. The index of item can be higher or lower then the index of <code>oMItemTo</code>
	 * @param {object} oMItemTo Included item. The index of item can be higher or lower then the index of <code>oMItemFrom</code>
	 * @returns {array}
	 * @private
	 */
	P13nSortModel.prototype._getSelectedModelItemsBetween = function(oMItemFrom, oMItemTo) {
		var aMItems = this.getProperty("/items");
		var iIndexFrom = aMItems.indexOf(oMItemFrom);
		var iIndexTo = aMItems.indexOf(oMItemTo);
		if (iIndexFrom === iIndexTo) {
			// As the 'iIndexFrom' should be excluded of calculation, there is nothing in between
			return [];
		}
		var aMItemsCopy = [];
		if (iIndexFrom < iIndexTo) {
			// From top down
			// Convert oMItemFrom to 'included' item
			// Increase oMItemTo with 1 for slice
			aMItemsCopy = aMItems.slice(iIndexFrom + 1, iIndexTo + 1);
			return aMItemsCopy.filter(function(oMItem) {
				return !!oMItem.selected;
			});
		}
		// From bottom up
		aMItemsCopy = aMItems.slice(iIndexTo, iIndexFrom).reverse();
		return aMItemsCopy.filter(function(oMItem) {
			return !!oMItem.selected;
		});
	};

	/**
	 * @private
	 */
	P13nSortModel.prototype._sortBySelectedAndPosition = function(aMItems) {
		if (this.getProperty("/preventInitialSort")) {
			return;
		}
		aMItems.sort(function(a, b) {
			if (a.selected === true && (b.selected === false || b.selected === undefined)) {
				return -1;
			} else if ((a.selected === false || a.selected === undefined) && b.selected === true) {
				return 1;
			} else if (a.selected === true && b.selected === true) {
				if (a.position < b.position) {
					return -1;
				} else if (a.position > b.position) {
					return 1;
				} else {
					return 0;
				}
			} else if ((a.selected === false || a.selected === undefined) && (b.selected === false || b.selected === undefined)) {
				if (a.text < b.text) {
					return -1;
				} else if (a.text > b.text) {
					return 1;
				} else {
					return 0;
				}
			}
		});
	};

	return P13nSortModel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSortModel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.TableFieldHelp') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.TableFieldHelp'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.base.ManagedObjectModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObjectObserver'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.DisplayListItem'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/TableFieldHelp",[
	'sap/ui/mdc/experimental/FieldHelpBase', 'sap/ui/model/base/ManagedObjectModel',
	'sap/ui/base/ManagedObjectObserver', 'sap/m/List', 'sap/m/DisplayListItem'
], function(FieldHelpBase, ManagedObjectModel, ManagedObjectObserver, List, DisplayListItem) {
	"use strict";

	/**
	 * Constructor for a new TableFieldHelp.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A field help used in the <code>FieldFelp</code> aggregation in <code>Field</code> controls that shows a table
	 * @extends sap.ui.core.Element
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.50.0
	 * @alias sap.ui.mdc.experimental.TableFieldHelp
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var TableFieldHelp = FieldHelpBase.extend("sap.ui.mdc.experimental.TableFieldHelp", /** @lends sap.ui.mdc.experimental.TableFieldHelp.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * The table column that holds the key of a row.
				 */
				keyColumn: {
					type: "int",
					group: "Data",
					defaultValue: 0
					},

				/**
				 * The table column that holds the description of a row.
				 */
				valueColumn: {
					type: "int",
					group: "Data",
					defaultValue: 0
					}
				},
			aggregations: {
				/**
				 * table of the Field help
				 */
				table: {
					type: "sap.m.Table",
					multiple: false
				}
			},
			defaultAggregation: "table",
			events: {

			}
		}
	});

	TableFieldHelp.prototype.init = function() {

		FieldHelpBase.prototype.init.apply(this, arguments);

		this._oObserver = new ManagedObjectObserver(_observeChanges.bind(this));

		this._oObserver.observe(this, {
			properties: ["selectedKey", "filterValue"],
			aggregations: ["table"]
		});

	};

	TableFieldHelp.prototype.exit = function() {

		FieldHelpBase.prototype.exit.apply(this, arguments);

		this._oObserver.disconnect();
		this._oObserver = undefined;

	};

	TableFieldHelp.prototype._createPopover = function() {

		var oPopover = FieldHelpBase.prototype._createPopover.apply(this, arguments);

		var oParent = this.getParent();
		if (oParent) {
			oPopover.setInitialFocus(oParent);
		}

//		var oFilter = new sap.ui.model.Filter("text", _suggestFilter.bind(this));

		oPopover.getContent = function() {
			var oParent = this.getParent();
			if (oParent) {
				return [oParent.getTable()];
			}
			return [];
		};

		return oPopover;

	};

	TableFieldHelp.prototype.setParent = function(oParent, sAggregationName, bSuppressInvalidate) {

		FieldHelpBase.prototype.setParent.apply(this, arguments);

		// focus should stay on Field
		var oPopover = this.getAggregation("_popover");
		if (oPopover) {
			oPopover.setInitialFocus(oParent);
		}

		return this;

	};

	function _observeChanges(oChanges) {

		if (oChanges.name == "table") {
			this.fireDataUpdate();
			var oTable = oChanges.child;
			var oPopover = this.getAggregation("_popover");
			if (oChanges.mutation == "remove") {
				oTable.detachEvent("selectionChange", _handleSelectionChange, this);
				oTable.detachEvent("updateFinished", _handleUpdateFinished, this);
			} else {
				oTable.setMode(sap.m.ListMode.SingleSelectMaster);
				oTable.setRememberSelections(false);
				oTable.attachEvent("selectionChange", _handleSelectionChange, this);
				oTable.attachEvent("updateFinished", _handleUpdateFinished, this);
				_updateSelection.call(this, this.getSelectedKey());
			}
			if (oPopover) {
				oPopover.invalidate();
			}
		}


		if (oChanges.name == "selectedKey") {
			_updateSelection.call(this, oChanges.current);
		}

		if (oChanges.name == "filterValue") {
//			if (this._oList) {
//				var oBinding = this._oList.getBinding("items");
//				oBinding.update();
//				this._oList.updateItems();
//				this._oList.invalidate();
//				_updateSelection.call(this, this.getSelectedKey()); // to update selection
//			}
		}

	}

	TableFieldHelp.prototype.openByTyping = function() {

		return true;

	};

	TableFieldHelp.prototype.navigate = function(iStep) {

		var oTable = this.getTable();
		var oPopover = this._getPopover();
		var oSelectedItem = oTable.getSelectedItem();
		var aItems = oTable.getItems();
		var iItems = aItems.length;
		var iSelectedIndex = 0;

		if (oSelectedItem) {
			iSelectedIndex = oTable.indexOfItem(oSelectedItem);
			iSelectedIndex = iSelectedIndex + iStep;
			if (iSelectedIndex < 0) {
				iSelectedIndex = 0;
			} else if (iSelectedIndex >= iItems - 1) {
				iSelectedIndex = iItems - 1;
			}
		} else if (iStep >= 0){
			iSelectedIndex = iStep - 1;
		} else {
			iSelectedIndex = iItems + iStep;
		}

		var oItem = aItems[iSelectedIndex];
		if (oItem) {
			oItem.setSelected(true);
			var oKeyValue = _getKeyValueFromItem.call(this, oItem);
			this.setProperty("selectedKey", oKeyValue.key, true); // do not invalidate while FieldHelp

			if (!oPopover.isOpen()) {
				this.open();
			}

			this.fireNavigate({value: oKeyValue.value, additionalValue: oKeyValue.additionalValue, key: oKeyValue.key});
		}

	};

	TableFieldHelp.prototype.getTextForKey = function(sKey) {

//TODO. callback for paging???
		var iKeyColumn = this.getKeyColumn();
		var iValueColumn = this.getValueColumn();
		var oTable = this.getTable();

		if (oTable) {
			var aItems = oTable.getItems();

			for (var i = 0; i < aItems.length; i++) {
				var oItem = aItems[i];
				if (oItem.getCells) {
					// only for customListItem
					//TODO: fallback functions for other items???
					var aCells = oItem.getCells();
					var oKeyControl = aCells[iKeyColumn];
					var oValueControl = aCells[iValueColumn];
					var sItemKey;
					if (oKeyControl.getText) {
						sItemKey = oKeyControl.getText();
					}

					if (sKey == sItemKey) {
						if (oValueControl.getText) {
							return oValueControl.getText();
						} else {
							return "";
						}
					}
				}
			}
		}
		return "";

	};

	TableFieldHelp.prototype.getKeyForText = function(sText) {

	//TODO. callback for paging???
		var iKeyColumn = this.getKeyColumn();
		var iValueColumn = this.getValueColumn();
		var oTable = this.getTable();

		if (oTable) {
			var aItems = oTable.getItems();

			for (var i = 0; i < aItems.length; i++) {
				var oItem = aItems[i];
				if (oItem.getCells) {
					// only for customListItem
					//TODO: fallback functions for other items???
					var aCells = oItem.getCells();
					var oKeyControl = aCells[iKeyColumn];
					var oValueControl = aCells[iValueColumn];
					var sValue;
					if (oValueControl.getText) {
						sValue = oValueControl.getText();
					}

					if (sValue == sText) {
						if (oKeyControl.getText) {
							return oKeyControl.getText();
						} else {
							return "";
						}
					}
				}
			}
		}
		return "";

	};

	function _handleSelectionChange(oEvent) {
		var oItem = oEvent.getParameter("listItem");
		var bSelected = oEvent.getParameter("selected");

		if (bSelected) {
			var oKeyValue = _getKeyValueFromItem.call(this, oItem);
			this.setProperty("selectedKey", oKeyValue.key, true); // do not invalidate while FieldHelp
			this.close();
			this.fireSelect({value: oKeyValue.value, additionalValue: oKeyValue.additionalValue, key: oKeyValue.key});
		}
	}

	function _getKeyValueFromItem(oItem) {

		var iKeyColumn = this.getKeyColumn();
		var iValueColumn = this.getValueColumn();
		var sKey;
		var sValue;
		var sAdditionalValue;

		if (oItem.getCells) {
			// only for customListItem
			//TODO: fallback functions for other items???
			var aCells = oItem.getCells();
			var oKeyControl = aCells[iKeyColumn];
			var oValueControl = aCells[iValueColumn];
			if (oKeyControl.getText) {
				sKey = oKeyControl.getText();
			}
			if (oValueControl.getText) {
				sValue = oValueControl.getText();
			}
		}

		return {key: sKey, value: sValue, additionalValue: sAdditionalValue};

	}

	function _handleUpdateFinished() {

		_updateSelection.call(this, this.getSelectedKey());
		this.fireDataUpdate();

	}

//	function _suggestFilter(sText) {
//
//		var sFilterValue = this.getFilterValue();
//
//		if (!sFilterValue || jQuery.sap.startsWithIgnoreCase(sText, sFilterValue)) {
//			return true;
//		} else {
//			return false;
//		}
//
//	}

	function _updateSelection(sSelectedKey) {

		var oTable = this.getTable();
		if (oTable) {
			var aItems = oTable.getItems();
			for (var i = 0; i < aItems.length; i++) {
				var oItem = aItems[i];
				var oKeyValue = _getKeyValueFromItem.call(this, oItem);
				if (oKeyValue.key == sSelectedKey) {
					oItem.setSelected(true);
				} else {
					oItem.setSelected(false);
				}
			}
		}

	}

	return TableFieldHelp;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/TableFieldHelp.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.ControlProvider') ) {
jQuery.sap.declare('sap.ui.mdc.experimental.provider.ControlProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.BindingParser'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/ControlProvider",[
	"sap/ui/base/ManagedObject", "sap/ui/base/BindingParser"
], function(ManagedObject, BindingParser) {
	"use strict";

	var ControlProvider = {
		mProvidedProperties: {

		},
		mProvidedFunctions: {

		}
	};

	/**
	 * Sets the provided property information from the metadata interpretation
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sProperty The name of the control property
	 * @param {any} vValue The value of the property that is provided
	 * @public
	 */
	ControlProvider.provideAttribute = function(oNode, sAttribute, vValue) {
		if (vValue != null) {
			oNode.setAttribute(sAttribute, vValue);
		}
	};

	/**
	 * Sets the provided property information from the metadata interpretation
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sProperty The name of the control property
	 * @param {any} vValue The value of the property that is provided
	 * @public
	 */
	ControlProvider.provideProperty = function(oControl, sProperty, vValue, sAdditionalInfo) {
		if (vValue != null) {
			var oBinding, oProperty = oControl.getMetadata().getProperty(sProperty);

			if (!oProperty) {
				return;
			}

			if (ControlProvider.isPropertyAllowedToBeProvided(oControl, sProperty, vValue)) {
				oControl._oProviderData.mProvidedProperties[sProperty] = { value: vValue, info: sAdditionalInfo};

				oBinding = ControlProvider.getAsBinding(vValue);
				if (oBinding) {
					oControl.bindProperty(sProperty, oBinding);
				} else {
					oProperty.set(oControl, vValue);

				}
			}
		}
	};

	/**
	 * Sets the provided aggegration information from the metadata interpretation
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sAggregation The name of the control aggregation
	 * @param {any} vValue The value of the property that is provided
	 * @param {Control} oTemplate The template
	 * @param {boolean} Whether the aggregation is sharable
	 * @public
	 */
	ControlProvider.provideAggregation = function(oControl, sAggregation, vValue, oTemplate, bShareable) {
		if (vValue != null) {
			var oBinding, oAggregationInfo = oControl.getMetadata().getAggregation(sAggregation);

			if (!oAggregationInfo) {
				return;
			}

			if (ControlProvider.isPropertyAllowedToBeProvided(oControl, sAggregation, vValue)) {
				oControl._oProviderData.mProvidedProperties[sAggregation] = vValue;
				oBinding = ControlProvider.getAsBinding(vValue);
				oBinding.template = oTemplate;
				oBinding.templateShareable = bShareable;

				oControl.bindAggregation(sAggregation, oBinding);
			}
		}
	};

	/**
	 * Sets the function that we be runned to prepare the copies from this control as a template
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sFuncName The name of the function that takes the control a input
	 * @param {function} The function that should be runned to prepare clones
	 * @public
	 */
	ControlProvider.providePrepareCloneFunction = function(oControl, sFuncName, fnFunction) {
		oControl._oProviderData.mProvidedFunctions[sFuncName] = fnFunction;
		fnFunction(oControl);
	};

	/**
	 * Run all the functions that are meant to be runned after cloning a control
	 *
	 * @param {element} oControl The managed object
	 * @private
	 */
	ControlProvider.prepareClone = function(oClone) {
		var aFunctions = oClone._oProviderData.mProvidedFunctions;

		for ( var i in aFunctions) {
			aFunctions[i](oClone);
		}
	};

	/**
	 * Checks if a certain property has already been provided
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sProperty The name of the control property
	 * @param {any} vValue The value of the property that is provided
	 * @public
	 */
	ControlProvider.isPropertyAlreadyProvided = function(oControl, sProperty, vValue) {
		if (oControl._oProviderData.mProvidedProperties[sProperty] && oControl._oProviderData.mProvidedProperties[sProperty] === vValue) {
			return true;
		}

		return false;
	};

	/**
	 * Checks if a property can be provided
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sProperty The name of the control property
	 * @param {any} vValue The value of the property that is provided
	 * @public
	 */
	ControlProvider.isPropertyAllowedToBeProvided = function(oControl, sProperty, vValue) {
		if (oControl.isPropertyInitial(sProperty)) {
			return true;
		}

		if (ControlProvider.isPropertyAlreadyProvided(oControl, sProperty, vValue) && oControl._oProviderData.mProvidedProperties[sProperty] !== vValue) {
			return true;
		}

		return false;
	};

	/**
	 * Checks if control a certain control can be provided from information of another control
	 *
	 * @param {element} oControl The control that will be provided from the provider control
	 * @param {element} oProviderControl The control that is used as template to provide the provided control
	 */
	ControlProvider.canControlBeProvided = function(oControl, oProviderControl) {
		// still not provided
		if (!oControl) {
			return false;
		}

		if (!oControl._oProviderData) {
			oControl._oProviderData = {
				mProvidedProperties: {},// init provided properties
				mProvidedFunctions: {},// init provided properties
				providedFrom: oProviderControl
			// flag the provider control
			};
			return true;
		} else if (oControl._oProviderData.providedFrom && oControl._oProviderData.providedFrom === oProviderControl) {
			return true;
		}

		return false;
	};

	/**
	 * Sets the provided property information from the metadata interpretation
	 *
	 * @param {any} vBinding The binding as string
	 * @public
	 */
	ControlProvider.getAsBinding = function(vBinding) {
		if (typeof vBinding == 'string') {
			return ManagedObject.bindingParser(vBinding);
		} else if (typeof vBinding == 'object') {
			return vBinding;
		}
		return undefined;
	};

	/**
	 * Get the binding as a string
	 */
	ControlProvider.getAsString = function(vBinding) {
		if (typeof vBinding == 'string') {
			return vBinding;
		} else if (typeof vBinding == 'object') {
			var sResult = JSON.stringify(vBinding);

			sResult = sResult.replace(new RegExp("\"path\"", "g"),"path");
			sResult = sResult.replace(new RegExp("\"parts\"", "g"),"parts");
			sResult = sResult.replace(new RegExp("\"parameters\"", "g"),"parameters");
			sResult = sResult.replace(new RegExp("\"expand\"", "g"),"expand");
			sResult = sResult.replace(new RegExp("\"", "g"),"'");

			return sResult;
		}
		return undefined;
	};

	ControlProvider.mergeBindings = function(aBindings, fnFormatter) {
		var sBinding = "{ parts: [" + aBindings.join(",") + "] }";
		var oBindingInfo = ControlProvider.getAsBinding(sBinding);

		oBindingInfo.formatter = [
			fnFormatter
		];

		return oBindingInfo;
	};

	/**
	 * Returns the provided data as mapping
	 *
	 * @param {element} oControl The control that was provided
	 * @return {object} oResult a mapping containing the provided aggregations and their values
	 */
	ControlProvider.getProvidedData = function(oControl) {
		var oResult = {};

		if (oControl) {
			oResult = oControl._oProviderData ? oControl._oProviderData.mProvidedProperties : {};
		}

		return oResult;

	};

	return ControlProvider;
});

}; // end of sap/ui/mdc/experimental/provider/ControlProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.adapter.base.BaseAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Abstract Model adapter
 *
 * @experimental
 * @abstract
 */
jQuery.sap.declare('sap.ui.mdc.experimental.provider.adapter.base.BaseAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/adapter/base/BaseAdapter",[
	"jquery.sap.global", "sap/ui/base/Object"
], function(jQuery, BaseObject) {
	"use strict";

	var BaseAdapter = BaseObject.extend("sap.ui.mdc.experimental.provider.adapter.base.BaseAdapter", {
		/**
		 * The reference to the current meta model.
		 *
		 * @protected
		 */
		oMetaModel: undefined,
		/**
		 * The models name
		 *
		 * @protected
		 */
		sModelName: undefined,
		/**
		 * The cached properties
		 *
		 * @private
		 */
		_mPropertyBag: {},
		constructor: function(oModel, sModelName,  sContextName, sMetaContext,bCanonical) {
			this.oModel = oModel;
			this.oMetaModel = oModel.getMetaModel();
			this.sModelName = sModelName;
			this.sContextName = sContextName;

			bCanonical = bCanonical || false;

			if (sMetaContext) {
				this.switchMetaContext(sMetaContext,bCanonical);
			}

			this.putProperty("enabled", this.enabled);
			this.putProperty("label", this.label);
			this.putProperty("tooltip", this.tooltip);
			this.putProperty("//", this["//"]);
		},

		ready: function() {
			if (this.oMetaModel.loaded) {
				return this.oMetaModel.loaded();
			}
		},

		kind: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.BaseAdapter:  method kind must be redefined");
		},

		/**
		 * Switches the metaContext
		 *
		 * @param {string} sMetaContext the meta context
		 * @final
		 */
		switchMetaContext: function(sMetaContext, bCanonical) {
			var sCanonicalMetaContext;

			if (bCanonical) {
				sCanonicalMetaContext = sMetaContext;
			} else {
				this.oMetaContext = this.oMetaModel.getMetaContext(sMetaContext);
				sCanonicalMetaContext = this.oMetaContext.getPath();
			}

			if (sCanonicalMetaContext && sCanonicalMetaContext != this.sMetaContext) {
				this.sMetaContext = sCanonicalMetaContext;

				if (!this._mPropertyBag[this.sMetaContext]) {
					this._mPropertyBag[this.sMetaContext] = {};
				}
			}

			// hook that needs to be implemented
			this.afterMetaContextSwitch(this.sMetaContext, sMetaContext);
		},
		/**
		 * Adaptions after a meta context switch
		 *
		 * @protected
		 */
		afterMetaContextSwitch: function(sMetaContext) {
			throw new Error("sap.ui.mdc.experimental.provider.model.BaseAdapter:  method afterMetaContextSwitch must be redefined");
		},

		/**
		 * The name of the model
		 *
		 * @returns
		 */
		getModelName: function() {
			return this.sModelName;
		},
		/**
		 * Puts a deferred property to the corresponding adapter
		 */
		putProperty: function(sProperty, fnGetter, oArgs, caller) {
			if (!caller) {
				caller = this;
			}

			Object.defineProperty(this, sProperty, {
				configurable: true,
				get: function() {
					if (!this._mPropertyBag[this.sMetaContext].hasOwnProperty(sProperty)) {
						this._mPropertyBag[this.sMetaContext][sProperty] = fnGetter.apply(caller, oArgs);
					}

					return this._mPropertyBag[this.sMetaContext][sProperty];
				}
			});
		},
		/**
		 * The editable meta data information for the property.
		 *
		 * @return {object} The editable information for the property, this may also be a binding
		 * @public
		 */
		enabled: function() {
			return true;
		},
		/**
		 * The readonly meta data information for the property.
		 *
		 * @return {object} The readonly information for the property, this may also be a binding
		 * @public
		 */
		disabled: function() {
			return false;
		},
		/**
		 * The label information for the property.
		 *
		 * @return {string} The label information for the property
		 * @public
		 */
		label: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.BaseAdapter:  method getLabel must be redefined");
		},
		/**
		 * The tooltip information for the property.
		 *
		 * @return {string} The tooltip information for the property
		 * @public
		 */
		tooltip: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.FieldAdapter:  method getTooltip must be redefined");
		},
		/**
		 * The binding as a path within the model name
		 */
		asPath: function(sValuePath, sType) {
			var sPath = "{";

			if (this.sModelName) {
				sPath = sPath + "model: '" + this.sModelName + "',";
			}

			sPath = sPath + "path: '" + sValuePath + "'";

			if (sType) {
				sPath = sPath + ", type: '" + sType + "'";
			}

			sPath = sPath + "}";

			return sPath;
		},
		/**
		 * Retreives the context name
		 */
		getContext: function() {
			return this.sContextName;
		},
		/**
		 * Negation of the property
		 */
		not: function(sPropertyName) {
			var sNotPropertyName;

			if (sPropertyName[0] != "!") {
				sNotPropertyName = "!" + sPropertyName;
			} else {
				sNotPropertyName = sPropertyName.substr(1);
			}

			return this[sNotPropertyName];
		},
		/**
		 *
		 */
		setValue: function(sProperty,vValue) {
			Object.defineProperty(this, sProperty, {
				configurable: true,
				get: function() {
					if (!this._mPropertyBag[this.sMetaContext].hasOwnProperty(sProperty)) {
						this._mPropertyBag[this.sMetaContext][sProperty] = vValue;
					}

					return this._mPropertyBag[this.sMetaContext][sProperty];
				}
			});
		}

	});

	return BaseAdapter;

});
}; // end of sap/ui/mdc/experimental/provider/adapter/base/BaseAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.adapter.base.CollectionAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Abstract Model adapter
 *
 * @experimental
 * @abstract
 */
jQuery.sap.declare('sap.ui.mdc.experimental.provider.adapter.base.CollectionAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/adapter/base/CollectionAdapter",[
	"jquery.sap.global", "./BaseAdapter"
], function(jQuery, BaseAdapter) {
	"use strict";

	var CollectionAdapter = BaseAdapter.extend("sap.ui.mdc.experimental.provider.model.CollectionAdapter", {

		constructor: function(oModel, sModelName, sMetaContext, bCanonical,Base) {
			var SuperAdapter = BaseAdapter;

			if (Base) {
				jQuery.extend(SuperAdapter.prototype,Base.prototype);
				SuperAdapter.prototype.constructor = BaseAdapter;
			}

			SuperAdapter.prototype.constructor.apply(this,arguments);

			this.putProperty("columns", this.columns);
			this.putProperty("measures", this.measures);
			this.putProperty("dimensions",this.dimensions);
			this.putProperty("filterItems",this.filterItems);

		},

		columns: function() {
			throw new Error("ap.ui.mdc.experimental.provider.model.CollectionAdapter:  method columns must be redefined");
		},

		measures: function() {
			throw new Error("ap.ui.mdc.experimental.provider.model.CollectionAdapter:  method measures must be redefined");
		},

		dimensions: function() {
			throw new Error("ap.ui.mdc.experimental.provider.model.CollectionAdapter:  method dimensions must be redefined");
		},

		filterItems: function() {
			throw new Error("ap.ui.mdc.experimental.provider.model.CollectionAdapter:  method filterItems must be redefined");
		}

	});

	return CollectionAdapter;

});

}; // end of sap/ui/mdc/experimental/provider/adapter/base/CollectionAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.adapter.base.FieldAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Abstract Model adapter
 *
 * @experimental
 * @abstract
 */
jQuery.sap.declare('sap.ui.mdc.experimental.provider.adapter.base.FieldAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/adapter/base/FieldAdapter",[
	"jquery.sap.global", "./BaseAdapter"
], function(jQuery, BaseAdapter) {
	"use strict";

	var FieldAdapter = BaseAdapter.extend("sap.ui.mdc.experimental.provider.adapter.base.FieldAdapter", {

		constructor: function(oModel, sModelName, sMetaContext, bCanonical, Base) {
			var SuperAdapter = BaseAdapter;

			if (Base) {
				jQuery.extend(SuperAdapter.prototype,Base.prototype);
				SuperAdapter.prototype.constructor = BaseAdapter;
			}

			SuperAdapter.prototype.constructor.apply(this,arguments);

			this.putProperty("allowEmptyValue",this.allowEmptyValue);
			this.putProperty("defaultValue",this.defaultValue); //default is not allowed from javascript
			this.putProperty("maximum",this.maximum);
			this.putProperty("exclusiveMaximum",this.exclusiveMaximum);
			this.putProperty("minimum",this.minimum);
			this.putProperty("exclusiveMinimum",this.exclusiveMinimum);
			this.putProperty("maxLength",this.maxLength);
			this.putProperty("minLength",this.minLength);
			this.putProperty("multipleOf", this.multipleOf);
			this.putProperty("pattern",this.pattern);
			this.putProperty("visible", this.visible);
			this.putProperty("value", this.value);
			this.putProperty("required", this.required);
			this.putProperty("name", this.name);
			this.putProperty("precision", this.precision);
			this.putProperty("scale", this.scale);
			this.putProperty("unit", this.unit);
			this.putProperty("semantics", this.semantics);// for Input url, password....
			this.putProperty("textAlign",this.textAlign);
			this.putProperty("ui5Type", this.ui5Type);// OData model type
			this.putProperty("formatOptions", this.formatOptions);
			this.putProperty("constraints",this.constraints);
			//this.putProperty("filterable", this.filterable);// ?? on the generic field adapter
			//this.putProperty("requiredInFilter", this.requiredInFilter);// ??
			//this.putProperty("sortable", this.sortable);//??
			this.putProperty("valueHelp", this.valueHelp);
			this.putProperty("describedBy", this.describedBy);


			/**
			 * Properties:
			 *  - textAlign//??? convenient
			 */
		},

		kind: function() {
			return 'field';
		},

		allowEmptyValue: function() {
			return true;
		},

		/**
		 * The default Value for the field
		 */
		defaultValue: function() {
			switch (this.ui5Type) {
				case "sap.ui.model.odata.type.Boolean":
					return false;
				case "sap.ui.model.odata.type.Byte":
				case "sap.ui.model.odata.type.Decimal":
				case "sap.ui.model.odata.type.Double":
				case "sap.ui.model.odata.type.Guid":
				case "sap.ui.model.odata.type.Int16":
				case "sap.ui.model.odata.type.Int32":
				case "sap.ui.model.odata.type.Int64":
				case "sap.ui.model.odata.type.SByte":
				case "sap.ui.model.odata.type.Single":
					return 0;
				case "sap.ui.model.odata.type.Date":
				case "sap.ui.model.odata.type.DateTimeOffset":
				case "sap.ui.model.odata.type.TimeOfDay":
					return new Date();
				case "Edm.String":
					return "";
				default:
					return "";
			}
		},

		precision: function() {
			return 1;
		},

		scale: function() {
			return 0;
		},

		maximum: function() {
			return 0;
		},

		exclusiveMaximum: function() {
			return false;
		},

		minimum: function() {
			return 0;
		},

		exclusiveMinimum: function() {
			return false;
		},

		maxLength: function() {
			return 255;
		},

		minLength: function() {
			return -1;
		},

		multipleOf: function() {
			return 1;
		},

		pattern: function() {
			return "/.*?/"; //any pattern
		},

		unit: function() {

		},

		/**
		 * The visible meta data information for the property.
		 *
		 * @return {object} The visible information for the property, this may also be a binding
		 * @public
		 */
		visible: function() {
			return true;
		},
		/**
		 * The hidden meta data information for the property.
		 *
		 * @return {object} The hidden information for the property, this may also be a binding
		 * @public
		 */
		hidden: function() {
			return false;
		},
		/**
		 * The value of the property
		 *
		 * @return {string} The id prefix
		 * @public
		 */
		value: function() {
			return this.asPath(this.name, this.ui5Type);
		},
		/**
		 * The prefix for the control Id of the driven control
		 *
		 * @return {string} The id prefix
		 * @public
		 */
		name: function() {
			throw new Error("sap.ui.mdc.experimental.provider.adapter.base.FieldAdapter:  method name must be redefined");
		},
		/**
		 * The required meta data information for the property.
		 *
		 * @return {object} The required information for the property, this may also be a binding
		 * @public
		 */
		required: function() {
			return false;
		},
		/**
		 * Defines the semantics of the property
		 *
		 * @see FieldAdapter.Semantics
		 * @return {Semantics} The fields semantic
		 * @public
		 */
		semantics: function() {
			return FieldAdapter.Semantics.Text;

		},

		textAlign: function() {

		},
		/**
		 * Indicates if property is flagged as URL.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as URL
		 *
		 * @public
		 */
		url: function() {
			return false;
		},
		/**
		 * Indicates if property is flagged as password.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as password
		 *
		 * @public
		 */
		password: function() {
			return false;
		},
		/**
		 * Indicates if property is flagged as phone number.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as phone number
		 *
		 * @public
		 */
		phoneNumber: function() {
			return false;
		},
		/**
		 * Indicates if property is flagged as E-Mail.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as E-Mail
		 *
		 * @public
		 */
		eMail: function() {
			return false;
		},
		/**
		 * The UI5 type information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		ui5Type: function() {
			return "Text";
		},
		/**
		 * The constraints of the field
		 *
		 * @return {object} oConstraints - The contraints objects the field
		 * @return {int}	oConstraints.min 		 The minimal value
		 * @return {int}	oConstraints.max 		 The maximal value
		 * @return {int}	oConstraints.minLength   The minimal length value
		 * @return {int}	oConstraints.maxLength   The maximal length value
		 */
		constraints: function() {

		},
		/**
		 * The formatOptions information for the property.
		 *
		 * @return {object} oFormatOptions The format options
		 * @return {string} oFormatOptions.pattern The pattern
		 * @return {int}    oFormatOptions.precision The precision
		 * @public
		 */
		formatOptions: function() {
			throw new Error("sap.ui.mdc.experimental.provider.adapter.base.FieldAdapter:  method formatOptions must be redefined");
		},
		/**
		 * The filterable information for the property.
		 *
		 * @return {boolean} The UI5 type information for the property
		 * @public
		 */
		filterable: function() {
			return true;
		},
		/**
		 * The requiredInFilter information for the property.
		 *
		 * @return {boolean} The UI5 type information for the property
		 * @public
		 */
		requiredInFilter: function() {
			return false;
		},
		/**
		 * The sortable information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		sortable: function() {
			return true;
		},
		/**
		 * The the valueHelp for the field.
		 *
		 * @return {object} The UI5 type information for the property
		 * @public
		 */
		valueHelp: function() {
			return [];
		},

		/***
		 * The property/path that describes the given field in a TextArrangment
		 *
		 * @return {object} The describing property, by default the property it
		 * @public
		 */
		describedBy: function() {
			return this;
		}

	});

	FieldAdapter.Semantics = {
		text: 0,
		eMail: 1,
		password: 2,
		url: 3,
		phoneNumber: 4,
		currency: 5,
		measure: 6
	};

	return FieldAdapter;

});
}; // end of sap/ui/mdc/experimental/provider/adapter/base/FieldAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.adapter.base.ObjectAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Abstract Model adapter
 *
 * @experimental
 * @abstract
 */
jQuery.sap.declare('sap.ui.mdc.experimental.provider.adapter.base.ObjectAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/adapter/base/ObjectAdapter",[
	"jquery.sap.global", "./BaseAdapter"
], function(jQuery, BaseAdapter) {
	"use strict";

	var ObjectAdapter = BaseAdapter.extend("sap.ui.mdc.experimental.provider.model.ObjectAdapter", {

		constructor: function(oModel, sModelName, sMetaContext, bCanonical,Base) {
			var SuperAdapter = BaseAdapter;

			if (Base) {
				jQuery.extend(SuperAdapter.prototype,Base.prototype);
				SuperAdapter.prototype.constructor = BaseAdapter;
			}

			SuperAdapter.prototype.constructor.apply(this,arguments);

			this.putProperty("collection", this.collection);
			this.putProperty("keys", this.keys);
			this.putProperty("fields", this.fields);
			this.putProperty("relations", this.relations);
		},

		kind: function() {
			return 'object';
		},

		/**
		 * The path to the object as a collection
		 *
		 * @return {string} A binding path
		 */
		collection: function() {
			throw new Error("ap.ui.mdc.experimental.provider.model.ObjectAdapter:  method collection must be redefined");
		},

		/**
		 *
		 */
		keys: function() {

		},
		/**
		 * A map of the object fields
		 *
		 * @return {object} A named array of field adapters
		 * @public
		 */
		fields: function() {
			throw new Error("ap.ui.mdc.experimental.provider.model.ObjectAdapter:  method fields must be redefined");
		},
		/**
		 * The relations of the corresponding object
		 */
		relations: function() {
			throw new Error("ap.ui.mdc.experimental.provider.model.ObjectAdapter:  method relations must be redefined");
		}

	});

	return ObjectAdapter;

});
}; // end of sap/ui/mdc/experimental/provider/adapter/base/ObjectAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.model.ModelAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Abstract Model adapter
 *
 * @experimental
 * @abstract
 */
jQuery.sap.declare('sap.ui.mdc.experimental.provider.model.ModelAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/model/ModelAdapter",[
	"jquery.sap.global", "sap/ui/base/Object"
], function(jQuery, BaseObject) {
	"use strict";

	var ModelAdapter = BaseObject.extend("sap.ui.mdc.experimental.provider.model.ModelAdapter", {
		/**
		 * The reference to the current meta model.
		 *
		 * @protected
		 */
		oMetaModel: undefined,
		/**
		 * The models name
		 *
		 * @protected
		 */
		sModelName: undefined,
		/**
		 * The cached properties
		 *
		 * @private
		 */
		_mPropertyBag: {},
		constructor: function(oModel, sModelName, sMetaContext,bCanonical) {
			this.oModel = oModel;
			this.oMetaModel = oModel.getMetaModel();
			this.sModelName = sModelName;

			bCanonical = bCanonical || false;

			if (sMetaContext) {
				this.switchMetaContext(sMetaContext,bCanonical);
			}

			this.putProperty("propertyValue", this.propertyValue);
			this.putProperty("key", this.key);
			this.putProperty("visible", this.visible);
			this.putProperty("hidden", this.hidden);
			this.putProperty("enabled", this.enabled);
			this.putProperty("disabled", this.disabled);
			this.putProperty("required", this.required);
			this.putProperty("semantics", this.semantics);
			this.putProperty("ui5Type", this.ui5Type);
			this.putProperty("formatOptions",this.formatOptions);
			this.putProperty("tooltip", this.tooltip);
			this.putProperty("label", this.label);
			this.putProperty("filterable", this.filterable);
			this.putProperty("requiredInFilter", this.requiredInFilter);
			this.putProperty("sortable", this.sortable);
		},

		ready: function() {
			if (this.oMetaModel.loaded) {
				return this.oMetaModel.loaded();
			}
		},

		/**
		 * Switches the metaContext
		 *
		 * @param {string} sMetaContext the meta context
		 * @final
		 */
		switchMetaContext: function(sMetaContext, bCanonical) {
			var sCanonicalMetaContext;

			if (bCanonical) {
				sCanonicalMetaContext = sMetaContext;
			} else {
				this.oMetaContext = this.oMetaModel.getMetaContext(sMetaContext);
				sCanonicalMetaContext = this.oMetaContext.getPath();
			}

			if (sCanonicalMetaContext && sCanonicalMetaContext != this.sMetaContext) {
				this.sMetaContext = sCanonicalMetaContext;

				if (!this._mPropertyBag[this.sMetaContext]) {
					this._mPropertyBag[this.sMetaContext] = {};
				}
			}

			// hook that needs to be implemented
			this.afterMetaContextSwitch(this.sMetaContext, sMetaContext);
		},
		/**
		 * Adaptions after a meta context switch
		 *
		 * @protected
		 */
		afterMetaContextSwitch: function(sMetaContext) {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method afterMetaContextSwitch must be redefined");
		},

		/**
		 * The name of the model
		 *
		 * @returns
		 */
		getModelName: function() {
			return this.sModelName;
		},
		/**
		 * Puts a deferred property to the corresponding adapter
		 */
		putProperty: function(sProperty, fnGetter, oArgs, caller) {
			if (!caller) {
				caller = this;
			}

			Object.defineProperty(this, sProperty, {
				configurable: true,
				get: function() {
					if (!this._mPropertyBag[this.sMetaContext].hasOwnProperty(sProperty)) {
						this._mPropertyBag[this.sMetaContext][sProperty] = fnGetter.apply(caller, oArgs);
					}

					return this._mPropertyBag[this.sMetaContext][sProperty];
				}
			});
		},
		/**
		 * The value of the property
		 *
		 * @return {string} The id prefix
		 * @public
		 */
		propertyValue: function() {
			return this.asPath(this.key);
		},
		/**
		 * The prefix for the control Id of the driven control
		 *
		 * @return {string} The id prefix
		 * @public
		 */
		key: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method key must be redefined");
		},
		/**
		 * The visible meta data information for the property.
		 *
		 * @return {object} The visible information for the property, this may also be a binding
		 * @public
		 */
		visible: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method visible must be redefined");
		},
		/**
		 * The hidden meta data information for the property.
		 *
		 * @return {object} The hidden information for the property, this may also be a binding
		 * @public
		 */
		hidden: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isHidden must be redefined");
		},
		/**
		 * The editable meta data information for the property.
		 *
		 * @return {object} The editable information for the property, this may also be a binding
		 * @public
		 */
		enabled: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isEnabled must be redefined");
		},
		/**
		 * The readonly meta data information for the property.
		 *
		 * @return {object} The readonly information for the property, this may also be a binding
		 * @public
		 */
		disabled: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isDisabled must be redefined");
		},
		/**
		 * The required meta data information for the property.
		 *
		 * @return {object} The required information for the property, this may also be a binding
		 * @public
		 */
		required: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isRequired must be redefined");
		},
		/**
		 * Defines the semantics of the property
		 *
		 * @see ModelAdapter.Semantics
		 * @return {Semantics} The fields semantic
		 * @public
		 */
		semantics: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method semantics must be redefined");
		},
		/**
		 * Indicates if property is flagged as URL.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as URL
		 *
		 * @public
		 */
		url: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isURL must be redefined");
		},
		/**
		 * Indicates if property is flagged as password.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as password
		 *
		 * @public
		 */
		password: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isPassword must be redefined");
		},
		/**
		 * Indicates if property is flagged as phone number.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as phone number
		 *
		 * @public
		 */
		phoneNumber: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isPhoneNumber must be redefined");
		},
		/**
		 * Indicates if property is flagged as E-Mail.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as E-Mail
		 *
		 * @public
		 */
		eMail: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isEmail must be redefined");
		},
		/**
		 * The label information for the property.
		 *
		 * @return {string} The label information for the property
		 * @public
		 */
		label: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method getLabel must be redefined");
		},
		/**
		 * The tooltip information for the property.
		 *
		 * @return {string} The tooltip information for the property
		 * @public
		 */
		tooltip: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method getTooltip must be redefined");
		},
		/**
		 * The UI5 type information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		ui5Type: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method getUI5Type must be redefined");
		},
		/**
		 * The formatOptions information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		formatOptions: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method formatOptions must be redefined");
		},
		/**
		 * The filterable information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		filterable: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method filterable must be redefined");
		},
		/**
		 * The requiredInFilter information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		requiredInFilter: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method requiredInFilter must be redefined");
		},
		/**
		 * The sortable information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		sortable: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method sortable must be redefined");
		},

		/**
		 * The binding as a path within the model name
		 */
		asPath: function(sSimplePath, bWithoutSyntax) {
			var sPath = this.sModelName ? this.sModelName + ">" + sSimplePath : sSimplePath;

			if (!bWithoutSyntax) {
				sPath = "{path: '" + sPath + "'}";
			}

			return sPath;
		}

	});

	ModelAdapter.Semantics = {
		eMail: 1,
		password: 2,
		url: 3,
		phoneNumber: 4,
		currency: 5,
		measure: 6
	};

	return ModelAdapter;

});

}; // end of sap/ui/mdc/experimental/provider/model/ModelAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.model.ODataAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.provider.model.ODataAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/provider/model/ODataAdapter",[
	"./ModelAdapter"
], function(ModelAdapter) {
	"use strict";

	/*
	 * Strips the OData key predicate from a resource path segment. @param {string} sSegment @returns {string}
	 */
	function stripKeyPredicate(sSegment) {
		var iPos = sSegment.indexOf("(");
		return iPos >= 0 ? sSegment.slice(0, iPos) : sSegment;
	}

	var ODataAdapter = ModelAdapter.extend("sap.ui.mdc.experimental.provider.model.ODataAdapter", {
		_schemaCache: {

		},
		aExpand: [],
		constructor: function(oModel, sModelName, sMetaContext, bCanonical, Base) {
			ModelAdapter.prototype.constructor.apply(this, arguments);

			this.putProperty("valueList", this.valueList);
			this.putProperty("fields", this.fields);
			this.putProperty("expand", this.expand);
			this.putProperty("navigationProperties", this.navigationProperties);
			this.putProperty("filterRestrictions", this.filterRestrictions);
		}
	});

	ODataAdapter.prototype.afterMetaContextSwitch = function(sCanonicalPath, sPath) {
		if (!this._schemaCache[sCanonicalPath]) {
			this._schemaCache[sCanonicalPath] = this.oMetaModel.getProperty(sCanonicalPath);
			this.schema = this._schemaCache[sCanonicalPath];
			this._precalucateFieldControl();
		} else {
			this.schema = this._schemaCache[sCanonicalPath];
		}

		this.oEntitySet = this.calculateEntitySet(sPath);
	};

	ODataAdapter.prototype.calculateEntitySet = function(sPath) {
		var oAssocationEnd, sNavigationPropertyName, oEntityType, sQualifiedName, oEntitySet, aParts = sPath.split("/");
		if (aParts[0] !== "") {
			return null;
		}
		aParts.shift();

		// from entity set to entity type
		oEntitySet = this.oMetaModel.getODataEntitySet(stripKeyPredicate(aParts[0]));
		if (!oEntitySet) {
			return null;
		}
		aParts.shift();

		// follow (navigation) properties
		while (aParts.length) {
			sQualifiedName = oEntitySet.entityType;
			oEntityType = this.oMetaModel.getODataEntityType(sQualifiedName);
			sNavigationPropertyName = stripKeyPredicate(aParts[0]);
			oAssocationEnd = this.oMetaModel.getODataAssociationEnd(oEntityType, sNavigationPropertyName);

			if (oAssocationEnd) {
				// navigation property
				oEntitySet = this.oMetaModel.getODataEntitySet(oAssocationEnd.entitySet);
			} else {
				return null;
			}
		}

		return oEntitySet;

	};

	ODataAdapter.prototype.resolveNavi = function(sNaviPath) {
		var aPath = sNaviPath.split("/"), sNavigationProperty = aPath[0];

		var oAssocationEnd = this.oMetaModel.getODataAssociationSetEnd(this.schema, sNavigationProperty);

		var oNaviEntitySet = this.oMetaModel.getODataEntitySet(oAssocationEnd.entitySet);

		var sNaviDeep = "/" + oNaviEntitySet.name + "/" + aPath[1];

		var oMetadataContext = this.oMetaModel.getMetaContext(sNaviDeep);
		var sMetaContext = oMetadataContext.getPath();

		if (this.aExpand.indexOf(sNavigationProperty) == -1) {
			this.aExpand.push(sNavigationProperty);
		}

		var oNavi = new ODataAdapter(this.oModel, this.ModelName, sMetaContext, true);

		oNavi.oEntitySet = oNaviEntitySet;

		return oNavi;
	};

	ODataAdapter.prototype.ui5Type = function() {

		if (this.oMetaModel.getUI5Type) {
			return this.oMetaModel.getUI5Type(this.sMetaContext);
		}

		switch (this.schema.type) {
			case "Edm.Boolean":
				return "sap.ui.model.odata.type.Boolean";
			case "Edm.Byte":
				return "sap.ui.model.odata.type.Byte";
			case "Edm.Date":
				return "sap.ui.model.odata.type.Date";
			case "Edm.DateTimeOffset":
				return "sap.ui.model.odata.type.DateTimeOffset";
			case "Edm.Decimal":
				return "sap.ui.model.odata.type.Decimal";
			case "Edm.Double":
				return "sap.ui.model.odata.type.Double";
			case "Edm.Guid":
				return "sap.ui.model.odata.type.Guid";
			case "Edm.Int16":
				return "sap.ui.model.odata.type.Int16";
			case "Edm.Int32":
				return "sap.ui.model.odata.type.Int32";
			case "Edm.Int64":
				return "sap.ui.model.odata.type.Int64";
			case "Edm.SByte":
				return "sap.ui.model.odata.type.SByte";
			case "Edm.Single":
				return "sap.ui.model.odata.type.Single";
			case "Edm.String":
				return "sap.ui.model.odata.type.String";
			case "Edm.TimeOfDay":
				return "sap.ui.model.odata.type.TimeOfDay";
			default:
				return "sap.ui.model.odata.type.String";
		}
	};

	ODataAdapter.prototype.formatOptions = function() {
		var sFormatOptions = "";

		// TODO: How to translate

		switch (this.ui5Type) {
			case "sap.ui.model.odata.type.Boolean":
				break;
			case "sap.ui.model.odata.type.Byte":

				break;
			case "sap.ui.model.odata.type.Date":
				break;
			case "sap.ui.model.odata.type.DateTimeOffset":
				break;
			case "sap.ui.model.odata.type.Decimal":
				break;
			case "sap.ui.model.odata.type.Double":
				break;
			case "sap.ui.model.odata.type.Guid":
				break;
			case "sap.ui.model.odata.type.Int16":
				break;
			case "sap.ui.model.odata.type.Int32":
				break;
			case "sap.ui.model.odata.type.Int64":
				break;
			case "sap.ui.model.odata.type.SByte":
				break;
			case "sap.ui.model.odata.type.Single":
				break;
			case "sap.ui.model.odata.type.String":
				break;
			case "sap.ui.model.odata.type.TimeOfDay":
				break;
			default:
				break;
		}

		return sFormatOptions;
	};

	ODataAdapter.prototype.semantics = function() {
		if (this.getAnnotation("com.sap.vocabularies.Common.v1.Masked") != null) {
			return ModelAdapter.Semantics.password;
		}

		if (this.getAnnotation("com.sap.vocabularies.Communication.v1.IsEmailAddress") != null) {
			return ModelAdapter.Semantics.eMail;
		}

		if (this.getAnnotation("com.sap.vocabularies.Communication.v1.IsPhoneNumber") != null) {
			return ModelAdapter.Semantics.phoneNumber;
		}

		if (this.getAnnotation("com.sap.vocabularies.Communication.v1.IsUrl") != null) {
			return ModelAdapter.Semantics.url;
		}

		if (this.getAnnotation("Org.OData.Measures.V1.Unit") != null) {
			return ModelAdapter.Semantics.currency;
		}

		if (this.getAnnotation("Org.OData.Measures.V1.ISOCurrency") != null) {
			return ModelAdapter.Semantics.measure;
		}
	};

	ODataAdapter.prototype.key = function() {
		return this.schema.name;
	};

	ODataAdapter.prototype.visible = function() {
		var oHiddenAnno = this._isAnnotationBoolean("com.sap.vocabularies.UI.v1.Hidden");
		var bVisible = oHiddenAnno ? !oHiddenAnno : true;

		if (bVisible && this.schema._fieldControl) {
			bVisible = this.schema._fieldControl.visible;
		}

		return bVisible;
	};

	ODataAdapter.prototype.hidden = function() {
		var oHiddenAnno = this._isAnnotationBoolean("com.sap.vocabularies.UI.v1.Hidden");
		var bHidden = oHiddenAnno ? oHiddenAnno : false;

		if (!bHidden && this.schema._fieldControl) {
			bHidden = this.schema._fieldControl.hidden;
		}

		return bHidden;
	};

	ODataAdapter.prototype.enabled = function() {
		var oUpdatableAnno = this.getAnnotation("Org.OData.Core.V1.Immutable/Bool") || this.getAnnotation("Org.OData.Core.V1.Computed/Bool");
		var bEnabled = oUpdatableAnno ? oUpdatableAnno == "false" : true;

		if (bEnabled && this.schema._fieldControl) {
			bEnabled = this.schema._fieldControl.editable;
		}

		return bEnabled;
	};

	ODataAdapter.prototype.disabled = function() {
		var oUpdatableAnno = this.getAnnotation("Org.OData.Core.V1.Immutable/Bool") || this.getAnnotation("Org.OData.Core.V1.Computed/Bool");
		var bDisabled = oUpdatableAnno ? oUpdatableAnno == "true" : false;

		if (!bDisabled && this.schema._fieldControl) {
			bDisabled = this.schema._fieldControl.readonly;
		}

		return bDisabled;
	};

	ODataAdapter.prototype.required = function() {
		var oRequiredAnno = this.getAnnotation("nullable");

		var bRequired = oRequiredAnno ? oRequiredAnno == "false" : false;

		if (this.schema._fieldControl) {
			bRequired = this.schema._fieldControl.required;
		} else {
			bRequired = bRequired && this.enabled;
		}

		return bRequired;
	};

	ODataAdapter.prototype.tooltip = function() {
		return this.getAnnotation("com.sap.vocabularies.Common.v1.QuickInfo/String");
	};

	ODataAdapter.prototype.label = function() {
		return this.getAnnotation("com.sap.vocabularies.Common.v1.Label/String");
	};

	ODataAdapter.prototype.filterable = function() {
		return (this.filterRestrictions.NonFilterableProperties.indexOf(this.schema.name) === -1);

	};

	ODataAdapter.prototype.requiredInFilter = function() {
		return (this.filterRestrictions.RequiredProperties.indexOf(this.schema.name) !== -1);
	};

	ODataAdapter.prototype.sortable = function() {
		return true;
	};

	ODataAdapter.prototype.navigationProperties = function() {
		var i, oNavi, aNavis = this.getAnnotation("navigationProperty"), aNaviMap = [];

		for (i = 0; i < aNavis.length; i++) {
			oNavi = aNavis[i];

			aNaviMap[oNavi.name] = oNavi;
		}

		return aNaviMap;
	};

	ODataAdapter.prototype.expand = function() {
		return this.aExpand;
	};

	ODataAdapter.prototype.valueList = function() {
		var oResult = null;

		var oValueList = this.getAnnotation("com.sap.vocabularies.Common.v1.ValueList");

		if (oValueList) {
			oResult = {};

			var sEntitySet = "/" + oValueList.CollectionPath.String;

			oResult.valuesPath = this.asPath(sEntitySet);

			oResult.parameters = [];

			var oParam, i, sLocal, sValue, oMetadataContext, sMetaContext;

			for (i = 0; i < oValueList.Parameters.length; i++) {
				oParam = oValueList.Parameters[i];

				sLocal = oParam.LocalDataProperty ? oParam.LocalDataProperty.PropertyPath : null;
				sValue = oParam.ValueListProperty.PropertyPath;

				oMetadataContext = this.oMetaModel.getMetaContext(sEntitySet + "/" + sValue);
				sMetaContext = oMetadataContext.getPath();

				var oValueAdapter = new ODataAdapter(this.oModel, this.ModelName, sMetaContext, true);

				oResult.parameters.push({
					targetProperty: sLocal,
					sourceAdapter: oValueAdapter
				});

			}

		}

		return oResult;
	};

	ODataAdapter.prototype.fields = function() {
		var i, oField, aFields = this.getAnnotation("property"), aFieldMap = [];

		for (i = 0; i < aFields.length; i++) {
			oField = aFields[i];

			aFieldMap[oField.name] = new ODataAdapter(this.oModel, this.ModelName, this.sMetaContext + "/property/" + i, true);
			aFieldMap[oField.name].oEntitySet = this.oEntitySet;
		}

		return aFieldMap;
	};

	ODataAdapter.prototype.filterRestrictions = function() {
		var i, oAnnotation, oFilterRestrictions = {
			NonFilterableProperties: [],
			RequiredProperties: []
		};
		if (this.oEntitySet) {
			oAnnotation = this.getAnnotation("Org.OData.Capabilities.V1.FilterRestrictions", this.oEntitySet);

			if (oAnnotation) {
				if (oAnnotation.NonFilterableProperties) {
					for (i = 0; i < oAnnotation.NonFilterableProperties.length; i++) {
						oFilterRestrictions.NonFilterableProperties.push(oAnnotation.NonFilterableProperties[i].PropertyPath);
					}
				}

				if (oAnnotation.RequiredProperties) {
					for (i = 0; i < oAnnotation.RequiredProperties.length; i++) {
						oFilterRestrictions.RequiredProperties.push(oAnnotation.RequiredProperties[i].PropertyPath);
					}
				}
			}
		}

		return oFilterRestrictions;
	};

	ODataAdapter.prototype.getAnnotation = function(sAnnotation, oAnnotation) {
		oAnnotation = oAnnotation || this.schema;
		var aParts = sAnnotation.split("/");
		var iIndex = 0;

		while (oAnnotation && aParts[iIndex]) {
			oAnnotation = oAnnotation[aParts[iIndex]];
			iIndex++;
		}

		return oAnnotation;
	};

	ODataAdapter.prototype._isAnnotationBoolean = function(sAnnotation) {
		var oAnnotation = this.getAnnotation(sAnnotation);
		var isType = false;
		if (oAnnotation != null) {
			isType = oAnnotation.Bool ? (oAnnotation.Bool == "true") : true;
		}
		return isType;
	};

	ODataAdapter.prototype._precalucateFieldControl = function() {
		var oFieldControl = this.getAnnotation("com.sap.vocabularies.Common.v1.FieldControl");

		if (oFieldControl) {
			var fieldControl = {};
			this._schemaCache[this.sMetaContext]._fieldControl = fieldControl;

			if (oFieldControl.EnumMember) {

				switch (oFieldControl.EnumMember) {
					case "com.sap.vocabularies.Common.v1.FieldControlType/Hidden":
						fieldControl.visible = false;
						fieldControl.hidden = true;
						fieldControl.editable = false;
						fieldControl.readonly = true;
						fieldControl.required = false;
						break;
					case "com.sap.vocabularies.Common.v1.FieldControlType/Mandatory":
						fieldControl.visible = true;
						fieldControl.hidden = false;
						fieldControl.editable = true;
						fieldControl.readonly = false;
						fieldControl.required = true;
						break;
					case "com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly":
						fieldControl.visible = true;
						fieldControl.hidden = false;
						fieldControl.editable = false;
						fieldControl.readonly = true;
						fieldControl.required = false;
						break;
					default:
						fieldControl.visible = true;
						fieldControl.hidden = false;
						fieldControl.editable = true;
						fieldControl.readonly = true;
						fieldControl.required = false;
						break;
				}
			} else {
				var sPath = oFieldControl.Path;
				if (this.getModelName()) {
					sPath = this.getModelName() + ">" + sPath;
				}

				fieldControl.visible = "{= ${" + sPath + "} !== 0}";
				fieldControl.hidden = "{= ${" + sPath + "} === 0}";
				fieldControl.editable = "{= ${" + sPath + "} !== 1}";
				fieldControl.readonly = "{= ${" + sPath + "} === 1}";
				fieldControl.required = "{= ${" + sPath + "} === 7}";
			}
		}
	};

	ODataAdapter.prototype._enrichFromEntitySet = function(oField, oEntitySet) {
		// take sortable, filterable, required in filter
		var i, oFilterRestrictions = this._getAnnotation("Org.OData.Capabilities.V1.FilterRestrictions", oEntitySet);

		oField.filterable = true;
		oField.requiredInFilter = false;

		if (oFilterRestrictions) {
			for (i = 0; i < oFilterRestrictions.NonFilterableProperties; i++) {
				if (oField.name === oFilterRestrictions.NonFilterableProperties.PropertyPath) {
					oField.filterable = false;
				}
			}
		}

	};

	ODataAdapter.prototype.metadataContextOfField = function(oField) {
		var index = Object.keys(this.fields).indexOf(oField.name);

		if (index > -1) {
			return this.sMetaContext + "/property/" + index;
		} else {
			return "";
		}
	};

	return ODataAdapter;
});

}; // end of sap/ui/mdc/experimental/provider/model/ODataAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.registry.Utils') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.provider.registry.Utils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/registry/Utils",[
	"sap/ui/core/Control", "sap/m/library", "sap/ui/mdc/experimental/provider/model/ModelAdapter"
], function(Control, mLibrary, ModelAdapter) {
	"use strict";

	var InputType = mLibrary.InputType;

	return {
		convertToInputType: function(oAdapter) {
			switch (oAdapter.semantics) {
				case ModelAdapter.Semantics.password:
					return InputType.Password;
				case ModelAdapter.Semantics.eMail:
					return InputType.Email;
				case ModelAdapter.Semantics.phoneNumber:
					return InputType.Tel;
				case ModelAdapter.Semantics.url:
					return InputType.Url;
				default:
					var ui5Type = oAdapter.ui5Type;

					switch (ui5Type) {
						case "sap.ui.model.odata.type.Int16":
						case "sap.ui.model.odata.type.Int32":
						case "sap.ui.model.odata.type.Int64":
						case "sap.ui.model.odata.type.Decimal":
						case "sap.ui.model.odata.type.Double":
							return InputType.Number;
						case "sap.ui.model.odata.type.TimeOfDay":
							return InputType.Time;
						case "sap.ui.model.odata.type.DateTime":
						case "sap.ui.model.odata.type.DateTimeBase":
							return InputType.DateTime;
						case "sap.ui.model.odata.type.DateTimeOffset":
						case "sap.ui.model.odata.type.Date":
							return InputType.Date;
						default:
							return InputType.Text;
					}
			}
		},

		getNameSpaceInfo: function(sClassName) {
			var oNameSpaceInfo = {};

			oNameSpaceInfo.className = sClassName;
			var aModule = sClassName.split(".");
			oNameSpaceInfo.localName = aModule.pop();
			oNameSpaceInfo.nameSpace = aModule.join(".");

			return oNameSpaceInfo;
		},

		className: function(xmlNode) {
			// localName for standard browsers, baseName for IE, nodeName in the absence of namespaces
			var localName = xmlNode.localName || xmlNode.baseName || xmlNode.nodeName;

			if (!localName) {
				return undefined;
			}

			return xmlNode.namespaceURI + "." + localName;
		}
	};

});

}; // end of sap/ui/mdc/experimental/provider/registry/Utils.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.internal.common.Helper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

(function () {
	"use strict";

	/*
	 This class contains annotation helpers that can be used by all control helpers
	 */

	jQuery.sap.declare("sap.ui.mdc.internal.common.Helper");

	sap.ui.mdc.internal.common.Helper = {

		isSemanticKey: function (oContext, oValue) {
			var sEntity = oContext.getPath().split('/')[1];
			var aSemanticKeys = oContext.getModel().getObject("/" + sEntity + "/@com.sap.vocabularies.Common.v1.SemanticKey");
			if (aSemanticKeys) {
				for (var i = 0; i < aSemanticKeys.length; i++) {
					if (aSemanticKeys[i].$PropertyPath === oValue.$Path) {
						return true;
					}
				}
			}
			return false;
		},

		replaceSpecialCharsInId: function (sId) {
			if (sId.indexOf(" ") >= 0) {
				jQuery.sap.log.error("Annotation Helper: Spaces are not allowed in ID parts. Please check the annotations, probably something is wrong there.");
			}
			return sId.replace(/@/g, "").replace(/\//g, "::").replace(/#/g, "::");
		},

		_getEntitySetPath: function (oModel, sPropertyPath) {
			var iLength;
			var sEntitySetPath = sPropertyPath.slice(0, sPropertyPath.indexOf("/", 1));
			if (oModel.getObject(sEntitySetPath + "/$kind") === "EntityContainer") {
				iLength = sEntitySetPath.length + 1;
				sEntitySetPath = sPropertyPath.slice(iLength, sPropertyPath.indexOf("/", iLength));
			}
			return sEntitySetPath;
		}
	};


	sap.ui.mdc.internal.common.Helper.isSemanticKey.requiresIContext = true;


})();

}; // end of sap/ui/mdc/internal/common/Helper.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.internal.field.Field.controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.internal.field.Field.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/internal/field/Field.controller",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/ui/mdc/experimental/Action"
], function (jQuery, BaseObject, Action) {
	"use strict";

	var FieldController = BaseObject.extend("sap.ui.mdc.internal.field.Field.controller", {
		constructor: function (oField, oTable) {
			BaseObject.apply(this, arguments);
			this.oField = oField;
			this.oTable = oTable;
		}
	});


	/*
	      Please note: those methods below are called from the table control as well - currently in this case
	      this.oField is empty, only the oEvent can be used as there is no real instance of the field
	      there is a connection to the table (this.oTable) but this is also not available always so be prepared for both
	 */

	FieldController.prototype.onContactDetails = function (oEvent) {
		var oPopover;
		if (oEvent.getSource().data("Location") === "Header") {
			oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
		} else if (oEvent.getSource().data("Location") === "Section") {		//ContactPopUpover in Section
			oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
		} else if (oEvent.getSource().data("Location") === "SmartTable") {	//ContactPopUpOver in SmartTable
			oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
		} else {
			oPopover = oEvent.getSource().getParent().getParent().getParent().getParent().getParent().getAggregation(
				"items")[1];
		}
		oPopover.setBindingContext(oEvent.getSource().getBindingContext());
		oPopover.openBy(oEvent.getSource());
	};

	FieldController.prototype.onDraftLinkPressed = function (oEvent) {
		var oButton = oEvent.getSource();
		var oBindingContext = oButton.getBindingContext();
		var oParent;
		if (!this._oDraftInfoPopover) {
			oParent = this.oField || this.oTable;
			this._oDraftInfoPopover = sap.ui.xmlfragment("sap.ui.mdc.internal.common.DraftInfoPopover", this);
			oParent.addDependent(this._oDraftInfoPopover);
		}
		this._oDraftInfoPopover.setBindingContext(oBindingContext);
		this._oDraftInfoPopover.openBy(oButton);
	};

	FieldController.prototype.closeDraftAdminPopover = function (oEvent) {
		this._oDraftInfoPopover.close();
	};

	FieldController.prototype.onDataFieldWithIntentBasedNavigationPressed = function (oEvent) {
		var oLink = oEvent.getSource();
		var sSemanticObject = oLink.data('SemanticObject');
		var sAction = oLink.data('Action');
		var oData = oLink.getParent().getBindingContext().getObject();
		var oParameters = {};
		for (var sProperty in oData) {
			if (sProperty && sProperty[0] !== "@" && typeof oData[sProperty] === 'string') {
				oParameters[sProperty] = oData[sProperty];
			}
		}
		var oCrossAppNavigator = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
		if (oCrossAppNavigator) {
			oCrossAppNavigator.toExternal({
				target: {
					semanticObject: sSemanticObject,
					action: sAction
				},
				params: oParameters
			});
		}
	};


	return FieldController;

});






}; // end of sap/ui/mdc/internal/field/Field.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.internal.table.p13nsettings.P13nSettings.controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.internal.table.p13nsettings.P13nSettings.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/internal/table/p13nsettings/P13nSettings.controller",[
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/Sorter",
	"sap/ui/model/json/JSONModel"
], function (Controller, Sorter, JSONModel) {
	"use strict";
	return Controller.extend("sap.ui.mdc.internal.table.p13nsettings.P13nSettings", {
		//Event handler for Cancel button
		onCancel: function (oEvent) {
			oEvent.getSource().close();
			this.getView().destroy();
		},

		//Event handler for OK button
		onConfirm: function (oEvent) {
			var aPanels = oEvent.getSource().getPanels(),
				aCondition = [],
				aSorters = [],
				sPath,
				bDescending,
				iIndex;

			for (iIndex in aPanels) {
				var sPanelName = aPanels[iIndex].getMetadata().getName();
				if (sPanelName === "sap.m.P13nSortPanel") {
					aCondition.sortCondition = aPanels[iIndex]._getConditions();
				}
				if (sPanelName === "sap.m.P13nGroupPanel") {
					aCondition.groupCondition = aPanels[iIndex]._getConditions();
				}
			}

			var fnGroup = function (oContext) {
				sPath = (aCondition.groupCondition && aCondition.groupCondition[0].keyField);
				var sKey = oContext.getProperty(sPath);
				var sName = (aCondition.groupCondition[0] && aCondition.groupCondition[0].text);

				if (sName.indexOf(":") > 0) {
					sName = sName.substr(0, sName.indexOf(":"));
				}

				return {
					key: sKey,
					text: sName + " : " + sKey
				};
			};

			//grouping
			if (aCondition.groupCondition && aCondition.groupCondition.length > 0) {
				sPath = aCondition.groupCondition[0] && aCondition.groupCondition[0].keyField;
				bDescending = !!(aCondition[0] && aCondition[0].operation === "GroupDescending");
				var oGroupSorter = new Sorter(sPath, bDescending, fnGroup);
				aSorters.push(oGroupSorter);
			}

			//sorting
			if (aCondition.sortCondition) {
				for (iIndex in aCondition.sortCondition) {
					sPath = aCondition.sortCondition[iIndex].keyField;
					bDescending = !!(aCondition.sortCondition[iIndex].operation === "Descending");
					aSorters.push(new Sorter(sPath, bDescending));
				}
			}

			this._saveP13DialogState(aCondition);

			this.oTableController.applyGroupAndSort(aSorters);
			oEvent.getSource().close();
			this.getView().destroy();
		},
		_saveP13DialogState: function(aCondition) {
			var oP13SettingsModelData = this.oView.getModel().getData(),
				iIndex,
				_tempObj;

			//Saving sorting panel state.
			var aP13nSortItems = [];
			for (iIndex in aCondition.sortCondition) {
				_tempObj  = {
					"columnKey" : aCondition.sortCondition[iIndex].keyField,
					"operation" : aCondition.sortCondition[iIndex].operation
				};
				aP13nSortItems.push(_tempObj);
			}
			oP13SettingsModelData.p13nSortItems = aP13nSortItems;

			//Saving grouping panel state
			if (aCondition.groupCondition != undefined && aCondition.groupCondition != null) {
				var aP13nGroupItems = [];
				for (iIndex in aCondition.groupCondition) {
					_tempObj  = {
						"columnKey" : aCondition.groupCondition[iIndex].keyField,
						"operation" : aCondition.groupCondition[iIndex].operation
					};
					aP13nGroupItems.push(_tempObj);
				}
				oP13SettingsModelData.p13nGroupItems = aP13nGroupItems;
			}

			// //Saving the column panel state
			// var aP13nColumnItemsKeys = [];
			// if (this.oView.byId("p13nDialog").getPanels().length === 3) {
			// 	aP13nColumnItemsKeys = this.oView.byId("p13nDialog").getPanels()[2].getOkPayload().selectedItems.map( function(selectedItem) {
			// 		return selectedItem.columnKey;
			// 	});
			// } else {
			// 	aP13nColumnItemsKeys = this.oView.byId("p13nDialog").getPanels()[1].getOkPayload().selectedItems.map( function(selectedItem) {
			// 		return selectedItem.columnKey;
			// 	});
			// }

			// var aP13nColumnItems = [];
			// for (var iIndex in oP13SettingsModelData.columnPanelItems) {
			// 	var _tempObject = JSON.parse(JSON.stringify(oP13SettingsModelData.columnPanelItems[iIndex]));
			// 	if (aP13nColumnItemsKeys.iIndexOf(oP13SettingsModelData.columnPanelItems[iIndex].columnKey) > -1) {
			// 		_tempObject.selected = true;
			// 		aP13nColumnItems.push(_tempObject);
			// 	} else {
			// 		_tempObject.selected = false;
			// 		aP13nColumnItems.push(_tempObject);
			// 	}
			// }
			// oP13SettingsModelData.columnPanelItems = aP13nColumnItems;


			this.oTableController.oP13nSettingsPropertyModel = new JSONModel(oP13SettingsModelData);
		}
	});
});

}; // end of sap/ui/mdc/internal/table/p13nsettings/P13nSettings.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.model.GenericType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare('sap.ui.mdc.model.GenericType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.SimpleType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FormatException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.base.ManagedObjectModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONPropertyBinding'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/model/GenericType",['sap/ui/model/SimpleType', 'sap/ui/model/FormatException', 'sap/ui/model/ParseException', 'sap/ui/model/base/ManagedObjectModel', 'sap/ui/model/json/JSONPropertyBinding'],
	function(SimpleType, FormatException, ParseException, ManagedObjectModel, JSONPropertyBinding) {
		"use strict";

		//TODO: Where to move this?
		//This is only needed for the generic type, therefore mix it in for the moment.
		sap.ui.model.base.ManagedObjectModelPropertyBinding.prototype.setType = function(oType, sInternalType) {
			if (oType && typeof oType._setBinding === "function") {
				oType = oType._clone();
				oType._setBinding(this);
			}
			JSONPropertyBinding.prototype.setType.apply(this, [oType, sInternalType]);
		};

		//resolver for formatter, parser, validator functions
		function _resolve(oType, vHandler) {
			if (typeof vHandler === "function") {
				return {
					object: window,
					fnFunc: vHandler
				};
			} else if (typeof vHandler === "string") {
				if (jQuery.sap.startsWith(vHandler, ".")) {
					if (oType.oBinding) {
						var oObject = oType.oBinding.getModel().getRootObject();
						return {
							object: oObject,
							fnFunc: oObject[vHandler.slice(1)]
						};
					}
				} else {
					return {
						object: window,
						fnFunc: jQuery.sap.getObject(vHandler)
					};
				}
			}
			return null;
		}

		/**
		 * Constructor for a generic type.
		 *
		 * @class
		 * Provides a generic type which allows to customize the format and parse functions.
		 *
		 * Within a managed object model properties of a control can bind to properties of another control. Here the generic type helps to format
		 * and parse the property values from and to control properties.
		 *
		 * @extends sap.ui.model.SimpleType
		 *
		 * @author SAP SE
		 * @version 1.52.7
		 *
		 * @constructor
		 *
		 * @private
		 *
		 * @param {object} [oFormatOptions] formatting options containing a string or function reference for parser, formatter, validator
		 *        {string|function} [oFormatOptions.formatter] formatting function called if a value is read from a bound property.
		 *            A string value will be interpreted as a function name. If the string starts with a dot, the
		 *            function is looked up at the root object of the managed object model, otherwise on the window object.
		 *        {string|function} [oFormatOptions.parser] parser function called if a value is written to a bound property. Can be a string,
		 *            A string value will be interpreted as a function name. If the string starts with a dot, the
		 *            function is looked up at the root object of the managed object model, otherwise on the window object.
		 *        {string|function} [oFormatOptions.validator] validator function called before a value is written to a bound property.
		 *            A string value will be interpreted as a function name. If the string starts with a dot, the
		 *            function is looked up at the root object of the managed object model, otherwise on the window object.
		 *
		 * @param {object} [oConstraints] value constraints.
		 * @alias sap.ui.mdc.model.GenericType
		 */
		var GenericType = SimpleType.extend("sap.ui.mdc.model.GenericType", /** @lends sap.ui.mdc.model.GenericType.prototype */ {

			constructor : function (oFormatOptions, oConstraints) {
				SimpleType.apply(this, arguments);
				this.sName = "Generic";
				this.oBinding = null;
			}

		});

		/**
		 * Formats the value to a given primitive target type
		 * @param {vValue} the value to format
		 * @param {string} the target type such as "string", "int", "boolean", "float" that is used for formatting
		 * @returns {any} the formatted or raw value if no formatter was set with the format options
		 */
		GenericType.prototype.formatValue = function(vValue, sTargetType) {
			var oHandler = _resolve(this, this.oFormatOptions.formatter);
			if (oHandler) {
				return oHandler.fnFunc.call(oHandler.object, vValue, sTargetType, this.getPrimitiveType(sTargetType), this.oBinding);
			}
			return vValue;
		};

		/**
		 * Parses the value from a given primitive source type
		 * @param {vValue} the value to parse
		 * @param {string} the source type such as "string", "int", "boolean", "float" that is used for formatting
		 * @returns {any} the parsed or raw value if no parser was set with the format options
		 */
		GenericType.prototype.parseValue = function(vValue, sSourceType) {
			var oHandler = _resolve(this, this.oFormatOptions.parser);
			if (oHandler) {
				return oHandler.fnFunc.call(oHandler.object, vValue, sSourceType, this.getPrimitiveType(sSourceType), this.oBinding);
			}
			return vValue;
		};

		/**
		 * Validates the value
		 * @param {vValue} the value to validate
		 * @returns {any} the validated value or undefined
		 */
		GenericType.prototype.validateValue = function(vValue) {
			var oHandler = _resolve(this, this.oFormatOptions.validator);
			if (oHandler) {
				return oHandler.fnFunc.call(oHandler.object, vValue);
			}
			return undefined;
		};

		/**
		 * @private
		 */
		GenericType.prototype._setBinding = function(oBinding) {
			this.oBinding = oBinding;
		};

		/**
		 * @private
		 */
		GenericType.prototype._clone = function() {
			return new GenericType(this.oFormatOptions, this.oConstaints);
		};

		return GenericType;
	});

}; // end of sap/ui/mdc/model/GenericType.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.ConditionModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.base.ConditionModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/ConditionModel",[
		'jquery.sap.global', 'sap/ui/model/json/JSONModel', 'sap/ui/model/Filter', 'sap/ui/mdc/base/FilterOperatorConfig'
	],
	function(jQuery, JSONModel, Filter, FilterOperatorConfig) {
		"use strict";

		/**
		 *
		 * @class JSON based Model for sap.ui.mdc.base.FilterField controls. The model stores the entered values as condition objects and applies the conditions to the ListBinding of e.g. a table.
		 * @extends sap.ui.model.json.JSONModel
		 *
		 * @author SAP SE
		 * @version 1.52.7
		 * @since 1.48.0
		 * @alias sap.ui.mdc.base.ConditionModel
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var ConditionModel = JSONModel.extend("sap.ui.mdc.base.ConditionModel", {
			constructor: function() {
				JSONModel.apply(this, arguments);
				this.setSizeLimit(1000);

				this._oMessageBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc");
				sap.ui.getCore().attachLocalizationChanged(function() {
					this._oMessageBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc");
				}.bind(this));

				if (!this.getProperty("/conditions")) { // might already be initialized in the constructor
					this.setProperty("/conditions", []);
				}
				if (!this.getProperty("/fieldPath")) {
					this.setProperty("/fieldPath", {});
				}
			}
		});

		ConditionModel._mModels = {};

		ConditionModel.prototype.destroy = function() {
			JSONModel.prototype.destroy.apply(this, arguments);

			delete this._mFieldPath;
			delete this._oMessageBundle;
		};

		ConditionModel.prototype.clone = function(sFieldPath) {
			var oCM = new ConditionModel();

			//TODO the cloned CM get the same _oListBinding, so that the getFilterOperatorConfig() returns the same instance
			oCM._oListBinding = this._oListBinding;
			oCM.addFilterField(this.getFilterField(sFieldPath));

			var aConditions = this.getConditions(sFieldPath);
			var aClonedConditions = [];
			aConditions.forEach(function(e, i) {
				aClonedConditions.push(jQuery.extend(true, {}, e));
			});
			oCM.setConditions(aClonedConditions);

			return oCM;
		};

		ConditionModel.prototype.merge = function(sFieldPath, oCM, sSourceFieldPath) {
			this.removeAllConditions(sFieldPath);
			var aCleanedConditions = sap.ui.mdc.base.ConditionModel.removeEmptyConditions(oCM.getConditions(sSourceFieldPath));
			this.setConditions(aCleanedConditions);
			this.checkUpdate(true, true);
		};

		ConditionModel.mapConditions = function(aConditions, sTargetFieldPath) {
			if (sTargetFieldPath) {
				for (var i = 0; i < aConditions.length; i++) {
					aConditions[i].fieldPath = sTargetFieldPath;
				}
			}

			return aConditions;
		};

		ConditionModel.cloneConditions = function(aConditions) {
			return jQuery.extend(true, [], aConditions);
		};

		ConditionModel.removeEmptyConditions = function(aConditions) {
			for (var i = aConditions.length - 1; i > -1; i--) {
				if (aConditions[i].isEmpty) {
					aConditions.splice(parseInt(i, 10), 1);
				}
			}
			return aConditions;
		};


		/**
		 * @param oListBinding
		 * @param [sName]
		 */
		ConditionModel.getFor = function(oListBinding, sName) { // TODO: support sName for multiple models
			var sKey = ConditionModel._createKey(oListBinding, sName);
			var oCM = ConditionModel._mModels[sKey]; // TODO

			if (!oCM) {
				oCM = new ConditionModel();
				oCM._oListBinding = oListBinding;
				ConditionModel._mModels[sKey] = oCM;
			} else if (oCM._oListBinding !== oListBinding) {
				// update the oListBinding reverence
				oCM._oListBinding = oListBinding;
			}

			return oCM;
		};

		ConditionModel._createKey = function(oListBinding, sName) {
			return oListBinding.getModel().getId() + "--" + oListBinding.getPath() + "#" + (sName === undefined ? "" : sName);
		};

		/**
		 * @param oListBinding
		 * @param [sName]
		 */
		ConditionModel.prototype.setFor = function(oListBinding, sName) {
			delete ConditionModel._mModels[ConditionModel._createKey(this._oListBinding, sName)];
			this._oListBinding = oListBinding;
			ConditionModel._mModels[ConditionModel._createKey(this._oListBinding, sName)] = this;
			return this;
		};

		/**
		 * @param oConditionModel
		 * @param [sName]
		 */
		ConditionModel.destroyCM = function(oConditionModel, sName) {
			delete ConditionModel._mModels[ConditionModel._createKey(oConditionModel._oListBinding, sName)];
			oConditionModel.destroy();
		};

		ConditionModel._getAll = function(oListBinding) {
			var aOverallModels = [];
			var sKey = ConditionModel._createKey(oListBinding);
			sKey = sKey.slice(0, sKey.length - 1);
			for (var model in ConditionModel._mModels) {
				if (model.indexOf(sKey) === 0) {
					var oCM = ConditionModel._mModels[model];
					aOverallModels.push(oCM);
				}
			}

			return aOverallModels;
		};

		ConditionModel._getAllKeys = function(oListBinding) {
			var aOverallModelKeys = [];
			var sKey = ConditionModel._createKey(oListBinding);
			sKey = sKey.slice(0, sKey.length - 1);
			for (var model in ConditionModel._mModels) {
				if (model.indexOf(sKey) === 0) {
					aOverallModelKeys.push(model);
				}
			}

			return aOverallModelKeys;
		};

		ConditionModel.prototype.getConditions = function(sFieldPath) {
			//TODO: only works for simple flat condition model content
			var aResult = [];
			var aConditions = this.getProperty("/conditions");
			aConditions.forEach(function(oCondition) {
				if (!sFieldPath || oCondition.fieldPath === sFieldPath) {
					aResult.push(oCondition);
				}
			});
			return aResult;
		};

		ConditionModel.prototype.indexOf = function(oCondition) {
			var index = -1;
			var aConditions = this.getProperty("/conditions");
			var sCondition = JSON.stringify(oCondition);
			var sFieldPath = oCondition.fieldPath;
			aConditions.some(function(oCondition, i) {
				if (oCondition.fieldPath === sFieldPath) {
					if (JSON.stringify(oCondition) === sCondition) {
						index = i;
						return true;
					}
				}
				return false;
			});
			return index;
		};

		ConditionModel.prototype.exist = function(oCondition, sFieldPath) {
			return this.indexOf(oCondition, sFieldPath) >= 0;
		};

		ConditionModel.prototype.setConditions = function(aConditions) {
			for (var i = 0; i < aConditions.length; i++) {
				this.insertCondition(-1, aConditions[i], true);
			}
		};

		ConditionModel.prototype.addCondition = function(oCondition, bForceAdd) {
			return this.insertCondition(-1, oCondition, bForceAdd);
		};

		ConditionModel.prototype.insertCondition = function(index, oCondition, bForceAdd) {
			var sFieldPath = oCondition.fieldPath,
				aConditions;

			this._checkIsEmpty(oCondition);
			this._updateValues(oCondition);

			if (!bForceAdd) {
				var i = this.indexOf(oCondition);
				if (i >= 0) {
					return this.getConditions()[i];
				}
			}

			// add condition to model
			aConditions = this.getProperty("/conditions");
			if (index == -1) {
				aConditions.push(oCondition);
			} else {
				aConditions.splice(index, 0, oCondition);
			}

			this.checkUpdate(true, true);
			this._checkMaxConditions(sFieldPath);

			return oCondition;
		};

		/**
		 * creates a condition instance for the Item condition
		 *
		 * @param {string} sFieldPath the fieldPath name of the condition
		 * @param {string} sKey the operator for the condition
		 * @param {string} sDescription 
		 * @return {object} the new condition object with the given fieldPath, the operator EEQ and the sKey and sDescription as aValues. 
		 */
		ConditionModel.prototype.createItemCondition = function(sFieldPath, sKey, sDescription) {
			return this.createCondition(sFieldPath, "EEQ", [sKey, sDescription]);
		};

		/**
		 * creates a condition instance for the condition model
		 *
		 * @param {string} sFieldPath the fieldPath name of the condition
		 * @param {string} sOperator the operator for the condition
		 * @param {any[]} aValues the array of values for the condition
		 * @return {object} the new condition object with the given fieldPath, operator and values. 
		 */
		ConditionModel.prototype.createCondition = function(sFieldPath, sOperator, aValues) {
			var oCondition = { fieldPath: sFieldPath, operator: sOperator, values: aValues };
			this._checkIsEmpty(oCondition);
			this._updateValues(oCondition);
			return oCondition;
		};

		ConditionModel.prototype.removeCondition = function(sFieldPath, iIndex) {
			if (typeof sFieldPath === "object" && iIndex === undefined) {
				var oCondition = sFieldPath;
				sFieldPath = oCondition.fieldPath;
				iIndex = this.indexOf(oCondition);
			}

			//TODO: only works for simple flat condition model content
			var aConditions = this.getProperty("/conditions");
			if (aConditions.some(function(oProp, index, aConditions) {
					if (oProp.fieldPath === sFieldPath) {
						if (iIndex === 0) {
							aConditions.splice(index, 1);
							return true;
						}
						iIndex--;
						return false;
					}
					return false;
				})) {
				this.checkUpdate(true, true);
				this._checkMaxConditions(sFieldPath);
			}
		};

		ConditionModel.prototype.removeAllConditions = function(sFieldPath) {
			var aIndices = [];
			var aConditions = this.getProperty("/conditions");
			aConditions.forEach(function(oProp, i) {
				if (!sFieldPath || oProp.fieldPath === sFieldPath) {
					aIndices.push(i);
				}
			});

			aIndices.sort(function(a, b) { return a - b; });
			for (var i = aIndices.length - 1; i > -1; i--) {
				aConditions.splice(aIndices[i], 1);
			}

			this.checkUpdate(true, true);
		};

		/**
		 * Deletes conditions from the condition model based on the context
		 * @param {sap.ui.model.Context|sap.ui.model.Context[]} oContext a single context or array of contexts to delete.
		 * @private
		 */
		ConditionModel.prototype.deleteConditions = function(oContext, oBinding) {
			var sFieldPath;
			if (!oContext || !oBinding) {
				return;
			}
			//normalize oContext
			if (!jQuery.isArray(oContext)) {
				oContext = [oContext];
			}

			//access the data node for the list binding in the model as reference
			var aData = oBinding.oModel.getProperty(oBinding.getPath(), oBinding.getContext()) || [];

			if (jQuery.isArray(oContext) && aData.length > 0) {
				//collect the indices from the context of each context
				var aIndices = [],
					fn, i, n;
				if (Array.isArray(aData)) {
					for (i = 0; i < oContext.length; i++) {
						aIndices.push(aData.indexOf(oContext[i].getProperty()));
					}
					//in case of array, sort and delete reverse
					aIndices.sort(function(a, b) { return a - b; });
					fn = function(iIndex) {
						sFieldPath = aData[iIndex].fieldPath;
						aData.splice(iIndex, 1); //splice for array
					};
				} else if (typeof oData === "object") {
					for (n in aData) {
						var sIndex = oContext[i].getPath();
						sIndex = sIndex.substring(oContext[i].getPath().lastIndexOf("/") + 1);
						aIndices.push(n);
					}
					fn = function(sIndex) {
						delete aData[sIndex]; //delete for map
					};
				}
				//delete reverse
				for (i = aIndices.length - 1; i > -1; i--) {
					fn(aIndices[i]);
				}
			}
			oBinding.getModel().checkUpdate(true, true);

			this._checkMaxConditions(sFieldPath);
		};

		ConditionModel.prototype._checkIsEmpty = function(aConditions) {
			var oFilterOpConfig = this.getFilterOperatorConfig();

			aConditions = aConditions || this.getConditions();
			if (!Array.isArray(aConditions)) {
				aConditions = [aConditions];
			}

			aConditions.forEach(function(oCondition) {
				var oOperator = oFilterOpConfig.getOperator(oCondition.operator);
				oCondition.isEmpty = oOperator.isEmpty(oCondition);
			});
		};

		ConditionModel.prototype._updateValues = function(aConditions) {
			var oFilterOpConfig = this.getFilterOperatorConfig();

			aConditions = aConditions || this.getConditions();
			if (!Array.isArray(aConditions)) {
				aConditions = [aConditions];
			}

			aConditions.forEach(function(oCondition) {
				var oOperator = oFilterOpConfig.getOperator(oCondition.operator);

				//update the values array length 
				if (oCondition.operator !== "EEQ") {
					while (oCondition.values.length != oOperator.valueTypes.length) {
						if (oCondition.values.length < oOperator.valueTypes.length) {
							oCondition.values.push("");
						}
						if (oCondition.values.length > oOperator.valueTypes.length) {
							oCondition.values = oCondition.values.slice(0, oCondition.values.length - 1);
						}
					}
				}
			});
		};

		/**
		 * This function makes a required check for the given sFieldPath (or all).
		 * It only works when the Filterfields are attached to the ConditionModel. 
		 * The function is checking that for a required FilterField at least one condition exists.
		 * 
		 * @param {string} sFieldPath
		 * @return {boolean} true, if for a sFieldPath the FilterField with required=true no condition exists.
		 *
		 * @private
		 */
		ConditionModel.prototype._checkRequiredConditions = function(bShowMessage, sFieldPath) {
			var aFields = sFieldPath ? [sFieldPath] : Object.keys(this._mFieldPath || {});
			var bError = false;
			var sMsg = this._oMessageBundle.getText("conditionmodel.REQUIRED_CONDITION_MISSING");
			aFields.forEach(function(sFieldPath) {
				if (this._mFieldPath && this._mFieldPath[sFieldPath]) {
					var oFilterField = this._mFieldPath[sFieldPath];
					if (oFilterField.getRequired() && this.getConditions(sFieldPath).length <= 0) {
						if (bShowMessage) {
							this.addFieldPathMessage(sFieldPath, sMsg);
						}
						bError = true;
					} else {
						this.removeFieldPathMessage(sFieldPath, sMsg);
					}
				}
			}, this);

			return !bError;
		};

		/**
		 * This function makes a maxConditions check for the given sFieldPath (or all).
		 * It only works when the Filterfields are attached to the ConditionModel. 
		 * The function is checking that for a FilterField the number of conditions is <=maxCondition.
		 * 
		 * @param {string} sFieldPath
		 * @return {boolean} true, if for a sFieldPath the number of conditions > the FilterField.getMaxConditions.
		 *
		 * @private
		 */
		ConditionModel.prototype._checkMaxConditions = function(sFieldPath) {
			var aFields = sFieldPath ? [sFieldPath] : Object.keys(this._mFieldPath || {});
			var bError = false;
			aFields.forEach(function(sFieldPath) {
				if (this._mFieldPath && this._mFieldPath[sFieldPath]) {
					var oFilterField = this._mFieldPath[sFieldPath];
					var sMsg = this._oMessageBundle.getText("conditionmodel.TOO_MANY_CONDITIONS");

					if (oFilterField.getMaxConditions() >= 0 && this.getConditions(sFieldPath).length > oFilterField.getMaxConditions()) {
						this.addFieldPathMessage(sFieldPath, sMsg);
						bError = true;
					} else {
						this.removeFieldPathMessage(sFieldPath, sMsg);
					}
				}
			}, this);
			return !bError;
		};

		ConditionModel.prototype.addFilterField = function(oFilterField) {
			var sFieldPath = oFilterField.getFieldPath();
			if (!this._mFieldPath) {
				this._mFieldPath = {};
			}
			this._mFieldPath[sFieldPath] = oFilterField;

			var oFieldPath = this.getProperty("/fieldPath");
			if (!oFieldPath[sFieldPath]) {
				oFieldPath[sFieldPath] = {
					valueState: "None",
					valueStateText: "",
					messages: []
				};
			}
		};

		ConditionModel.prototype.getFilterField = function(sFieldPath) {
			var aFields = Object.keys(this._mFieldPath || {});
			return this._mFieldPath[sFieldPath || aFields[0]];
		};

		ConditionModel.prototype.getFilterFields = function() {
			var aFields = Object.keys(this._mFieldPath || {});
			var aFilterFields = [];
			aFields.forEach(function(sFieldPath) {
				aFilterFields.push(this._mFieldPath[sFieldPath]);
			}, this);
			return aFilterFields;
		};


		ConditionModel.prototype.removeFilterField = function(oFilterField) {
			var sFieldPath = oFilterField.getFieldPath();
			if (this._mFieldPath && this._mFieldPath[sFieldPath]) {
				delete this._mFieldPath[sFieldPath];
			}

			var oFieldPath = this.getProperty("/fieldPath");
			if (oFieldPath[sFieldPath]) {
				delete oFieldPath[sFieldPath];
			}
		};

		ConditionModel.prototype._getFieldPathProperty = function(sFieldPath) {
			return this.getProperty("/fieldPath/")[sFieldPath];
		};

		ConditionModel.prototype.addFieldPathMessage = function(sFieldPath, sMsg) {
			var oFieldPath = this._getFieldPathProperty(sFieldPath);

			if (!oFieldPath.messages.some(function(sItem, i) {
					if (sItem === sMsg) {
						return true;
					}
					return false;
				})) {
				oFieldPath.messages.push(sMsg);
			}

			this._updateValueState(sFieldPath);
		};

		ConditionModel.prototype.setUIMessage = function(sFieldPath, sMsg) {
			var oFieldPath = this._getFieldPathProperty(sFieldPath);

			oFieldPath.uiMessage = sMsg;

			this._updateValueState(sFieldPath);
		};


		ConditionModel.prototype.removeFieldPathMessage = function(sFieldPath, sMsg) {
			var iIndex;
			var oFieldPath = this._getFieldPathProperty(sFieldPath);
			if (oFieldPath.messages.some(function(sItem, i) {
					if (sItem === sMsg) {
						iIndex = i;
						return true;
					}
					return false;
				})) {
				oFieldPath.messages.splice(iIndex, 1);
			}

			this._updateValueState(sFieldPath);
		};

		ConditionModel.prototype.removeUIMessage = function(sFieldPath) {
			var oFieldPath = this._getFieldPathProperty(sFieldPath);

			delete oFieldPath.uiMessage;

			this._updateValueState(sFieldPath);
		};


		ConditionModel.prototype._updateValueState = function(sFieldPath) {
			var bUpdate = false,
				oFieldPath = this._getFieldPathProperty(sFieldPath),
				sValueState = "None",
				sValueStateText = "";

			if (oFieldPath.uiMessage) {
				sValueState = "Error";
				sValueStateText = oFieldPath.uiMessage;
			} else if (oFieldPath.messages.length > 0) {
				sValueState = "Error";
				sValueStateText = oFieldPath.messages[oFieldPath.messages.length - 1];
			}

			if (oFieldPath.valueState !== sValueState) {
				oFieldPath.valueState = sValueState;
				bUpdate = true;
			}

			if (oFieldPath.valueStateText !== sValueStateText) {
				oFieldPath.valueStateText = sValueStateText;
				bUpdate = true;
			}

			if (bUpdate) {
				this.checkUpdate(true, true);
			}
		};

		ConditionModel.prototype.isValid = function(bValidate, sFieldPath) {
			var aFields = sFieldPath ? [sFieldPath] : Object.keys(this._mFieldPath || {});
			var bValid = this._checkRequiredConditions(bValidate);
			aFields.forEach(function(sFieldPath) {
				var oFieldPath = this._getFieldPathProperty(sFieldPath);
				bValid = bValid && oFieldPath.valueState == "None";
			}, this);

			return bValid;
		};

		ConditionModel.prototype.applyFilters = function(bValidate) {
			if (this.isValid(bValidate)) {
				var oFilter = this.getAllFilters();
				if (oFilter) {
					this._oListBinding.filter(oFilter);
				} else { // no filters
					this._oListBinding.filter();
				}
				return true;
			}
			return false;
		};

		ConditionModel.prototype.getAllFilters = function() {
			var aOverallModels = ConditionModel._getAll(this._oListBinding);
			var aOverallFilters = [];
			aOverallModels.forEach(function(oCM) {
				var oFilter = oCM.getFilters();
				if (oFilter) {
					aOverallFilters.push(oFilter);
				}
			});

			var oFilter = null;
			if (aOverallFilters.length === 1) {
				oFilter = aOverallFilters[0]; // could omit this and have an ORed array with only one filter, but it's nice this way.
			} else if (aOverallFilters.length > 1) {
				oFilter = new Filter({ filters: aOverallFilters, and: true });
			}

			return oFilter;
		};


		/**
		 *
		 * @public
		 */
		ConditionModel.prototype.getFilterOperatorConfig = function() {
			var oModel = this._oListBinding && this._oListBinding.getModel();
			return FilterOperatorConfig.getFor(oModel);
		};


		ConditionModel.prototype.getFilters = function(sFieldPath) {
			var i, aLocalFilters, aOverallFilters = [],
				aConditions,
				oToAnyFilterParam, aSections, sNavPath, sPropertyPath;

			var oFilterOpConfig = this.getFilterOperatorConfig();

			var oFilterItemNameMap = {};
			if (sFieldPath === undefined) {
				aConditions = this.getConditions();
			} else
			if (typeof sFieldPath === "string") {
				aConditions = this.getConditions(sFieldPath);
			} else {
				aConditions = sFieldPath || [];
			}
			for (i = 0; i < aConditions.length; i++) {
				oFilterItemNameMap[aConditions[i].fieldPath] = true;
			}

			// OR-combine filters for each property
			for (var attrName in oFilterItemNameMap) {
				aLocalFilters = [];
				oToAnyFilterParam = null;

				for (i = 0; i < aConditions.length; i++) {
					if (aConditions[i].fieldPath === attrName) {
						var oOperator = oFilterOpConfig.getOperator(aConditions[i].operator);
						var oFilter = oOperator.getModelFilter(aConditions[i]);

						if (oFilter.sPath.indexOf('*/') > -1) {
							aSections = oFilter.sPath.split('*/');
							if (aSections.length === 2) {
								sNavPath = aSections[0];
								sPropertyPath = aSections[1];
								oFilter.sPath = 'L1/' + sPropertyPath;

								if (!oToAnyFilterParam) {
									oToAnyFilterParam = {
										path: sNavPath,
										operator: 'Any',
										variable: 'L1'
									};
								}
								aLocalFilters.push(oFilter);
							} else {
								throw new Error("Not Implemented");
							}
						} else {
							aLocalFilters.push(oFilter);
						}
					}
				}

				if (oToAnyFilterParam) {
					if (aLocalFilters.length === 1) {
						oToAnyFilterParam.condition = aLocalFilters[0];
					} else if (aLocalFilters.length > 1) {
						oToAnyFilterParam.condition = new Filter({ filters: aLocalFilters, and: false });
					}
					aLocalFilters = [new Filter(oToAnyFilterParam)];
				}

				if (aLocalFilters.length === 1) {
					aOverallFilters.push(aLocalFilters[0]); // could omit this and have an OR-ed array with only one filter, but it's nice this way.
				} else if (aLocalFilters.length > 1) {
					aOverallFilters.push(new Filter({ filters: aLocalFilters, and: false }));
				}
			}

			// AND-combine filters for different properties and apply filters
			if (aOverallFilters.length === 1) {
				return aOverallFilters[0]; // could omit this and have an ORed array with only one filter, but it's nice this way.
			} else if (aOverallFilters.length > 1) {
				return new Filter({ filters: aOverallFilters, and: true });
			} else { // no filters
				return null;
			}
		};

		ConditionModel.prototype.serialize = function() {
			var aConditions = jQuery.extend(true, [], this.getData().conditions);
			aConditions.forEach(function(oCondition) {
				delete oCondition.isEmpty;
			}, this);
			return '{"conditions":' + JSON.stringify(aConditions) + "}";
		};

		ConditionModel.prototype.serializeMeta = function() {
			var aFields = Object.keys(this._mFieldPath || {});
			var r = "";
			aFields.forEach(function(sFieldPath) {
				if (this.getData().fieldPath[sFieldPath].valueState !== "None") {
					r += JSON.stringify(this.getData().fieldPath[sFieldPath]);
				}
			}, this);

			return '{"fieldPath":' + r + "}";
		};

		ConditionModel.prototype.parse = function(sObjects) {
			var dateTimeReviver = function(key, value) {
				var a;
				if (!isNaN(parseInt(key, 10)) && (typeof value === 'string')) {
					a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}).(\d{3})Z$/.exec(value);
					if (a) {
						return new Date(value);
					}
				}
				return value;
			};

			var mResult = this.getData();
			mResult.conditions = JSON.parse(sObjects, dateTimeReviver).conditions;
			this.setData(mResult);
		};

		ConditionModel.serialize = function(oListBinding) {
			var aOverallModelKeys = ConditionModel._getAllKeys(oListBinding);
			var sResult = "";

			aOverallModelKeys.forEach(function(oCMKey) {
				var oCM = ConditionModel._mModels[oCMKey];
				if (oCM.getData().conditions && oCM.getData().conditions.length > 0) {
					sResult += ">>>" + oCMKey + "<<<";
					sResult += oCM.serialize();
				}
			});

			return sResult;
		};

		ConditionModel.serializeMeta = function(oListBinding) {
			var aOverallModelKeys = ConditionModel._getAllKeys(oListBinding);
			var sResult = "";

			aOverallModelKeys.forEach(function(oCMKey) {
				var oCM = ConditionModel._mModels[oCMKey];
				sResult += oCM.serializeMeta();
			});

			return sResult;
		};

		ConditionModel.parse = function(sObjects) {
			var aConditions = sObjects.split(">>>");
			aConditions.forEach(function(sCondition) {
				var aParts = sCondition.split("<<<");
				if (aParts.length > 1) {
					if (ConditionModel._mModels[aParts[0]]) {
						ConditionModel._mModels[aParts[0]].parse(aParts[1]);
					} else {
						var oCM = new ConditionModel(); //TODO oListBinding missing
						oCM.parse(aParts[1]);
						ConditionModel._mModels[aParts[0]] = oCM;
					}
				}
			});
		};

		ConditionModel.createControl = function(oDataType, oOperator, sPath, index) {
			var type = oDataType;
			if (oOperator.valueTypes[index] !== "self" && oOperator.valueTypes[index]) {
				type = oOperator._createLocalType(oOperator.valueTypes[index]);
			}

			if (type && type.sName === "Date") {
				return new sap.m.DatePicker({
					value: { path: sPath, type: type, mode: 'TwoWay' }
				});
			} else {
				return new sap.m.Input({
					value: { path: sPath, type: type, mode: 'TwoWay' }
				});
			}
		};

		return ConditionModel;
	}, /* bExport= */ true);
}; // end of sap/ui/mdc/base/ConditionModel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.CustomFieldHelp') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.CustomFieldHelp'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/CustomFieldHelp",[
	'sap/ui/mdc/experimental/FieldHelpBase'
], function(FieldHelpBase) {
	"use strict";

	/**
	 * Constructor for a new CustomFieldHelp.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A field help used in the <code>FieldFelp</code> aggregation in <code>Field</code> controls that allows to add custom content.
	 * @extends sap.ui.core.Element
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.50.0
	 * @alias sap.ui.mdc.experimental.CustomFieldHelp
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var CustomFieldHelp = FieldHelpBase.extend("sap.ui.mdc.experimental.CustomFieldHelp", /** @lends sap.ui.mdc.experimental.CustomFieldHelp.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				},
			aggregations: {
				/**
				 * content of the Field help
				 */
				content: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			defaultAggregation: "content",
			events: {
				/**
				 * This event is fired before the field help opens
				 */
				beforeOpen: {
					parameters: {

						/**
						 * The <code>value</code> of the field.
						 */
						value: { type: "any" }
					}
				}
			}
		}
	});

	CustomFieldHelp.prototype._createPopover = function() {

		var oPopover = FieldHelpBase.prototype._createPopover.apply(this, arguments);

		// use FieldHelps content in Popover -> overwrite hook
		oPopover._getAllContent = function(){
			var oFieldHelp = this.getParent();
			if (oFieldHelp) {
				var aContent = [];
				aContent.push(oFieldHelp.getContent());
				return aContent;
			} else {
				return this.getContent();
			}
		};

		return oPopover;

	};

	/**
	 * Close the fieldHelp and fires the <code>select</code> event of the field help
	 *
	 * @param {string} sValue selected value
	 * @param {string} sAdditionalValue selected additional value
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	CustomFieldHelp.prototype.fireSelectEvent = function(sValue, sAdditionalValue) {

		this.close();
		this.fireSelect({value: sValue, additionalValue: sAdditionalValue});

	};

	CustomFieldHelp.prototype.open = function() {

		var oField = this.getParent();
		var sValue;

		if (oField) {
			sValue = oField.getValue();
		}

		this.fireBeforeOpen({value: sValue});
		FieldHelpBase.prototype.open.apply(this, arguments);

	};

	return CustomFieldHelp;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/CustomFieldHelp.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.DataObject') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.base.EventProvider
jQuery.sap.declare('sap.ui.mdc.experimental.DataObject'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/DataObject",['jquery.sap.global', 'sap/ui/base/EventProvider', 'sap/ui/mdc/experimental/DataObjectMetadata'],
	function(jQuery, EventProvider, DataObjectMetadata) {
	"use strict";

	/**
	 * Base Class for Data Objects that represent defined data in the view model of a Provider.
	 * The Data Object defines properties only and creates access to those via Object set and get functions in the corresponding
	 * class DataObjectMetadata.
	 *
	 * Instances of DataObjects are mainly used within Providers and act as the Metadata description of the providers model.
	 * As they appear to the Provider as normal json objects, model functionality can stay mainly untouched.
	 *
	 * Data Objects are capable to define various layers. Predefined layer "base" is used for the initial default values.
	 * For every property multiple values can be stored. To use layers the layer needs to be added using the addLayer method.
	 * Using setProperty method a property can be set either for the currently active layer or a specified layer by its name.
	 *
	 * With the hideLayer and showLayer methods one can activate and deactivate the layers which will lead to different values to be returned.
	 * This feature can be used if the property values of a DataObject where added by different sources like ODataMetadata, settings of an application,
	 * settings of a key user and even special user settings.
	 *
	 * @see DataObjectMetadata.
	 *
	 */
	var DataObject = EventProvider.extend("sap.ui.mdc.experimental.DataObject", /* @lends sap.ui.base.EventProvider */ {

		constructor : function(mSettings, oProvider) {
			EventProvider.call(this);
			this._aLayers = [];
			this._aLayerImpl = [];
			this._aLayerContext = [];
			this._aInactiveLayers = [];
			this._sActiveLayer = "";
			this._mLayeredProperties = {};
			this._mProperties = null;
			this._mDefaultProperties = {};
			this.addLayer("base");
			this.applySettings(mSettings);
		},
		metadata : {
			properties : {
				/**
				 * The name of the data object. Normally a technical unique name.
				 */
				name : {
					type: "string",
					mandatory: true,
					unique: true,
					defaultValue : ""
				},
				/**
				 * The parent object of this DataObject, normally a Provider
				 */
				parent: {
					type: "any",
					defaultValue : {}
				},
				/**
				 * Special extension property allows access to the Adapter of the provider.
				 * There is no further type checking done in this case.
				 */
				extensions: {
					type: "any",
					defaultValue : {}
				}
			},
			events: {
				change:{}
			}
		}

	}, DataObjectMetadata);

	/**
	 * Returns the Adapter for this Data Object. The adapter is used to to ask for a value of a property. Normally the adapter needs to implement
	 * a method with the name of the property.
	 *
	 * @returns
	 */
	DataObject.prototype.getAdapter = function() {
		return this._oImpl;
	};

	/**
	 * Hides a layer with the given name if it exists. The "base" layer cannot the hidden.
	 * @param sName
	 */
	DataObject.prototype.hideLayer = function(sName) {
		var i = this._aLayers.indexOf(sName);
		if (i > 0) {
			this._aInactiveLayers.push(i);
		} else if (i == 0) {
			jQuery.sap.log.debug("Layer 'base' cannot be hidden");
		}
	};

	/**
	 * Shows a layer with given name if it exists. The "base" layer is always show.
	 * @param sName
	 */
	DataObject.prototype.showLayer = function(sName) {
		var i = this._aLayers.indexOf(sName);
		if (i > 0) {
			this._aInactiveLayers.splice(this._aInactiveLayers.indexOf(i));
		} else if (i == 0) {
			jQuery.sap.log.debug("Layer 'base' is always shown");
		}
	};

	/**
	 * Sets or adds a layer and makes it the active layer.
	 * All further property setters will write their changes into that layer.
	 *
	 * @param sName
	 * @param oImpl
	 * @param oContext
	 */
	DataObject.prototype.setLayer = function(sName, oImpl, oContext) {
		if (!this._mLayeredProperties[sName]) {
			this.addLayer(sName, oImpl, oContext);
		}
		this._sActiveLayer = sName;
	};

	/**
	 * Adds a layer and makes it the default layer
	 * @param sName
	 * @param oImpl
	 * @param oContext
	 */
	DataObject.prototype.addLayer = function(sName, oImpl, oContext) {
		if (this._aLayers.indexOf(sName) > -1 ) {
			jQuery.sap.log.debug("Layer with " + sName + " already exists");
			return;
		}
		this._aLayers.push(sName);
		this._aLayerImpl.push(oImpl);
		this._aLayerContext.push(oContext);

		this._mLayeredProperties[sName] = {};

		this._sActiveLayer = sName;
		this._mProperties = this._mLayeredProperties[this._sActiveLayer];
	};

	/**
	 * Checks whether a value is valid for a given property
	 * TODO: Currently this is always true.
	 * @param oProperty
	 * @param vValue
	 * @returns {Boolean}
	 */
	DataObject.prototype.isValid = function(oProperty, vValue) {
		return true;
	};

	/**
	 * Sets a property to the active or the active layer if it is not given.
	 * If oProperty is of type string it is assumed that the layer is a special "api" layer.
	 * Normally DataOject are not called directly via a setProperty instead each property has a
	 * Object property setter defined that is used normally.
	 * @param oProperty
	 * @param vValue
	 * @param sLayer
	 */
	DataObject.prototype.setProperty = function(oProperty, vValue, sLayer) {
		if (typeof oProperty === "string") {
			this.addLayer("api");
			oProperty = this.getMetadata().getProperty(oProperty);
		}
		if (this.isValid(oProperty, vValue)) {
			if (sLayer) {
				var i = this._aLayers.indexOf(sLayer);
				if (i === -1) {
					return;
				}
				this._mLayeredProperties[this._aLayers[i]][oProperty.name] = vValue;
			} else {
				this._mProperties[oProperty.name] = vValue;
			}
		}
	};
	/**
	 * Returns a property for a specific layer. If restrict layer is set to true lower layers will not be taken into account.
	 *
	 * @param oProperty
	 * @param sLayer
	 * @param bRestrictLayer
	 * @returns
	 */
	DataObject.prototype.getLayeredProperty = function(oProperty, sLayer, bRestrictLayer) {
		var vValue, i;
		if (typeof oProperty === "string") {
			oProperty = this.getMetadata().getProperty(oProperty);
		}
		if (!sLayer) {
			sLayer = this._sActiveLayer;
		}
		i = this._aLayers.indexOf(sLayer) || this._aLayers.length - 1;
		while (vValue === undefined && i > -1) {
			if (this._aInactiveLayers.indexOf(i) > -1) {
				i--;
				continue;
			}
			vValue = this._mLayeredProperties[this._aLayers[i]][oProperty.name];
			this._iActiveContextLayer = i;
			if (vValue === undefined) {
				var oImpl = this._aLayerImpl[i];
				if (oImpl && oImpl[oProperty.name]) {
					vValue = oImpl[oProperty.name].apply(this, [vValue]);
				}
			}
			if (vValue === undefined && i == 0) {
				if (typeof oProperty.defaultValue === "function") {
					vValue =  oProperty.defaultValue.apply(this);
				} else {
					this._mLayeredProperties[this._aLayers[i]][oProperty.name] = vValue = JSON.parse(JSON.stringify(oProperty.defaultValue));
				}
			}
			i--;
			if (bRestrictLayer) {
				break;
			}
		}
		return vValue;
	};
	/**
	 * Returns the value of a property
	 * @param oProperty
	 * @returns
	 */
	DataObject.prototype.getProperty = function(oProperty) {
		return this.getLayeredProperty(oProperty);
	};

	/**
	 * Returns the context of the currently active layer.
	 * @returns
	 */
	DataObject.prototype.getContext = function() {
		return this._aLayerContext[this._iActiveContextLayer];
	};

	/**
	 * Returns all properties of the DataObject.
	 * @returns {___anonymous7556_7557}
	 */
	DataObject.prototype.getProperties = function() {
		var mProperties = this._mProperties;
		var mResult = {};
		for (var n in mProperties) {
			mResult[n] = mProperties[n];
			if (typeof mProperties[n] === "object" && mProperties[n].hasOwnProperty("length")) {
				mResult[n] = [];
				for (var i = 0; i < mProperties[n].length; i++) {
					if (mProperties[n][i] instanceof DataObject) {
						mResult[n][i] = mProperties[n][i].getProperties();
					}
				}
			}
		}
		return mResult;
	};
	/**
	 * Applies the properties defined in mSettings to the DataObject.
	 * @param mSettings
	 * @returns {DataObject}
	 */
	DataObject.prototype.applySettings = function(mSettings) {
		// PERFOPT: don't retrieve (expensive) JSONKeys if no settings are given
		if ( !mSettings || jQuery.isEmptyObject(mSettings) ) {
			return this;
		}

		var oMetadata = this.getMetadata(),
			mValidKeys = oMetadata.getJSONKeys(), // UID names required, they're part of the documented contract of applySettings
			sKey, oValue, oKeyInfo;

		// process all settings
		// process settings
		for (sKey in mSettings) {
			oValue = mSettings[sKey];
			// get info object for the key
			if ( (oKeyInfo = mValidKeys[sKey]) !== undefined ) {
				switch (oKeyInfo._iKind) {
				case 0: // PROPERTY
					this[oKeyInfo.name] = oValue;
					break;
				case 5: // EVENT
					if ( typeof oValue == "function" ) {
						this[oKeyInfo._sMutator](oValue);
					} else {
						this[oKeyInfo._sMutator](oValue[0], oValue[1], oValue[2]);
					}
					break;
				case -1: // SPECIAL_SETTING
					// No assert
				default:
					break;
				}
			} else {
				// there must be no unknown settings
				jQuery.sap.assert(false, "DataObject.apply: encountered unknown setting '" + sKey + "' for class '" + oMetadata.getName() + "' (value:'" + oValue + "')");
			}
		}

		return this;
	};

	/**
	 * Returns a JSON representation that can be used to store the data of this DataObject in the current stage.
	 * A layer name can be given to create the json based on the given layer, ignoring upper layers.
	 * @param sLayer
	 * @returns {___anonymous9164_9165}
	 */
	DataObject.prototype.toJSON = function(sLayer) {
		var sCurrentLayer = this._sActiveLayer,
			mProperties = this.getMetadata().getAllProperties(),
			oResult = {};
		if (sLayer) {
			this._sActiveLayer = sLayer;
		}
		for (var n in mProperties) {
			if (n === "parent") {
				continue;
			}
			oResult[n] = this[n];
		}
		this._sActiveLayer = sCurrentLayer;
		return oResult;
	};

	return DataObject;
});

}; // end of sap/ui/mdc/experimental/DataObject.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nColumnItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nColumnItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/P13nColumnItem",[
	'sap/ui/mdc/experimental/P13nItem'
], function(P13nItem) {
	"use strict";

	/**
	 * Constructor for a new P13nColumnItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Type for <code>items</code> aggregation in <code>P13nColumnPanel</code> control.
	 * @extends sap.ui.mdc.experimental.P13nItem
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.46.0
	 * @alias sap.ui.mdc.experimental.P13nColumnItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nColumnItem = P13nItem.extend("sap.ui.mdc.experimental.P13nColumnItem", /** @lends sap.ui.mdc.experimental.P13nColumnItem.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Defines visibility of the item.
				 */
				selected: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Defines position of the item.
				 */
				position: {
					type: "int"
				}
			}
		}
	});

	return P13nColumnItem;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nColumnItem.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nFilterItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nFilterItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/P13nFilterItem",[
	'sap/ui/mdc/experimental/P13nItem'
], function(P13nItem) {
	"use strict";

	/**
	 * Constructor for a new P13nFilterItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Type for <code>items</code> aggregation in <code>P13nColumnPanel</code> control.
	 * @extends sap.ui.mdc.experimental.P13nItem
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.46.0
	 * @alias sap.ui.mdc.experimental.P13nFilterItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nFilterItem = P13nItem.extend("sap.ui.mdc.experimental.P13nFilterItem", /** @lends sap.ui.mdc.experimental.P13nFilterItem.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Defines visibility of the item.
				 */
				selected: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Defines the position of the columns.
				 */
				position: {
					type: "int"
				},
				/**
				 * Defines if the item is mandatory
				 */
				required: {
					type: "boolean"
				},
				/**
				 * Defines the control.
				 */
				control: {
					type: "sap.ui.core.Control"
				}
			}
		}
	});

	return P13nFilterItem;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nFilterItem.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.XMLComposite'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ChangeReason'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nPanel",[
	'jquery.sap.global', 'sap/m/library', 'sap/ui/core/XMLComposite', './P13nPanelFormatter', 'sap/ui/model/ChangeReason'
], function(jQuery, MLibrary, XMLComposite, P13nPanelFormatter, ChangeReason) {
	"use strict";

	/**
	 * Constructor for a new P13nPanel.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nPanel control is used to define selection settings like the visibility or the order of items.
	 * @extends sap.ui.code.XMLComposite
	 * @author SAP SE
	 * @version 1.52.7
	 * @constructor
	 * @abstract
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nPanel = XMLComposite.extend("sap.ui.mdc.experimental.P13nPanel", /** @lends sap.ui.mdc.experimental.P13nPanel.prototype */
	{
		formatter: P13nPanelFormatter,

		metadata: {
			"abstract": true,
			library: "sap.ui.mdc",
			defaultAggregation: "items",
			aggregations: {
				/**
				 * Defines personalization items.
				 */
				items: {
					type: "sap.ui.mdc.experimental.P13nItem",
					multiple: true,
					singularName: "item"
				}
			}
		}
	});

	// ----------------------- Overwrite Method -----------------

	P13nPanel.prototype.init = function() {
		this._bInternalModelToBeUpdated = true;
		// Create a resource bundle for language specific texts
		this.setModel(new sap.ui.model.resource.ResourceModel({
			bundleUrl: sap.ui.getCore().getLibraryResourceBundle("sap.m").oUrlInfo.url
		// bundleName: 'sap.m'
		}), "i18n");

		// this._getManagedObjectModel().bindList("/items", null, [], []).attachChange(this._updateCounts, this);
	};

	P13nPanel.prototype.addItem = function(oItem) {
		this._bInternalModelToBeUpdated = true;
		this.addAggregation("items", oItem);
		return this;
	};

	P13nPanel.prototype.insertItem = function(oItem, iIndex) {
		this._bInternalModelToBeUpdated = true;
		this.insertAggregation("items", oItem, iIndex);
		return this;
	};

	P13nPanel.prototype.updateItems = function(sReason) {
		this.updateAggregation("items");
		if (sReason === ChangeReason.Change) {
			this._bInternalModelToBeUpdated = true;
		}
	};

	P13nPanel.prototype.removeItem = function(oItem) {
		this._bInternalModelToBeUpdated = true;
		return this.removeAggregation("items", oItem);
	};

	P13nPanel.prototype.removeAllItems = function() {
		this._bInternalModelToBeUpdated = true;
		return this.removeAllAggregation("items");
	};

	P13nPanel.prototype.destroyItems = function() {
		this._bInternalModelToBeUpdated = true;
		this.destroyAggregation("items");
		return this;
	};

	// ----------------------- Private Methods -----------------------------------------
	/**
	 * @private
	 */
	P13nPanel.prototype.onSearchFieldLiveChange = function(oEvent) {
		this._filterTableItems();
	};

	/**
	 * @private
	 */
	P13nPanel.prototype._filterTableItems = function() {
		var aFilters = [];
		var sSearchText = this._getSearchText();
		if (sSearchText) {
			aFilters.push(new sap.ui.model.Filter([
				new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("tooltip", sap.ui.model.FilterOperator.Contains, sSearchText)
			], false));
		}
		this._getTable().getBinding("items").filter(aFilters);
	};

	P13nPanel.prototype._getTable = function() {
		return sap.ui.getCore().byId(this.getId() + "--IDTable") || null;
	};

	P13nPanel.prototype._getSearchField = function() {
		return sap.ui.getCore().byId(this.getId() + "--IDSearchField") || null;
	};

	P13nPanel.prototype._getSearchText = function() {
		var oSearchField = this._getSearchField();
		return oSearchField ? oSearchField.getValue() : "";
	};

	P13nPanel.prototype._isFilteredBySearchText = function() {
		return !!this._getSearchText().length;
	};

	return P13nPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSelectionPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSelectionPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nSelectionPanel",[
	'jquery.sap.global', './P13nPanel'
], function(jQuery, P13nPanel) {
	"use strict";

	/**
	 * Constructor for a new P13nSelectionPanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nSelectionPanel control is used to define selection settings like the visibility or the order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nSelectionPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSelectionPanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nSelectionPanel", /** @lends sap.ui.mdc.experimental.P13nSelectionPanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc"
		}
	});

	return P13nSelectionPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSelectionPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSortPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSortPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nSortPanel",[
	'jquery.sap.global', 'sap/m/library', './P13nPanel', './P13nSortModel'
], function(jQuery, MLibrary, P13nPanel, P13nSortModel) {
	"use strict";

	/**
	 * Constructor for a new P13nSortPanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nSortPanel control is used to define sort order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nSortPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSortPanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nSortPanel", /** @lends sap.ui.mdc.experimental.P13nSortPanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc"
		}
	});

	// ----------------------- Overwrite Methods -----------------

	P13nSortPanel.prototype.init = function() {
		P13nPanel.prototype.init.apply(this, arguments);

		// Due to the re-binding during execution of _filterTableItems() the sap.m.Table re-create all items.
		// So we have to store the 'columnKey' in order to mark the item after re-binding.
		this._sColumnKeyOfMarkedItem = undefined;
		// Internal model.
		this._oInternalModel = undefined;

		this._proxyOnModelContextChange = jQuery.proxy(this._onModelContextChange, this);
		this.attachModelContextChange(this._proxyOnModelContextChange);
	};

	P13nSortPanel.prototype.refreshInitialState = function() {
		this._bInternalModelToBeUpdated = true;
		this.invalidate();
	};

	P13nSortPanel.prototype._onModelContextChange = function() {
		if (!this.getModel()) {
			return;
		}
		this._updateInternalModel();
	};

	P13nSortPanel.prototype.onBeforeRendering = function() {
		this._updateInternalModel();
	};

	P13nSortPanel.prototype.exit = function() {
		this.detachModelContextChange(this._proxyOnModelContextChange);
	};

	// ----------------------- Private Methods -----------------------------------------

	/**
	 * Checkbox of table item has been pressed.
	 * @param oEvent
	 */
	P13nSortPanel.prototype.onSelectionChange = function(oEvent) {
		oEvent.getParameter("listItems").forEach(function(oTableItem) {
			this._selectTableItem(oTableItem);
		}, this);
	};
	P13nSortPanel.prototype._selectTableItem = function(oTableItem) {
		var iIndex = this._getTable().indexOfItem(oTableItem);
		this._oInternalModel.selectModelItem(iIndex, oTableItem.getSelected());
		this._oInternalModel.updateProperties(iIndex, {
			sortOrder: oTableItem.getSelected() ? oTableItem.getCells()[1].getSelectedKey() : undefined
		});
		// //TODO: wenn es nur ein unselected item ist und man drückt auf "select All" das eine item wird selektiert und markiert (falsch!)
		// First set marked item
		this._toggleMarkedTableItem(oTableItem);
		// Then update move button according to marked item
		this._updateControlLogic();
		// this._updateCounts();
	};

	/**
	 * Table item has been pressed.
	 * @param oEvent
	 */
	P13nSortPanel.prototype.onItemPressed = function(oEvent) {
		// First set marked item
		this._toggleMarkedTableItem(oEvent.getParameter('listItem'));
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	P13nSortPanel.prototype.onPressButtonMoveToTop = function() {
		this._moveTableItem(this._getMarkedTableItem(), this._getVisibleTableItems()[0]);
	};
	P13nSortPanel.prototype.onPressButtonMoveUp = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) - 1]);
	};
	P13nSortPanel.prototype.onPressButtonMoveDown = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) + 1]);
	};
	P13nSortPanel.prototype.onPressButtonMoveToBottom = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.length - 1]);
	};
	P13nSortPanel.prototype._moveTableItem = function(oTableItemFrom, oTableItemTo) {
		var iIndexFrom = this._getTable().indexOfItem(oTableItemFrom);
		var iIndexTo = this._getTable().indexOfItem(oTableItemTo);

		// 1. Change the 'position' on model items
		this._oInternalModel.moveModelItemPosition(iIndexFrom, iIndexTo);
		// 2. Move the items inside of the model
		this._oInternalModel.moveModelItem(iIndexFrom, iIndexTo);
		// 3. Remove style of current table item (otherwise the style remains on the item after move)
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// 4. Sort table items according to the model items
		this._sortTableItemsAccordingToInternalModel();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * Switches 'Show Selected' button to 'Show All' and back.
	 *
	 * @private
	 */
	P13nSortPanel.prototype.onSwitchButtonShowSelected = function() {
		this.setShowOnlySelectedItems(!this.getShowOnlySelectedItems());

		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype.onSearchFieldLiveChange = function() {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._filterTableItems = function() {
		var aFilters = [];
		if (this._isFilteredByShowSelected() === true) {
			aFilters.push(new sap.ui.model.Filter("selected", "EQ", true));
		}
		var sSearchText = this._getSearchText();
		if (sSearchText) {
			aFilters.push(new sap.ui.model.Filter([
				new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("tooltip", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("aggregationRole", sap.ui.model.FilterOperator.Contains, sSearchText)
			], false));
		}
		this._getTable().getBinding("items").filter(aFilters);
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._sortTableItemsAccordingToInternalModel = function() {
		var fComparator = function(oItemA, oItemB) {
			var oMItemA = this._oInternalModel.getModelItemByColumnKey(oItemA.getColumnKey());
			var oMItemB = this._oInternalModel.getModelItemByColumnKey(oItemB.getColumnKey());
			var iIndexA = this._oInternalModel.getIndexOfModelItem(oMItemA);
			var iIndexB = this._oInternalModel.getIndexOfModelItem(oMItemB);
			if (iIndexA < iIndexB) {
				return -1;
			} else if (iIndexA > iIndexB) {
				return 1;
			}
			return 0;
		};
		this._getTable().getBinding("items").sort(new sap.ui.model.Sorter({
			path: '',
			descending: false,
			group: false,
			comparator: fComparator.bind(this)
		}));
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._getVisibleTableItems = function() {
		return this._getTable().getItems().filter(function(oTableItem) {
			return !!oTableItem.getVisible();
		});
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._getMarkedTableItem = function() {
		return this._getTableItemByColumnKey(this._sColumnKeyOfMarkedItem);
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._toggleMarkedTableItem = function(oTableItem) {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// When filter is set, the table items are reduced so marked table item can disappear.
		var sColumnKey = this._getColumnKeyByTableItem(oTableItem);
		if (sColumnKey) {
			this._sColumnKeyOfMarkedItem = sColumnKey;
			this._addStyleToTableItem(oTableItem);
		}
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nSortPanel.prototype._getStyledAsMarkedTableItem = function() {
		var aDomElements = this._getTable().$().find(".sapMP13nColumnsPanelItemSelected");
		return aDomElements.length ? jQuery(aDomElements[0]).control()[0] : undefined;
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nSortPanel.prototype._getTableItemByColumnKey = function(sColumnKey) {
		var aContext = this._getTable().getBinding("items").getContexts();
		var aTableItem = this._getTable().getItems().filter(function(oTableItem, iIndex) {
			return aContext[iIndex].getObject().getColumnKey() === sColumnKey;
		});
		return aTableItem[0];
	};

	/**
	 *
	 * @param {sap.m.ListItemBase} oTableItem
	 * @returns {string || null}
	 * @private
	 */
	P13nSortPanel.prototype._getColumnKeyByTableItem = function(oTableItem) {
		var iIndex = this._getTable().indexOfItem(oTableItem);
		if (iIndex < 0) {
			return null;
		}
		return this._getTable().getBinding("items").getContexts()[iIndex].getObject().getColumnKey();
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._addStyleToTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.addStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._removeStyleFromTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.removeStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._isFilteredByShowSelected = function() {
		return false;
		// return !!this.getShowOnlySelectedItems();
	};

	P13nSortPanel.prototype._getTable = function() {
		return sap.ui.getCore().byId(this.getId() + "--IDTable") || null;
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._updateControlLogic = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._getManagedObjectModel().setProperty("/@custom/isMoveUpButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > 0);
		this._getManagedObjectModel().setProperty("/@custom/isMoveDownButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > -1 && aVisibleTableItems.indexOf(this._getMarkedTableItem()) < aVisibleTableItems.length - 1);
	};

	// /**
	//  * Updates count of selected items.
	//  *
	//  * @private
	//  */
	// P13nSortPanel.prototype._updateCounts = function() {
	// 	var iCountOfSelectedItems = 0;
	// 	this.getItems().forEach(function(oItem) {
	// 		if (oItem.getSelected()) {
	// 			iCountOfSelectedItems++;
	// 		}
	// 	});
	// 	this._getManagedObjectModel().setProperty("/@custom/countOfSelectedItems", iCountOfSelectedItems);
	// 	this._getManagedObjectModel().setProperty("/@custom/countOfItems", this.getItems().length);
	// };

	/**
	 * @private
	 */
	P13nSortPanel.prototype._updateInternalModel = function() {
		if (!this._bInternalModelToBeUpdated) {
			return;
		}
		this._bInternalModelToBeUpdated = false;

		// Remove the marking style before table items are updated
		this._removeStyleFromTableItem(this._getMarkedTableItem());

		this._oInternalModel = new P13nSortModel({
			preventInitialSort: false,
			tableItems: this.getItems().filter(function(oItem) {
				return oItem;
			}),
			availableItems: this.getItems().filter(function(oItem) {
				return oItem;
			})
		});
		this._sortTableItemsAccordingToInternalModel();
		this._filterTableItems();

		// Set marked item initially to the first table item if not defined yet via property '_sColumnKeyOfMarkedItem'
		if (!this._sColumnKeyOfMarkedItem) {
			// First set marked item
			this._sColumnKeyOfMarkedItem = this._getColumnKeyByTableItem(this._getVisibleTableItems()[0]);
		}
		this._toggleMarkedTableItem(this._getMarkedTableItem());

		// Then update move button according to marked item
		this._updateControlLogic();
		// this._updateCounts();
	};

	return P13nSortPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSortPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSortQBGridPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSortQBGridPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nSortQBGridPanel",[
	'jquery.sap.global', 'sap/m/library', './P13nPanel', './P13nSortModel', 'sap/ui/model/json/JSONModel'
], function(jQuery, MLibrary, P13nPanel, P13nSortModel, JSONModel) {
	"use strict";

	/**
	 * Constructor for a new P13nSortQBGridPanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nSortQBGridPanel control is used to define sort order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.52.0
	 * @alias sap.ui.mdc.experimental.P13nSortQBGridPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSortQBGridPanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nSortQBGridPanel", /** @lends sap.ui.mdc.experimental.P13nSortQBGridPanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc"
		}
	});

	// ----------------------- Overwrite Methods -----------------

	P13nSortQBGridPanel.prototype.init = function() {
		P13nPanel.prototype.init.apply(this, arguments);

		// Internal model.
		this._oInternalModel = undefined;

		this._proxyOnModelContextChange = jQuery.proxy(this._onModelContextChange, this);
		this.attachModelContextChange(this._proxyOnModelContextChange);
	};

	P13nSortQBGridPanel.prototype.refreshInitialState = function() {
		this._bInternalModelToBeUpdated = true;
		this.invalidate();
	};

	P13nSortQBGridPanel.prototype._onModelContextChange = function() {
		if (!this.getModel()) {
			return;
		}
		this._updateInternalModel();
	};

	P13nSortQBGridPanel.prototype.onBeforeRendering = function() {
		this._updateInternalModel();
	};

	P13nSortQBGridPanel.prototype.exit = function() {
		this.detachModelContextChange(this._proxyOnModelContextChange);
	};

	// ----------------------- Private Methods -----------------------------------------

	/**
	 * Change SortOrder via Select.
	 * @param oEvent
	 */
	P13nSortQBGridPanel.prototype.onChangeSortOrderBySelection = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent();
		var iIndex = this._getTable().indexOfContent(oTableItem);
		this._oInternalModel.updateProperties(iIndex, {
			sortOrder: this._getSelectedSortOrder(oEvent.getParameter("selectedItem"))
		});
	};
	/**
	 * ColumnKey has been changed by ComboBox due to:
	 * - entering new value
	 * - choosing value from the list
	 * @param oEvent
	 */
	P13nSortQBGridPanel.prototype.onSelectionChange = function(oEvent) {
		//console.log("selectionChange: " + oEvent.getParameter("selectedItem") + " " + oEvent.getSource().getValue());
		// If columnKey does not exist - do not update
		if (!oEvent.getParameter("selectedItem")) {
			return;
		}
		var oTableItem = oEvent.getSource().getParent();
		this._selectTableItem(oTableItem);
	};
	/**
	 * ColumnKey has been changed by ComboBox in combination with:
	 * - leave of focus OR
	 * - press of Enter key.
	 * @param oEvent
	 */
	P13nSortQBGridPanel.prototype.onChangeComboBox = function(oEvent) {
		// Value in text input field is changed AND (focus leaves OR Enter Key pressed)
		//console.log("change: " + oEvent.getSource().getSelectedItem() + " " + oEvent.getParameter("newValue"));
		// // If columnKey does not exist - do not update
		// if (!oEvent.getSource().getSelectedItem()) {
		// 	return;
		// }
		var oTableItem = oEvent.getSource().getParent();
		this._selectTableItem(oTableItem);
	};
	P13nSortQBGridPanel.prototype._selectTableItem = function(oTableItem) {
		var iIndex = this._getTable().indexOfContent(oTableItem);
		this._oInternalModel.replaceModelItemOfIndex(iIndex);
	};

	P13nSortQBGridPanel.prototype.onPressAdd = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent().getParent();
		var iIndex = this._getTable().indexOfContent(oTableItem);
		this._oInternalModel.insertModelItemOfIndex(iIndex);
	};

	P13nSortQBGridPanel.prototype.onPressRemove = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent().getParent();
		var iIndex = this._getTable().indexOfContent(oTableItem);
		this._oInternalModel.removeModelItemOfIndex(iIndex);
	};

	P13nSortQBGridPanel.prototype.onPressDown = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent().getParent();
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(oTableItem, aVisibleTableItems[aVisibleTableItems.indexOf(oTableItem) + 1]);
	};

	P13nSortQBGridPanel.prototype.onPressUp = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent().getParent();
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(oTableItem, aVisibleTableItems[aVisibleTableItems.indexOf(oTableItem) - 1]);
	};
	P13nSortQBGridPanel.prototype._moveTableItem = function(oTableItemFrom, oTableItemTo) {
		var iIndexFrom = this._getTable().indexOfContent(oTableItemFrom);
		var iIndexTo = this._getTable().indexOfContent(oTableItemTo);

		// 1. Change the 'position' on model items
		this._oInternalModel.moveModelItemPosition(iIndexFrom, iIndexTo);
		// 2. Move the items inside of the model
		this._oInternalModel.moveModelItem(iIndexFrom, iIndexTo);
	};

	// ------------------ helper methods -----------------------------------------

	P13nSortQBGridPanel.prototype._getVisibleTableItems = function() {
		return this._getTable().getContent().filter(function(oTableItem) {
			return !!oTableItem.getVisible();
		});
	};
	P13nSortQBGridPanel.prototype._getTable = function() {
		return sap.ui.getCore().byId(this.getId() + "--IDVerticalLayout") || null;
	};
	P13nSortQBGridPanel.prototype._getSelectedSortOrder = function(oComboBoxItem) {
		return oComboBoxItem.getKey();
	};

	P13nSortQBGridPanel.prototype._updateInternalModel = function() {
		if (!this._bInternalModelToBeUpdated) {
			return;
		}
		this._bInternalModelToBeUpdated = false;

		this._oInternalModel = new P13nSortModel({
			tableItems: this.getItems().filter(function(oItem) {
				return oItem.getSelected();
			}),
			availableItems: this.getItems().filter(function(oItem) {
				return oItem;
			})
		});
		this._getTable().setModel(this._oInternalModel, "JSONItems");
	};

	return P13nSortQBGridPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSortQBGridPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSortQBPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSortQBPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nSortQBPanel",[
	'jquery.sap.global', 'sap/m/library', './P13nPanel', './P13nSortModel', 'sap/ui/model/json/JSONModel'
], function(jQuery, MLibrary, P13nPanel, P13nSortModel, JSONModel) {
	"use strict";

	/**
	 * Constructor for a new P13nSortQBPanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nSortQBPanel control is used to define sort order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.52.0
	 * @alias sap.ui.mdc.experimental.P13nSortQBPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSortQBPanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nSortQBPanel", /** @lends sap.ui.mdc.experimental.P13nSortQBPanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc"
		}
	});

	// ----------------------- Overwrite Methods -----------------

	P13nSortQBPanel.prototype.init = function() {
		P13nPanel.prototype.init.apply(this, arguments);

		// Internal model.
		this._oInternalModel = undefined;

		this._proxyOnModelContextChange = jQuery.proxy(this._onModelContextChange, this);
		this.attachModelContextChange(this._proxyOnModelContextChange);
	};

	P13nSortQBPanel.prototype.refreshInitialState = function() {
		this._bInternalModelToBeUpdated = true;
		this.invalidate();
	};

	P13nSortQBPanel.prototype._onModelContextChange = function() {
		if (!this.getModel()) {
			return;
		}
		this._updateInternalModel();
	};

	P13nSortQBPanel.prototype.onBeforeRendering = function() {
		this._updateInternalModel();
	};

	P13nSortQBPanel.prototype.exit = function() {
		this.detachModelContextChange(this._proxyOnModelContextChange);
	};

	// ----------------------- Private Methods -----------------------------------------

	P13nSortQBPanel.prototype.onChangeSortOrderBySelection = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent();
		var iIndex = this._getTable().indexOfItem(oTableItem);
		this._oInternalModel.updateProperties(iIndex, {
			sortOrder: this._getSelectedSortOrder(oEvent.getParameter("selectedItem"))
		});
	};

	/**
	 * ColumnKey has been changed by ComboBox
	 * @param oEvent
	 */
	P13nSortQBPanel.prototype.onSelectionChange = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent();
		this._selectTableItem(oTableItem);
	};
	P13nSortQBPanel.prototype._selectTableItem = function(oTableItem) {
		var iIndex = this._getTable().indexOfItem(oTableItem);
		this._oInternalModel.replaceModelItemOfIndex(iIndex);
	};

	P13nSortQBPanel.prototype.onPressAdd = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent().getParent();
		var iIndex = this._getTable().indexOfItem(oTableItem);
		this._oInternalModel.insertModelItemOfIndex(iIndex);
	};

	P13nSortQBPanel.prototype.onPressRemove = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent().getParent();
		var iIndex = this._getTable().indexOfItem(oTableItem);
		this._oInternalModel.removeModelItemOfIndex(iIndex);
	};

	P13nSortQBPanel.prototype.onPressDown = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent().getParent();
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(oTableItem, aVisibleTableItems[aVisibleTableItems.indexOf(oTableItem) + 1]);
	};

	P13nSortQBPanel.prototype.onPressUp = function(oEvent) {
		var oTableItem = oEvent.getSource().getParent().getParent();
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(oTableItem, aVisibleTableItems[aVisibleTableItems.indexOf(oTableItem) - 1]);
	};
	P13nSortQBPanel.prototype._moveTableItem = function(oTableItemFrom, oTableItemTo) {
		var iIndexFrom = this._getTable().indexOfItem(oTableItemFrom);
		var iIndexTo = this._getTable().indexOfItem(oTableItemTo);

		// 1. Change the 'position' on model items
		this._oInternalModel.moveModelItemPosition(iIndexFrom, iIndexTo);
		// 2. Move the items inside of the model
		this._oInternalModel.moveModelItem(iIndexFrom, iIndexTo);
	};

	// ------------------ helper methods -----------------------------------------

	P13nSortQBPanel.prototype._getVisibleTableItems = function() {
		return this._getTable().getItems().filter(function(oTableItem) {
			return !!oTableItem.getVisible();
		});
	};
	P13nSortQBPanel.prototype._getTable = function() {
		return sap.ui.getCore().byId(this.getId() + "--IDTable") || null;
	};
	P13nSortQBPanel.prototype._getSelectedSortOrder = function(oComboBoxItem) {
		return oComboBoxItem.getKey();
	};

	P13nSortQBPanel.prototype._updateInternalModel = function() {
		if (!this._bInternalModelToBeUpdated) {
			return;
		}
		this._bInternalModelToBeUpdated = false;

		this._oInternalModel = new P13nSortModel({
			tableItems: this.getItems().filter(function(oItem) {
				return oItem.getSelected();
			}),
			availableItems: this.getItems().filter(function(oItem) {
				return oItem;
			})
		});
		this._getTable().setModel(this._oInternalModel, "JSONItems");
	};

	return P13nSortQBPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSortQBPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSortSimplePanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSortSimplePanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nSortSimplePanel",[
	'jquery.sap.global', 'sap/m/library', './P13nPanel', './P13nSortModel'
], function(jQuery, MLibrary, P13nPanel, P13nSortModel) {
	"use strict";

	/**
	 * Constructor for a new P13nSortSimplePanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nSortSimplePanel control is used to define sort order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.52.0
	 * @alias sap.ui.mdc.experimental.P13nSortSimplePanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSortSimplePanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nSortSimplePanel", /** @lends sap.ui.mdc.experimental.P13nSortSimplePanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Internal model.
				 */
				internalModel: {
					type: "sap.ui.mdc.experimental.P13nSortModel",
					visibility: "hidden"
				}
			}
		}
	});

	// ----------------------- Overwrite Methods -----------------

	P13nSortSimplePanel.prototype.init = function() {
		P13nPanel.prototype.init.apply(this, arguments);

		this._proxyOnModelContextChange = jQuery.proxy(this._onModelContextChange, this);
		this.attachModelContextChange(this._proxyOnModelContextChange);
	};

	P13nSortSimplePanel.prototype.refreshInitialState = function() {
		this._bInternalModelToBeUpdated = true;
		this.invalidate();
	};

	P13nSortSimplePanel.prototype._onModelContextChange = function() {
		if (!this.getModel()) {
			return;
		}
		this._updateInternalModel();
	};

	P13nSortSimplePanel.prototype.onBeforeRendering = function() {
		this._updateInternalModel();
	};

	P13nSortSimplePanel.prototype.exit = function() {
		this.detachModelContextChange(this._proxyOnModelContextChange);
	};

	// ----------------------- Private Methods -----------------------------------------

	/**
	 * Change SortOrder via RadioButton.
	 * @param oEvent
	 */
	P13nSortSimplePanel.prototype.onChangeSortOrderBySelection = function(oEvent) {
		var oTableItem = this._getTable().getSelectedItems()[0];
		var iIndex = this._getTable().indexOfItem(oTableItem);

		this.getInternalModel().updateProperties(iIndex, {
			sortOrder: this._getSelectedSortOrder()
		});
	};
	/**
	 * Change of SortOrder via pressing on 'SortOrder' table item.
	 * @param oEvent
	 */
	P13nSortSimplePanel.prototype.onChangeSortOrderByItemPress = function(oEvent) {
		var sSortOrder = oEvent.getParameter('listItem') === this.byId("IDAscendingItem") ? "Ascending" : "Descending";
		var oTableItem = this._getTable().getSelectedItems()[0];
		var iIndex = this._getTable().indexOfItem(oTableItem);

		this._getManagedObjectModel().setProperty("/@custom/sortOrder", sSortOrder);

		this.getInternalModel().updateProperties(iIndex, {
			sortOrder: sSortOrder
		});
	};

	/**
	 * RadioButton of table item has been pressed.
	 * @param oEvent
	 */
	P13nSortSimplePanel.prototype.onSelectionChange = function(oEvent) {
		oEvent.getParameter("listItems").forEach(function(oTableItem) {
			this._selectTableItem(oTableItem);
		}, this);
	};
	/**
	 * Table item has been pressed.
	 * @param oEvent
	 */
	P13nSortSimplePanel.prototype.onItemPress = function(oEvent) {
		var oTableItem = oEvent.getParameter('listItem');
		this._selectTableItem(oTableItem);
	};
	P13nSortSimplePanel.prototype._selectTableItem = function(oTableItem) {
		var iIndex = this._getTable().indexOfItem(oTableItem);
		// Remove the 'sortOrder' of previous model item and set the 'sortOrder' of current model item (only in simple panel)
		var sSortOrder = this._getSelectedSortOrder();
		this._getTable().getItems().forEach(function(oTableItem, iIndex_) {
			this.getInternalModel().updateProperties(iIndex_, {
				sortOrder: (iIndex_ === iIndex ? sSortOrder : undefined),
				selected: (iIndex_ === iIndex),
				position: (iIndex_ === iIndex ? 0 : undefined)
			});
		}, this);
	};

	// ------------------ helper methods -----------------------------------------

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nSortSimplePanel.prototype._getTableItemByColumnKey = function(sColumnKey) {
		var aContext = this._getTable().getBinding("items").getContexts();
		var aTableItem = this._getTable().getItems().filter(function (oTableItem, iIndex) {
			return aContext[iIndex].getObject().columnKey === sColumnKey;
		});
		return aTableItem[0];
	};
	P13nSortSimplePanel.prototype._getSelectedSortOrder = function() {
		var oTableItemSortOrder = this.byId("IDSortOrderTable").getSelectedItems()[0];
		return oTableItemSortOrder === this.byId("IDAscendingItem") ? "Ascending" : "Descending";
	};
	P13nSortSimplePanel.prototype._getTable = function() {
		return sap.ui.getCore().byId(this.getId() + "--IDTable") || null;
	};

	P13nSortSimplePanel.prototype._updateInternalModel = function() {
		if (!this._bInternalModelToBeUpdated) {
			return;
		}
		this._bInternalModelToBeUpdated = false;

		var aSelectedItems = this.getItems().filter(function(oItem) {
			return oItem.getSelected();
		});

		this.setInternalModel(new P13nSortModel({
			preventInitialSort: true,
			tableItems: this.getItems().filter(function(oItem) {
				return oItem;
			}),
			availableItems: this.getItems().filter(function(oItem) {
				return oItem;
			})
		}));
		this._getTable().setModel(this.getInternalModel(), "JSONItems");

		// Reduce selected items to only one (special for single sort)
		if (aSelectedItems.length > 1) {
			var oMItem = this.getInternalModel().getModelItemByColumnKey(aSelectedItems[0].getColumnKey());
			var oTableItem = this._getTableItemByColumnKey(oMItem.columnKey);
			this._selectTableItem(oTableItem);

			this._getManagedObjectModel().setProperty("/@custom/sortOrder", aSelectedItems[0].getSortOrder());
		}
	};

	return P13nSortSimplePanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSortSimplePanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.adapter.ODataBaseAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.provider.adapter.ODataBaseAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/provider/adapter/ODataBaseAdapter",[
	"./base/BaseAdapter"
], function(BaseAdapter) {
	"use strict";

	/*
	 * Strips the OData key predicate from a resource path segment. @param {string} sSegment @returns {string}
	 */
	function stripKeyPredicate(sSegment) {
		var iPos = sSegment.indexOf("(");
		return iPos >= 0 ? sSegment.slice(0, iPos) : sSegment;
	}

	var ODataBaseAdapter = BaseAdapter.extend("sap.ui.mdc.experimental.provider.adapter.ODataBaseAdapter", {
		_schemaCache: {

		},
		aExpand: [],
		constructor: function(oModel, sModelName, sMetaContext, bCanonical) {
			BaseAdapter.prototype.constructor.apply(this, arguments);
		}
	});

	ODataBaseAdapter.prototype.afterMetaContextSwitch = function(sCanonicalPath, sPath) {
		if (!this._schemaCache[sCanonicalPath]) {
			this._schemaCache[sCanonicalPath] = this.oMetaModel.getProperty(sCanonicalPath);
			this.schema = this._schemaCache[sCanonicalPath];
			this._precalucateFieldControl();
		} else {
			this.schema = this._schemaCache[sCanonicalPath];
		}

		this.oEntitySet = this.calculateEntitySet(sPath);
	};

	ODataBaseAdapter.prototype.calculateEntitySet = function(sPath) {
		var oAssocationEnd, sNavigationPropertyName, oEntityType, sQualifiedName, oEntitySet, aParts = sPath.split("/");
		if (aParts[0] !== "") {
			return null;
		}
		aParts.shift();

		// from entity set to entity type
		oEntitySet = this.oMetaModel.getODataEntitySet(stripKeyPredicate(aParts[0]));
		if (!oEntitySet) {
			return null;
		}
		aParts.shift();

		// follow (navigation) properties
		while (aParts.length) {
			sQualifiedName = oEntitySet.entityType;
			oEntityType = this.oMetaModel.getODataEntityType(sQualifiedName);
			sNavigationPropertyName = stripKeyPredicate(aParts[0]);
			oAssocationEnd = this.oMetaModel.getODataAssociationEnd(oEntityType, sNavigationPropertyName);

			if (oAssocationEnd) {
				// navigation property
				oEntitySet = this.oMetaModel.getODataEntitySet(oAssocationEnd.entitySet);
			} else {
				return null;
			}
		}

		return oEntitySet;

	};

	ODataBaseAdapter.prototype.resolveNavi = function(sNaviPath, TargetAdapter) {
		var aPath = sNaviPath.split("/"), oNaviEntitySet = this.oEntitySet, oAssocationEnd;

		while (aPath.length > 1) {
			oAssocationEnd = this.oMetaModel.getODataAssociationSetEnd(this.schema, aPath[0]);
			oNaviEntitySet = this.oMetaModel.getODataEntitySet(oAssocationEnd.entitySet);

			if (this.aExpand.indexOf(aPath[0]) == -1) {
				this.aExpand.push(aPath[0]);
			}

			aPath.shift(-1);
		}

		var sNaviDeep = "/" + oNaviEntitySet.name + "/" + aPath[0];

		var oMetadataContext = this.oMetaModel.getMetaContext(sNaviDeep);
		var sMetaContext = oMetadataContext.getPath();

		var oNavi = new TargetAdapter(this.oModel, this.sModelName, this.sContextName, sMetaContext, true);

		oNavi.oEntitySet = oNaviEntitySet;

		return oNavi;
	};

	ODataBaseAdapter.prototype.enabled = function() {
		var oUpdatableAnno = this.getAnnotation("Org.OData.Core.V1.Immutable/Bool") || this.getAnnotation("Org.OData.Core.V1.Computed/Bool");
		var bEnabled = oUpdatableAnno ? oUpdatableAnno == "false" : true;

		if (bEnabled && this.schema._fieldControl) {
			bEnabled = this.schema._fieldControl.editable;
			this.setValue("!enabled",this.schema._fieldControl.readonly);
		} else {
			this.setValue("!enabled",!bEnabled);
		}

		return bEnabled;
	};

	ODataBaseAdapter.prototype.tooltip = function() {
		return this.getAnnotation("com.sap.vocabularies.Common.v1.QuickInfo/String");
	};

	ODataBaseAdapter.prototype.label = function() {
		return this["//"]["com.sap.vocabularies.Common.v1.Label"]["String"];
	};

	ODataBaseAdapter.prototype.navigationProperties = function() {
		var i, oNavi, aNavis = this.getAnnotation("navigationProperty"), aNaviMap = [];

		for (i = 0; i < aNavis.length; i++) {
			oNavi = aNavis[i];

			aNaviMap[oNavi.name] = oNavi;
		}

		return aNaviMap;
	};

	ODataBaseAdapter.prototype.expand = function() {
		return this.aExpand;
	};

	ODataBaseAdapter.prototype["//"] = function() {
		return this.schema;
	};

	ODataBaseAdapter.prototype.getAnnotation = function(sAnnotation, oAnnotation) {
		oAnnotation = oAnnotation || this.schema;
		var aParts = sAnnotation.split("/");
		var iIndex = 0;

		while (oAnnotation && aParts[iIndex]) {
			oAnnotation = oAnnotation[aParts[iIndex]];
			iIndex++;
		}

		return oAnnotation;
	};

	ODataBaseAdapter.prototype._isAnnotationBoolean = function(sAnnotation) {
		var oAnnotation = this.getAnnotation(sAnnotation);
		var isType = false;
		if (oAnnotation != null) {
			isType = oAnnotation.Bool ? (oAnnotation.Bool == "true") : true;
		}
		return isType;
	};

	ODataBaseAdapter.prototype._precalucateFieldControl = function() {
		var oFieldControl = this["//"]["com.sap.vocabularies.Common.v1.FieldControl"];

		if (oFieldControl) {
			var fieldControl = {};
			this._schemaCache[this.sMetaContext]._fieldControl = fieldControl;

			if (oFieldControl.EnumMember) {

				switch (oFieldControl.EnumMember) {
					case "com.sap.vocabularies.Common.v1.FieldControlType/Hidden":
						fieldControl.visible = false;
						fieldControl.hidden = true;
						fieldControl.editable = false;
						fieldControl.readonly = true;
						fieldControl.required = false;
						break;
					case "com.sap.vocabularies.Common.v1.FieldControlType/Mandatory":
						fieldControl.visible = true;
						fieldControl.hidden = false;
						fieldControl.editable = true;
						fieldControl.readonly = false;
						fieldControl.required = true;
						break;
					case "com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly":
						fieldControl.visible = true;
						fieldControl.hidden = false;
						fieldControl.editable = false;
						fieldControl.readonly = true;
						fieldControl.required = false;
						break;
					default:
						fieldControl.visible = true;
						fieldControl.hidden = false;
						fieldControl.editable = true;
						fieldControl.readonly = true;
						fieldControl.required = false;
						break;
				}
			} else {
				var sPath = oFieldControl.Path;
				if (this.getModelName()) {
					sPath = this.getModelName() + ">" + sPath;
				}

				fieldControl.visible = "{= ${" + sPath + "} !== 0}";
				fieldControl.hidden = "{= ${" + sPath + "} === 0}";
				fieldControl.editable = "{= ${" + sPath + "} !== 1}";
				fieldControl.readonly = "{= ${" + sPath + "} === 1}";
				fieldControl.required = "{= ${" + sPath + "} === 7}";
			}
		}
	};

	ODataBaseAdapter.prototype._enrichFromEntitySet = function(oField, oEntitySet) {
		// take sortable, filterable, required in filter
		var i, oFilterRestrictions = this._getAnnotation("Org.OData.Capabilities.V1.FilterRestrictions", oEntitySet);

		oField.filterable = true;
		oField.requiredInFilter = false;

		if (oFilterRestrictions) {
			for (i = 0; i < oFilterRestrictions.NonFilterableProperties; i++) {
				if (oField.name === oFilterRestrictions.NonFilterableProperties.PropertyPath) {
					oField.filterable = false;
				}
			}
		}

	};

	ODataBaseAdapter.prototype.metadataContextOfField = function(oField) {
		var index = Object.keys(this.fields).indexOf(oField.name);

		if (index > -1) {
			return this.sMetaContext + "/property/" + index;
		} else {
			return "";
		}
	};

	return ODataBaseAdapter;
});
}; // end of sap/ui/mdc/experimental/provider/adapter/ODataBaseAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.adapter.ODataFieldAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.provider.adapter.ODataFieldAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/provider/adapter/ODataFieldAdapter",[
	"./base/FieldAdapter", "./ODataBaseAdapter"
], function(FieldAdapter, ODataBaseAdapter) {
	"use strict";

	var ODataFieldAdapter = FieldAdapter.extend("sap.ui.mdc.experimental.provider.adapter.ODataFieldAdapter", {
		constructor: function(oModel, sModelName, sMetaContext, bCanonical) {
			FieldAdapter.prototype.constructor.apply(this, [
				oModel, sModelName, sMetaContext, bCanonical, ODataBaseAdapter
			]);
		}
	});

	ODataFieldAdapter.prototype.allowEmptyValue = function() {
		return true;
	};

	/**
	 * The default Value for the field
	 */
	ODataFieldAdapter.prototype.defaultValue = function() {
		switch (this.ui5Type) {
			case "sap.ui.model.odata.type.Boolean":
				return false;
			case "sap.ui.model.odata.type.Byte":
			case "sap.ui.model.odata.type.Decimal":
			case "sap.ui.model.odata.type.Double":
			case "sap.ui.model.odata.type.Guid":
			case "sap.ui.model.odata.type.Int16":
			case "sap.ui.model.odata.type.Int32":
			case "sap.ui.model.odata.type.Int64":
			case "sap.ui.model.odata.type.SByte":
			case "sap.ui.model.odata.type.Single":
				return 0;
			case "sap.ui.model.odata.type.Date":
			case "sap.ui.model.odata.type.DateTimeOffset":
			case "sap.ui.model.odata.type.TimeOfDay":
				return new Date();
			case "Edm.String":
				return "";
			default:
				return "";
		}
	};

	ODataFieldAdapter.prototype.precision = function() {
		return this["//"]["Precision"];
	};

	ODataFieldAdapter.prototype.scale = function() {
		return this["//"]["Scale"];
	};

	ODataFieldAdapter.prototype.maximum = function() {
		return 0;
	};

	ODataFieldAdapter.prototype.exclusiveMaximum = function() {
		return false;
	};

	ODataFieldAdapter.prototype.minimum = function() {
		return 0;
	};

	ODataFieldAdapter.prototype.exclusiveMinimum = function() {
		return false;
	};

	ODataFieldAdapter.prototype.maxLength = function() {
		var sMaxLength = this["//"]["maxLength"];
		return isNaN(sMaxLength) ? undefined : parseInt(sMaxLength, 10);
	};

	ODataFieldAdapter.prototype.minLength = function() {
		var sMinLength = this["//"]["minLength"];
		return isNaN(sMinLength) ? undefined : parseInt(sMinLength, 10);
	};

	ODataFieldAdapter.prototype.multipleOf = function() {
		return 1;
	};

	ODataFieldAdapter.prototype.pattern = function() {
		return "/.*?/"; // any pattern
	};

	ODataFieldAdapter.prototype.unit = function() {
//		var sUnitProperty = this["//"]["sap:unit"];
		// TODO: read unit property
	};

	ODataFieldAdapter.prototype.textAlign = function() {

	};

	ODataFieldAdapter.prototype.visible = function() {
		var oHiddenAnno = this._isAnnotationBoolean("com.sap.vocabularies.UI.v1.Hidden");
		var bVisible = oHiddenAnno ? !oHiddenAnno : true;

		if (bVisible && this.schema._fieldControl) {
			bVisible = this.schema._fieldControl.visible;
			this.setValue("!visible",this.schema._fieldControl.hidden);
		} else {
			this.setValue("!visible",!bVisible);
		}
		return bVisible;
	};

	ODataFieldAdapter.prototype.ui5Type = function() {

		if (this.oMetaModel.getUI5Type) {
			return this.oMetaModel.getUI5Type(this.sMetaContext);
		}

		switch (this.schema.type) {
			case "Edm.Boolean":
				return "sap.ui.model.odata.type.Boolean";
			case "Edm.Byte":
				return "sap.ui.model.odata.type.Byte";
			case "Edm.Date":
				return "sap.ui.model.odata.type.Date";
			case "Edm.DateTime":
				return "sap.ui.model.odata.type.DateTime";
			case "Edm.DateTimeOffset":
				return "sap.ui.model.odata.type.DateTimeOffset";
			case "Edm.Decimal":
				return "sap.ui.model.odata.type.Decimal";
			case "Edm.Double":
				return "sap.ui.model.odata.type.Double";
			case "Edm.Guid":
				return "sap.ui.model.odata.type.Guid";
			case "Edm.Int16":
				return "sap.ui.model.odata.type.Int16";
			case "Edm.Int32":
				return "sap.ui.model.odata.type.Int32";
			case "Edm.Int64":
				return "sap.ui.model.odata.type.Int64";
			case "Edm.SByte":
				return "sap.ui.model.odata.type.SByte";
			case "Edm.Single":
				return "sap.ui.model.odata.type.Single";
			case "Edm.String":
				return "sap.ui.model.odata.type.String";
			case "Edm.TimeOfDay":
				return "sap.ui.model.odata.type.TimeOfDay";
			default:
				if (this["//"]["sap:display-format"] == "Date") {
					return "sap.ui.model.odata.type.Date";
				}
				return "sap.ui.model.odata.type.String";
		}
	};

	ODataFieldAdapter.prototype.formatOptions = function() {
		var sFormatOptions = "";

		// TODO: How to translate

		switch (this.ui5Type) {
			case "sap.ui.model.odata.type.Boolean":
				break;
			case "sap.ui.model.odata.type.Byte":

				break;
			case "sap.ui.model.odata.type.Date":
				break;
			case "sap.ui.model.odata.type.DateTimeOffset":
				break;
			case "sap.ui.model.odata.type.Decimal":
				break;
			case "sap.ui.model.odata.type.Double":
				break;
			case "sap.ui.model.odata.type.Guid":
				break;
			case "sap.ui.model.odata.type.Int16":
				break;
			case "sap.ui.model.odata.type.Int32":
				break;
			case "sap.ui.model.odata.type.Int64":
				break;
			case "sap.ui.model.odata.type.SByte":
				break;
			case "sap.ui.model.odata.type.Single":
				break;
			case "sap.ui.model.odata.type.String":
				break;
			case "sap.ui.model.odata.type.TimeOfDay":
				break;
			default:
				break;
		}

		return sFormatOptions;
	};

	ODataFieldAdapter.prototype.semantics = function() {
		if (this.getAnnotation("com.sap.vocabularies.Common.v1.Masked") != null) {
			return FieldAdapter.Semantics.password;
		}

		if (this.getAnnotation("com.sap.vocabularies.Communication.v1.IsEmailAddress") != null) {
			return FieldAdapter.Semantics.eMail;
		}

		if (this.getAnnotation("com.sap.vocabularies.Communication.v1.IsPhoneNumber") != null) {
			return FieldAdapter.Semantics.phoneNumber;
		}

		if (this.getAnnotation("com.sap.vocabularies.Communication.v1.IsUrl") != null) {
			return FieldAdapter.Semantics.url;
		}

		if (this.getAnnotation("Org.OData.Measures.V1.Unit") != null) {
			return FieldAdapter.Semantics.currency;
		}

		if (this.getAnnotation("Org.OData.Measures.V1.ISOCurrency") != null) {
			return FieldAdapter.Semantics.measure;
		}
		return FieldAdapter.Semantics.text;
	};

	ODataFieldAdapter.prototype.name = function() {
		return this.schema.name;
	};

	ODataFieldAdapter.prototype.required = function() {
		var oRequiredAnno = this.getAnnotation("nullable");

		var bRequired = oRequiredAnno ? oRequiredAnno == "false" : false;

		if (this.schema._fieldControl) {
			bRequired = this.schema._fieldControl.required;
		} else {
			bRequired = bRequired && this.enabled;
		}

		return bRequired;
	};

	ODataFieldAdapter.prototype.filterable = function() {
		return (this.filterRestrictions.NonFilterableProperties.indexOf(this.schema.name) === -1);

	};

	ODataFieldAdapter.prototype.requiredInFilter = function() {
		return (this.filterRestrictions.RequiredProperties.indexOf(this.schema.name) !== -1);
	};

	ODataFieldAdapter.prototype.sortable = function() {
		return true;
	};

	ODataFieldAdapter.prototype.valueHelp = function() {
		var oResult = null;

		var oValueList = this.getAnnotation("com.sap.vocabularies.Common.v1.ValueList");

		if (oValueList) {
			oResult = {};

			var sEntitySet = "/" + oValueList.CollectionPath.String;

			oResult.valuesPath = this.asPath(sEntitySet);

			oResult.parameters = [];

			var oParam, i, sLocal, sValue, oMetadataContext, sMetaContext;

			for (i = 0; i < oValueList.Parameters.length; i++) {
				oParam = oValueList.Parameters[i];

				sLocal = oParam.LocalDataProperty ? oParam.LocalDataProperty.PropertyPath : null;
				sValue = oParam.ValueListProperty.PropertyPath;

				oMetadataContext = this.oMetaModel.getMetaContext(sEntitySet + "/" + sValue);
				sMetaContext = oMetadataContext.getPath();

				var oValueAdapter = new ODataFieldAdapter(this.oModel, this.sModelName, this.sContextName, sMetaContext, true);

				oResult.parameters.push({
					targetProperty: sLocal,
					sourceAdapter: oValueAdapter
				});
			}
		}

		return oResult;
	};

	ODataFieldAdapter.prototype.describedBy = function() {
		var oTextAnno = this["//"]["com.sap.vocabularies.Common.v1.Text"];

		if (!oTextAnno) {
			return this;
		}

		return this.resolveNavi(oTextAnno.Path, ODataFieldAdapter);

	};

	return ODataFieldAdapter;
});
}; // end of sap/ui/mdc/experimental/provider/adapter/ODataFieldAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.adapter.ODataObjectAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.provider.adapter.ODataObjectAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/provider/adapter/ODataObjectAdapter",[
	"./base/ObjectAdapter", "./ODataBaseAdapter", "./ODataFieldAdapter"
], function(ObjectAdapter, ODataBaseAdapter, ODataFieldAdapter) {
	"use strict";

	var ODataObjectAdapter = ObjectAdapter.extend("sap.ui.mdc.experimental.provider.adapter.ODataObjectAdapter", {
		_schemaCache: {

		},
		aExpand: [],
		constructor: function(oModel, sModelName, sMetaContext, bCanonical) {
			ObjectAdapter.prototype.constructor.apply(this, [
				oModel, sModelName, sMetaContext, bCanonical, ODataBaseAdapter
			]);
		}
	});

	ODataObjectAdapter.prototype.collection = function() {
		return this.asPath("/" + this.oEntitySet.name);
	};

	ODataObjectAdapter.prototype.keys = function() {
		var i, aKeys = this["//"]["key"]["propertyRef"], oKeyMap = {};

		for (i = 0; i < aKeys.length; i++) {
			oKeyMap[aKeys[i].name] = this.fields[aKeys[i].name];
		}

		return oKeyMap;
	};

	ODataObjectAdapter.prototype.fields = function() {
		var i, oField, aFields = this["//"]["property"], oFieldMap = {};

		for (i = 0; i < aFields.length; i++) {
			oField = aFields[i];

			oFieldMap[oField.name] = new ODataFieldAdapter(this.oModel, this.sModelName, this.sContextName, this.sMetaContext + "/property/" + i, true);
			oFieldMap[oField.name].oEntitySet = this.oEntitySet;
		}

		return oFieldMap;
	};

	ODataObjectAdapter.prototype.relations = function() {
		// var oNaviMap = this.navigationProperties;

	};

	return ODataObjectAdapter;
});
}; // end of sap/ui/mdc/experimental/provider/adapter/ODataObjectAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.internal.table.Table.flexibility') ) {
jQuery.sap.declare('sap.ui.mdc.internal.table.Table.flexibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/internal/table/Table.flexibility",["sap/ui/mdc/base/ConditionModel"], function (ConditionModel) {
	"use strict";

	function fnAddColumn(sMetaContextPath, iIndex, sLabel, oTable, oModifier, oModel){
		var oMetaModel = oModel.getMetaModel(),
			oMetadataRequest = oMetaModel.requestObject(sMetaContextPath);

		return oMetadataRequest.then(function () {
				var oInnerTable = oTable.getInnerTable(), // TODO does not work with modifier
					oPropertyContext = oMetaModel.createBindingContext(sMetaContextPath),
					sTableType = oModifier.getProperty(oTable, "type"),
					sFragmentName,
					oViewProcessor;

			if (sTableType === 'ResponsiveTable') {
				sFragmentName = "sap.ui.mdc.internal.table.responsivetable.AddColumnChange";
			} else if (sTableType === 'GridTable') {
				sFragmentName = "sap.ui.mdc.internal.table.gridtable.AddGridTableColumnChange";
			}

			try {

				var oViewProcessor = sap.ui.view({
					viewContent: '<core:View xmlns:core="sap.ui.core"><core:Fragment fragmentName="' + sFragmentName + '" type="XML"/></core:View>',
					type: "XML",
					async: true,
					preprocessors: {
						xml: {
							bindingContexts: {
								dataField: oPropertyContext
							},
							models: {
								dataField: oMetaModel
							}
						}
					}
				});
			} catch (e) {
				jQuery.sap.log.error(e);
			}

			return oViewProcessor.loaded().then(function () {
				var oColumn = oViewProcessor.getContent()[0].getColumns()[0],
					oCell, oListBindingTemplate, oColumnLabel, oListBindingInfo, oListBinding, oConditionModel;


				// FIXME: get rid of this workaround
				// the controls created through changes shall have the same prefix ID than the ones creates during the
				// initial template processing. If we set the same ID to the temp view which is created above the view
				// creation aborts due to duplicate IDs (although the view is never put into the DOM)
				// for a first test we directly update the generated ID and put the table's ID prefix to it
				oColumn.sId = oTable.getId() + '--' + oColumn.getId().split('--')[1];


				if (sLabel){
					// overwrite the label on the column - as the column exists as JS object we don't need to use
					// the modifier for this
					if (sTableType === 'ResponsiveTable') {
						oColumnLabel = oColumn.getHeader();
					} else if (sTableType === 'GridTable') {
						var oColumnLabel = oColumn.getLabel();
					}
					oColumnLabel.setText(sLabel);
				}

				oModifier.insertAggregation(oInnerTable, "columns", oColumn, iIndex);

				if (sTableType === 'ResponsiveTable') {
					// Responsive Table is special as the column and item is separated
					oCell = oViewProcessor.getContent()[1];
					oListBindingTemplate = oModifier.getBindingTemplate(oInnerTable, "items");
					oModifier.insertAggregation(oListBindingTemplate, "cells", oCell, iIndex);
				}

				// Destroy and create the list binding again
				oListBinding = oTable.getListBinding();
				oConditionModel = ConditionModel.getFor(oListBinding);
				oListBindingInfo = oTable.getListBindingInfo();
				oListBinding.getModel().unregisterNamedBinding(oListBinding);

				oTable.getInnerTable().bindItems({
					path: oListBindingInfo.path,
					template: oListBindingInfo.template,
					parameters: oListBindingInfo.parameters
				});

				if (oConditionModel) {
					oConditionModel.setFor(oTable.getListBinding());

					// this is questionable - depends on the fact if the already set filters will survive a variant
					// change - most likely not but for now apply the filters immediately
					oConditionModel.applyFilters();
					}

				return oColumn;
			});
		});
	}

	function fnRemoveColumn(sElementId, oTable, oModifier){
		var oInnerTable = oTable.getInnerTable(),
			sTableType = oModifier.getProperty(oTable, "type"),
			oListBindingTemplate,
			aColumns = oModifier.getAggregation(oInnerTable, "columns"),
			aCells,
			mRevertData = {},
			oColumnLabel,
			oColumn,
			aCustomData;

		for (var i = 0; i < aColumns.length; i++) {
			if (oModifier.getId(aColumns[i]) === sElementId) {
				oColumn = aColumns[i];
				aCustomData = oModifier.getAggregation(oColumn, "customData");
				for (var c = 0; c < aCustomData.length; c++){
					if (oModifier.getProperty(aCustomData[c], "key") === "metaContextPath"){
						mRevertData.metaContextPath = oModifier.getProperty(aCustomData[c], "value");
					}
				}

				mRevertData.index = i;
				//mRevertData.id = oModifier.getId(oColumn);

				if (sTableType === 'ResponsiveTable') {
					oColumnLabel = oModifier.getAggregation(oColumn, "header");
				} else if (sTableType === 'GridTable') {
					oColumnLabel = oModifier.getAggregation(oColumn, "label");
				}
				mRevertData.label = oModifier.getProperty(oColumnLabel, "text");

				oModifier.removeAggregation(oInnerTable, "columns", oColumn);

				if (sTableType === 'ResponsiveTable') {
					oListBindingTemplate = oModifier.getBindingTemplate(oInnerTable, "items");
					aCells = oModifier.getAggregation(oListBindingTemplate, "cells");
					oModifier.removeAggregation(oListBindingTemplate, "cells", aCells[i]);
				}

				return mRevertData;
			}
		}
	}

	function fnMoveColumn(sElementId, sTargetIndex, oTable, oModifier){
		var oInnerTable = oTable.getInnerTable(),
			aColumns = oModifier.getAggregation(oInnerTable, "columns"),
			sTableType = oModifier.getProperty(oTable, "type"),
			oListBindingTemplate, aCells;


		for (var i = 0; i < aColumns.length; i++) {
			if (oModifier.getId(aColumns[i]) === sElementId){
				oModifier.removeAggregation(oInnerTable, "columns", aColumns[i]);
				oModifier.insertAggregation(oInnerTable, "columns", aColumns[i], sTargetIndex);

				if (sTableType === 'ResponsiveTable') {
					oListBindingTemplate = oModifier.getBindingTemplate(oInnerTable, "items");
					aCells = oModifier.getAggregation(oListBindingTemplate, "cells");
					oModifier.removeAggregation(oListBindingTemplate, "cells", aCells[i]);
					oModifier.insertAggregation(oListBindingTemplate, "cells", aCells[i], sTargetIndex);
				}
			}
		}
	}

	return {
		"addColumn": {
			applyChange: function (oChange, oTable, mPropertyBag) {
				var oChangeDefinition = oChange.getDefinition(),
					sMetaContextPath  = oChangeDefinition.content.bindingString,
					sLabel = oChangeDefinition.content.label,
					iIndex = oChangeDefinition.content.index,
					oModifier = mPropertyBag.modifier,
					oModelContainer = mPropertyBag.appComponent || mPropertyBag.view,
					oModel = oModelContainer ? oModelContainer.getModel() : undefined;

				if (!oModel instanceof sap.ui.model.odata.v4.ODataModel){
					jQuery.sap.log.error("Change can't be applied without a container having a Odata v4 model assigned");
					return false;
				}

				return fnAddColumn(sMetaContextPath, iIndex, sLabel, oTable, oModifier, oModel).then(function(oColumn){
					oChange.setRevertData({
						elementId: oModifier.getId(oColumn)
					});
				});
			},

			revertChange: function (oChange, oTable, mPropertyBag) {
				var mRevertData = oChange.getRevertData();

				if (mRevertData) {
					fnRemoveColumn(mRevertData.elementId, oTable, mPropertyBag.modifier);
					oChange.resetRevertData();
				} else {
					jQuery.sap.log.error("Attempt to revert an unapplied change.");
					return false;
				}

				return true;
			}
		},

		"moveColumns": {
			applyChange: function (oChange, oTable, mPropertyBag) {
				var oChangeDefinition = oChange.getDefinition(),
					aMovedElements = oChangeDefinition.content.movedElements;

				for (var x = 0; x < aMovedElements.length; x++) {
					fnMoveColumn(aMovedElements[x].element, aMovedElements[x].targetIndex, oTable, mPropertyBag.modifier);
				}

				return true;
			},

			revertChange: function (oChange, oTable, mPropertyBag) {
				var oChangeDefinition = oChange.getDefinition(),
					aMovedElements = oChangeDefinition.content.movedElements;

				for (var x = 0; x < aMovedElements.length; x++) {
					fnMoveColumn(aMovedElements[x].element, aMovedElements[x].sourceIndex, oTable, mPropertyBag.modifier);
				}

				return true;
			}
		},

		"removeColumn": {
			applyChange: function (oChange, oTable, mPropertyBag) {
				var oChangeDefinition = oChange.getDefinition(),
					mRevertData;

				mRevertData = fnRemoveColumn(oChangeDefinition.content.removedElement, oTable, mPropertyBag.modifier);

				oChange.setRevertData(mRevertData);

				return true;
			},

			revertChange: function (oChange, oTable, mPropertyBag) {
				var mRevertData = oChange.getRevertData(),
					oModelContainer = mPropertyBag.appComponent || mPropertyBag.view,
					oModel = oModelContainer ? oModelContainer.getModel() : undefined;

				if (mRevertData) {
					return fnAddColumn(mRevertData.metaContextPath, mRevertData.index, mRevertData.label, oTable, mPropertyBag.modifier, oModel).then(function(){
						oChange.resetRevertData();
					});
				} else {
					jQuery.sap.log.error("Attempt to revert an unapplied change.");
					return false;
				}
			}
		},

		"setTableType": {
			// This change is only experimental
			applyChange: function (oChange, oTable, mPropertyBag) {
				var oChangeDefinition = oChange.getDefinition(),
					sCurrentTableType = oTable.getType(),
					oModifier = mPropertyBag.modifier;

				// TODO changing the table type needs a re-templating, this is not yet working
				oModifier.setProperty(oTable, "type", oChangeDefinition.content.tableType);

				oChange.setRevertData({
					originalTableType : sCurrentTableType
				});

				return true;
			},

			revertChange: function (oChange, oTable, mPropertyBag) {
				var mRevertData = oChange.getRevertData(),
					oModifier = mPropertyBag.modifier;

				if (mRevertData) {
					// TODO changing the table type needs a re-templating, this is not yet working
					oModifier.setProperty(oTable, "type", mRevertData.originalTableType);
				} else {
					jQuery.sap.log.error("Attempt to revert an unapplied change.");
					return false;
				}
			}
		}
	};
}, /* bExport= */false);

}; // end of sap/ui/mdc/internal/table/Table.flexibility.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.internal.valuehelp.ValueHelp.controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.internal.valuehelp.ValueHelp.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/internal/valuehelp/ValueHelp.controller",[
	"sap/ui/core/mvc/Controller",
	"sap/ui/mdc/base/ConditionModel",
	"sap/ui/mdc/base/ODataSuggestProvider",
	"sap/ui/mdc/base/OperatorSuggestProvider",
	"sap/m/SearchField",
	"sap/ui/model/json/JSONModel"
], function (Controller, ConditionModel, ODataSuggestProvider, OperatorSuggestProvider, SearchField, JSONModel) {
	"use strict";

	return Controller.extend("sap.ui.mdc.internal.valuehelp.ValueHelp", {

		handleSearch: function (oEvent) {
			var oValueListTable = this.getView().byId("valueListTable");
			var sSearchQuery = oEvent.getParameter("query") || oEvent.getParameter("newValue");

			oValueListTable.getBinding("items").changeParameters({
				$search: sSearchQuery || undefined
			});
		},

		onInit: function () {
			var oFilterLayoutFlag = new JSONModel({
				visible: "HideMode",
				listView: false,
				tableView: true,
				sSelectedRowCount: 0,
				sSearchFieldValue: ""
			});
			this.oValueListTable = this.getView().byId("valueListTable");

			var oListBinding = this.oValueListTable.getBinding("items");
			this.oValueListTableConditionModel = ConditionModel.getFor(oListBinding);
			var oTableConditionChangeBinding = this.oValueListTableConditionModel.bindProperty("/", this.oValueListTableConditionModel.getContext("/"));
			oTableConditionChangeBinding.attachChange(this.handleTableChange.bind(this));

			// change handler on list binding to remember the table tab selections and mark the selected items
			oListBinding.attachChange(this.updateTableSelections.bind(this));

			this.getView().setModel(this.oValueListTableConditionModel, "vltcm");
			this.getView().setModel(oFilterLayoutFlag, "FilterLayoutFlag");
			if (!this.oConditionModel) {
				this.oConditionModel = this.oView.getModel("cm");
				var oConditionChangeBinding = this.oConditionModel.bindProperty("/", this.oConditionModel.getContext("/"));
				oConditionChangeBinding.attachChange(function(oEvent) {
					this.updateTableSelections();

					// check if that least one dummy condition exist for the define conditions tab
//					this.updateDefineConditions();
				}.bind(this));
			}
			var oSearchField = this.getView().byId("template::ValueHelpTableSearchField");
			oSearchField.attachBrowserEvent("focusout", function (oEvent) {
				oSearchField.fireSearch({
					query: oSearchField.getValue(),
					id: oSearchField.getId()
				});
			});
		},
		onBeforeRendering: function() {
		},
		onAfterRendering : function(){
			//this.updateTableSelections();
		},

		handleFilter: function () {
			var oSplitApp = this.getView().byId("SplitCont");
			if (oSplitApp.getMode() === "HideMode") {
				oSplitApp.setMode("ShowHideMode");
				this.getView().getModel("FilterLayoutFlag").setProperty("/visible", "ShowHideMode");
			} else {
				oSplitApp.setMode("HideMode");
				this.getView().getModel("FilterLayoutFlag").setProperty("/visible", "HideMode");
			}
		},

		handleTableChange: function () {
			this.oValueListTableConditionModel.applyFilters();
		},

		handleConditionButtonVisibility : function() {
			var oGrid = this.getView().byId("template::DefineConditions");
			var oConditionModel = this.getView().getModel("cm");
			var sLen = oConditionModel.getConditions().length;

			var aOperatorTabItems = [];
			for (var i = 0; i < sLen; i++) {
				//filter values of select with operator tab and stores it in a array
				if ( oConditionModel.getConditions()[i].operator !== "EEQ") {
					aOperatorTabItems.push(oConditionModel.getConditions()[i]);
				}
			}
			if (aOperatorTabItems.length === 0) {
				//Adds one new empty condition into the condition model when there is no value in define condition tab
				//This will work in case of Reset
				oConditionModel.addCondition(oConditionModel.createCondition(this.getView().getController().fieldPath, "EQ", []));
			} else {
				//setting the visibility of add/remove button on change of length of condition model
				var content = oGrid.getContent();
				content[content.length - 1].getContent()[4].getContent()[1].setVisible(true);
			}
		},
		onResetValueHelp: function (oControlEvent, oModel){
			var oView = this.getView();
			oView.setModel(oModel, "cm");
		},
		handleToggleButton: function (oEvent) {
			var sId = oEvent.getSource().getId();
			if (sId.indexOf("template::ListView") !== -1) {
				this.getView().getModel("FilterLayoutFlag").setProperty("/listView", true);
				this.getView().getModel("FilterLayoutFlag").setProperty("/tableView", false);
			} else if (sId.indexOf("template::TableView") !== -1) {
				this.getView().getModel("FilterLayoutFlag").setProperty("/tableView", true);
				this.getView().getModel("FilterLayoutFlag").setProperty("/listView", false);
			}
		},

        showSelected: function (oEvent) {
            var oTable;
            oTable = this.getView().byId("valueListTable");
            // keep the original binding info and list binding to reset to show all items
            if (!this.oTableBindingInfo) {
                this.oTableBindingInfo = oTable.getBindingInfo("items");
            }
            if (oEvent.getParameter("pressed") === true) {
                // show selected items only
                /**
                 * Currently we have two options to get the filters from -
                 * 1. conditions
                 * 2. selected items
                 */
                var oFilteredBindingInfo = jQuery.sap.extend({}, oTable.getBindingInfo("items"), {filters : this.getFiltersFromConditions()});
                oTable.bindItems(oFilteredBindingInfo);

            } else {
                // show all items
                oTable.bindItems(this.oTableBindingInfo);
            }
            // attach change handler for new listBinding
            // change handler on list binding to remember the table tab selections and mark the selected items
            oTable.getBinding("items").attachChange(this.updateTableSelections.bind(this));
        },

        getFiltersFromConditions: function () {
            var oConditionModel, aConditions, aFilters, aConditionsForTableTab, oValueListModel, sCollectionPath, oMetaModel, aKeys, sKey, aIntermediateFilterArray;

            oConditionModel = this.getView().getModel("cm");
            aConditions = oConditionModel.getConditions();
            aFilters = [];
			aIntermediateFilterArray = [];
            aConditionsForTableTab = aConditions.filter(function (oCondition) {
                return oCondition.operator === "EEQ";
            });
            oValueListModel = this.getView().getModel("valueList");
            sCollectionPath = oValueListModel.getProperty("/CollectionPath");
            oMetaModel = oValueListModel.getProperty('/$model').getMetaModel();
            aKeys = oMetaModel.getObject('/' + sCollectionPath + '/').$Key;
            sKey = aKeys[0];
			var canonicalPathArray = [];
			var aSplitValueKey = [];
			var aValueKey = [];
			for (var i = 0;i < aConditionsForTableTab.length;i++){
				canonicalPathArray[i] = aConditionsForTableTab[i].values[2];
			}
			for (var j = 0;j < canonicalPathArray.length;j++){
				//aValueKey[j] = canonicalPathArray[j].slice(canonicalPathArray[j].indexOf("(") + 1,canonicalPathArray[j].indexOf(")"));
				aValueKey[j] = canonicalPathArray[j].split(/\((.*?)\)/)[1];
			}

			aValueKey.forEach(function(item,index){
				aSplitValueKey = aValueKey[index].split(',');
				aFilters = [];
				if (aSplitValueKey.length === 1) {
					aFilters.push(new sap.ui.model.Filter({
						path: sKey,
						operator: sap.ui.model.FilterOperator.EQ,
						value1: aConditionsForTableTab[index].values[0]
					}));
					aIntermediateFilterArray.push(new sap.ui.model.Filter({
						filters : aFilters,
						and : false
					}));
				} else {
					for (var l = 0;l < aSplitValueKey.length;l++){
						aFilters.push(new sap.ui.model.Filter({
							path : aSplitValueKey[l].substr(0,aSplitValueKey[l].indexOf('=')),
							operator : sap.ui.model.FilterOperator.EQ,
							value1 : aSplitValueKey[l].indexOf("'") === -1 ? aSplitValueKey[l].slice(aSplitValueKey[l].indexOf("=") + 1, aSplitValueKey[l].length) : aSplitValueKey[l].slice(aSplitValueKey[l].indexOf("'") + 1, -1)
							//value1 : aSplitValueKey[l].slice(aSplitValueKey[l].indexOf("'") === -1 ? aSplitValueKey[l].indexOf("=") + 1 : aSplitValueKey[l].indexOf("'")  + 1,-1)
						}));
					}
					aIntermediateFilterArray.push(new sap.ui.model.Filter({
						filters : aFilters,
						and : true
					}));
				}

			});
            // filter for each condition of table tab applied by logical OR
            return new sap.ui.model.Filter({
                filters: aIntermediateFilterArray,
                and: false
            });
        },

		onChange: function(){
			var oConditionModel = this.oView.getModel("cm");
			oConditionModel._checkIsEmpty();
			oConditionModel._updateValues();
			//TODO why is refresh and checkUpdate required? Is this correct or do we have a better way to update the Tokenizer with the filter...
			oConditionModel.refresh();
			oConditionModel.checkUpdate(true, true);
		},

		removeCondition: function(oEvent){
			//var sSouceId = oEvent.oSource.getId();
			//var oConditionModel = this.oView.getModel("cm");
			//var aConditions = oConditionModel.getConditions();
			//var sLen = aConditions.length;
			//var aOperatorTabItems = [];
			//for (var i = 0 ; i < sLen; i++) {
			//	//filter values of "select with operator" tab from condition model and stores it in a array
			//	if ( aConditions[i].operator !== "EEQ") {
			//		aOperatorTabItems.push({
			//			items : aConditions[i],
			//			index : i});
			//	}
			//}
			//var index = sSouceId.substr(sSouceId.lastIndexOf("-") + 1 ,sSouceId.length); //index of removed item
			//var aRemovedItem = [];
			//aRemovedItem.push(aOperatorTabItems[index]);  //getting object of removed item
			//oConditionModel.removeCondition(this.getView().getController().fieldPath, parseInt(aRemovedItem[0].index, 10));
            //
			////if removal item is last line item of condition tab then will add empty condition
			//this.updateDefineConditions();

			var oSource = oEvent.oSource;
			var oCondition = oSource.getBindingContext("cm").getObject();
			var oConditionModel = this.oView.getModel("cm");

			// remove the condition from the CM
			oConditionModel.removeCondition(oCondition);
		},
		addCondition: function(oEvent){
			//var oConditionModel = this.oView.getModel("cm");
			//var sSouceId = oEvent.oSource.getId();
			//var index = sSouceId.substr(sSouceId.lastIndexOf("-") + 1 ,sSouceId.length);
			//// create a new dummy condition for a new contion on the UI - must be removed later if not used or filled correct
			//oConditionModel.insertCondition(index, oConditionModel.createCondition(this.getView().getController().fieldPath, "EQ", []));

			var oSource = oEvent.oSource;
			var oCondition = oSource.getBindingContext("cm").getObject();

			var oConditionModel = this.oView.getModel("cm");
			var index = oConditionModel.indexOf(oCondition);

			// create a new dummy condition for a new condition on the UI - must be removed later if not used or filled correct
			this.addDummyCondition(index + 1);
		},

		handleSelectionChange : function(oEvent){

			var oView = this.getView();
			var oConditionModel = oView.getModel("cm");
			var mValueList = oView.getModel("valueList").getObject("/");
			var oItem, sKey, sDescription, oBindingContext;
			for (var i = 0; i < oEvent.getParameter("listItems").length; i++) {
				//Getting list item associated object(data)
				oBindingContext = oEvent.getParameter("listItems")[i].getBindingContext();
				oItem = oBindingContext.getObject();
				//Getting key-field from the list item, TODO: Implementation for multiple key-field scenario
				sKey = oItem[mValueList.__sapfe.keyPath];
				sDescription = oItem[mValueList.__sapfe.descriptionPath];
				//Insert condition to condition model(index, path, operator, aValues)
				//Store the canonical path to the condition for updating the table rows selection on update of binding or token
				var oCondition = oConditionModel.createCondition(this.sFieldPath, "EEQ", [sKey,sDescription,oBindingContext.getCanonicalPath()]);

				var index = oConditionModel.indexOf(oCondition, this.sFieldPath);
				if (index === -1) {
					oConditionModel.addCondition(oCondition);
				} else {
					oConditionModel.removeCondition(this.sFieldPath, index);
				}
			}
		},

		handleTokenUpdate : function(oEvent){

			//var oView = this.getView();
			//var oConditionModel = oView.getModel("cm");
			//var sFieldPath = oView.getController().fieldPath;
			//var aRemovedTokens = oEvent.getParameter("removedTokens");
			//var aTokens = oView.byId("template::Tokenizer").getTokens();
			//for (var i = 0; i < aTokens.length; i++) {
			//	if (aTokens[i].getKey() === aRemovedTokens[0].getKey()) {
            //
			//		var oTable = oView.byId("valueListTable");
			//		var oTableSelectedContext = oTable.getSelectedContexts();
			//		for (var j = 0; j < oTableSelectedContext.length; j++) {
			//			if (oTableSelectedContext[j].getCanonicalPath() === oConditionModel.getConditions()[i].values[2]) {
			//				oTable.getItems()[oTableSelectedContext[j].iIndex].setSelected(false);
			//				break;
			//			}
			//		}
			//		oConditionModel.removeCondition(sFieldPath,i);
			//		break;
			//	}
			//}

			if (oEvent.getParameter("type") === "removed") {
				var aRemovedTokens = oEvent.getParameter("removedTokens");
				var oToken = aRemovedTokens[0];
				var oCondition = oToken.getBindingContext("cm").getObject();

				var oConditionModel = this.oView.getModel("cm");
				var index = oConditionModel.indexOf(oCondition);

				// remove the condition from the CM
				oConditionModel.removeCondition(this.sFieldPath, index);
			}
		},

		updateTableSelections : function (oEvent) {
			// remove all selections from the table
			var oTable, aItems;
			oTable = this.getView().byId("valueListTable");
			// remove selections with "true" to remove all the invisible selections as well
			oTable.removeSelections(true);
			aItems = oTable.getItems();
			// We get the conditions and key path, loop over conditions and compare key to table's current items to mark selections
			var oConditionModel, aConditions, aConditionsForTableTab;
			oConditionModel = this.getView().getModel("cm");
			aConditions = oConditionModel.getConditions();
			aConditionsForTableTab = aConditions.filter(function (oCondition) {
				return oCondition.operator === "EEQ";
			});
			var i, j, oCondition, oItem;
			for (i = 0; i < aConditionsForTableTab.length; i++) {
				oCondition = aConditionsForTableTab[i];
				for (j = 0; j < aItems.length; j++) {
					oItem = aItems[j];
					if (oItem.getBindingContext().getCanonicalPath() === oCondition.values[2]) {
						oTable.setSelectedItem(oItem, true);
						break;
					}
				}
			}
		},

		/**
		 * Add dummy condition to define conditions tab if no conditions
		 */
//		updateDefineConditions: function() {
//			var oConditionModel = this.getView().getModel("cm");
//			var aConditions = oConditionModel.getConditions().filter(function(oCondition) {
//				return oCondition.operator !== "EEQ";
//			});
//
//			if (aConditions.length === 0) {
//				this.addDummyCondition();
//			}
//		},

		addDummyCondition: function(index) {
			var oConditionModel = this.oView.getModel("cm");
			var oCondition = oConditionModel.createCondition(this.sFieldPath, "EQ", []);
			if (index !== undefined) {
				oConditionModel.insertCondition(index, oCondition, true);
			} else {
				oConditionModel.addCondition(oCondition, true);
			}
		},

		valueCtrlFactory: function(sId, oContext) {
			var oCM = oContext.oModel;
			var sPath = oContext.sPath;
			var index = parseInt(sPath.split("/")[sPath.split("/").length - 1], 10);
			var conditionIndex = parseInt(sPath.split("/")[2], 10);
			sPath = sPath.slice(0, sPath.lastIndexOf("/") - 1);
			sPath = sPath.slice(0, sPath.lastIndexOf("/") - 1);
			var oCondition = oCM.getProperty(sPath)[conditionIndex];
			var oOperator = oCM.getFilterOperatorConfig().getOperator(oCondition.operator);

			var oFilterField = oCM.getFilterField();
			var oDataType = oFilterField._getDataType();

			var oValueControl = ConditionModel.createControl(oDataType, oOperator, "cm>", index);
			oValueControl.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0,
				growFactor: 0.5
			}));
			if (index) {
				oValueControl.addStyleClass("sapUiSmallMarginBegin");
			}
			oValueControl.attachChange(this.onChange.bind(this));
			return oValueControl;
		}

	});
});

}; // end of sap/ui/mdc/internal/valuehelp/ValueHelp.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nColumnPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nColumnPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nColumnPanel",[
	'jquery.sap.global', 'sap/m/library', './P13nPanel', './P13nInternalModel'
], function(jQuery, MLibrary, P13nPanel, P13nInternalModel) {
	"use strict";

	/**
	 * Constructor for a new P13nColumnPanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nColumnPanel control is used to define selection settings like the visibility or the order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nColumnPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nColumnPanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nColumnPanel", /** @lends sap.ui.mdc.experimental.P13nColumnPanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc"
		}
	});

	// ----------------------- Overwrite Methods -----------------

	P13nColumnPanel.prototype.init = function() {
		P13nPanel.prototype.init.apply(this, arguments);

		// Due to the re-binding during execution of _filterTableItems() the sap.m.Table re-create all items.
		// So we have to store the 'columnKey' in order to mark the item after re-binding.
		this._sColumnKeyOfMarkedItem = undefined;
		// Stores the state of the button "Show selected".
		this._bShowOnlySelectedItems = false;
		// Internal model.
		this._oInternalModel = undefined;

		this._proxyOnModelContextChange = jQuery.proxy(this._onModelContextChange, this);
		this.attachModelContextChange(this._proxyOnModelContextChange);
	};

	P13nColumnPanel.prototype.refreshInitialState = function() {
		this._bInternalModelToBeUpdated = true;
		this.invalidate();
	};

	P13nColumnPanel.prototype._onModelContextChange = function() {
		if (!this.getModel()) {
			return;
		}
		this._updateInternalModel();
	};

	P13nColumnPanel.prototype.onBeforeRendering = function() {
		this._updateInternalModel();
	};

	P13nColumnPanel.prototype.exit = function() {
		this.detachModelContextChange(this._proxyOnModelContextChange);
	};

	// ----------------------- Private Methods -----------------------------------------
	/**
	 * @private
	 */
	P13nColumnPanel.prototype._selectTableItem = function(oTableItem) {
		// 1. Change the 'position' on model items
		this._oInternalModel.selectModelItem(this._oInternalModel.getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItem)), oTableItem.getSelected());
		this._syncPosition();

		// //TODO: wenn es nur ein unselected item ist und man drückt auf "select All" das eine item wird selektiert und markiert (falsch!)
		// First set marked item
		this._toggleMarkedTableItem(oTableItem);
		// Then update move button according to marked item
		this._updateControlLogic();

		this._updateCounts();
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._moveTableItem = function(oTableItemFrom, oTableItemTo) {
		var oMItemFrom = this._oInternalModel.getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItemFrom));
		var oMItemTo = this._oInternalModel.getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItemTo));

		// 1. Change the 'position' on model items
		this._oInternalModel.moveModelItemPosition(oMItemFrom, oMItemTo);
		this._syncPosition();
		// 2. Move the items inside of the model
		this._oInternalModel.moveModelItem(oMItemFrom, oMItemTo);
		// 3. Remove style of current table item (otherwise the style remains on the item after move)
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// 4. Sort table items according to the model items
		this._sortTableItemsAccordingToInternalModel();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onPressButtonMoveToTop = function() {
		this._moveTableItem(this._getMarkedTableItem(), this._getVisibleTableItems()[0]);
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onPressButtonMoveUp = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) - 1]);
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onPressButtonMoveDown = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) + 1]);
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onPressButtonMoveToBottom = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.length - 1]);
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onItemPressed = function(oEvent) {
		// First set marked item
		this._toggleMarkedTableItem(oEvent.getParameter('listItem'));
		// Then update move button according to marked item
		this._updateControlLogic();
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onSelectionChange = function(oEvent) {
		oEvent.getParameter("listItems").forEach(function(oTableItem) {
			this._selectTableItem(oTableItem);
		}, this);
	};
	/**
	 * Switches 'Show Selected' button to 'Show All' and back.
	 *
	 * @private
	 */
	P13nColumnPanel.prototype.onSwitchButtonShowSelected = function() {
		this._bShowOnlySelectedItems = !this._bShowOnlySelectedItems;

		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onSearchFieldLiveChange = function() {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._filterTableItems = function() {
		var aFilters = [];
		if (this._isFilteredByShowSelected() === true) {
			aFilters.push(new sap.ui.model.Filter("selected", "EQ", true));
		}
		var sSearchText = this._getSearchText();
		if (sSearchText) {
			aFilters.push(new sap.ui.model.Filter([
				new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("tooltip", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("aggregationRole", sap.ui.model.FilterOperator.Contains, sSearchText)
			], false));
		}
		this._getTable().getBinding("items").filter(aFilters);
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._sortTableItemsAccordingToInternalModel = function() {
		var fComparator = function(oItemA, oItemB) {
			var oMItemA = this._oInternalModel.getModelItemByColumnKey(oItemA.getColumnKey());
			var oMItemB = this._oInternalModel.getModelItemByColumnKey(oItemB.getColumnKey());
			var iIndexA = this._oInternalModel.getIndexOfModelItem(oMItemA);
			var iIndexB = this._oInternalModel.getIndexOfModelItem(oMItemB);
			if (iIndexA < iIndexB) {
				return -1;
			} else if (iIndexA > iIndexB) {
				return 1;
			}
			return 0;
		};
		this._getTable().getBinding("items").sort(new sap.ui.model.Sorter({
			path: '',
			descending: false,
			group: false,
			comparator: fComparator.bind(this)
		}));
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._getVisibleTableItems = function() {
		return this._getTable().getItems().filter(function(oTableItem) {
			return !!oTableItem.getVisible();
		});
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._getMarkedTableItem = function() {
		return this._getTableItemByColumnKey(this._sColumnKeyOfMarkedItem);
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._toggleMarkedTableItem = function(oTableItem) {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// When filter is set, the table items are reduced so marked table item can disappear.
		var sColumnKey = this._getColumnKeyByTableItem(oTableItem);
		if (sColumnKey) {
			this._sColumnKeyOfMarkedItem = sColumnKey;
			this._addStyleToTableItem(oTableItem);
		}
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nColumnPanel.prototype._getStyledAsMarkedTableItem = function() {
		var aDomElements = this._getTable().$().find(".sapMP13nColumnsPanelItemSelected");
		return aDomElements.length ? jQuery(aDomElements[0]).control()[0] : undefined;
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nColumnPanel.prototype._getTableItemByColumnKey = function(sColumnKey) {
		var aContext = this._getTable().getBinding("items").getContexts();
		var aTableItem = this._getTable().getItems().filter(function(oTableItem, iIndex) {
			return aContext[iIndex].getObject().getColumnKey() === sColumnKey;
		});
		return aTableItem[0];
	};

	/**
	 *
	 * @param {sap.m.ListItemBase} oTableItem
	 * @returns {string || null}
	 * @private
	 */
	P13nColumnPanel.prototype._getColumnKeyByTableItem = function(oTableItem) {
		var iIndex = this._getTable().indexOfItem(oTableItem);
		if (iIndex < 0) {
			return null;
		}
		return this._getTable().getBinding("items").getContexts()[iIndex].getObject().getColumnKey();
	};

	P13nColumnPanel.prototype._syncPosition = function() {
		this.getItems().forEach(function(oItem) {
			var oMItem = this._oInternalModel.getModelItemByColumnKey(oItem.getColumnKey());
			oItem.setPosition(oMItem.position);
		}, this);
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._addStyleToTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.addStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._removeStyleFromTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.removeStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._isFilteredByShowSelected = function() {
		return !!this._bShowOnlySelectedItems;
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._updateControlLogic = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._getManagedObjectModel().setProperty("/@custom/isMoveUpButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > 0);
		this._getManagedObjectModel().setProperty("/@custom/isMoveDownButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > -1 && aVisibleTableItems.indexOf(this._getMarkedTableItem()) < aVisibleTableItems.length - 1);
	};

	/**
	 * Updates count of selected items.
	 *
	 * @private
	 */
	P13nColumnPanel.prototype._updateCounts = function() {
		var iCountOfSelectedItems = 0;
		this.getItems().forEach(function(oItem) {
			if (oItem.getSelected()) {
				iCountOfSelectedItems++;
			}
		});
		this._getManagedObjectModel().setProperty("/@custom/countOfSelectedItems", iCountOfSelectedItems);
		this._getManagedObjectModel().setProperty("/@custom/countOfItems", this.getItems().length);
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._updateInternalModel = function() {
		if (!this._bInternalModelToBeUpdated) {
			return;
		}
		this._bInternalModelToBeUpdated = false;

		// Remove the marking style before table items are updated
		this._removeStyleFromTableItem(this._getMarkedTableItem());

		this._oInternalModel = new P13nInternalModel({
			tableItems: this.getItems()
		});
		this._sortTableItemsAccordingToInternalModel();
		this._filterTableItems();

		// Set marked item initially to the first table item if not defined yet via property '_sColumnKeyOfMarkedItem'
		if (!this._sColumnKeyOfMarkedItem) {
			// First set marked item
			this._sColumnKeyOfMarkedItem = this._getColumnKeyByTableItem(this._getVisibleTableItems()[0]);
		}
		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();

		this._updateCounts();
	};

	return P13nColumnPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nColumnPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nFilterPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nFilterPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nFilterPanel",[
	'jquery.sap.global', 'sap/m/library', './P13nPanel', './P13nInternalModel'
], function(jQuery, MLibrary, P13nPanel, P13nInternalModel) {
	"use strict";

	/**
	 * Constructor for a new P13nFilterPanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nFilterPanel control is used to define selection settings like the visibility or the order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.52.7
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nFilterPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nFilterPanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nFilterPanel", /** @lends sap.ui.mdc.experimental.P13nFilterPanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc"
		}
	});

	// ----------------------- Overwrite Methods -----------------

	P13nFilterPanel.prototype.init = function() {
		P13nPanel.prototype.init.apply(this, arguments);

		// Due to the re-binding during execution of _filterTableItems() the sap.m.Table re-create all items.
		// So we have to store the 'columnKey' in order to mark the item after re-binding.
		this._sColumnKeyOfMarkedItem = undefined;
		// Stores the state of the button "Show selected".
		this._bShowOnlySelectedItems = false;
		// Internal model.
		this._oInternalModel = undefined;

		this._proxyOnModelContextChange = jQuery.proxy(this._onModelContextChange, this);
		this.attachModelContextChange(this._proxyOnModelContextChange);
	};

	P13nFilterPanel.prototype.refreshInitialState = function() {
		this._bInternalModelToBeUpdated = true;
		this.invalidate();
	};

	P13nFilterPanel.prototype._onModelContextChange = function() {
		if (!this.getModel()) {
			return;
		}

		this._updateInternalModel();
	};

	P13nFilterPanel.prototype.onBeforeRendering = function() {
		this._updateInternalModel();
	};

	P13nFilterPanel.prototype.exit = function() {
		this.detachModelContextChange(this._proxyOnModelContextChange);
	};

	// ----------------------- Private Methods -----------------------------------------
	/**
	 * @private
	 */
	P13nFilterPanel.prototype._selectTableItem = function(oTableItem) {
		// 1. Change the 'position' on model items
		this._oInternalModel.selectModelItem(this._oInternalModel.getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItem)), oTableItem.getSelected());
		this._syncPosition();

		// //TODO: wenn es nur ein unselected item ist und man drückt auf "select All" das eine item wird selektiert und markiert (falsch!)
		// First set marked item
		this._toggleMarkedTableItem(oTableItem);
		// Then update move button according to marked item
		this._updateControlLogic();
		this._updateCounts();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._moveTableItem = function(oTableItemFrom, oTableItemTo) {
		var oMItemFrom = this._oInternalModel.getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItemFrom));
		var oMItemTo = this._oInternalModel.getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItemTo));

		// 1. Change the 'position' on model items
		this._oInternalModel.moveModelItemPosition(oMItemFrom, oMItemTo);
		this._syncPosition();
		// 2. Move the items inside of the model
		this._oInternalModel.moveModelItem(oMItemFrom, oMItemTo);
		// 3. Remove style of current table item (otherwise the style remains on the item after move)
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// 4. Sort table items according to the model items
		this._sortTableItemsAccordingToInternalModel();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onPressButtonMoveToTop = function() {
		this._moveTableItem(this._getMarkedTableItem(), this._getVisibleTableItems()[0]);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onPressButtonMoveUp = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) - 1]);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onPressButtonMoveDown = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) + 1]);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onPressButtonMoveToBottom = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.length - 1]);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onItemPressed = function(oEvent) {
		// First set marked item
		this._toggleMarkedTableItem(oEvent.getParameter('listItem'));
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onSelectionChange = function(oEvent) {
		oEvent.getParameter("listItems").forEach(function(oTableItem) {
			this._selectTableItem(oTableItem);
		}, this);
	};

	/**
	 * Switches 'Show Selected' button to 'Show All' and back.
	 *
	 * @private
	 */
	P13nFilterPanel.prototype.onSwitchButtonShowSelected = function() {
		this._bShowOnlySelectedItems = !this._bShowOnlySelectedItems;

		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onSearchFieldLiveChange = function() {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._filterTableItems = function() {
		var aFilters = [];
		if (this._isFilteredByShowSelected() === true) {
			aFilters.push(new sap.ui.model.Filter("selected", "EQ", true));
		}
		var sSearchText = this._getSearchText();
		if (sSearchText) {
			aFilters.push(new sap.ui.model.Filter([
				new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("tooltip", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("aggregationRole", sap.ui.model.FilterOperator.Contains, sSearchText)
			], false));
		}
		this._getTable().getBinding("items").filter(aFilters);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._sortTableItemsAccordingToInternalModel = function() {
		var fComparator = function(oItemA, oItemB) {
			var oMItemA = this._oInternalModel.getModelItemByColumnKey(oItemA.getColumnKey());
			var oMItemB = this._oInternalModel.getModelItemByColumnKey(oItemB.getColumnKey());
			var iIndexA = this._oInternalModel.getIndexOfModelItem(oMItemA);
			var iIndexB = this._oInternalModel.getIndexOfModelItem(oMItemB);
			if (iIndexA < iIndexB) {
				return -1;
			} else if (iIndexA > iIndexB) {
				return 1;
			}
			return 0;
		};
		this._getTable().getBinding("items").sort(new sap.ui.model.Sorter({
			path: '',
			descending: false,
			group: false,
			comparator: fComparator.bind(this)
		}));
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._getVisibleTableItems = function() {
		return this._getTable().getItems().filter(function(oTableItem) {
			return !!oTableItem.getVisible();
		});
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._getMarkedTableItem = function() {
		return this._getTableItemByColumnKey(this._sColumnKeyOfMarkedItem);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._toggleMarkedTableItem = function(oTableItem) {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// When filter is set, the table items are reduced so marked table item can disappear.
		var sColumnKey = this._getColumnKeyByTableItem(oTableItem);
		if (sColumnKey) {
			this._sColumnKeyOfMarkedItem = sColumnKey;
			this._addStyleToTableItem(oTableItem);
		}
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nFilterPanel.prototype._getStyledAsMarkedTableItem = function() {
		var aDomElements = this._getTable().$().find(".sapMP13nColumnsPanelItemSelected");
		return aDomElements.length ? jQuery(aDomElements[0]).control()[0] : undefined;
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nFilterPanel.prototype._getTableItemByColumnKey = function(sColumnKey) {
		var aContext = this._getTable().getBinding("items").getContexts();
		var aTableItem = this._getTable().getItems().filter(function(oTableItem, iIndex) {
			return aContext[iIndex].getObject().getColumnKey() === sColumnKey;
		});
		return aTableItem[0];
	};

	/**
	 *
	 * @param {sap.m.ListItemBase} oTableItem
	 * @returns {string || null}
	 * @private
	 */
	P13nFilterPanel.prototype._getColumnKeyByTableItem = function(oTableItem) {
		var iIndex = this._getTable().indexOfItem(oTableItem);
		if (iIndex < 0) {
			return null;
		}
		return this._getTable().getBinding("items").getContexts()[iIndex].getObject().getColumnKey();
	};

	P13nFilterPanel.prototype._syncPosition = function() {
		this.getItems().forEach(function(oItem) {
			var oMItem = this._oInternalModel.getModelItemByColumnKey(oItem.getColumnKey());
			oItem.setPosition(oMItem.position);
		}, this);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._addStyleToTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.addStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._removeStyleFromTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.removeStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._isFilteredByShowSelected = function() {
		return !!this._bShowOnlySelectedItems;
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._updateControlLogic = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._getManagedObjectModel().setProperty("/@custom/isMoveUpButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > 0);
		this._getManagedObjectModel().setProperty("/@custom/isMoveDownButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > -1 && aVisibleTableItems.indexOf(this._getMarkedTableItem()) < aVisibleTableItems.length - 1);
	};

	/**
	 * Updates count of selected items.
	 *
	 * @private
	 */
	P13nFilterPanel.prototype._updateCounts = function() {
		var iCountOfSelectedItems = 0;
		this.getItems().forEach(function(oItem) {
			if (oItem.getSelected()) {
				iCountOfSelectedItems++;
			}
		});
		this._getManagedObjectModel().setProperty("/@custom/countOfSelectedItems", iCountOfSelectedItems);
		this._getManagedObjectModel().setProperty("/@custom/countOfItems", this.getItems().length);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._updateInternalModel = function() {
		if (!this._bInternalModelToBeUpdated) {
			return;
		}
		this._bInternalModelToBeUpdated = false;

		// Remove the marking style before table items are updated
		this._removeStyleFromTableItem(this._getMarkedTableItem());

		this._oInternalModel = new P13nInternalModel({
			tableItems: this.getItems()
		});
		this._sortTableItemsAccordingToInternalModel();
		this._filterTableItems();

		// Set marked item initially to the first table item if not defined yet via property '_sColumnKeyOfMarkedItem'
		if (!this._sColumnKeyOfMarkedItem) {
			// First set marked item
			this._sColumnKeyOfMarkedItem = this._getColumnKeyByTableItem(this._getVisibleTableItems()[0]);
		}
		this._toggleMarkedTableItem(this._getMarkedTableItem());

		// Then update move button according to marked item
		this._updateControlLogic();
		this._updateCounts();
	};

	return P13nFilterPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nFilterPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.adapter.AdapterFactory') ) {
jQuery.sap.declare('sap.ui.mdc.experimental.provider.adapter.AdapterFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.MetaModel'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/adapter/AdapterFactory",[
	"sap/ui/model/MetaModel", "sap/ui/mdc/experimental/provider/adapter/ODataFieldAdapter", "sap/ui/mdc/experimental/provider/adapter/ODataObjectAdapter"
], function(MetaModel, ODataFieldAdapter, ODataObjectAdapter) {
	"use strict";

	/**
	 * @public
	 */
	var Factory = {
		adapterCache: {},
		promiseCache: {},
		defaultAdapter: {
			"field": "sap/ui/mdc/experimental/provider/adapter/ODataFieldAdapter",
			"object": "sap/ui/mdc/experimental/provider/adapter/ODataObjectAdapter"
		},
		adapterClassCache: {
			"sap/ui/mdc/experimental/provider/adapter/ODataFieldAdapter": ODataFieldAdapter,
			"sap/ui/mdc/experimental/provider/adapter/ODataObjectAdapter": ODataObjectAdapter
		}
	};

	/**
	 * Return a promise
	 */
	Factory.requestAdapter = function(oModel, oMetaContext) {
		var oKeyInfo = Factory._getKeyInfo(oMetaContext);

		if (!oModel.getMetaModel()) {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapterFactory: Only models with meta model are allowed");
		}

		if (!Factory.promiseCache[oKeyInfo.key]) {
			Factory.promiseCache[oKeyInfo.key] = new Promise(function(resolve, reject) {
				var oAdapter = Factory.getAdapter(oModel, oMetaContext);
				if (oAdapter) {
					resolve(oAdapter);
				} else {
					sap.ui.require([
					                oMetaContext.adapter
					], function(Adapter) {
						var oAdapter = new Adapter(oModel, oMetaContext.model, oMetaContext.name);
						if (oAdapter) {
							Factory.adapterCache[oKeyInfo.key] = oAdapter;
							resolve(oAdapter);
						} else {
							reject("Invalid class");
						}
					});
				}
			});
		}

		return Factory.promiseCache[oKeyInfo.key];
	};

	Factory.getAdapter = function(oModel, oMetaContext) {
		var oKeyInfo = Factory._getKeyInfo(oMetaContext);

		var oCachedAdapter = Factory.adapterClassCache[oKeyInfo.adapter];

		if (!oModel.getMetaModel()) {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapterFactory: Only models with meta model are allowed");
		}

		if (Factory.adapterCache[oKeyInfo.key]) {
			return Factory.adapterCache[oKeyInfo.key];
		} else if (oCachedAdapter) {
			Factory.adapterCache[oKeyInfo.key] = new oCachedAdapter(oModel, oMetaContext.model, oMetaContext.name);
			return Factory.adapterCache[oKeyInfo.key];
		}

		return null;
	};

	Factory._getKeyInfo = function(oMetaContext) {
		if (!oMetaContext.adapter) {
			oMetaContext.adapter = Factory.defaultAdapter[oMetaContext.kind];
		}

		var oKeyInfo = {
			adapter: oMetaContext.adapter,
			modelName: oMetaContext.model,
			context: oMetaContext.name,
			key: oMetaContext.model + ">" + oMetaContext.name + ">" + oMetaContext.adapter
		};

		return oKeyInfo;
	};

	Factory.cacheAdapterClass = function(sAdapterClass, Adapter) {
		Factory.adapterClassCache[sAdapterClass] = Adapter;
	};

	return Factory;
});
}; // end of sap/ui/mdc/experimental/provider/adapter/AdapterFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.registry.ControlRegistry') ) {
jQuery.sap.declare('sap.ui.mdc.experimental.provider.registry.ControlRegistry'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/provider/registry/ControlRegistry",[
	"./Utils", "sap/ui/mdc/experimental/provider/ControlProvider", "sap/ui/mdc/experimental/provider/adapter/AdapterFactory"
], function(Utils, ControlProvider, AdapterFactory) {
	"use strict";

	/**
	 * @public
	 */
	var ControlRegistry = {
		ControlProvider: ControlProvider,
		Utils: Utils,
		AdapterFactory: AdapterFactory
	};

	ControlRegistry.getTemplateNodes = function() {
		return Object.keys(ControlRegistry._mTemplatingFunctions);
	};

	ControlRegistry.getProviderFunction = function(oControl) {
		var sName = "";
		if (typeof oControl === 'string') {
			sName = oControl;
		} else {
			sName = oControl.getMetadata().getName();
		}
		var fnProvider = ControlRegistry._mProviderFunctions[sName];

		if (fnProvider != null) {
			return fnProvider;
		} else {
			return ControlRegistry._mProviderFunctions["sap.ui.mdc.Base"];
		}
	};

	ControlRegistry.getTemplatingFunction = function(oNode) {
		var sName = "";
		if (typeof oNode === 'string') {
			sName = oNode;
		} else {
			sName = Utils.className(oNode);
		}

		var fnVisitor = ControlRegistry._mTemplatingFunctions[sName];

		if (fnVisitor != null) {
			return fnVisitor;
		} else {
			return ControlRegistry._mTemplatingFunctions["sap.ui.mdc.Base"];
		}
	};

	/**
	 * Cleans the registry of controls
	 * @param {boolean} bProvider If set to true, then the provider functions are cleaned, defaultValue is true
	 * @param {boolean} bTemplating If set to true, then the templating functions are cleaned
	 *
	 */
	ControlRegistry.cleanRegistry = function(bProvider, bTemplating) {
		bProvider = (bProvider == null) ? true : bProvider;

		if (bProvider) {
			ControlRegistry._mProviderFunctions = {};
		}

		bTemplating = (bTemplating == null) ? true : bTemplating;

		if (bTemplating) {
			ControlRegistry._mTemplatingFunctions = {};
		}
	};

	/**
	 * Registers a control for MDC providing
	 *
	 * @param {string} sClassName the controls class name, e.g. sap.m.Button
	 * @param {function} fnProviderFunction the function to run if control is already created
	 * @param {function} fnTemplatingFunction the function to run before the control is created
	 * @param {string}   sAdapterModule the name of the adapter module class that needs to be loaded
	 *
	 */
	ControlRegistry.registerControl = function(sControlClassName, fnProviderFunction, fnTemplatingFunction, sAdapterModule) {
		ControlRegistry._mProviderFunctions[sControlClassName] = fnProviderFunction;
		ControlRegistry._mTemplatingFunctions[sControlClassName] = fnTemplatingFunction;

		if (sAdapterModule) {
			var sClassName = sAdapterModule.replace(new RegExp("/", "g"), ".");
			jQuery.sap.require(sClassName);
			AdapterFactory.cacheAdapterClass(sAdapterModule, jQuery.sap.getObject(sClassName));
		}
	};

	ControlRegistry._mTemplatingFunctions = {
		"sap.ui.mdc.Base": function(oNode, oContextCallback, oAdapter) {
			var sId = oNode.getAttribute("id");
			oNode.removeAttribute("id");
			oNode.setAttribute("id", oAdapter.key + "---" + sId);

			var sLabelFor = oNode.getAttribute("labelFor");

			if (sLabelFor) {
				oNode.setAttribute("labelFor", oAdapter.key + "---" + sLabelFor);
			}
		},
		"sap.m.Label": function(oNode, oContextCallback, oAdapter) {
			ControlRegistry._mTemplatingFunctions["sap.ui.mdc.Base"](oNode, oContextCallback, oAdapter);

			ControlProvider.provideAttribute(oNode, "text", oAdapter.label);
		},
		"sap.ui.mdc.base.FilterField": function(oNode, oContextCallback, oAdapter) {
			ControlRegistry._mTemplatingFunctions["sap.ui.mdc.Base"](oNode, oContextCallback, oAdapter);

			ControlProvider.provideAttribute(oNode, "required", oAdapter.required);
			ControlProvider.provideAttribute(oNode, "type", oAdapter.type);
			ControlProvider.provideAttribute(oNode, "fieldPath", oAdapter.path);
		}
	};

	ControlRegistry._mProviderFunctions = {
		"sap.ui.mdc.Base": function(oControl, oAdapter) {

			ControlProvider.provideProperty(oControl, "visible", oAdapter.visible);
			ControlProvider.provideProperty(oControl, "tooltip", oAdapter.tooltip);
		},
		"sap.m.InputBase": function(oControl, oAdapter) {
			ControlRegistry._mProviderFunctions["sap.ui.mdc.Base"](oControl, oAdapter);

			ControlProvider.provideProperty(oControl, "editable", oAdapter.enabled);
			ControlProvider.provideProperty(oControl, "required", oAdapter.required);

			var aLabels = oControl.getLabels();

			for (var i = 0; i < aLabels.length; i++) {
				if (ControlProvider.canControlBeProvided(aLabels[i], oControl)) {
					ControlRegistry.getProviderFunction(aLabels[i])(aLabels[i], oAdapter);
				}
			}
		},
		"sap.m.Input": function(oControl, oAdapter) {
			ControlRegistry._mProviderFunctions["sap.m.InputBase"](oControl, oAdapter);

			var type = Utils.convertToInputType(oAdapter);

			ControlProvider.provideProperty(oControl, "type", type);

		},
		"sap.m.Label": function(oControl, oAdapter) {
			ControlRegistry._mProviderFunctions["sap.ui.mdc.Base"](oControl, oAdapter);

			ControlProvider.provideProperty(oControl, "text", oAdapter.label);
		},
		"sap.ui.layout.form.FormElement": function(oControl, oAdapter) {

			var oLabel = oControl.getLabel();
			if (oLabel && ControlProvider.canControlBeProvided(oLabel, oControl)) {
				ControlRegistry.getProviderFunction(oLabel)(oLabel, oAdapter);
			}
			var aFields = oControl.getFields();
			for (var i = 0; i < aFields.length; i++) {
				if (ControlProvider.canControlBeProvided(aFields[i], oControl)) {
					ControlRegistry.getProviderFunction(aFields[i])(aFields[i], oAdapter);
				}
			}

		},
		"sap.ui.mdc.base.FilterField": function(oControl, oAdapter) {
			ControlProvider.provideProperty(oControl, "required", oAdapter.required);
			ControlProvider.provideProperty(oControl, "type", oAdapter.type);
			ControlProvider.provideProperty(oControl, "fieldPath", oAdapter.path);
			ControlProvider.provideAggregation(oControl, "conditions", oAdapter.conditions);
			ControlProvider.providePrepareCloneFunction(oControl, "suggestion", oAdapter.suggestion.bind(oAdapter));
		}
	};

	ControlRegistry.resolveMetadataContextsDeep = function(oNode, oContextCallback, oAdapter, oMdCtxAttr) {
		var aChildren = oNode.children,
			i = 0;
		for (i = 0; i < aChildren.length; i++) {
			var sClassName = Utils.className(aChildren[i]);

			if (sClassName && !aChildren[i].getAttribute("metadataContexts") && ControlRegistry._mTemplatingFunctions[sClassName]) {
				aChildren[i].setAttribute("metadataContexts", oMdCtxAttr);
			} else {
				ControlRegistry.resolveMetadataContextsDeep(aChildren[i], oContextCallback, oAdapter, oMdCtxAttr);
			}
		}
	};

	ControlRegistry.determineWithModel = function(oNode) {
		var oParent = oNode;

		while (oParent && !oParent.hasAttribute("var")) {
			oParent = oParent.parentElement;
		}

		if (oParent) {
			return oParent.getAttribute("var");
		}
		return null;
	};

	return ControlRegistry;
});
}; // end of sap/ui/mdc/experimental/provider/registry/ControlRegistry.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.ProviderHook') ) {
jQuery.sap.declare('sap.ui.mdc.experimental.provider.ProviderHook'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.XMLTemplateProcessor'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.util.XMLPreprocessor'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/ProviderHook",[
	"sap/ui/base/ManagedObject", "sap/ui/mdc/experimental/provider/registry/ControlRegistry", "sap/ui/core/XMLTemplateProcessor", "sap/ui/core/util/XMLPreprocessor"
], function(ManagedObject, ControlRegistry, XMLTemplateProcessor, XMLPreprocessor) {
	"use strict";

	/**
	 * @private
	 */
	var ProviderHook = {};

	/**
	 * Hook that defines Managed Object Hook Methods
	 */
	ProviderHook.apply = function() {
		XMLTemplateProcessor._preprocessMetadataContexts = function(sClassName, mSettings, oContext) {
			if (mSettings.metadataContexts) {
				for ( var key in mSettings.metadataContexts) {
					for (var i = 0; i < mSettings.metadataContexts[key].length; i++) {
						ProviderHook._resolveMetadataContextPath(mSettings.metadataContexts[key][i]);
					}
				}
			}
		};

		ProviderHook._resolveMetadataContextPath = function(oMetadataContext) {
			if (!oMetadataContext) {
				return;
			}

			oMetadataContext.path = oMetadataContext.path || '';// per default the path is empty
			oMetadataContext.relative = oMetadataContext.path[0] !== '/';

			if (oMetadataContext.model == '') {
				oMetadataContext.model = undefined;
			}

			if (!oMetadataContext.kind) {
				oMetadataContext.kind = 'field';//the bound contexts is in a field relation
			}

			oMetadataContext.name = oMetadataContext.name || oMetadataContext.model;
		};

		/**
		 * Process the metadataContexts special setting in order to let the control be driven by metadata
		 *
		 * @param {object} oMetadatas Contexts The metadataContexts special setting
		 * @param {object} oSettings The ManagedObject settings
		 * @private
		 */
		ManagedObject.prototype._processMetadataContexts = function(oMetadataContexts, oSettings) {
			var aMetadataContexts, oMetadataContext, oKeyProviderData;
			this._oProviderData = {
				contexts: null,
				mProvidedProperties: {},
				mProvidedFunctions: {}
			};

			for ( var key in oMetadataContexts) {
				aMetadataContexts = oMetadataContexts[key];

				for (var i = 0; i < aMetadataContexts.length; i++) {
					oMetadataContext = aMetadataContexts[i];

					if (!ProviderHook._sanityChecks(oMetadataContext)) {
						return;
					}

					oKeyProviderData = {};

					oKeyProviderData.metadata = oMetadataContext;
					oKeyProviderData.relative = oMetadataContext.relative;

					this._oProviderData.contexts = this._oProviderData.contexts || {};
					this._oProviderData.contexts[oMetadataContext.name] = oKeyProviderData;
				}
			}

			if (this._oProviderData.contexts) {
				this.attachModelContextChange(ProviderHook._handleModelContextChange, ProviderHook);
			}

		};

		/**
		 * Clones the provider information to the control, this is used in order to drive the metadata information for this control
		 *
		 * @public {Control} oClone The cloned control
		 * @private
		 */
		ManagedObject.prototype._cloneMetadataContexts = function(oClone) {
			if (this._oProviderData) {
				oClone._oProviderData = this._oProviderData;
				ControlRegistry.ControlProvider.prepareClone(oClone);
			}
		};
	};

	ProviderHook.registerVisitors = function(aAdapterClasses) {

		for (var i = 0; i < aAdapterClasses.length; i++) {
			var sClassName = aAdapterClasses[i].replace(new RegExp("/", "g"), ".");
			jQuery.sap.require(sClassName);
			ControlRegistry.AdapterFactory.cacheAdapterClass(aAdapterClasses[i], jQuery.sap.getObject(sClassName));
		}

		ProviderHook.registerTemplating();
	};

	ProviderHook.registerTemplating = function() {
		var i, aNodes = ControlRegistry.getTemplateNodes();

		var fnPreprocess = function(oNode, oCallback) {
			var oMdCtxAttr = oNode.getAttribute("metadataContexts");

			if (oMdCtxAttr) {
				var oMetadataContext = ManagedObject.bindingParser(oMdCtxAttr, null);
				var bRelative = ProviderHook._resolveMetadataContextPath(oMetadataContext);
				if (!bRelative && oMetadataContext.preprocessModel) {
					ProviderHook.resolveContexts(oNode, oCallback, oMetadataContext);
				}
			} else {
				oCallback.visitAttributes(oNode);
			}
		};

		for (i = 0; i < aNodes.length; i++) {
			var oNodeInfo = ControlRegistry.Utils.getNameSpaceInfo(aNodes[i]);

			XMLPreprocessor.plugIn(fnPreprocess, oNodeInfo.nameSpace, oNodeInfo.localName);
		}
	};

	ProviderHook.resolveContexts = function(oNode, oCallback, oMetadataContext) {
		var oContextCallback, oModel = oCallback.getSettings().models[oMetadataContext.preprocessModel];

		if (!oModel) {
			var oViewInfo = oCallback.getViewInfo();
			var oComponent = sap.ui.getCore().getComponent(oViewInfo.componentId);
			oModel = oComponent ? oComponent.oModels[oMetadataContext.preprocessModel] : null;
			var mVariables = {};
			mVariables[oMetadataContext.model] = oModel ? oModel.getContext("/") : null;
			// Add Model context
			oContextCallback = oCallback["with"](mVariables, false);
			// check if the is metadataContext for model
		} else {
			oContextCallback = oCallback;
		}

		if (oModel) {
			var sPath = oMetadataContext.path;
			var oAdapter = ControlRegistry.AdapterFactory.getAdapter(oModel, oMetadataContext);
			oAdapter.switchMetaContext(sPath);// switch the meta context
			var fnTemplatingFunction = ControlRegistry.getTemplatingFunction(oNode);

			fnTemplatingFunction(oNode, oContextCallback, oAdapter);
			var sMetadataContext = oNode.getAttribute("metadataContexts");
			oContextCallback.visitAttributes(oNode);

			if (sMetadataContext) {
				oNode.setAttribute("metadataContexts", sMetadataContext);
			}
		}
	};

	/**
	 * Handler for model context change in order to provide the property
	 *
	 * @param {object} oEvent The event
	 * @private
	 */
	ProviderHook._handleModelContextChange = function(oEvent) {
		var oControl = oEvent.getSource();

		for ( var key in oControl._oProviderData.contexts) {
			ProviderHook._driveWithMetadata(oControl._oProviderData.contexts[key], oControl);
		}
	};

	/**
	 * Actual metadata provisioning
	 *
	 * @param {object} oProvider The provider data.
	 * @private
	 */
	ProviderHook._driveWithMetadata = function(oProvider, oControl) {
		if (!oProvider.model) {
			oProvider.model = oControl.getModel(oProvider.metadata.model);
		}

		if (!oProvider.model) {
			// waiting for a context is only needed if no context was given and path is relative
			jQuery.sap.log.debug("Metadata context cannot be resolved yet");
			return;
		}

		if (oProvider.relative) {
			var sCtx = oControl.getBindingContext(oProvider.metadata.model);
			if (!sCtx) {
				// waiting for a context is only needed if no context was given and path is relative
				jQuery.sap.log.debug("Metadata context cannot be resolved yet");
				return;
			} else {
				oProvider.metadata.path = sCtx + "/" + oProvider.metadata.path;
				delete oProvider.relative;
			}
		}

		// already loaded dive now
		var fnProviderFunction = ControlRegistry.getProviderFunction(oControl);

		if (fnProviderFunction) {
			ControlRegistry.AdapterFactory.requestAdapter(oProvider.model, oProvider.metadata).then(function(oAdapter) {
				var oReadyPromise = oAdapter.ready();
				if (oReadyPromise) {
					oReadyPromise.then(function() {
						oAdapter.switchMetaContext(oProvider.metadata.path);// switch the meta context
						fnProviderFunction(oControl, oAdapter);
					});
				}
			});
		}
	};

	/**
	 * @param {object} oMetadataContext The value for the special setting for metadata context
	 * @private
	 */
	ProviderHook._sanityChecks = function(oMetadataContext) {

		if (!oMetadataContext) {
			jQuery.sap.log.warning("No metadata context available");
			return false;
		}

		// when is this ever a string? If there are good reasons to support string here, the contract with XMLTemplateProcessor can be
		// different.
		// XMLTemplateProcessor can then pass only a string and we do the parsing ourselves always.
		if (typeof oMetadataContext == "string") {
			oMetadataContext = ManagedObject.bindingParser(oMetadataContext);
		}
		if (!oMetadataContext.hasOwnProperty("path") || typeof oMetadataContext.path !== "string") {
			jQuery.sap.log.warning("Metadata context is missing a path or path is not a string");
			return false;
		}

		if (!oMetadataContext.hasOwnProperty("relative")) {
			oMetadataContext.relative = !oMetadataContext.hasOwnProperty("context");
		} else if (typeof oMetadataContext.relative !== "boolean") {
			jQuery.sap.log.warning("Metadata relative information must be a boolean");
			return false;
		}

		if (oMetadataContext.hasOwnProperty("context") && typeof oMetadataContext.context !== "string") {
			jQuery.sap.log.warning("Metadata context needs no context or a context path of type string");
			return false;
		}

		if (!oMetadataContext.hasOwnProperty("model")) {
			oMetadataContext.model = undefined;
			jQuery.sap.log.debug("Metadata context is missing a model, assuming undefined model");
		}

		if (!oMetadataContext.hasOwnProperty("name")) {
			oMetadataContext.name = oMetadataContext.model;
			jQuery.sap.log.debug("Metadata context is missing a contexts name, assuming the name of the model");
		}

		return true;
	};

	return ProviderHook;
});
}; // end of sap/ui/mdc/experimental/provider/ProviderHook.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.ui.mdc.
 */
jQuery.sap.declare('sap.ui.mdc.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.XMLComposite'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.util.XMLPreprocessor'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/library",['sap/ui/mdc/model/GenericType', 'sap/ui/mdc/experimental/provider/ProviderHook', 'sap/ui/core/XMLComposite', 'sap/ui/core/util/XMLPreprocessor'], function(GenericType, ProviderHook, XMLComposite, XMLPreprocessor) {
	"use strict";

	/**
	 * UI5 library: sap.ui.mdc containing controls that can be easily connected to rest service based models providing metadata.
	 *
	 * @namespace
	 * @name sap.ui.mdc
	 * @author SAP SE
	 * @version 1.52.7
	 * @public
	 */

	sap.ui.getCore().initLibrary({
		version: "1.52.7",
		name: "sap.ui.mdc",
		dependencies: ["sap.ui.core", "sap.m"],
		types: ["sap.ui.mdc.FieldDisplay", "sap.ui.mdc.EditMode"],
		interfaces: [],
		controls: ["sap.ui.mdc.Table", "sap.ui.mdc.FilterBar", "sap.ui.mdc.experimental.Field", "sap.ui.mdc.base.FilterField", "sap.ui.mdc.base.FilterToken"],
		elements: ["sap.ui.mdc.experimental.FieldHelpBase",
		           "sap.ui.mdc.experimental.CustomFieldHelp",
		           "sap.ui.mdc.experimental.ListFieldHelp",
		           "sap.ui.mdc.experimental.TableFieldHelp"],
		extensions: {
			flChangeHandlers: {
				"sap.ui.mdc.Table" : "sap/ui/mdc/internal/table/Table"
			}
		},
		noLibraryCSS: false
	});

	/**
	 * Defines how the fields display text should be formatted.
	 *
	 * @enum {string}
	 * @private
	 * @since 1.48.0
	 */
	sap.ui.mdc.FieldDisplay = {
		/**
		 * Only the value is displayed
		 * @public
		 */
		Value: "Value",
		/**
		 * Only the description is displayed
		 *
		 * if a <code>FieldHelp</code> is assigned to the <code>Field</code> the value is used as key for the <code>FieldHelp</code> items.
		 * @public
		 */
		Description: "Description",
		/**
		 * The value and the description is displayed in the field. The description is displayed after the value with brackets.
		 * @public
		 */
		ValueDescription: "ValueDescription",
		/**
		 * The description and the value is displayed in the field. The value is displayed after the description with brackets.
		 * @public
		 */
		DescriptionValue: "DescriptionValue"
	};

	/**
	 * Defines in what mode Filds are rendered
	 *
	 * @enum {string}
	 * @private
	 * @since 1.48.1
	 */
	sap.ui.mdc.EditMode = {
		/**
		 * Field is rendered in display mode
		 * @public
		 */
		Display: "Display",
		/**
		 * Field is rendered editable
		 * @public
		 */
		Editable: "Editable",
		/**
		 * Field is rendered readonly
		 * @public
		 */
		ReadOnly: "ReadOnly",
		/**
		 * Field is rendered disabled
		 * @public
		 */
		Disabled: "Disabled"
	};

	ProviderHook.apply();

	function visitAttibutesIgnoringMetadataContext(oNode, oVisitor) {
		var vValue = oNode.getAttribute('metadataContexts');
		if (vValue) {
			oNode.removeAttribute('metadataContexts');
		}
		oVisitor.visitAttributes(oNode);
		if (vValue) {
			if (vValue.indexOf('sap.fe.deviceModel') < 0 ) {
				//TODO: Make this better. We need to add it to be passed through always
				// TODO: adapt name
				vValue += ",{model: 'sap.fe.deviceModel', path: '/', name: 'sap.fe.deviceModel'}";
			}
			oNode.setAttribute('metadataContexts', vValue);
		}
	}

	/**
	 * Convenience function for registration of the controls to the XMLPreprocessor
	 *
	 * This function is called by the XMLPreprocessor. 'this' is used to remember
	 * the name of the control. So always create a new function via bind("name.of.control")
	 * @param {*} oNode
	 * @param {*} oVisitor
	 */
	function registerPlugin(oNode, oVisitor) {
		visitAttibutesIgnoringMetadataContext(oNode, oVisitor);
		XMLComposite.initialTemplating(oNode, oVisitor, this);
		//TODO: Once sap.ui.mdc.providerHook can handle this we can remove the removal of the metadataContexts
		oNode.removeAttribute('metadataContexts');
	}

	XMLPreprocessor.plugIn(registerPlugin.bind("sap.ui.mdc.Table"), "sap.ui.mdc", "Table");
	XMLPreprocessor.plugIn(registerPlugin.bind("sap.ui.mdc.Field"), "sap.ui.mdc", "Field");
	XMLPreprocessor.plugIn(registerPlugin.bind("sap.ui.mdc.FilterField"), "sap.ui.mdc", "FilterField");
	XMLPreprocessor.plugIn(registerPlugin.bind("sap.ui.mdc.FilterBar"), "sap.ui.mdc", "FilterBar");

	var oResourceModel = new sap.ui.model.resource.ResourceModel({ bundleName: "sap.ui.mdc.messageBundle", async : true});
	var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc");

	/**
	 * Return the resource model for the library
	 * @private
	 * @returns {sap.ui.model.resource.ResourceModel} The resource model for this library
	 */
	sap.ui.mdc.getResourceModel = function(){
		return oResourceModel;
	};

	/**
	 * Returns a text from the resource bundle of this library
	 * @borrows jQuery.sap.util.ResourceBundle.prototype.getText
	 */
	sap.ui.mdc.getText = function(sText, aParameter){
		return oResourceBundle.getText(sText, aParameter);
	};

	return sap.ui.mdc;

});

}; // end of sap/ui/mdc/library.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.ValueHelpDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.ValueHelpDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/ValueHelpDialog",[
	"./library",
	'sap/ui/mdc/base/ValueHelpDialog',
	"sap/ui/model/json/JSONModel"
], function( Library, baseValueHelpDialog, JSONModel) {
	"use strict";

	var ValueHelpDialog = baseValueHelpDialog.extend("sap.ui.mdc.ValueHelpDialog", {
		metadata: {
			properties: {
				entitySet : "string",
				// we might rename this to propertyPath
				fieldPath : "string"
			},
			aggregations: {
			},
			events: {},
			publicMethods: []
		},
		// why is this not extended and we need to mention it here as well?
		fragment: "sap.ui.mdc.base.ValueHelpDialog"
	});


	ValueHelpDialog.prototype.init = function() {
		this.attachModelContextChange(fnCreateValueHelpContent);
	};

	var fnCreateValueHelpContent = function(){
		var that = this;
		this.detachModelContextChange(fnCreateValueHelpContent);

		this._requestValueListMetadata(this.getEntitySet(), this.getFieldPath()).then(function(mValueListInfo) {
			var oValueListModel = new JSONModel(mValueListInfo);

			var oValueHelpDialogContent = sap.ui.view({
				viewName: "sap.ui.mdc.internal.valuehelp.ValueHelp",
				type: "XML",
				height: "100%",
				async: true,
				preprocessors: {
					xml: {
						bindingContexts: {
							valueList: oValueListModel.createBindingContext("/")
						},
						models: {
							valueList: oValueListModel
						}
					}
				}
			});

			// var oOperatorConfig = oFilterField.getFilterOperatorConfig();
			// var aOperators = oOperatorConfig.getOperatorsForType(oFilterField.getDataType());
			// var aOperatorsData = [];
			// aOperators.forEach(function(element) {
			// 	var oOperator = oOperatorConfig.getOperator(element);
			// 	if (oOperator.showInSuggest !== undefined && oOperator.showInSuggest === false) {
			// 		return;
			// 	}
			// 	var sTxtKey = oOperator.textKey || "operators." + oOperator.name + ".longText";
			// 	var sText = oOperator.getTypeText(sTxtKey, oFilterField._getDataType().getName().toLowerCase());
			// 	if (sText === sTxtKey) {
			// 		sText = oOperator.longText;
			// 	}
			// 	aOperatorsData.push({
			// 		key: element,
			// 		additionalText: sText
			// 	});
			// }, this);

			// var oOperatorModel = new sap.ui.model.json.JSONModel();
			// oOperatorModel.setData(aOperatorsData);

			var oConditionModel = that.getConditionModel();
			var oConditionModelClone = oConditionModel.clone(that.getFieldPath());

			oValueHelpDialogContent.setModel(oConditionModelClone, "cm"); // all other CM will be set as model on the view?
			oValueHelpDialogContent.setBindingContext(oConditionModelClone.createBindingContext("/"), "cm");
			//oValueHelpDialogContent.setModel(oOperatorModel,"om");
			//oValueHelpDialogContent.setBindingContext(oOperatorModel.createBindingContext("/"),"om");
			oValueHelpDialogContent.setModel(oValueListModel, "valueList");
			oValueHelpDialogContent.setModel(mValueListInfo.$model);

			return oValueHelpDialogContent.loaded().then(function(oValueHelpDialogContent) {
				that.setTitle(oValueHelpDialogContent.getModel("valueList").getProperty("/sTitle"));

				// keep it for now but looks very strange
				oValueHelpDialogContent.getController().sFieldPath = that.getFieldPath();

				var oTable = oValueHelpDialogContent.byId("valueListTable");
				var nColumns = oTable.getColumns().length;
				var nWidth = Math.max(1080, nColumns * 130);
				that.get_content().setContentWidth(nWidth + "px");
				that.addContent(oValueHelpDialogContent);
				//return Promise.resolve(oValueHelpDialog);
			});
		});
	};

	// this is duplicated from the FilterField - to be refactored into an Util class
	ValueHelpDialog.prototype._requestValueListMetadata = function(sEntitySet, sFieldPath) {
		var oMetaModel = this.getModel().getMetaModel();

		return oMetaModel.requestValueListInfo('/' + sEntitySet + '/' + sFieldPath).then(function(mValueListInfo) {
			var mParameters;

			if (mValueListInfo[""]) {
				// determine key and description path and store it in the value list info
				mParameters = mValueListInfo[""].Parameters;
				var sLocalDataProperty = oMetaModel.getObject('/' + sEntitySet + '/' + sFieldPath + "@sapui.name");


				// TODO: don't know why this is added here and not in the template to be discussed
				var aFilterExpressionRestrictions = oMetaModel.getObject("/" + sEntitySet + "@com.sap.vocabularies.Common.v1.FilterExpressionRestrictions");
				var oFilterExpressionRestriction = aFilterExpressionRestrictions && aFilterExpressionRestrictions.filter(function(filterExpressionRestriction) {
						return filterExpressionRestriction.Property.$PropertyPath === sFieldPath;
					});

				//Getting Label for the dialog
				mValueListInfo[""].sTitle = oMetaModel.getObject("/" + sEntitySet + "/$Type/" + sFieldPath + "@com.sap.vocabularies.Common.v1.Label");
				if (oFilterExpressionRestriction && (oFilterExpressionRestriction.length > 0) && (oFilterExpressionRestriction[0].AllowedExpressions.$EnumMember.indexOf("SingleValue") > -1)) {
					mValueListInfo[""].sSelectionMode = "SingleSelectLeft";
					mValueListInfo[""].sTitle = Library.getText("valuehelp.SINGLE_ITEM_SELECT") + mValueListInfo[""].sTitle;
				} else {
					mValueListInfo[""].sSelectionMode = "MultiSelect";
				}

				// determine the key and the description path
				for (var i = 0; i < mParameters.length; i++) {
					if (mParameters[i].LocalDataProperty && mParameters[i].LocalDataProperty.$PropertyPath === sLocalDataProperty) {
						// we store this information into the value list info - we will set this information to the filter field in the future
						mValueListInfo[""].__sapfe = {
							keyPath: mParameters[i].ValueListProperty,
							descriptionPath: mValueListInfo[""].$model.getMetaModel().getObject("/" + mValueListInfo[""].CollectionPath + "/" + mParameters[i].ValueListProperty + "@com.sap.vocabularies.Common.v1.Text/$Path")
						};

						// there should be always only one parameter with the property field path as output
						break;
					}
				}

				return mValueListInfo[""];
			} else {
				throw ("no unqualified value list found - currently qualified value lists are not considered");
			}

		}, function(oError) {
			throw (oError.message);
		});
	};

	return ValueHelpDialog;

}, /* bExport= */ true);

}; // end of sap/ui/mdc/ValueHelpDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.XMLComposite') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.XMLComposite'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.XMLComposite'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/XMLComposite",[
	'sap/ui/core/XMLComposite',
	'./library'
], function (XMLComposite, Library) {
	"use strict";
	var MDCXMLComposite = XMLComposite.extend("sap.ui.mdc.XMLComposite", {
		defaultMetaModel: 'sap.ui.mdc.metaModel',
		alias: "this",
		"abstract" : true
	});

	MDCXMLComposite.prototype.init = function() {
		this.setModel(Library.getResourceModel(), "$i18n");
	};

	return MDCXMLComposite;
}, true);

}; // end of sap/ui/mdc/XMLComposite.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.base.FilterField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.base.FilterField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.base.ManagedObjectModel'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/base/FilterField",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/model/json/JSONModel', './FilterFieldRenderer', 'sap/m/MultiInput', 'sap/m/Token', 'sap/ui/model/Filter', 'sap/ui/model/Sorter', "sap/ui/model/base/ManagedObjectModel", "sap/ui/mdc/base/type/DateRange", 'sap/ui/mdc/library'],
	function(jQuery, Control, JSONModel, FilterFieldRenderer, MultiInput, Token, Filter, Sorter, ManagedObjectModel, DateRange, library) {
		"use strict";

		var EditMode = library.EditMode;

		/**
		 * Constructor for a new FilterField.
		 * A FilterField can be used to create conditions for a ListBinding.
		 * The FilterField publishes its properties and aggregations to the content as a model <code>$filterField</code> to which the internal content can bind.
		 * This model is local to the content aggregation and cannot be used outside the field's context.
		 *
		 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 *
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.52.7
		 *
		 * @constructor
		 * @alias sap.ui.mdc.base.FilterField
		 * @author SAP SE
		 * @version 1.52.7
		 * @since 1.48.0
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var FilterField = Control.extend("sap.ui.mdc.base.FilterField", /* @lends sap.ui.mdc.base.FilterField.prototype */ {
			constructor: function(sId, mSettings) {
				this._oManagedObjectModel = null;
				this._oActiveDelegate = null;
				Control.apply(this, arguments);
			},
			metadata: {
				properties: {

					//TODO
					showValueHelp: {
						type: "boolean",
						group: "Data",
						defaultValue: true
					},

					/**
					 * The data type that should be used for the filter field as defined in the corresponding data model.
					 * A data type should be a simple types class name like "sap.ui.model.type.String". If the data type is not
					 * defined the filter field will not be able to determine the right visualization and might only allow limited functionality.
					 */
					dataType: {
						type: "any",
						group: "Data",
						defaultValue: "sap.ui.model.type.String"
					},

					dataTypeConstraints: {
						type: "object",
						group: "Data",
						defaultValue: null
					},

					dataTypeFormatOptions: {
						type: "object",
						group: "Data",
						defaultValue: null
					},

					/**
					 * Defines the path of the filter field that is used to create and show conditions.
					 * The path normally represents a simple property in the corresponding model that should be used
					 * for filtering. In some cases it could also be required to filter for nested model structures.
					 * In such cases use a path to the property separated by slashes.
					 */
					fieldPath: {
						type: "string",
						group: "Data",
						defaultValue: null
					},

					/**
					 * Defines the width of the filter field.
					 *
					 */
					width: {
						type: "sap.ui.core.CSSSize",
						group: "Dimension",
						defaultValue: "15rem"
					},

					/**
					 * Defines whether the filter field is editable.
					 * @deprecated Since 1.50, use editMode instead.
					 */
					editable: {
						type: "boolean",
						group: "Data",
						defaultValue: true
					},

					/**
					 * Whether the field is editable. Only Editable, ReadOnly and Disabled is supported.
					 */
					editMode: {
						type: "sap.ui.mdc.EditMode",
						group: "Data",
						defaultValue: EditMode.Editable
					},

					/**
					 * Sets the maximum amount of conditions that are allowed for this field.
					 *
					 * The default value of -1 indicates that an unlimited amount of conditions can defined.
					 */
					maxConditions: {
						type: "int",
						group: "Behavior",
						defaultValue: -1
					},

					/**
					 * Defines a short hint intended to aid the user with data entry when the control has no value.
					 */
					placeholder: {
						type: "string",
						group: "Behavior",
						defaultValue: ""
					},

					/**
					 * Indicates that at least one valid condition needs to be contained in the filter field.
					 * TODO: Raise an error for the field if required entry is not fulfilled. To be clarified, when this error should be raised.
					 */
					required: {
						type: "boolean",
						group: "Misc",
						defaultValue: false
					},

					/**
					 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
					 */
					valueState: {
						type: "sap.ui.core.ValueState",
						group: "Appearance",
						defaultValue: sap.ui.core.ValueState.None
					},

					/**
					 * Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
					 */
					valueStateText: {
						type: "string",
						group: "Misc",
						defaultValue: null
					}
				},
				events: {
					/**
					 * This event is fired when the value help is requested.
					 */
					valueHelpRequest: {},
					/**
					 * This event is fired when the value property of the field is changed
					 *
					 * <b>Note</b> This event is only triggered if the used content control has a change event
					 */
					change: {
						parameters: {

							/**
							 * The new added condition object which has been added/removed into/from the ConditionModel.
							 */
							value: { type: "object" },

							/**
							 * The <code>type</code> of the change.
							 */
							type: { type: "string" }, //TODO should be an enum when we know how 

							/**
							 * Flag indicates if the entered <code>value</code> is valid.
							 */
							valid: { type: "boolean" }
						}
					},
					/**
					 * This event is fired when the value of the field is changed - e.g. at each keypress
					 *
					 * <b>Note</b> This event is only triggered if the used content control has a liveChange event
					 */
					liveChange: {
						parameters: {
							/**
							 * The new value of the input.
							 */
							value: { type: "string" },

							/**
							 * Indicate that ESC key triggered the event.
							 */
							escPressed: { type: "boolean" }
						}
					}
				},
				aggregations: {
					_input: {
						type: "sap.ui.core.Control",
						multiple: false,
						hidden: true
					},
					/**
					 * The condition data that is bound to the filter field.
					 *
					 * This aggregation does not support an inner template.
					 * Instead the bound data needs to use the data structure defined by sap.ui.mdc.Condition.
					 */
					conditions: {
						type: "sap.ui.mdc.Condition",
						multiple: true,
						_doesNotRequireFactory: true
					},
					/**
					 * An optional content to visualize the field fields conditions.
					 *
					 * If content is set the filter field suppresses its default rendering and will only render the content.
					 * The content control can make use of the <code>$filterField</code< model to bind to the conditions and to the properties of
					 * the filter field.
					 */
					content: {
						type: "sap.ui.core.Control",
						multiple: false
					}
				},
				publicMethods: [],
				defaultAggregation: "content"
			}
		});

		/**
		 * Returns the FilterOpConfig for the ListBinding, which is filtered by this FilterBar. Only available once model etc. are available.
		 */
		FilterField.prototype.getFilterOperatorConfig = function() {
			if (!this._oFilterOpConfig && this.getBinding("conditions")) {
				var oConditionModel = this.getBinding("conditions").getModel();
				this._oFilterOpConfig = oConditionModel.getFilterOperatorConfig();
			}
			return this._oFilterOpConfig;
		};

		/*
		 * Updates the conditions
		 */
		FilterField.prototype.updateConditions = function() {
			var oBinding = this.getBinding("conditions");
			if (oBinding && this._oManagedObjectModel) {
				//update the model async
				this._oManagedObjectModel.checkUpdate(true, true);

				oBinding.getModel().addFilterField(this);
			}
			return this;
		};

		FilterField.prototype.setWidth = function(sWidth) {
			var sOldWidth = this.getWidth();

			this.setProperty("width", sWidth, true);
			if (sOldWidth != this.getWidth()) {
				var oInner = this.getAggregation("_input");
				if (oInner) {
					//update the inner control properties
					oInner.setWidth(sWidth);
				}
			}

			return this;
		};

		FilterField.prototype.setEditable = function(bEditable) {
			var bOldEditable = this.getEditable();

			this.setProperty("editable", bEditable, true);
			if (bOldEditable != this.getEditable()) {
				var oInner = this.getAggregation("_input");
				if (oInner) {
					//update the inner control properties
					oInner.setEditable(bEditable);
				}
			}

			return this;
		};

		FilterField.prototype.setPlaceholder = function(sPlaceholder) {
			var sOldPlaceholder = this.getPlaceholder();

			this.setProperty("placeholder", sPlaceholder, true);
			if (sOldPlaceholder != this.getPlaceholder()) {
				var oInner = this.getAggregation("_input");
				if (oInner) {
					//update the inner control properties
					oInner.setPlaceholder(sPlaceholder);
				}
			}

			return this;
		};

		FilterField.prototype.setMaxConditions = function(iMaxConditions) {
			// var iOldMaxConditions = this.getMaxConditions();

			this.setProperty("maxConditions", iMaxConditions, true);
			// if (iOldMaxConditions != this.getMaxConditions()) {
			// 	var oInner = this.getAggregation("_input");
			// 	if (oInner) {
			// 		//update the inner control properties
			// 		oInner.setMaxTokens(iMaxConditions > 0 ? iMaxConditions : 0);
			// 	}
			// }

			return this;
		};

		FilterField.prototype.setRequired = function(bRequired) {
			var bOldRequired = this.getRequired();

			this.setProperty("required", bRequired, true);
			if (bOldRequired != this.getRequired()) {
				var oInner = this.getAggregation("_input");
				if (oInner) {
					//update the inner control properties
					oInner.setRequired(bRequired);
				}
			}

			return this;
		};

		/*
		 * Overwrite if bind aggregation for special handling of condition aggregation
		 * Filter is created and added, also sorter for position.
		 * Custom sorter and filter are still used
		 *
		 * @see sap.ui.base.ManagedObject#bindAggregation
		 *
		 * @param {string} sName the name of the aggregation
		 * @param {object} sName the name of the aggregation
		 *
		 * @returns {sap.ui.mdc.base.FilterField} Returns <code>this</code> to allow method chaining
		 *
		 * @private
		 */
		FilterField.prototype.bindAggregation = function(sName, oBindingInfo) {
			if (sName === "conditions") {
				var sFieldPath = this.getFieldPath();
				if (sFieldPath && !oBindingInfo.filters) {
					oBindingInfo.filters = new sap.ui.model.Filter({ path: "fieldPath", test: this._matchFieldPath.bind(this) });
				}
				if (!oBindingInfo.sorter) {
					oBindingInfo.sorter = new sap.ui.model.Sorter("position", false);
				}
			}
			return Control.prototype.bindAggregation.apply(this, [sName, oBindingInfo]);
		};

		FilterField.prototype._matchFieldPath = function(vValue) {
			var sFieldPath = this.getFieldPath().toUpperCase();
			return sFieldPath === vValue;
		};

		/*
		 * Sets the field name. The bound list of conditions is filtered by the field name. If no field name is given
		 * the filter fields displays all conditions of the bound condition list.
		 * @param {string} sValue the value for the fields name.
		 * @returns {sap.ui.mdc.base.FilterField} Returns <code>this</code> to allow method chaining
		 *@pubic
		 */
		FilterField.prototype.setFieldPath = function(sValue) {
			var sOld = this.getFieldPath();
			this.setProperty("fieldPath", sValue);
			if (sOld !== this.getFieldPath() && this.mBindingInfos["conditions"]) {
				var oFilter = new Filter({
					path: "fieldPath",
					test: this._matchFieldPath.bind(this)
				});

				var oBinding = this.getBinding("conditions");
				if (oBinding) {
					oBinding.filter(oFilter);
				} else {
					this.mBindingInfos["conditions"].filters = oFilter;
				}
			}

			// if (sOld !== this.getFieldPath()) {
			// 	this.bindProperty("valueState", { path: "sap.fe.cm>/fieldPath/" + sValue + "/valueState", mode: "OneWay"});
			// 	this.bindProperty("valueStateText", { path: "sap.fe.cm>/fieldPath/" + sValue + "/valueStateText", mode: "OneWay"});
			// }
			return this;
		};


		/**
		 * Handles the change of a token text from within the MultiInput.
		 * @param {jQuery.Event} oEvent The event object.
		 * @private
		 */
		// FilterField.prototype._handleTokenContentChange = function(oEvent) {
		//TODO tokens are not editable currently and the old code does notwork....

		// var oToken = oEvent.getSource(),
		// 	oBinding = this.getBinding("conditions"),
		// 	sValue = oEvent.getParameter("text").trim(),
		// 	oType = this._getDataType(),
		// 	type = oType.getMetadata().getName();


		// // find the suitable operators
		// var aOperators = this.getFilterOperatorConfig().getMatchingOperators(type, sValue),
		// 	oOperator;

		// // use default operator if nothing found
		// if (aOperators.length === 0) {
		// 	// default operation
		// 	var sDefaultOperator = this.getFilterOperatorConfig().getDefaultOperator(type);
		// 	var oDefaultOperator = this.getFilterOperatorConfig().getOperator(sDefaultOperator);
		// 	sValue = oDefaultOperator.format([sValue]);
		// 	if (oDefaultOperator && oDefaultOperator.test(sValue, oType)) { // ????
		// 		oOperator = oDefaultOperator;
		// 	}
		// } else {
		// 	oOperator = aOperators[0]; // TODO: multiple matches?
		// }

		// // if operator has been found, modify the condition belonging to this token
		// if (oOperator) {
		// 	var oCondition = oOperator.getCondition(sValue, oType);
		// 	oCondition.fieldPath = this.getFieldPath();

		// 	//oBinding.getModel().setProperty(oTokenBindingPath, oCondition, oBinding.getContext());

		// 	// TODO: can't get the condition object in the real model somehow, hence update its data in the binding  FIXME
		// 	var oModelCondition = oToken.getBinding("text").getValue();
		// 	oModelCondition.operator = oCondition.operator;
		// 	oModelCondition.values = oCondition.values;

		// 	// update the model async
		// 	oBinding.getModel().checkUpdate(true, true);

		// } else {
		// 	// if no operator matches, reset token to previous value
		// 	oToken.setText(oEvent.getParameter("oldText")); // TODO: set?
		// }
		// };

		/**
		 * Handle the token change or token update event from an inner MultiInput.
		 * It removes the corresponding items from the model or adds a token if the entered text is valid.
		 * @param {jQuery.Event} oEvent The event object.
		 * @private
		 */
		FilterField.prototype._handleTokenChange = function(oEvent) {
			var sEvent = oEvent.getId(),
				sValue,
				oBinding,
				oCondition,
				aOperators, oNewOperator, oOperator;

			// jQuery.sap.log.info("mdc:FilterField", "_handleTokenChange for " + sEvent);

			if (sEvent === "tokenUpdate") {
				if (oEvent.getParameter("type") === "added") {
					sEvent = "change";
					sValue = oEvent.getParameter("addedTokens")[0].getText().trim(); //TODO only one added token wil be handled
				}
				if (oEvent.getParameter("type") === "removed") {
					var aRemovedTokens = oEvent.getParameter("removedTokens"),
						aContexts = [];
					aRemovedTokens.forEach(function(o) {
						aContexts.push(o.getBindingContext("$filterField"));
					});
					oBinding = this.getBinding("conditions");
					oBinding.getModel().deleteConditions(aContexts, oBinding);
				}
			}


			if (sEvent === "change") {
				jQuery.sap.log.info("mdc:FilterField", "_handleTokenChange for " + sEvent);

				var oSource = oEvent.getSource(),
					oType = this._getDataType(),
					type = oType.getMetadata().getName();

				// incase of an open suggest with one visible item we cancel the change handle and wait for the validate call of the input
				if (oSource._getIsSuggestionPopupOpen && oSource._getIsSuggestionPopupOpen()) {
					var aSuggestionItems = oSource.getSuggestionRows();
					var i = 0;
					aSuggestionItems.forEach(function(oItem) {
						if (oItem.getVisible()) {
							i++;
						}
					});
					if (i === 1) {
						return;
					}
				}


				oBinding = this.getBinding("conditions");

				if (oSource instanceof sap.m.Select) {
					sValue = oEvent.getParameter("selectedItem").getText();
				} else {
					sValue = sValue || oEvent.getParameter("value");
					sValue = sValue.trim();
				}

				jQuery.sap.log.info("mdc:FilterField", "_handleTokenChange sValue " + sValue);

				if (!sValue) {
					if (oSource instanceof sap.m.MultiInput) {
						// oSource.setValue("");
					} else if (this.getMaxConditions() >= 0 && oBinding.getModel().getConditions(this.getFieldPath()).length > 0) {
						oBinding.getModel().removeCondition(this.getFieldPath(), 0);
					}

					oBinding.getModel().removeUIMessage(this.getFieldPath());
					return;
				}

				if (oSource instanceof sap.m.DateRangeSelection) {
					oOperator = this.getFilterOperatorConfig().getOperator("BT");
					sValue = sValue.replace(" - ", "...");
					oCondition = oOperator.getCondition(sValue, oType);
					if (oCondition) {
						oCondition.fieldPath = this.getFieldPath();
						oBinding.getModel().addCondition(oCondition);
						this.fireChange({ value: oCondition, type: "added", valid: true });

						if (this.getMaxConditions() >= 0 && oBinding.getModel().getConditions(this.getFieldPath()).length > 1) {
							oBinding.getModel().removeCondition(this.getFieldPath(), 0);
						}
						return;
					}
				}

				// find the suitable operators
				aOperators = this.getFilterOperatorConfig().getMatchingOperators(type, sValue);

				// use default operator if nothing found
				if (aOperators.length === 0) {
					// default operation
					var sDefaultOperator = this.getFilterOperatorConfig().getDefaultOperator(type);
					oNewOperator = this.getFilterOperatorConfig().getOperator(sDefaultOperator);
					sValue = oNewOperator.format([sValue]);
				} else {
					oNewOperator = aOperators[0]; // TODO: multiple matches?
				}

				try {
					if (oNewOperator && oNewOperator.test(sValue, oType)) {
						oOperator = oNewOperator;
						oBinding.getModel().removeUIMessage(this.getFieldPath());
					}
				} catch (err) {
					oBinding.getModel().setUIMessage(this.getFieldPath(), err.message);
				}


				if (oOperator) {
					oCondition = oOperator.getCondition(sValue, oType);
					if (oCondition) {
						oCondition.fieldPath = this.getFieldPath();
						oBinding.getModel().addCondition(oCondition);
						this.fireChange({ value: oCondition, type: "added", valid: true });

						if (oSource instanceof sap.m.MultiInput) {
							oSource.setValue("");
						}
						if (oSource instanceof sap.m.Select || oSource instanceof sap.m.DatePicker || oSource instanceof sap.m.TimePicker) {
							if (this.getMaxConditions() >= 0 && oBinding.getModel().getConditions(this.getFieldPath()).length > 1) {
								oBinding.getModel().removeCondition(this.getFieldPath(), 0);
							}
						}
					}
				}
			}
		};

		//TODO: does not return the aggregation what might be strange for the API (getter should return what is set)
		/*
		 * Returns the currently bound conditions
		 * The method is used by the managed object model to retrieve the data for the inner control.
		 * It needs to pass on the data as an array as we do not have other instances.
		 * TODO: It might be nice to get the list of data from the binding as well.
		 */
		FilterField.prototype.getConditions = function() {
			if (this.getBinding("conditions")) {
				var aContexts = this.getBinding("conditions").getContexts(),
					aData = [];
				for (var i = 0; i < aContexts.length; i++) {
					aData.push(aContexts[i].getProperty());
				}
				return aData;
			}
			return [];
		};

		var formatOperator = function(oContext) { // oContext is a condition
			var sResult = "";
			if (oContext) {
				var oOperator = this.getFilterOperatorConfig().getOperator(oContext.operator);
				var aValues = oContext.values;
				sResult = oOperator.format(aValues, oContext, this._getDataType());
			}
			return sResult;
		};

		/**
		 * Creates the default MultiInput for the FilterField
		 * @returns {sap.ui.core.Control} input control
		 * @private
		 */
		FilterField.prototype._getDefaultInput = function() {
			var oControl;

			if (!this.getAggregation("_input")) {

				if (this.getProperty("dataType").indexOf("Boolean") > -1 && this.getMaxConditions() === 1) {
					//TODO checking the Type via getType does not work because the _createType at this point of time fails.

					// if (this._getDataType().getMetadata().getName() === "sap.ui.model.type.Boolean") {
					// var oCombo = new sap.m.ComboBox(this.getId() + "-inner", {
					oControl = new sap.m.Select(this.getId() + "-inner", {
						//editable: this.getEditable(),
						width: this.getWidth(),
						//placeholder: this.getPlaceholder(),
						//required: this.getRequired(),
						selectedKey: "{$filterField>conditions/0/values/0}",
						valueState: { path: "$filterField>/valueState", mode: "OneWay" },
						valueStateText: { path: "$filterField>/valueStateText", mode: "OneWay" },
						items: [new sap.ui.core.Item({
							key: "",
							text: ""
						}), new sap.ui.core.Item({
							key: false,
							text: this._getDataType().formatValue(false, "string")
						}), new sap.ui.core.Item({
							key: true,
							text: this._getDataType().formatValue(true, "string")
						})]
					});

				} else if (this.getProperty("dataType").indexOf(".Time") > -1 && this.getMaxConditions() === 1) {
					oControl = new sap.m.TimePicker(this.getId() + "-inner", {
						editable: { path: "$filterField>editMode", formatter: _getEditable },
						enabled: { path: "$filterField>editMode", formatter: _getEnabled },
						width: "{$filterField>width}",
						required: "{$filterField>required}",
						// dateValue : { path: "$filterField>conditions/0/values/0", mode: "OneWay" }
						value: { path: "$filterField>conditions/0/values/0", type: this._getDataType(), mode: "OneWay" },
						valueState: { path: "$filterField>/valueState", mode: "OneWay" },
						valueStateText: { path: "$filterField>/valueStateText", mode: "OneWay" }
					});

				} else if (this.getProperty("dataType").indexOf("Date") > -1 && this.getMaxConditions() === 1) {
					oControl = new sap.m.DatePicker(this.getId() + "-inner", {
						editable: { path: "$filterField>editMode", formatter: _getEditable },
						enabled: { path: "$filterField>editMode", formatter: _getEnabled },
						width: "{$filterField>width}",
						required: "{$filterField>required}",
						value: { path: "$filterField>conditions/0/values/0", type: this._getDataType(), mode: "OneWay" },
						valueState: { path: "$filterField>/valueState", mode: "OneWay" },
						valueStateText: { path: "$filterField>/valueStateText", mode: "OneWay" }
					});

				} else if (this.getProperty("dataType").indexOf("Date") > -1 && this.getMaxConditions() === 2) {
					oControl = new sap.m.DateRangeSelection(this.getId() + "-inner", {
						// change: this._handleTokenChange.bind(this),
						editable: { path: "$filterField>editMode", formatter: _getEditable },
						enabled: { path: "$filterField>editMode", formatter: _getEnabled },
						width: "{$filterField>width}",
						required: "{$filterField>required}",
						value: {
							parts: [{
									path: "$filterField>conditions/0/values/0",
									type: this._getDataType()
								},
								{
									path: "$filterField>conditions/0/values/1",
									type: this._getDataType()
								}
							],
							mode: "OneWay",
							type: "sap.ui.mdc.base.type.DateRange"
						},
						valueState: { path: "$filterField>/valueState", mode: "OneWay" },
						valueStateText: { path: "$filterField>/valueStateText", mode: "OneWay" }
					});


				} else {

					//TODO: clean this up and move to a default fragment similar to FieldHelp
					//With that the default content fragment can be configured.
					var oTokenBindingInfo = {};
					oTokenBindingInfo.path = "conditions";
					oTokenBindingInfo.model = "$filterField";
					oTokenBindingInfo.template = new Token({
						//tokenChanged: this._handleTokenContentChange.bind(this),
						text: {
							path: '$filterField>',
							formatter: formatOperator.bind(this)
						},
						tooltip: {
							path: '$filterField>',
							formatter: formatOperator.bind(this)
						}
					});
					oTokenBindingInfo.templateShareable = false;


					//settings for the multi input
					oControl = new MultiInput(this.getId() + "-inner", {
						tokens: oTokenBindingInfo,
						editable: { path: "$filterField>editMode", formatter: _getEditable },
						enabled: { path: "$filterField>editMode", formatter: _getEnabled },
						width: "{$filterField>width}", //this.getWidth(),
						required: "{$filterField>required}", //this.getRequired(),
						placeholder: "{$filterField>placeholder}", //this.getPlaceholder(),
						enableMultiLineMode: true,
						showSuggestion: false,
						valueState: { path: "$filterField>/valueState", mode: "OneWay" },
						valueStateText: { path: "$filterField>/valueStateText", mode: "OneWay" },
						showValueHelp: "{$filterField>showValueHelp}" //this.getShowValueHelp()
					});

					oControl.attachTokenUpdate(this._handleTokenChange, this);
					oControl.attachTokenChange(this._handleTokenChange, this);
					oControl.attachValueHelpRequest(this.fireValueHelpRequest, this);
					oControl.attachLiveChange(this._handleContentLiveChange, this);

					//update tokens is not necessary
					//TODO: check why there is a destroy of all tokens necessary in updateTokens in default implementation
					oControl.updateTokens = null;
				}

				oControl.attachChange(this._handleTokenChange, this);
				this.setAggregation("_input", oControl);
				this._input = oControl;
				this._activateManagedObjectModel();
			}

			return this.getAggregation("_input");
		};

		function _getEditable(sEditMode) {

			if (sEditMode && sEditMode == EditMode.Editable) {
				return true;
			} else {
				return false;
			}

		}

		function _getEnabled(sEditMode) {

			if (sEditMode && sEditMode != EditMode.Disabled) {
				return true;
			} else {
				return false;
			}

		}

		FilterField.prototype._handleContentLiveChange = function(oEvent) {

			var vValue;
			var bEscPressed = false;

			if ("value" in oEvent.getParameters()) {
				vValue = oEvent.getParameter("value");
			}

			if ("escPressed" in oEvent.getParameters()) {
				bEscPressed = oEvent.getParameter("escPressed");
			}

			// if ("previousValue" in oEvent.getParameters()) {
			// 	vPreviousValue = oEvent.getParameter("previousValue");
			// } else {
			// 	vPreviousValue = this.getValue();
			// }

			this.fireLiveChange({ value: vValue, escPressed: bEscPressed });
		};

		//TODO: returns an Input is no content is set - makes API behave strange
		/*
		 * Returns the current content of the filter field
		 * @returns {sap.ui.core.Control} the currently used content control.
		 */
		FilterField.prototype.getContent = function() {
			if (!this.getAggregation("content")) {
				return this._getDefaultInput();
			}
			return this.getAggregation("content");
		};

		/**
		 * During cloning the internal event handlers of the _input aggregations point to the wrong control
		 */
		FilterField.prototype.clone = function() {

			if (this._input) {
				// detach all events as they will be handled incorrect in cloning
				this._input.detachChange(this._handleTokenChange, this);
				this._input.detachTokenUpdate(this._handleTokenChange, this);
				this._input.detachTokenChange(this._handleTokenChange, this);
				this._input.detachValueHelpRequest(this.fireValueHelpRequest, this);

				var oTemplateToken = this._input.getBindingInfo("tokens").template;
				if (oTemplateToken) {
					// oTemplateToken.detachTokenChanged(this._handleTokenContentChange, this);
				}

				var oClone = Control.prototype.clone.apply(this, arguments);

				// attach the events again
				if (oTemplateToken) {
					// oTemplateToken.attachTokenChanged(this._handleTokenContentChange, this);
				}

				this._input.attachChange(this._handleTokenChange, this);
				this._input.attachTokenUpdate(this._handleTokenChange, this);
				this._input.attachTokenChange(this._handleTokenChange, this);
				this._input.attachValueHelpRequest(this.fireValueHelpRequest, this);

				var oCloneInput = oClone.getAggregation("_input");

				oCloneInput.attachChange(oClone._handleTokenChange, oClone);
				oCloneInput.attachTokenUpdate(oClone._handleTokenChange, oClone);
				oCloneInput.attachTokenChange(oClone._handleTokenChange, oClone);
				oCloneInput.attachValueHelpRequest(oClone.fireValueHelpRequest, oClone);

				var oCloneTemplateToken = oCloneInput.getBindingInfo("tokens").template;
				if (oCloneTemplateToken) {
					// oCloneTemplateToken.attachTokenChanged(oClone._handleTokenContentChange, oClone);
				}
			}

			//else case tbd

			return oClone;
		};

		/*
		 * Sets the content for the filter field, activates the control tree model.
		 * The inner control can bind the properties and aggregations to the "$filterField" model that is available on the content.
		 * TODO: Use the driver for the most common settings ??
		 *
		 * @param {sap.ui.core.Control} oControl the control that should be used as content.
		  @returns {sap.ui.mdc.base.FilterField} Returns <code>this</code> to allow method chaining
		 */
		FilterField.prototype.setContent = function(oControl) {
			this._deactivateManagedObjectModel();
			this.setAggregation("content", oControl);
			this._activateManagedObjectModel();
			return this;
		};

		FilterField.prototype.destroyContent = function() {
			this._deactivateManagedObjectModel();
			this.destroyAggregation("content");
			this._activateManagedObjectModel();
			return this;
		};

		/**
		 * An inner control can bind its properties to the content of the condition structure, array with sub objects.
		 * Changes on the inner properties will result in property changes within the control tree model but are missing
		 * a corresponding aggregation. Here the propertyChange event of the JSONPropertyBinding can be used to
		 * trigger an update on the condition data structure.
		 * @param {jQuery.Event} oEvent The event object.
		 */
		FilterField.prototype._updateConditionModel = function(oEvent) {
			var oBinding = this.getBinding("conditions");
			if (oBinding && oEvent.getParameter("resolvedPath").indexOf("/conditions") === 0) {
				//do an async update of the condition model to avoid recursion
				oBinding.getModel().checkUpdate(true, true);
			}
		};

		// *** ManagedObjectModel handling for content ***
		FilterField.prototype._activateManagedObjectModel = function() {
			var oContent = this.getContent();
			if (oContent) {
				if (!this._oManagedObjectModel) {
					this._oManagedObjectModel = new ManagedObjectModel(this);
					this._oManagedObjectModel.setSizeLimit(1000);
					this._oManagedObjectModel.attachEvent("propertyChange", this._updateConditionModel.bind(this));
				}
				oContent.setModel(this._oManagedObjectModel, "$filterField");
				oContent.bindElement({ path: "/", model: "$filterField" });

			}
		};

		FilterField.prototype._deactivateManagedObjectModel = function() {
			var oContent = this.getContent();
			if (oContent) {
				oContent.unbindElement("$filterField");
				this._oManagedObjectModel.destroy();
				this._oManagedObjectModel = null;
			}
		};

		FilterField.prototype.setParent = function() {
			Control.prototype.setParent.apply(this, arguments);
			if (!this.getParent()) {
				this._deactivateManagedObjectModel();
			} else {
				this._activateManagedObjectModel();
			}
		};

		FilterField.prototype.setDataType = function(vValue) {
			delete this._oDataType;
			this.setProperty("dataType", vValue, true);
		};

		FilterField.mapEdmTypes = {
			"Edm.Boolean": "sap.ui.model.odata.type.Boolean",
			"Edm.Byte": "sap.ui.model.odata.type.Byte",
			"Edm.Date": "sap.ui.model.odata.type.Date", // V4 Date
			"Edm.DateTime": "sap.ui.model.odata.type.DateTime", // only for V2  constraints: {displayFormat: 'Date' }
			"Edm.DateTimeOffset": "sap.ui.model.odata.type.DateTimeOffset", //constraints: { V4: true, precision: n }
			"Edm.Decimal": "sap.ui.model.odata.type.Decimal", //constraints: { precision, scale, minimum, maximum, minimumExclusive, maximumExclusive}
			"Edm.Double": "sap.ui.model.odata.type.Double",
			"Edm.Float": "sap.ui.model.odata.type.Single",
			"Edm.Guid": "sap.ui.model.odata.type.Guid",
			"Edm.Int16": "sap.ui.model.odata.type.Int16",
			"Edm.Int32": "sap.ui.model.odata.type.Int32",
			"Edm.Int64": "sap.ui.model.odata.type.Int64",
			//Edm.Raw not supported
			"Edm.SByte": "sap.ui.model.odata.type.SByte",
			"Edm.Single": "sap.ui.model.odata.type.Single",
			"Edm.String": "sap.ui.model.odata.type.String", //constraints: {maxLength, isDigitSequence}
			"Edm.Time": "sap.ui.model.odata.type.Time", // only V2
			"Edm.TimeOfDay": "sap.ui.model.odata.type.TimeOfDay" // V4 constraints: {precision}
		};

		FilterField.prototype._createDataType = function(sType) {
			var OTypeClass = jQuery.sap.getObject(sType);
			if (!OTypeClass) {
				var oFilterOperatorConfig = this.getFilterOperatorConfig(),
					sNewType;
				if (oFilterOperatorConfig) {
					sNewType = oFilterOperatorConfig.getParentType(sType);
				} else {
					sNewType = FilterField.mapEdmTypes[sType];
				}
				if (!sNewType) {
					jQuery.sap.log.error("FilterField", "dataType for " + sType + " can not be created!");
					return null;
				}
				return this._createDataType(sNewType);
			}
			// if (this.getFieldPath() === "LegalTransaction") {
			// this.setDataTypeConstraints({isDigitSequence: true, maxLength:10 });
			// this.setRequired(true);
			// }
			return new OTypeClass(this.getDataTypeFormatOptions(), this.getDataTypeConstraints());
		};

		FilterField.prototype._getDataType = function(sType) {
			if (!this._oDataType) {
				this._oDataType = this.getProperty("dataType");
				if (typeof this._oDataType === "string") {
					this._oDataType = this._createDataType(this._oDataType);
				}
			}
			return this._oDataType;
		};

		return FilterField;

	}, /* bExport= */ true);
}; // end of sap/ui/mdc/base/FilterField.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.Field') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.experimental.Field'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.base.ManagedObjectModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObjectObserver'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.BindingMode'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.TextArea'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/Field",[
	'jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/model/base/ManagedObjectModel',
	'sap/ui/base/ManagedObjectObserver', 'sap/ui/model/BindingMode', 'sap/m/Input', 'sap/m/Text',
	'sap/m/Link', 'sap/m/TextArea', 'sap/ui/mdc/library'
], function(jQuery, Control, ManagedObjectModel, ManagedObjectObserver, BindingMode,
		Input, Text, Link, TextArea, library) {
	"use strict";

	var DatePicker;
	var DateTimePicker;
	var TimePicker;
	var EditMode = library.EditMode;
	var FieldDisplay = library.FieldDisplay;

	/**
	 * Constructor for a new Field.
	 * A Field can be used to bind its value to data of certain data type. Based on the data type settings, a default
	 * visualization is done by the Field.
	 * The field publishes its properties to the content as a model <code>$field</code> to which the internal content can bind.
	 * This model is local to the content and cannot be used outside the fields context.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 *
	 * @extends sap.ui.core.Control
	 * @implements sap.ui.core.IFormContent
	 *
	 * @author SAP SE
	 * @version 1.52.7
	 *
	 * @constructor
	 * @alias sap.ui.mdc.experimental.Field
	 * @author SAP SE
	 * @version 1.52.7
	 * @since 1.48.1
	 *
	 * @private
	 * @experimental
	 */
	var Field = Control.extend("sap.ui.mdc.experimental.Field", /* @lends sap.ui.mdc.Field.prototype */ {
		metadata: {
			interfaces: ["sap.ui.core.IFormContent"],
			library: "sap.ui.mdc",
			properties: {
				/**
				 * The value of the field
				 *
				 */
				value: {
					type: "any",
					defaultValue: null
				},
				/**
				 * the additional value of the field.
				 *
				 * Depending on the dataType this could be an description, a unit, a key....
				 */
				additionalValue: {
					type: "any",
					defaultValue: null
				},
				/**
				 * The datatype for the field visualization
				 */
				dataType: {
					type: "string",
					group: "Data",
					defaultValue: 'sap.ui.model.type.String'
				},

				dataTypeConstraints: {
					type: "object",
					group: "Data",
					defaultValue: null
				},

				dataTypeFormatOptions: {
					type: "object",
					group: "Data",
					defaultValue: null
				},

				/**
				 * The width of the field
				 */
				width: {
					type: "sap.ui.core.CSSSize",
					group: "Dimension",
					defaultValue: ""
				},

				/**
				 * Whether the field is editable.
				 */
				editMode: {
					type: "sap.ui.mdc.EditMode",
					group: "Data",
					defaultValue: EditMode.Editable
				},

				/**
				 * Whether the field is required.
				 * TODO: create a type FieldControl (auto, false, true) false might lead to error
				 */
				required: {
					type: "boolean",
					group: "Data",
					defaultValue: false
				},

				/**
				 * Icon to be displayed as graphical element before the field.
				 * This can be an image or an icon from the icon font.
				 */
				icon: {
					type: "sap.ui.core.URI",
					group: "Appearance",
					defaultValue: null
				},

				/**
				 * Defines whether the value and/or description of the field is shown.
				 */
				display: {
					type: "sap.ui.mdc.FieldDisplay",
					defaultValue: FieldDisplay.Value
				},

				/**
				 * Defines the horizontal alignment of the text that is shown inside the input field.
				 */
				textAlign: {
					type: "sap.ui.core.TextAlign",
					group: "Appearance",
					defaultValue: sap.ui.core.TextAlign.Initial
				},

				/**
				 * Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code>
				 */
				textDirection: {
					type: "sap.ui.core.TextDirection",
					group: "Appearance",
					defaultValue: sap.ui.core.TextDirection.Inherit
				},

				/**
				 * Defines a short hint intended to aid the user with data entry when the control has no value.
				 * If the value is null no placeholder is shown.
				 */
				placeholder: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
				 */
				valueState: {
					type: "sap.ui.core.ValueState",
					group: "Appearance",
					defaultValue: sap.ui.core.ValueState.None
				},

				/**
				 * Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
				 */
				valueStateText: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set, the <code>Field</code> is rendered using a multi line control.
				 *
				 * This property has only effect on type supporting multiple lines
				 *
				 * @since 1.52.0
				 */
				multipleLines: {
					type: "boolean",
					group: "Appearance",
					defaultValue: false
				}
			},
			aggregations: {
				/**
				 * optional content to be bound to the value of the field
				 */
				content: {
					type: "sap.ui.core.Control",
					multiple: false
				},

				/**
				 * internal content if no control given
				 */
				_content: {
					type: "sap.ui.core.Control",
					multiple: false,
					visibility: "hidden"
				},

				/**
				 * optional FieldHelp
				 */
				fieldHelp: {
					type: "sap.ui.mdc.experimental.FieldHelpBase",
					multiple: false
				},

				/**
				 * optional FieldHelp, used for Link
				 *
				 * @since 1.52.0
				 */
				displayFieldHelp: {
					type: "sap.ui.mdc.experimental.FieldHelpBase",
					multiple: false
				}
			},
			associations: {
				/**
				 * Association to controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).
				 */
				ariaLabelledBy: { type: "sap.ui.core.Control", multiple: true, singularName: "ariaLabelledBy" }
			},
			events: {
//				/**
//				 * To be used to validate the value CTRL+K checks the values against the constraints.
//				 * This is also fired before a value is put to the data model
//				 */
//				validate: {
//
//				},
				/**
				 * This event is fired when the value property of the field is changed
				 *
				 * <b>Note</b> This event is only triggered if the used content control has a change event
				 */
				change: {
					parameters: {

						/**
						 * The new <code>value</code> of the <code>control</code>.
						 */
						value: { type: "string" },

						/**
						 * Flag indecates if the entered <code>value</code> is valid.
						 */
						valid: { type: "boolean" }
					}
				},
				/**
				 * This event is fired when the value of the field is changed - e.g. at each keypress
				 *
				 * <b>Note</b> This event is only triggered if the used content control has a liveChange event
				 */
				liveChange : {
					parameters : {
						/**
						 * The new value of the input.
						 */
						value : {type : "string"},

						/**
						 * Indicate that ESC key triggered the event.
						 * @since 1.48
						 */
						escPressed : {type : "boolean"},

						/**
						 * The value of the input before pressing ESC key.
						 * @since 1.48
						 */
						previousValue : {type : "string"}
					}
				},
				/**
				 * Change event if the value is the data changed successfully. If value is not data bound the event is
				 */
				dataChanged: {},
				/**
				 * Fired if the inner control has a press event and this is fired
				 */
				press: {}
			},
			publicMethods: [],
			defaultAggregation: "content",
			defaultProperty: "value"
		},
		_oManagedObjectModel: null
	});

	Field.prototype.init = function() {

		this._oManagedObjectModel = new ManagedObjectModel(this);

		this._oObserver = new ManagedObjectObserver(_observeChanges.bind(this));

		this._oObserver.observe(this, {
			properties: ["value", "additionalValue", "display", "editMode", "dataType", "multipleLines"],
			aggregations: ["fieldHelp", "displayFieldHelp" , "content"]
		});

	};

	Field.prototype.exit = function() {

		this._oManagedObjectModel.destroy();
		delete this._oManagedObjectModel;

		this._oObserver.disconnect();
		this._oObserver = undefined;

	};

	Field.prototype.onBeforeRendering = function() {

		// determine internal control
		_createInternalContent.call(this);

	};

	Field.prototype.onAfterRendering = function() {

// TODO: what if only Input re-renders, but not Field
		if (this.getFieldHelp() && this.getEditMode() != EditMode.Display) {
			// disable browsers autocomplete if field help is available
			var oContent = this.getAggregation("_content");
			if (oContent) {
				var oDomRef = oContent.getFocusDomRef();
				jQuery(oDomRef).attr("autocomplete", "off");
			}
		}

	};

	function _setAdditionalValueFromKey(sKey) {

		if (!this.isBound("additionalValue")) {
			var oFieldHelp = this.getFieldHelp();
			if (oFieldHelp && this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
				var sAdditionalValue;
				if (sKey) {
					sAdditionalValue = oFieldHelp.getTextForKey(sKey);
					oFieldHelp.setSelectedKey(sKey);
				}
				this.setAdditionalValue(sAdditionalValue);
			}
		}

	}

	Field.formatText = _formatText;

	function _createInternalContent() {

		if (!this._getContent()) {
			var sEditMode = this.getEditMode();
			var sDataType = this.getDataType();
			var oControl;
			var sId = this.getId() + "-inner";

			switch (sEditMode) {
				case EditMode.Display:
					// check if rendered as Link
					var oFieldHelp = this.getDisplayFieldHelp();
					if (oFieldHelp) { 
// TODO: improve logic
						if (oFieldHelp.showLink()) {
							sDataType = "Link";
						} else if (sDataType == "Link") {
							sDataType = "";
						}
					}

					switch (sDataType) {
						case "Edm.Date":
						case "Edm.DateTimeOffset":
						case "Edm.TimeOfDay":
							oControl = new Text(sId, {
								text: { path: "$field>value", type: this._getDataType() },
								textAlign: "{$field>textAlign}",
								textDirection: "{$field>textDirection}",
								wrapping: false
							});
							break;

						case "Link":
							oControl = new Link(sId, {
								text: { path: "$field>value" },
								href: { path: "$field>additionalValue" },
								textAlign: "{$field>textAlign}",
								textDirection: "{$field>textDirection}",
								press: _handleContentPress.bind(this)
							});
							break;

						default:
							oControl = new Text(sId, {
//								text: { parts: [{ path: "$field>value" }, { path: "$field>additionalValue" }, { path: "$field>display" }], formatter: _formatText },
								text: "{$field>/@custom/formattedValue}",
								textAlign: "{$field>textAlign}",
								textDirection: "{$field>textDirection}",
								wrapping: this.getMultipleLines()
							});
							break;
					}
					break;

				default:
					switch (sDataType) {
						case "Edm.Date":
							oControl = _createDatePicker.call(this, sId);
							break;

						case "Edm.DateTimeOffset":
							oControl = _createDateTimePicker.call(this, sId);
							break;

						case "Edm.TimeOfDay":
							oControl = _createTimePicker.call(this, sId);
							break;

						default:
							var sPath = "$field>value";
							if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
								sPath = "$field>additionalValue";
							}
							if (this.getMultipleLines() & !this.getFieldHelp()) {
								oControl = new TextArea(sId, {
									value: {path: sPath},
									placeholder: "{$field>placeholder}",
									textAlign: "{$field>textAlign}",
									textDirection: "{$field>textDirection}",
									required: "{$field>required}",
									editable: { path: "$field>editMode", formatter: _getEditable },
									enabled: { path: "$field>editMode", formatter: _getEnabled },
									valueState: "{$field>valueState}", // TODO: own ValueState handling?
									valueStateText: "{$field>valueStateText}",
									width: "100%",
									change: _handleContentChange.bind(this),
									liveChange: _handleContentLiveChange.bind(this)
								});
							} else {
								oControl = new Input(sId, {
									value: {path: sPath},
									placeholder: "{$field>placeholder}",
									textAlign: "{$field>textAlign}",
									textDirection: "{$field>textDirection}",
									required: "{$field>required}",
									editable: { path: "$field>editMode", formatter: _getEditable },
									enabled: { path: "$field>editMode", formatter: _getEnabled },
									valueState: "{$field>valueState}", // TODO: own ValueState handling?
									valueStateText: "{$field>valueStateText}",
									showValueHelp: !!this.getFieldHelp(),
									change: _handleContentChange.bind(this),
									liveChange: _handleContentLiveChange.bind(this),
									valueHelpRequest: _handleValueHelpRequest.bind(this)
								});
							}
							break;
					}
					break;
			}

			if (oControl) {
				this.setAggregation("_content", oControl, true);
				_setModelOnContent.call(this, oControl);
			}
		}

	}

	Field.prototype._getContent = function() {

		return this.getContent() || this.getAggregation("_content");

	};

	function _getEditable(sEditMode) {

		if (sEditMode && sEditMode == EditMode.Editable) {
			return true;
		} else {
			return false;
		}

	}

	function _getEnabled(sEditMode) {

		if (sEditMode && sEditMode != EditMode.Disabled) {
			return true;
		} else {
			return false;
		}

	}

	function _observeChanges(oChanges) {

		if (oChanges.name == "value" || oChanges.name == "additionalValue" || oChanges.name == "display") {
			var sFormattedValue = _formatText(this.getValue(), this.getAdditionalValue(), this.getDisplay());
			this._oManagedObjectModel.setProperty("/@custom/formattedValue", sFormattedValue);
		}

		if (oChanges.name == "value" || oChanges.name == "display") {
			_setAdditionalValueFromKey.call(this, this.getValue());
		}

		if (oChanges.name == "editMode") {
			if (oChanges.old != oChanges.current) {
				if (this.getAggregation("_content")) {
					this.destroyAggregation("_content");
					_createInternalContent.call(this); // if no content created right now, do it on rendering
				}
			}
		}

		if (oChanges.name == "multipleLines") {
			if (oChanges.old != oChanges.current) {
				if (this.getAggregation("_content")) {
					this.destroyAggregation("_content");
					_createInternalContent.call(this); // if no content created right now, do it on rendering
				}
			}
		}

		if (oChanges.name == "dataType") {
			if (oChanges.old != oChanges.current) {
				delete this._oDataType;
				if (this.getAggregation("_content")) {
					this.destroyAggregation("_content");
					_createInternalContent.call(this); // if no content created right now, do it on rendering
				}
			}
		}

		if (oChanges.name == "fieldHelp" && oChanges.child) {
			_fieldHelpChanged.call(this, oChanges.child, oChanges.mutation);
		}

		if (oChanges.name == "displayFieldHelp" && oChanges.child) {
			_displayFieldHelpChanged.call(this, oChanges.child, oChanges.mutation);
		}

		if (oChanges.name == "content" && oChanges.child) {
			_contentChanged.call(this, oChanges.child, oChanges.mutation);
		}

	}

	function _fieldHelpChanged(oFieldHelp, sMutation) {

		var bFieldHelp = false;
		if (sMutation == "remove") {
			oFieldHelp.detachEvent("select", _handleFieldHelpSelect, this);
			oFieldHelp.detachEvent("navigate", _handleFieldHelpNavigate, this);
			oFieldHelp.detachEvent("dataUpdate", _handleDataUpdate, this);
		} else if (sMutation == "insert") {
			oFieldHelp.attachEvent("select", _handleFieldHelpSelect, this);
			oFieldHelp.attachEvent("navigate", _handleFieldHelpNavigate, this);
			oFieldHelp.attachEvent("dataUpdate", _handleDataUpdate, this);
			_setAdditionalValueFromKey.call(this, this.getValue());
			bFieldHelp = true;
		}
		// toggle valueHelp icon on internal Input
		var oContent = this.getAggregation("_content");
		if (oContent && oContent.setShowValueHelp) {
			oContent.setShowValueHelp(bFieldHelp);
		}

	}

	function _displayFieldHelpChanged(oFieldHelp, sMutation) {

		if (sMutation == "remove") {
//			oFieldHelp.detachEvent("select", _handleFieldHelpSelect, this);
//			oFieldHelp.detachEvent("navigate", _handleFieldHelpNavigate, this);
			oFieldHelp.detachEvent("dataUpdate", _handleDataUpdate, this);
		} else if (sMutation == "insert") {
//			oFieldHelp.attachEvent("select", _handleFieldHelpSelect, this);
//			oFieldHelp.attachEvent("navigate", _handleFieldHelpNavigate, this);
			oFieldHelp.attachEvent("dataUpdate", _handleDataUpdate, this);
		}

	}

	function _contentChanged(oContent, sMutation) {

		if (sMutation == "remove") {
			oContent.unbindElement("$field");
			if (oContent.getMetadata().getEvents().change) {
				// oldContent has change event -> detach handler
				oContent.detachEvent("change", _handleContentChange, this);
			}
			if (oContent.getMetadata().getEvents().liveChange) {
				// oldContent has liveChange event -> detach handler
				oContent.detachEvent("liveChange", _handleContentLiveChange, this);
			}
			if (oContent.getMetadata().getEvents().press) {
				// oldContent has press event -> detach handler
				oContent.detachEvent("press", _handleContentPress, this);
			}

			// let the internal control be created on rendering
		} else if (sMutation == "insert") {
			_setModelOnContent.call(this, oContent);
			if (oContent.getMetadata().getEvents().change) {
				// content has change event -> attach handler
				oContent.attachEvent("change", _handleContentChange, this);
			}
			if (oContent.getMetadata().getEvents().liveChange) {
				// content has liveChange event -> attach handler
				oContent.attachEvent("liveChange", _handleContentLiveChange, this);
			}
			if (oContent.getMetadata().getEvents().press) {
				// content has press event -> attach handler
				oContent.attachEvent("press", _handleContentPress, this);
			}

			if (this.getAggregation("_content")) {
				this.destroyAggregation("_content");
			}
		}

	}

	function _formatText(sValue, sAdditionalValue, sDisplay) {
		//format the values in align with UX
		var sFormattedValue = sValue ? sValue : "";//may be changed to -
		var sFormattedAdditionalValue = sAdditionalValue ? sAdditionalValue : "";//may be changed to -

		var sFormattedText = "";

		switch (sDisplay) {
			case FieldDisplay.Description:
				sFormattedText = sFormattedAdditionalValue;
				break;
			case FieldDisplay.ValueDescription:
				sFormattedText = sFormattedValue + " (" + sFormattedAdditionalValue + ")";
				break;
			case FieldDisplay.DescriptionValue:
				sFormattedText = sFormattedAdditionalValue + " (" + sFormattedValue + ")";
				break;
			default: // Value
				sFormattedText = sFormattedValue;
		}

		//remove empty brakets
		if (sFormattedText.replace) {
			sFormattedText = sFormattedText.replace(" ()", "");
		}

		return sFormattedText;

	}

	// function _formatDate(oDate) {

	// 	if (oDate instanceof Date) {
	// 		if (!this._oDateFormat) {
	// 			var fnDateFormat = sap.ui.require("sap/ui/model/type/Date");
	// 			if (fnDateFormat) {
	// 				_createDateFormat.call(this, fnDateFormat);
	// 			} else {
	// 				this._oDate = oDate;
	// 				sap.ui.require(["sap/ui/model/type/Date"], _createDateFormat.bind(this));
	// 			}
	// 		}
	// 		if (this._oDateFormat) {
	// 			return this._oDateFormat.format(oDate);
	// 		} else {
	// 			return oDate;
	// 		}
	// 	} else {
	// 		return oDate;
	// 	}

	// }

	// function _createDateFormat(DateFormat) {
	// 	this._oDateFormat = sap.ui.core.format.DateFormat.getInstance();
	// 	if (this._oDate) {
	// 		// format date async
	// 		var oControl = this.getAggregation("_content");
	// 		oControl.setText(this._oDateFormat.format(this._oDate));
	// 		delete this._oDate;
	// 	}
	// }

	function _createDatePickerControl(DatePicker, sId) {

		var oDatePicker = new DatePicker(sId, {
			value: { path: "$field>value", type: this._getDataType() },
			placeholder: "{$field>placeholder}",
			textAlign: "{$field>textAlign}",
			textDirection: "{$field>textDirection}",
			required: "{$field>required}",
			editable: { path: "$field>editMode", formatter: _getEditable },
			enabled: { path: "$field>editMode", formatter: _getEnabled },
			valueState: "{$field>valueState}", // TODO: own ValueState handling?
			valueStateText: "{$field>valueStateText}",
			width: "100%",
			change: _handleContentChange.bind(this)
		});

		return oDatePicker;

	}

	function _createDatePickerAsync(Picker) { //Picker could be DatePicker, TimePicker...

		if (this._bIsBeingDestroyed) {
			return;
		}

		var oContent = this.getAggregation("_content");
		if (oContent && oContent instanceof Picker) {
			// DatePicker already created (happens if second call for creation comes before callback of async request)
			return;
		}

		var sId = this.getId() + "-inner";
		var oPicker = _createDatePickerControl.call(this, Picker, sId);

		this.setAggregation("_content", oPicker);
		_setModelOnContent.call(this, oPicker);

	}

	function _createDatePicker(sId) {

		if (!DatePicker) {
			DatePicker = sap.ui.require("sap/m/DatePicker");
			if (!DatePicker) {
				sap.ui.require(["sap/m/DatePicker"], _createDatePickerAsync.bind(this));
				return null;
			}
		}

		return _createDatePickerControl.call(this, DatePicker, sId);

	}

	function _createDateTimePicker(sId) {

		if (!DateTimePicker) {
			DateTimePicker = sap.ui.require("sap/m/DateTimePicker");
			if (!DateTimePicker) {
				sap.ui.require(["sap/m/DateTimePicker"], _createDatePickerAsync.bind(this));
				return null;
			}
		}

		return _createDatePickerControl.call(this, DateTimePicker, sId);

	}

	function _createTimePicker(sId) {

		if (!TimePicker) {
			TimePicker = sap.ui.require("sap/m/TimePicker");
			if (!TimePicker) {
				sap.ui.require(["sap/m/TimePicker"], _createDatePickerAsync.bind(this));
				return null;
			}
		}

		return _createDatePickerControl.call(this, TimePicker, sId);

	}

	function _setModelOnContent(oContent) {
		oContent.setModel(this._oManagedObjectModel, "$field");
		oContent.bindElement({ path: "/", model: "$field" });
	}

	function _handleContentChange(oEvent) {

		var vValue;
		var bValid = true;

		if ("value" in oEvent.getParameters()) {
			vValue = oEvent.getParameter("value");
		} else {
			vValue = this.getValue();
		}

		if ("valid" in oEvent.getParameters()) {
			bValid = oEvent.getParameter("valid");
		}

		var oFieldHelp = this.getFieldHelp();
		if (oFieldHelp) {
			oFieldHelp.close();
			if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
				// value is used as key -> use selected item
				vValue = oFieldHelp.getKeyForText(vValue);
				oFieldHelp.setSelectedKey(vValue);
				this.setProperty("value", vValue, true);
			}
		}

		this.fireChange({ value: vValue, valid: bValid });

	}

	function _handleContentLiveChange(oEvent) {

		var vValue;
		var vPreviousValue;
		var bEscPressed = false;

		if ("value" in oEvent.getParameters()) {
			vValue = oEvent.getParameter("value");
		}

		if ("escPressed" in oEvent.getParameters()) {
			bEscPressed = oEvent.getParameter("escPressed");
		}

		if ("previousValue" in oEvent.getParameters()) {
			vPreviousValue = oEvent.getParameter("previousValue");
		} else {
			vPreviousValue = this.getValue();
		}

		var oFieldHelp = this.getFieldHelp();
		if (oFieldHelp) {
			oFieldHelp.setFilterValue(vValue);
			if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
				// value is used as key -> while suggestion no item is selected
				oFieldHelp.setSelectedKey("");
			}
			if (oFieldHelp.openByTyping()) {
				oFieldHelp.open();
			}
		}

		this.fireLiveChange({ value: vValue, escPressed: bEscPressed, previousValue: vPreviousValue});

	}

	function _handleContentPress(oEvent) {

		var oFieldHelp = this.getDisplayFieldHelp();
		if (oFieldHelp) {
			oFieldHelp.open();
		}

		this.firePress();

	}

	Field.prototype.getFocusDomRef = function() {

		var oContent = this._getContent();

		if (oContent) {
			return oContent.getFocusDomRef();
		} else {
			return this.getDomRef();
		}

	};

	Field.prototype.getIdForLabel = function() {

		var sId;
		var oContent = this._getContent();
		if (oContent) {
			sId = oContent.getIdForLabel();
		} else {
			sId = this.getId();
		}

		return sId;

	};

	Field.mapEdmTypes = {
		"Edm.Boolean": "sap.ui.model.odata.type.Boolean",
		"Edm.Byte": "sap.ui.model.odata.type.Byte",
		"Edm.Date": "sap.ui.model.odata.type.Date", // V4 Date
		"Edm.DateTime": "sap.ui.model.odata.type.DateTime", // only for V2  constraints: {displayFormat: 'Date' }
		"Edm.DateTimeOffset": "sap.ui.model.odata.type.DateTimeOffset", //constraints: { V4: true, precision: n }
		"Edm.Decimal": "sap.ui.model.odata.type.Decimal", //constraints: { precision, scale, minimum, maximum, minimumExclusive, maximumExclusive}
		"Edm.Double": "sap.ui.model.odata.type.Double",
		"Edm.Float": "sap.ui.model.odata.type.Single",
		"Edm.Guid": "sap.ui.model.odata.type.Guid",
		"Edm.Int16": "sap.ui.model.odata.type.Int16",
		"Edm.Int32": "sap.ui.model.odata.type.Int32",
		"Edm.Int64": "sap.ui.model.odata.type.Int64",
		//Edm.Raw not supported
		"Edm.SByte": "sap.ui.model.odata.type.SByte",
		"Edm.Single": "sap.ui.model.odata.type.Single",
		"Edm.String": "sap.ui.model.odata.type.String", //constraints: {maxLength, isDigitSequence}
		"Edm.Time": "sap.ui.model.odata.type.Time", // only V2
		"Edm.TimeOfDay": "sap.ui.model.odata.type.TimeOfDay" // V4 constraints: {precision}
	};

	Field.prototype._createDataType = function(sType) {
		var OTypeClass = jQuery.sap.getObject(sType);
		if (!OTypeClass) {
			var sNewType = Field.mapEdmTypes[sType];
			if (!sNewType) {
				jQuery.sap.log.error("Field", "dataType for " + sType + " can not be created!");
				return null;
			}
			return this._createDataType(sNewType);
		}
		return new OTypeClass(this.getDataTypeFormatOptions(), this.getDataTypeConstraints());
	};

	Field.prototype._getDataType = function(sType) {
		if (!this._oDataType) {
			this._oDataType = this.getProperty("dataType");
			if (typeof this._oDataType === "string") {
				this._oDataType = this._createDataType(this._oDataType);
			}
		}
		return this._oDataType;
	};

	/*
	 * If Field is inside of a Form use Forms aria logic for label
	 */
	Field.prototype.enhanceAccessibilityState = function(oElement, mAriaProps) {

		var oParent = this.getParent();

		if (oParent && oParent.enhanceAccessibilityState) {
			// use Field as control, but aria proprties of rendered inner control.
			oParent.enhanceAccessibilityState(this, mAriaProps);
		}

		return mAriaProps;

	};

	Field.prototype.onsapup = function(oEvent) {

		var oFieldHelp = this.getFieldHelp();

		if (oFieldHelp) {
			oEvent.preventDefault();
			oEvent.stopPropagation();
			oFieldHelp.navigate(-1);
		}

	};

	Field.prototype.onsapdown = function(oEvent) {

		var oFieldHelp = this.getFieldHelp();

		if (oFieldHelp) {
			oEvent.preventDefault();
			oEvent.stopPropagation();
			oFieldHelp.navigate(1);
		}

	};

	function _handleValueHelpRequest(oEvent) {

		var oFieldHelp = this.getFieldHelp();

		if (oFieldHelp) {
			oFieldHelp.setFilterValue("");
			oFieldHelp.toggleOpen();

			if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
				// value is used as key
				oFieldHelp.setSelectedKey(this.getValue());
			}
		}

	}

	function _handleFieldHelpSelect(oEvent) {

		var sValue = oEvent.getParameter("value");
		var sAdditionalValue = oEvent.getParameter("additionalValue");
		var sKey = oEvent.getParameter("key");
		var sNewValue;
		var sNewAdditionalValue;

		if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
			// value is used as key
			sNewValue = sKey;
			sNewAdditionalValue = sValue;
		} else {
			sNewValue = sValue;
			sNewAdditionalValue = sAdditionalValue;
		}

		this.setProperty("value", sNewValue);
		this.setAdditionalValue(sNewAdditionalValue);
		this.fireChange({value: sNewValue, valid: true});

	}

	function _handleFieldHelpNavigate(oEvent) {

		var sValue = oEvent.getParameter("value");
//		var sAdditionalValue = oEvent.getParameter("additionalValue");
		var sKey = oEvent.getParameter("key");
		var sNewValue;
//		var sNewAdditionalValue;

		if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
			// value is used as key
			sNewValue = sKey;
//			sNewAdditionalValue = sValue;
		} else {
			sNewValue = sValue;
//			sNewAdditionalValue = sAdditionalValue;
		}
//TODO: API on Input to update value without property????
		var oContent = this.getAggregation("_content");
		if (oContent && oContent.setDOMValue) {
			oContent.setDOMValue(sValue);
			oContent._doSelect();
		}

		this.fireLiveChange({value: sNewValue});

	}

	function _handleDataUpdate(oEvent) {

		if (this.getEditMode() == EditMode.Display) {
			//TODO: only if really needed
			if (this.getAggregation("_content")) {
				this.destroyAggregation("_content");
			}
		} else {
			_setAdditionalValueFromKey.call(this, this.getValue());
		}

	}

	return Field;

}, /* bExport= */ true);

}; // end of sap/ui/mdc/experimental/Field.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.internal.table.Table.controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 *
 *
 * @private
 * @name sap.ui.mdc.internal.table.Table.controller
 * @author SAP SE
 * @version 1.52.7
 * @since ??
 * @param {}
 * @returns {sap.ui.mdc.internal.table.Table.controller} new Table controller
 */
jQuery.sap.declare('sap.ui.mdc.internal.table.Table.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/internal/table/Table.controller",[
	"../../library",
	"sap/ui/base/Object",
	"sap/ui/mdc/experimental/Action",
	"sap/ui/model/json/JSONModel",
	"sap/ui/model/Sorter"
], function (Library, BaseObject, Action, JSONModel, Sorter) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {}
	 */

	var TableController = BaseObject.extend("sap.ui.mdc.internal.table.Table.controller", {
		constructor: function (oTable) {
			BaseObject.apply(this, arguments);
			this.oTable = oTable;
			this.oInnerTable = oTable.getInnerTable();
		}
	});

	/**
	 *
	 *
	 * @param {}
	 * @private
	 */

	TableController.prototype.handleDataRequested = function (oEvent) {
		// this should not be needed at all -> raised this info to the OData model team
		this.oInnerTable.setBusy(true);
	};


	TableController.prototype.handleCallAction = function (oEvent) {
		var mActionHandlerParameters = oEvent.getParameters();
		var oAction = oEvent.getSource();
		mActionHandlerParameters.mode = oAction.getMode();

		if (mActionHandlerParameters.mode === 'Inline') {
			mActionHandlerParameters.contexts = [oAction.getBindingContext()];
		} else {
			mActionHandlerParameters.contexts = this.oTable.getSelectedContexts();
		}

		// set application to busy, do not execute action if application is busy
		mActionHandlerParameters.setBusy = true;
		mActionHandlerParameters.checkBusy = true;
		this.oTable.fireCallAction(mActionHandlerParameters);
	};

	//This function is to get the toolbar action from given toolbar content
	TableController.prototype.getToolbarActions = function (aToolbarContent) {
		// there might be a better solution than looping through all controls of the header toolbar
		var aToolbarActions = [];

		for (var i = 0; i < aToolbarContent.length; i++) {
			if (aToolbarContent[i] instanceof Action) {
				aToolbarActions.push(aToolbarContent[i]);
			}
		}

		return aToolbarActions;
	};


	//This is a Util function to set the button in Table toolbar enabled/disabled
	TableController.prototype.enableDisableActionsUtil = function (iSelected, aToolbarActions) {
		var iFrom, iTo, oAction;

		if (iSelected != null) {
			for (var i = 0; i < aToolbarActions.length; i++) {
				oAction = aToolbarActions[i];
				iFrom = oAction.getMultiplicityFrom();
				iTo = oAction.getMultiplicityTo();

				if ((!iFrom || (iSelected >= iFrom) && (!iTo || iSelected <= iTo))) {
					oAction.setEnabled(true);
				} else {
					oAction.setEnabled(false);
				}
			}
		}

	};

	//This is a Util Function used to set binding count in title.
	TableController.prototype.bindTableCountUtil = function (oTitle) {
		if (oTitle != null) {
			oTitle.setModel(this.oInnerTable.getModel(), "headerContext");
		}

		var oBinding = this.oTable.getListBinding();
		if (oBinding) {
			oTitle.setBindingContext(oBinding.getHeaderContext(), "headerContext");
		}
	};

	TableController.prototype.createAndOpenViewSettingsDialog = function (oViewSettingsPropertyObject, iSelectedColumnItems, iColumnItems, oDialogPropertiesModel) {
		if (this.oViewSettingsPropertyModel == null && this.oViewSettingsPropertyModel == undefined) {
			var sSelectAllText = Library.getText("table.VIEWSETTINGS_COLUMN_SELECTALL", [iSelectedColumnItems, iColumnItems]);
			oViewSettingsPropertyObject["selectAllText"] = sSelectAllText;
			oViewSettingsPropertyObject["sortDesecending"] = false;
			oViewSettingsPropertyObject["groupDescending"] = false;
			this.oViewSettingsPropertyModel = new JSONModel(oViewSettingsPropertyObject);
		}

		var oViewSettings = new sap.ui.view("viewSettingsXMLView", {
			viewName: "sap.ui.mdc.internal.table.viewsettings.ViewSettings",
			type: "XML",
			async: true,
			preprocessors: {
				xml: {
					bindingContexts: {
						propertiesModel: this.oViewSettingsPropertyModel.createBindingContext("/"),
						dialogProperties: oDialogPropertiesModel.createBindingContext("/")
					},
					models: {
						propertiesModel: this.oViewSettingsPropertyModel,
						dialogProperties: oDialogPropertiesModel
					}
				}
			}
		});
		oViewSettings.setModel(this.oViewSettingsPropertyModel);
		this.oTable.addDependent(oViewSettings);
		oViewSettings.loaded().then(function () {
			var sActionName = (oDialogPropertiesModel.getData().InitialVisiblePanel === "columns") ? "viewSettingsXMLView--columns" : oDialogPropertiesModel.getData().InitialVisiblePanel;
			var oController = oViewSettings.getController();
			oController.oTableController = this;
			oViewSettings.byId("viewSettingsDialog").open(sActionName);
		}.bind(this));
	};


	TableController.prototype.createAndOpenP13nSettingsDialog = function (oP13nSettingsPropertyObject, oDialogPropertiesModel) {
		if (this.oP13nSettingsPropertyModel == null && this.oP13nSettingsPropertyModel == undefined) {
			oP13nSettingsPropertyObject["p13nSortItems"] = [];
			oP13nSettingsPropertyObject["p13nGroupItems"] = [];
			this.oP13nSettingsPropertyModel = new JSONModel(oP13nSettingsPropertyObject);
		}
		var oP13nSettings = new sap.ui.view("p13nSettingsXMLView", {
			viewName: "sap.ui.mdc.internal.table.p13nsettings.P13nSettings",
			type: "XML",
			async: true,
			preprocessors: {
				xml: {
					bindingContexts: {
						propertiesModel: this.oP13nSettingsPropertyModel.createBindingContext("/"),
						dialogProperties: oDialogPropertiesModel.createBindingContext("/")
					},
					models: {
						propertiesModel: this.oP13nSettingsPropertyModel,
						dialogProperties: oDialogPropertiesModel
					}
				}
			}
		});
		oP13nSettings.setModel(this.oP13nSettingsPropertyModel);
		this.oTable.addDependent(oP13nSettings);

		oP13nSettings.loaded().then(function () {
			var oController = oP13nSettings.getController();
			oController.oTableController = this;
			oP13nSettings.byId("p13nDialog").open();
		}.bind(this));
	};

	//Event handler for sort, group, column buttons in table toolbar
	TableController.prototype.onStandardActionClick = function (oEvent) {
		var sActionName = oEvent.getSource().getText(),
			oInnerTableMetaModel = this.oInnerTable.getModel().getMetaModel(),
			oEntityType = oInnerTableMetaModel.getObject("/" + this.oTable.getEntitySet() + "/"),
			isMultiTab = false,
			aTableColumns = this.oInnerTable.getColumns(),
			iColumnCount = aTableColumns.length,
			aColumnId = [],
			iSelectedPropCount = 0,
			aSortItems = [],
			aGroupItems = [],
			aColumnItems = [],
			sSettingsDialogType = this.oTable.getSettingsDialogType();
			//aEntityLineItems = this.oInnerTable.getModel().getMetaModel().getMetaContext(this.oTable.getContext()).getObject();

		for (var index = 0; index < iColumnCount; index++) {
			var oColumn = aTableColumns[index];
			var aColumnsIds = oColumn.getId().split("::");
			aColumnId.push(aColumnsIds[aColumnsIds.length - 1]);
		}

		for (var property in oEntityType) {
			if (typeof (oEntityType[property]) == "object" && oEntityType[property].$kind && oEntityType[property].$kind === "Property") {
				var _propertyName = oInnerTableMetaModel.getObject("/" + this.oTable.getEntitySet() + "/" + property + "@com.sap.vocabularies.Common.v1.Label");
				iSelectedPropCount = (aColumnId.indexOf(property) > -1 ) ? iSelectedPropCount + 1 : iSelectedPropCount;
				var oItem = {
					"name": (_propertyName != null && _propertyName != undefined) ? _propertyName : property,
					"columnKey": property,
					"selected": false
				};
				//Using JSON Stringify to avoid mutation of original object after changing one of the property in copied object.
				aSortItems.push(JSON.parse(JSON.stringify(oItem)));
				aGroupItems.push(JSON.parse(JSON.stringify(oItem)));
				var columnItem = JSON.parse(JSON.stringify(oItem));
				columnItem.selected = !!(aColumnId.indexOf(property) > -1);
				aColumnItems.push(columnItem);
			}
		}

		/*
		TODO: Swati, GK; Check this while implementing Columns tab in settings dialog.
		for (var item in aEntityLineItems) {
			if (typeof (aEntityLineItems[item]) == "object" && aEntityLineItems[item].$Type
				&& aEntityLineItems[item].$Type == "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				iSelectedPropCount = (aColumnId.indexOf(aEntityLineItems[item].Action) > -1) ? iSelectedPropCount + 1 : iSelectedPropCount;
				var oAdditionalItem = {
					"name": (aEntityLineItems[item].Label) ? aEntityLineItems[item].Label : aEntityLineItems[item].Action,
					"columnKey": aEntityLineItems[item].Action,
					"selected": false
				};
				oAdditionalItem.selected = !!(aColumnId.indexOf(aEntityLineItems[item].Action) > -1);
				aColumnItems.push(oAdditionalItem);
			}
		}*/

		var oPropertyObject = {
			"sortPanelItems": aSortItems,
			"groupPanelItems": aGroupItems,
			"columnPanelItems": aColumnItems.sort(function (x, y) {
				if (x.selected === y.selected) {
					return 0;
				} else if (x.selected) {
					return -1;
				} else {
					return 1;
				}
			})
		};

		var oDialogPropertiesModel = new JSONModel({
			"InitialVisiblePanel": sActionName,
			"showSortPanel": !!(isMultiTab || sActionName === "sort"),
			"showGroupPanel": !!((isMultiTab || sActionName === "group") && (this.oInnerTable.getMetadata().getName() === "sap.m.Table")),
			//"showFilterPanel": !!(isMultiTab || sActionName === "filter"),
			"showColumnPanel": !!(isMultiTab || sActionName === "column")
		});

		if (sSettingsDialogType === "P13nDialog") {
			this.createAndOpenP13nSettingsDialog(oPropertyObject, oDialogPropertiesModel);
		} else {
			this.createAndOpenViewSettingsDialog(oPropertyObject, iSelectedPropCount, aColumnItems.length, oDialogPropertiesModel);
		}
	};

	TableController.prototype.applyGroupAndSort = function (aSorters) {
		if (aSorters.length > 0) {
			var oBinding = this.getListBinding();
			oBinding.sort(aSorters);
		}
	};

	return TableController;

});

}; // end of sap/ui/mdc/internal/table/Table.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.internal.table.gridtable.GridTable.controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 *
 *
 * @private
 * @name sap.fe.controls._Table.GridTable.GridTable.controller
 * @author SAP SE
 * @version 1.52.7
 * @since ??
 * @param {}
 * @returns {sap.fe.controls._Table.GridTable.GridTable.controller} new GridTable controller
 */
jQuery.sap.declare('sap.ui.mdc.internal.table.gridtable.GridTable.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/internal/table/gridtable/GridTable.controller",[
	"sap/ui/mdc/library",
	"../Table.controller"
], function (Library, TableController) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {}
	 */

	var GridTableController = TableController.extend("sap.ui.mdc.internal.table.gridtable.GridTable.controller", {
		constructor: function (oTable) {
			TableController.apply(this, arguments);
			this.oTable = oTable;
		}
	});

	/**
	 *
	 *
	 * @param {}
	 * @private
	 */

     /*
	 this method checks the multiplicity of the actions and sets the selection mode accordingly
	 only sap.fe.controls.Action instances in the tables headerbar are considered
	 */

	GridTableController.prototype.setSelectionMode = function () {
		var aToolbarActions = this.getToolbarActions(this.oInnerTable.getExtension()[0].getContent());
		var iMultiplicityTo;
		var sSelectionMode = 'None';

		for (var i = 0; i < aToolbarActions.length; i++) {
			iMultiplicityTo = aToolbarActions[i].getMultiplicityTo();
			if (iMultiplicityTo > 1 || !iMultiplicityTo) {
				sSelectionMode = 'MultiToggle';
				break;
			} else if (iMultiplicityTo === 1) {
				sSelectionMode = 'Single';
			}
		}

	    this.oInnerTable.setSelectionMode(sSelectionMode);

	};



	/*
	 this method checks the multiplicity of the actions and sets the selection mode accordingly
	 only sap.fe.controls.Action instances in the tables headerbar are considered
	 */

	GridTableController.prototype.enableDisableActions = function () {
		var aToolbarActions = this.getToolbarActions(this.oInnerTable.getExtension()[0].getContent());
		var iSelected = this.oInnerTable.getSelectedIndices().length;
		this.enableDisableActionsUtil(iSelected,aToolbarActions);

	};

	GridTableController.prototype.bindTableCount = function () {
		var oTitle = this.oInnerTable.getExtension()[0].getContent()[0];
		this.bindTableCountUtil(oTitle);
	};



	GridTableController.prototype.handleDataReceived = function (oEvent) {
		var oError = oEvent.getParameter("error");

		if (oError) {
			// fire the showError event to show a message box via controllerImplementation
			this.oInnerTable.setNoData(Library.getText("table.TECHINCAL_ERROR"));
			this.oTable.fireShowError(oEvent);
		} else {
			this.oInnerTable.setNoData(Library.getText("table.NO_DATA_TEXT"));
		}
		//This is work around for Table data loading issue when visibleRowCountMode is auto in initial
		if (this.oInnerTable.getVisibleRowCountMode() != "Auto") {
			this.oInnerTable.setVisibleRowCountMode("Auto");
		}
		this.oInnerTable.setBusy(false);
	};


	GridTableController.prototype.getListBinding = function () {
		return this.oInnerTable.getBinding("rows");

	};

	GridTableController.prototype.getListBindingInfo = function () {
		return this.oInnerTable.getBindingInfo("rows");
	};

	return GridTableController;

});

}; // end of sap/ui/mdc/internal/table/gridtable/GridTable.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.internal.table.responsivetable.ResponsiveTable.controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 *
 *
 * @private
 * @name sap.fe.controls._Table.ResponsiveTable.ResponsiveTable.controller
 * @author SAP SE
 * @version 1.52.7
 * @since ??
 * @param {}
 * @returns {sap.fe.controls._Table.ResponsiveTable.ResponsiveTable.controller} new ResponsiveTable controller
 */
jQuery.sap.declare('sap.ui.mdc.internal.table.responsivetable.ResponsiveTable.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/internal/table/responsivetable/ResponsiveTable.controller",[
	"sap/ui/mdc/library",
	"../Table.controller"
], function (Library, TableController) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {}
	 */

	var ResponsiveTableController = TableController.extend("sap.ui.mdc.internal.table.responsivetable.ResponsiveTable.controller", {
		constructor: function (oTable) {
			TableController.apply(this, arguments);
			this.oTable = oTable;
		}
	});

	/**
	 *
	 * This method checks the multiplicity of the actions and sets the selection mode accordingly
	 * only sap.fe.controls.Action instances in the tables headerbar are considered
	 *
	 * @param {}
	 * @private
	 */

	ResponsiveTableController.prototype.setSelectionMode = function () {
		var aToolbarActions = this.getToolbarActions(this.oInnerTable.getHeaderToolbar().getContent());
		var iMultiplicityTo;
		var sSelectionMode = 'None';

		for (var i = 0; i < aToolbarActions.length; i++) {
			iMultiplicityTo = aToolbarActions[i].getMultiplicityTo();
			if (iMultiplicityTo > 1 || !iMultiplicityTo) {
				sSelectionMode = 'MultiSelect';
				break;
			} else if (iMultiplicityTo === 1) {
				sSelectionMode = 'SingleSelectLeft';
			}
		}

		this.oInnerTable.setMode(sSelectionMode);
	};


	/*
	 this method checks the multiplicity of the actions and sets the selection mode accordingly
	 only sap.fe.controls.Action instances in the tables headerbar are considered
	 */

	ResponsiveTableController.prototype.enableDisableActions = function () {
		var aToolbarActions = this.getToolbarActions(this.oInnerTable.getHeaderToolbar().getContent());
		var iSelected = this.oInnerTable.getSelectedContexts().length;
		this.enableDisableActionsUtil(iSelected, aToolbarActions);
	};

	ResponsiveTableController.prototype.bindTableCount = function () {
		var oTitle = this.oInnerTable.getHeaderToolbar().getContent()[0];
		this.bindTableCountUtil(oTitle);
	};


	ResponsiveTableController.prototype.handleDataReceived = function (oEvent) {
		var oError = oEvent.getParameter("error");

		if (oError) {
			// fire the showError event to show a message box via controllerImplementation
			this.oInnerTable.setNoDataText(Library.getText("table.TECHINCAL_ERROR"));
			this.oTable.fireShowError(oEvent);
		} else {
			this.oInnerTable.setNoDataText(Library.getText("table.NO_DATA_TEXT"));
		}
		this.oInnerTable.setBusy(false);
	};

	ResponsiveTableController.prototype.getListBinding = function () {
		return this.oInnerTable.getBinding("items");

	};

	ResponsiveTableController.prototype.getListBindingInfo = function () {
		return this.oInnerTable.getBindingInfo("items");
	};

	return ResponsiveTableController;

});

}; // end of sap/ui/mdc/internal/table/responsivetable/ResponsiveTable.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.internal.table.viewsettings.ViewSettings.controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.internal.table.viewsettings.ViewSettings.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/internal/table/viewsettings/ViewSettings.controller",[
	"sap/ui/mdc/library",
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/Sorter",
	"sap/ui/model/json/JSONModel"
], function (Library, Controller, Sorter, JSONModel) {
	"use strict";
	return Controller.extend("sap.ui.mdc.internal.table.viewsettings.ViewSettings", {
		//Event handler for OK button
		onConfirm: function (oEvent) {
			var aCondition = oEvent.getParameters(),
				aSorters = [],
				sPath,
				bDescending,
				sKey, sName;

			var fnGroup = function (oContext) {
				sPath = (aCondition.groupItem && aCondition.groupItem.getKey());
				sKey = oContext.getProperty(sPath);
				sName = aCondition.groupItem && aCondition.groupItem.getText();

				return {
					key: sKey,
					text: sName + " : " + sKey
				};
			};

			//grouping
			if (aCondition.groupItem) {
				sPath = aCondition.groupItem.getKey();
				bDescending = !!(aCondition.groupDescending);
				var oGroupSorter = new Sorter(sPath, bDescending, fnGroup);
				aSorters.push(oGroupSorter);
			}

			//sorting
			if (aCondition.sortItem) {
				sPath = aCondition.sortItem.getKey();
				bDescending = !!(aCondition.sortDescending);
				aSorters.push(new Sorter(sPath, bDescending));
			}

			this._saveViewSettingsState(aCondition);
			this.oTableController.applyGroupAndSort(aSorters);
			this.getView().destroy();
		},
		//Function to save the state of view settings dialog state.
		_saveViewSettingsState: function (aCondition) {
			var oViewSettingsModel = this.oView.getModel().getData();

			//Group panel
			var groupItemKey = aCondition.groupItem && aCondition.groupItem.getKey();
			oViewSettingsModel.groupDescending = !!(aCondition.groupDescending);

			if (groupItemKey != null && groupItemKey != undefined) {
				oViewSettingsModel.groupPanelItems.map(function (groupPanelItem) {
					if (groupPanelItem.columnKey === groupItemKey) {
						groupPanelItem.selected = true;
						return groupPanelItem;
					} else {
						groupPanelItem.selected = false;
						return groupPanelItem;
					}
				});
			}


			//Sort Panel
			var sortItemKey = aCondition.sortItem && aCondition.sortItem.getKey();
			oViewSettingsModel.sortDesecending = !!(aCondition.sortDescending);

			if (sortItemKey != null && sortItemKey != undefined) {

				oViewSettingsModel.sortPanelItems.map(function (sortPanelItem) {
					if (sortPanelItem.columnKey === sortItemKey) {
						sortPanelItem.selected = true;
						return sortPanelItem;
					} else {
						sortPanelItem.selected = false;
						return sortPanelItem;
					}
				});
			}


			// //Column Panel
			// var aSelectColumnKeys = this.oView.byId("ColumnsList").getSelectedItems().map( function(selectedColumneItem) {
			// 	return selectedColumneItem.getCustomData()[0].getValue();
			// });
			// oViewSettingsModel.selectAllText = Library.getText("table.VIEWSETTINGS_COLUMN_SELECTALL", [aSelectColumnKeys.length, oViewSettingsModel.columnPanelItems.length]);

			// oViewSettingsModel.columnPanelItems.map( function(columnPanelItem) {
			// 	if (aSelectColumnKeys.indexOf(columnPanelItem.columnKey) > -1) {
			// 		columnPanelItem.selected = true;
			// 		return columnPanelItem;
			// 	} else {
			// 		columnPanelItem.selected = false;
			// 		return columnPanelItem;
			// 	}
			// });
			// oViewSettingsModel.columnPanelItems = oViewSettingsModel.columnPanelItems.sort(function (x, y) {
			// 	if (x.selected === y.selected) {
			// 		return 0;
			// 	} else if (x.selected) {
			// 		return -1;
			// 	} else {
			// 		return 1;
			// 	}
			// });

			this.oTableController.oViewSettingsPropertyModel = new JSONModel(oViewSettingsModel);
		},
		//Event handler for cancel button
		onCancel: function (oEvent) {
			this.getView().destroy();
		},
		//Even handler for the select of column tab select all check box"
		onColumnListSelectAll: function (oEvent) {
			if (oEvent.getParameters().selected) {
				this.getView().byId("ColumnsList").selectAll();
			} else {
				this.getView().byId("ColumnsList").removeSelections(true);
			}
			this._updateSelectAllText();
		},
		onColumnListChange: function (oEvent) {
			this._updateSelectAllText();
		},
		_updateSelectAllText: function () {
			var oColumnList = this.getView().byId("ColumnsList"),
				sSelectAllText = Library.getText("table.VIEWSETTINGS_COLUMN_SELECTALL", [oColumnList.getSelectedItems().length, oColumnList.getItems().length]);
			this.getView().byId("selectAllCheckBox").setText(sSelectAllText);
		}
	});
});

}; // end of sap/ui/mdc/internal/table/viewsettings/ViewSettings.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.internal.valuehelp.ValueHelpAnnotationHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.internal.valuehelp.ValueHelpAnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/internal/valuehelp/ValueHelpAnnotationHelper",[
	"sap/ui/mdc/library"
], function (Library) {
	"use strict";
	/*
	 This class contains annotation helpers that are needed for the sap.fe.controls._Table.
	 */
	jQuery.sap.declare("sap.ui.mdc.internal.valuehelp.ValueHelpAnnotationHelper");

	sap.ui.mdc.internal.valuehelp.ValueHelpAnnotationHelper = {

		// TODO: the same one exist also in the FilterField as it is needed from the suggest list - merge them
		getCollectionEntitySet: function (oValueListContext) {
			var mValueList = oValueListContext.getObject();
			return mValueList.$model.getMetaModel().createBindingContext("/" + mValueList.CollectionPath);
		},

		getValueListProperty: function (oPropertyContext) {
			var oValueListModel = oPropertyContext.getModel();
			var mValueList = oValueListModel.getObject("/");
			return mValueList.$model.getMetaModel().createBindingContext('/' + mValueList.CollectionPath + '/' + oPropertyContext.getObject());
		},
		formatIconTabFilterText : function(sIconTabFilterText, oCM) {
			return Library.getText(sIconTabFilterText);
			// if (oCM && oCM.conditions && oCM.conditions.length !== 0){
			// 	return oResourceBundle.getText(sSelectFromList, [oCM.conditions.length]);
			// } else {
			// 	return oResourceBundle.getText(sSelectFromList, [0]);
			// }
		},
		formatSelectedItemTitle : function(sSelectedItem, oCM) {

			if (oCM && oCM.conditions && oCM.conditions.length !== 0){
				var aConditions = oCM.conditions.filter(function(oCondition) {
					return oCondition.isEmpty !== true;
				});

				return Library.getText(sSelectedItem, [aConditions.length]);
			} else {
				return Library.getText(sSelectedItem, [0]);
			}
		},
		formatedTokenText : function(oFilterFieldType,oCondition) {
			var sResult = "";
			if (oCondition) {
				var oCM = this.getModel("cm");
				var oOperator = oCM.getFilterOperatorConfig().getOperator(oCondition.operator);
				sResult = oOperator.format(oCondition.values, oCondition, oFilterFieldType);
			}
			return sResult;
		}
	};
});

}; // end of sap/ui/mdc/internal/valuehelp/ValueHelpAnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.Field') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.Field'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/Field",[
	"./library",
	'sap/ui/mdc/XMLComposite',
	"sap/ui/mdc/internal/common/Helper"
], function (Library, XMLComposite, commonHelper) {
	"use strict";
	var Field = XMLComposite.extend("sap.ui.mdc.Field", {
		metadata: {
			designTime: false,
			specialSettings: {
				metadataContexts: {
					defaultValue: "{ model: 'entitySet', path:'',  name: 'entitySet'}, { model: 'dataField', path:'',  name: 'dataField'}"
				}
			},
			properties: {
			},
			events: {
				callAction: {}
			},
			aggregations: {},
			publicMethods: []
		},
		fragment: "sap.ui.mdc.internal.field.Field"
	});

	Field.prototype.onDraftLinkPressed = function (oEvent) {
		// TODO: this is currently implemented in the table, move it from the table to here and delegate
	};

	Field.prototype.handleCallAction = function (oEvent) {
		// TODO: this is currently implemented in the table, move it from the table to here and delegate
	};


	// STATIC HELPER FOR CONTROL TEMPLATE//
	Field._helper = {
		formatDraftOwner: function (vDraftUUID, vDraftInProcessByUser, vDraftInProcessByUserDesc, vDraftLastChangedByUser, vDraftLastChangedByUserDesc, bHasDraftEntity) {
			var sDraftOwnerDescription = "";
			if (vDraftUUID && bHasDraftEntity) {
				var sUserDescription = vDraftInProcessByUserDesc || vDraftInProcessByUser || vDraftLastChangedByUserDesc || vDraftLastChangedByUser;
				if (sUserDescription) {
					sDraftOwnerDescription = Library.getText("draft.OWNER", [sUserDescription]);
				} else {
					sDraftOwnerDescription = Library.getText("draft.ANOTHER_USER");
				}
			}
			return sDraftOwnerDescription;
		},
		buildExpressionForCriticalityIcon: function (sCriticalityProperty) {
			if (sCriticalityProperty) {
				var sExpression = "{= (${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Negative') || (${" + sCriticalityProperty + "} === '1') || (${" + sCriticalityProperty + "} === 1) ? 'sap-icon://status-negative' : " +
					"(${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Critical') || (${" + sCriticalityProperty + "} === '2') || (${" + sCriticalityProperty + "} === 2) ? 'sap-icon://status-critical' : " +
					"(${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Positive') || (${" + sCriticalityProperty + "} === '3') || (${" + sCriticalityProperty + "} === 3) ? 'sap-icon://status-positive' : " +
					"'sap-icon://status-inactive' }";

				return sExpression;
			}
		},

		buildExpressionForCriticalityColor: function (sCriticalityProperty) {
			if (sCriticalityProperty) {
				var sExpression = "{= (${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Negative') || (${" + sCriticalityProperty + "} === '1') || (${" + sCriticalityProperty + "} === 1) ? 'Error' : " +
					"(${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Critical') || (${" + sCriticalityProperty + "} === '2') || (${" + sCriticalityProperty + "} === 2) ? 'Warning' : " +
					"(${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Positive') || (${" + sCriticalityProperty + "} === '3') || (${" + sCriticalityProperty + "} === 3) ? 'Success' : " +
					"'None' }";

				return sExpression;
			}
		},

		getFieldContext: function (oContext, oField) {
			// in the first wave we only support responsiveTable, therefore we directly return this value, in the
			// future we need to introduce more logic here
			return 'responsiveTable';

			/*
			 if (oContext.getPath().indexOf('@com.sap.vocabularies.UI.v1.LineItem') >= 0) {
			 return 'responsiveTable';
			 } else {
			 return 'form';
			 }*/
		},

		getStableIdPartFromDataField: function (oDataField, mParameter) {
			var sPathConcat = "", sIdPart = "";
			if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				return commonHelper.replaceSpecialCharsInId(oDataField.Action);
			} else if (oDataField.$Type && (oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" || oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation")) {
				if (typeof oDataField.SemanticObject == "string") {
					sIdPart = commonHelper.replaceSpecialCharsInId(oDataField.SemanticObject);
				} else if (oDataField.SemanticObject.$Path) {
					sIdPart = commonHelper.replaceSpecialCharsInId(oDataField.SemanticObject.$Path);
				}
				if (typeof oDataField.Action == "string") {
					sIdPart = sIdPart + "::" + commonHelper.replaceSpecialCharsInId(oDataField.Action);
				} else if (oDataField.Action && oDataField.Action.$Path) {
					sIdPart = sIdPart + "::" + commonHelper.replaceSpecialCharsInId(oDataField.Action.$Path);
				}
				return sIdPart;
			} else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
				return commonHelper.replaceSpecialCharsInId(oDataField.Target.$AnnotationPath);
			} else if (oDataField.Value && oDataField.Value.$Path) {
				return commonHelper.replaceSpecialCharsInId(oDataField.Value.$Path);
			} else if (oDataField.Value && oDataField.Value.$Apply && oDataField.Value.$Function === "odata.concat") {
				for (var i = 0; i < oDataField.Value.$Apply.length; i++) {
					if (oDataField.Value.$Apply[i].$Path) {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + commonHelper.replaceSpecialCharsInId(oDataField.Value.$Apply[i].$Path);
					}
				}
				return sPathConcat;
			} else if (mParameter && mParameter.context && mParameter.context.getObject("@sapui.name")) {
				// the context is not refering to da data field but directly to a property, return the property name
				return commonHelper.replaceSpecialCharsInId(mParameter.context.getObject("@sapui.name"));
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the annotations.");
			}
		}
	};

	Field._helper.getFieldContext.requiresIContext = true;

	return Field;

}, /* bExport= */true);

}; // end of sap/ui/mdc/Field.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.FilterField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.FilterField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v4.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/FilterField",[
	"./library",
	'sap/ui/mdc/XMLComposite',
	"sap/ui/mdc/base/ODataSuggestProvider",
	"sap/ui/mdc/base/OperatorSuggestProvider",
	"sap/ui/mdc/base/FixedValueListProvider",
	"sap/ui/model/json/JSONModel",
	"sap/ui/mdc/ValueHelpDialog",
	"sap/ui/mdc/internal/common/Helper",
	'sap/ui/model/odata/v4/AnnotationHelper'
], function(Library, XMLComposite, ODataSuggestProvider, OperatorSuggestProvider, FixedValueListProvider, JSONModel, ValueHelpDialog, CommonHelper) {
	"use strict";
	var FilterField = XMLComposite.extend("sap.ui.mdc.FilterField", {
		metadata: {
			designTime: false,
			specialSettings: {
				metadataContexts: {
					defaultValue: "{ model: 'entitySet', path:'',  name: 'entitySet'}, { model: 'property', path:'',  name: 'property'}"
				}
			},
			properties: {
				conditionModelName: {
					type: "string",
					defaultValue: "sap.fe.cm",
					invalidate: false
				}
			},
			events: {

			},
			aggregations: {},
			publicMethods: []
		},
		fragment: "sap.ui.mdc.internal.filterfield.FilterField"
	});

	FilterField.prototype.getInnerFilterField = function() {
		return this.get_content().getItems()[1];
	};

	FilterField.prototype.init = function () {
		XMLComposite.prototype.init.call(this);

		var oInnerFilterField = this.getInnerFilterField();
		var bSuggest = oInnerFilterField.getCustomData()[1].getValue() === 'true',
			bFixedValues = oInnerFilterField.getCustomData()[2].getValue() === 'true';

		if (bSuggest) {
			new ODataSuggestProvider({
				control: oInnerFilterField,
				enableFilterSuggest: false,
				suggest: this.handleSuggest.bind(this)
			});

		} else if (bFixedValues) {
			new FixedValueListProvider({
				control: oInnerFilterField,
				enableFilterSuggest: true,
				suggest: this.handleSuggest.bind(this)
			});

			/* according to UX we disable the Operator Suggest Provider for the first delivery */
			//} else {
			//	new OperatorSuggestProvider({control: oFilterField});
		}
	};

	FilterField.prototype.handleSuggest = function(oProvider, oEvent) {
		/* currently the inner field fires the event - this might change in the future once we agree on a final
		 API in the MDC Filter Field - then we night to change this coding
		 TODO: to be discussed if we access the input field via oInnerFilterField.get_input()
		 */
		var oInnerFilterField = this.getInnerFilterField();
		var oFilterField = this;
		var oInputField = oEvent.getSource();

		// FIXME: getting those information via metadataContext does currently not work but Silke works on it
		var sEntitySet = oInnerFilterField.data("entitySetName");

		var oMetaModel = oFilterField.getModel().getMetaModel();
		var oSearchRestrictions, mBindingParameters = {};

		// temp solution - we will get rid of custom data in the next release
		var bFixedValues = oInnerFilterField.getCustomData()[2].getValue() === 'true';

		if (!bFixedValues) {
			oSearchRestrictions = oMetaModel.getObject("/" + sEntitySet + "@Org.OData.Capabilities.V1.SearchRestrictions");
			if (!oSearchRestrictions || oSearchRestrictions.Searchable || oSearchRestrictions.Searchable === undefined) {
				// the entity set is searchable - we can use $search
				mBindingParameters = {
					$search: oEvent.getParameters().suggestValue
				};
			} else {
				// Suggest Lists entity sets without $search support is not yet supported
				return;
			}
		}

		if (this.bSuggestionViewCreated) {
			if (!bFixedValues) {
				var oSuggestListBinding = oInputField.getBinding("suggestionRows");
				if (oSuggestListBinding) {
					oSuggestListBinding.changeParameters(mBindingParameters);
				}
			}
		} else {
			this.bSuggestionViewCreated = true; // FIXMe: it's a little bit more complex as user might type fast
			this._requestValueListMetadata().then(function(mValueListInfo) {
				mValueListInfo.SuggestBindingParameters = JSON.stringify(mBindingParameters);

				var oValueListModel = new JSONModel(mValueListInfo);
				var oSuggestionListView = sap.ui.view({
					viewName: "sap.ui.mdc.internal.filterfield.SuggestionList",
					type: "XML",
					async: true,
					preprocessors: {
						xml: {
							bindingContexts: {
								valueList: oValueListModel.createBindingContext("/")
							},
							models: {
								valueList: oValueListModel
							}
						}
					}
				});

				oSuggestionListView.setModel(mValueListInfo.$model);

				return oSuggestionListView.loaded().then(function() {
					oProvider.setTable(oSuggestionListView.getContent()[0]);
					if (mValueListInfo.__sapfe) {
						if (mValueListInfo.__sapfe.keyPath) {
							oProvider.setKeyPath(mValueListInfo.__sapfe.keyPath);
						}
						if (mValueListInfo.__sapfe.descriptionPath) {
							oProvider.setDescriptionPath(mValueListInfo.__sapfe.descriptionPath);
						}
					}
				});
			});
		}
	};

	FilterField.prototype.handleValueHelpRequest = function() {
		// FIXME: get those properties via metadata context
		var oInnerFilterField = this.getInnerFilterField();
		var sEntitySet = oInnerFilterField.data("entitySetName");
		var sFieldPath = oInnerFilterField.getFieldPath().replace(/\*/g, '');

		// for now create always a new instance but couldn't we reuse the instance?
		var oValueHelpDialog = new ValueHelpDialog({
			entitySet : sEntitySet,
			fieldPath : sFieldPath
		});
		// why couldn't we add the condition model to the constructor?
		oValueHelpDialog.setConditionModel(this.getModel(this.getConditionModelName()));

		this.addDependent(oValueHelpDialog);
		oValueHelpDialog.open();
	};

	FilterField.prototype._requestValueListMetadata = function() {
		var oFilterField = this;
		var oInnerFilterField = this.getInnerFilterField();
		// FIXME: getting those information via metadataContext does currently not work but Silke works on it
		var sEntitySet = oInnerFilterField.data("entitySetName");
		var sFieldPath = oInnerFilterField.getFieldPath().replace(/\*/g, '');

		return this.getModel().getMetaModel().requestValueListInfo('/' + sEntitySet + '/' + sFieldPath).then(function(mValueListInfo) {
			var mParameters;

			if (mValueListInfo[""]) {
				// determine key and description path and store it in the value list info
				mParameters = mValueListInfo[""].Parameters;
				var oMetaModel = oFilterField.getModel().getMetaModel();
				var sLocalDataProperty = oMetaModel.getObject('/' + sEntitySet + '/' + sFieldPath + "@sapui.name");


				// TODO: don't know why this is added here and not in the template to be discussed
				var aFilterExpressionRestrictions = oMetaModel.getObject("/" + sEntitySet + "@com.sap.vocabularies.Common.v1.FilterExpressionRestrictions");
				var oFilterExpressionRestriction = aFilterExpressionRestrictions && aFilterExpressionRestrictions.filter(function(filterExpressionRestriction) {
					return filterExpressionRestriction.Property.$PropertyPath === sFieldPath;
				});

				//Getting Label for the dialog
				mValueListInfo[""].sTitle = oMetaModel.getObject("/" + sEntitySet + "/$Type/" + sFieldPath + "@com.sap.vocabularies.Common.v1.Label");
				if (oFilterExpressionRestriction && (oFilterExpressionRestriction.length > 0) && (oFilterExpressionRestriction[0].AllowedExpressions.$EnumMember.indexOf("SingleValue") > -1)) {
					mValueListInfo[""].sSelectionMode = "SingleSelectLeft";
					mValueListInfo[""].sTitle = Library.getText("valuehelp.SINGLE_ITEM_SELECT") + mValueListInfo[""].sTitle;
				} else {
					mValueListInfo[""].sSelectionMode = "MultiSelect";
				}

				// determine the key and the description path
				for (var i = 0; i < mParameters.length; i++) {
					if (mParameters[i].LocalDataProperty && mParameters[i].LocalDataProperty.$PropertyPath === sLocalDataProperty) {
						// we store this information into the value list info - we will set this information to the filter field in the future
						mValueListInfo[""].__sapfe = {
							keyPath: mParameters[i].ValueListProperty,
							descriptionPath: mValueListInfo[""].$model.getMetaModel().getObject("/" + mValueListInfo[""].CollectionPath + "/" + mParameters[i].ValueListProperty + "@com.sap.vocabularies.Common.v1.Text/$Path")
						};

						// there should be always only one parameter with the property field path as output
						break;
					}
				}

				return mValueListInfo[""];
			} else {
				throw ("no unqualified value list found - currently qualified value lists are not considered");
			}

		}, function(oError) {
			throw (oError.message);
		});
	};

	// STATIC HELPER FOR CONTROL TEMPLATE//
	FilterField._helper = {
		getFieldPath: function(oInterface, sEntitySet, sFieldPath) {
			var oMetaModel, aSections, oProperty, bToAnyFound;
			oMetaModel = oInterface.getInterface(0).getModel();

			if (typeof sFieldPath !== "string") {
				sFieldPath = oMetaModel.getObject(oInterface.getInterface(1).getPath() + "@sapui.name");
			}

			if (sFieldPath.indexOf('/') > -1) {

				aSections = sFieldPath.split('/');
				for (var i = 0; i < (aSections.length - 1); i++) {
					oProperty = oMetaModel.getObject("/" + sEntitySet + "/" + aSections.slice(0, (i + 1)).join('/'));

					if (oProperty && oProperty["$kind"] === "NavigationProperty" && oProperty["$isCollection"]) {
						aSections[i] = aSections[i] + '*';
						bToAnyFound = true;
					}
				}
				if (bToAnyFound) {
					sFieldPath = aSections.join('/');
				}
			}

			return sFieldPath;
		},

		getValueStatePath: function(oInterface, sEntitySet, sFieldPath) {
			var _sFieldPath = FilterField._helper.getFieldPath(oInterface, sEntitySet, sFieldPath);
			// TODO check condition model name
			return "{sap.fe.cm>/fieldPath/" + _sFieldPath + "/valueState}";
		},

		getValueStateTextPath: function(oInterface, sEntitySet, sFieldPath) {
			var _sFieldPath = FilterField._helper.getFieldPath(oInterface, sEntitySet, sFieldPath);
			// TODO check condition model name
			return "{sap.fe.cm>/fieldPath/" + _sFieldPath + "/valueStateText}";
		},

		isRequiredInFilter: function(path, oDetails) {
			var sEntitySetPath,
				sProperty,
				bIsRequired = false,
				oFilterRestrictions,
				oModel = oDetails.context.getModel(),
				sPropertyPath = oDetails.context.getPath();

			sEntitySetPath = CommonHelper._getEntitySetPath(oModel, sPropertyPath);
			if (typeof path === "string") {
				sProperty = path;
			} else {
				sProperty = oModel.getObject(sPropertyPath + "@sapui.name");
			}
			oFilterRestrictions = oModel.getObject(sEntitySetPath + "@Org.OData.Capabilities.V1.FilterRestrictions");
			if (oFilterRestrictions && oFilterRestrictions.RequiredProperties) {
				bIsRequired = oFilterRestrictions.RequiredProperties.some(function(property) {
					return property.$PropertyPath === sProperty;
				});
			}
			return bIsRequired;
		},

		typeFormatOptions: function(path, oDetails) {
			var oFormatOptions = "{",
				iScale,
				oModel = oDetails.context.getModel(),
				sPropertyPath = oDetails.context.getPath(),
				sType = oModel.getObject(sPropertyPath + "/$Type"),
				oTextAnnotation, oTextArrangement;

			if (sType === "Edm.Date" || sType === "Edm.DateTimeOffset" || sType === "Edm.TimeOfDay") {
				// for date and time types use the short style
				oFormatOptions += "style: 'medium'";
			} else if (sType === "Edm.Decimal") {
				// for decimal type use the scale attribute of the property (metadata)
				iScale = oModel.getObject(sPropertyPath + "/$Scale") || 0;
				switch (iScale) {
					case "floating":
						oFormatOptions += "decimals: " + (oModel.getObject(sPropertyPath + "/$Precision") || 0);
						break;
					case "variable":
						break;
					default:
						oFormatOptions += "decimals: " + iScale;
				}
			}
			oTextAnnotation = oModel.getObject(sPropertyPath + "@com.sap.vocabularies.Common.v1.Text");
			if (oTextAnnotation) {
				oTextArrangement = oModel.getObject(sPropertyPath + "@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement");
				if (oFormatOptions.length > 1) {
					oFormatOptions += ", ";
				}
				if (oTextArrangement && oTextArrangement.$EnumMember) {
					switch (oTextArrangement.$EnumMember) {
						case "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast":
							oFormatOptions += "displayFormat: 'ValueDescription'";
							break;
						case "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly":
							oFormatOptions += "displayFormat: 'Description'";
							break;
						case "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate":
							oFormatOptions += "displayFormat: 'Value'";
							break;
						default:
							oFormatOptions += "displayFormat: 'DescriptionValue'";
					}
				} else {
					oFormatOptions += "displayFormat: 'DescriptionValue'";
				}
			}
			return oFormatOptions + "}";
		},

		typeConstraints: function(path, oDetails) {
			var oConstraints = "{",
				iScale, iMaxLength,
				oModel = oDetails.context.getModel(),
				sPropertyPath = oDetails.context.getPath(),
				sType = oModel.getObject(sPropertyPath + "/$Type");

			if (sType === "Edm.Decimal") {
				// for decimal type use the scale attribute of the property (metadata)
				iScale = oModel.getObject(sPropertyPath + "/$Scale") || 0;
				switch (iScale) {
					case "floating":
						oConstraints += "decimals: " + (oModel.getObject(sPropertyPath + "/$Precision") || 0);
						break;
					case "variable":
						break;
					default:
						oConstraints += "decimals: " + iScale;
				}
			} else if (sType === "Edm.String") {
				iMaxLength = oModel.getObject(sPropertyPath + "/$MaxLength");
				if (iMaxLength) {
					oConstraints += "maxLength: " + iMaxLength;
				}
				if (oModel.getObject(sPropertyPath + "@com.sap.vocabularies.Common.v1.IsUpperCase")) {
					if (oConstraints.length > 1) {
						oConstraints += ", ";
					}
					oConstraints += "toUpperCase: true";
				}

			}
			return oConstraints + "}";
		},

		getValueListCollectionEntitySet: function(oValueListContext) {
			var mValueList = oValueListContext.getObject();
			return mValueList.$model.getMetaModel().createBindingContext("/" + mValueList.CollectionPath);
		},

		getValueListProperty: function(oPropertyContext) {
			var oValueListModel = oPropertyContext.getModel();
			var mValueList = oValueListModel.getObject("/");
			return mValueList.$model.getMetaModel().createBindingContext('/' + mValueList.CollectionPath + '/' + oPropertyContext.getObject());
		}
	};

	FilterField._helper.getFieldPath.requiresIContext = true;
	FilterField._helper.getValueStatePath.requiresIContext = true;
	FilterField._helper.getValueStateTextPath.requiresIContext = true;

	return FilterField;

}, /* bExport= */ true);

}; // end of sap/ui/mdc/FilterField.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.Table') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.Table'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.ListMode'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v4.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/Table",[
	"./library",
	'sap/ui/mdc/XMLComposite',
	'sap/ui/mdc/internal/table/gridtable/GridTable.controller',
	'sap/ui/mdc/internal/table/responsivetable/ResponsiveTable.controller',
	'sap/ui/mdc/internal/field/Field.controller',
	"sap/m/ListMode",
	'sap/ui/mdc/Field',
	'sap/ui/model/odata/v4/AnnotationHelper'

], function (Library, XMLComposite, GridTableController, ResponsiveTableController, FieldController, ListMode) {
	"use strict";

	var GridTableName = "sap.ui.table.Table",
		ResponsiveTableName = 'sap.m.Table';

	var Table = XMLComposite.extend("sap.ui.mdc.Table", {
		metadata: {
			designTime: true,
			specialSettings: {
				metadataContexts: {
					defaultValue: "{ model: 'entitySet', path:'',  name: 'entitySet'},{model: 'sap.fe.deviceModel', path: '/', name: 'sap.fe.deviceModel'}"
				}
			},
			properties: {
				tableBindingPath: {
					type: "string",
					invalidate: "template"
				},
				type: {
					type: "string",
					defaultValue: "ResponsiveTable",
					invalidate: "template"
				},
				interactionType: {
					type: "string",
					defaultValue: "Inactive",
					invalidate: "template"
				},
				settingsDialogType: {
					type: "string",
					defaultValue: "ViewSettings"
				},
				enabled: {
					type: "boolean",
					defaultValue: true,
					invalidate: false
				},
				growingThreshold: {
					type: "string",
					defaultValue: "50",
					invalidate: "template"
				},
				growingScrollToLoad: {
					type: "boolean",
					defaultValue: true,
					invalidate: false
				},
				listBindingName: {
					type: "string",
					invalidate: false
				},
				/**
				 * The demandPopin attribute can be set to true or false depending on whether you want to display columns as popins on the responsive
				 * table
				 */
				demandPopin: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			events: {
				"itemPress": {},
				"callAction": {},
				"showError": {}
			},
			publicMethods: []
		},
		fragment: "sap.ui.mdc.internal.table.Table"
	});

	var fnInitialize = function () {
		if (!this.bInitialized) {
			this.oTableController.setSelectionMode();
			this.oTableController.enableDisableActions();
			this.oTableController.bindTableCount();
			this.bInitialized = true;
			this.detachModelContextChange(fnInitialize);
		}
	};


	Table.prototype.init = function () {
		XMLComposite.prototype.init.call(this);

		var oInnerTable = this.getInnerTable(),
			sControlName = oInnerTable.getMetadata().getName();
		if ([GridTableName, ResponsiveTableName].join(" ").indexOf(sControlName) > -1) {
			if (sControlName === GridTableName) {
				this.oTableController = new GridTableController(this);
			} else {
				this.oTableController = new ResponsiveTableController(this);
			}
			this.oFieldController = new FieldController(null, this);
			this.attachModelContextChange(fnInitialize);

		}
	};

	Table.prototype.getInnerTable = function () {
		/*
		 get access to the rendered table - currently it's the second one in the layout. whenever we change the
		 layout we need to adapt this coding. Going upwards to the the view and to access it via ID would take
		 much longer. Any other ideas are welcome
		 */
		return this.get_content();
	};

	Table.prototype.handleDataRequested = function (oEvent) {
		this.oTableController.handleDataRequested(oEvent);
	};

	Table.prototype.handleDataReceived = function (oEvent) {
		this.oTableController.handleDataReceived(oEvent);
	};

	Table.prototype.handleSelectionChange = function (oEvent) {
		this.oTableController.enableDisableActions();
	};

	Table.prototype.handleItemPress = function (oEvent) {
		this.fireItemPress({listItem: oEvent.getParameter("listItem")});
	};

	Table.prototype.handleCallAction = function (oEvent) {
		this.oTableController.handleCallAction(oEvent);
	};

	Table.prototype.getSelectedContexts = function () {
		var oInnerTable = this.getInnerTable();
		var aSelectedContext = [];
		if (oInnerTable.getMetadata().getName() === GridTableName) {
			var aSeletedIndices = oInnerTable.getSelectedIndices();
			for (var index in aSeletedIndices) {
				aSelectedContext.push(oInnerTable.getContextByIndex(index));
			}
		} else {
			aSelectedContext = oInnerTable.getSelectedContexts();
		}

		return aSelectedContext;
	};

	Table.prototype.getEntitySet = function () {
		var sListBindingPath = this.getListBinding().getPath();
		// return the path without the / - this works for absolute bindings only
		// this needs to be enhanced once relative bindings are supported as well
		return sListBindingPath.substr(1);
	};

	Table.prototype.getListBinding = function () {
		return this.oTableController.getListBinding();
	};

	Table.prototype.getListBindingInfo = function () {
		return this.oTableController.getListBindingInfo();
	};

	Table.prototype.setShowOverlay = function () {
		this.getInnerTable().setShowOverlay(true);
	};

	Table.prototype.onStandardActionClick = function (oEvent) {
		this.oTableController.onStandardActionClick(oEvent);
	};

	/* Delegate field events to the field controller */
	Table.prototype.onContactDetails = function (oEvent) {
		this.oFieldController.onContactDetails(oEvent);
	};
	Table.prototype.onDraftLinkPressed = function (oEvent) {
		this.oFieldController.onDraftLinkPressed(oEvent);
	};
	Table.prototype.onDataFieldWithIntentBasedNavigationPressed = function (oEvent) {
		this.oFieldController.onDataFieldWithIntentBasedNavigationPressed(oEvent);
	};
	Table.prototype._updateColumnsPopinFeature = function () {
		if (!this.getDemandPopin()) {
			return;
		}

		var aColumns = this.getInnerTable().getColumns();
		if (!aColumns) {
			return;
		}

		// get only visible columns
		aColumns = aColumns.filter(function (col) {
			return col.getVisible();
		});

		// sort columns according to their order property
		aColumns.sort(function (col1, col2) {
			return col1.getOrder() - col2.getOrder();
		});

		var oColumn, iLength = aColumns.length;

		for (var i = 0; i < iLength; i++) {
			oColumn = aColumns[i];
			if (i < 2) { // ensure always two columns
				oColumn.setDemandPopin(false);
				oColumn.setMinScreenWidth("1px");
			} else {
				oColumn.setDemandPopin(true);
				if (oColumn.getPopinDisplay() != "WithoutHeader") {
					oColumn.setPopinDisplay(sap.m.PopinDisplay.Inline);
				}
				oColumn.setMinScreenWidth((i + 1) * 10 + "rem");
			}
		}
	};

	Table.prototype._deactivateColumnsPopinFeature = function () {

		var aColumns = this._oTable.getColumns();
		if (!aColumns) {
			return;
		}

		var oColumn, iLength = aColumns.length;

		for (var i = 0; i < iLength; i++) {
			oColumn = aColumns[i];
			oColumn.setDemandPopin(false);
			oColumn.setMinScreenWidth("1px");
		}
	};

	Table.prototype.setDemandPopin = function (bDemandPopin) {
		var bOldValue = this.getDemandPopin();
		if (bOldValue === bDemandPopin) {
			return;
		}

		this.setProperty("demandPopin", bDemandPopin, true);

		if (bDemandPopin) {
			this._updateColumnsPopinFeature();
		} else {
			this._deactivateColumnsPopinFeature();
		}
	};

	// STATIC HELPER FOR CONTROL TEMPLATE//
	Table._helper = {
		createAggregationBinding: function (oInterface, oEntitySet, sTableBindingPath, sListBindingName) {
			if (sTableBindingPath) {
				return '{' + sTableBindingPath + '}';
			}

			var sExpand = '',
				oMetaContext = oInterface.getInterface(0),
				oMetaModel = oMetaContext.getModel(),
				sEntitySet = oMetaModel.getObject(oMetaContext.getPath() + "@sapui.name"),
				sNamedBinding = sListBindingName ? "id: '" + sListBindingName + "', " : '';

			if (oMetaContext.getModel().getObject(oMetaContext.getPath() + "@com.sap.vocabularies.Common.v1.DraftRoot")) {
				sExpand = "$expand : 'DraftAdministrativeData'";
			}

			return "{ path : '/" + sEntitySet + "', parameters : { " + sNamedBinding + " $count : true " + (sExpand ? ',' : '') + sExpand + "}, events : {dataRequested : '.handleDataRequested', dataReceived : '.handleDataReceived'} }";
		},

		getSelectionMode : function (oContext, oEntitySet, oWorkingContext) {
			oContext = oContext.getInterface(0);

			//var aLineItems = oContext.getModel().getObject(oWorkingContext['@com.sap.vocabularies.UI.v1.LineItem']) || [];
			var aLineItems = oWorkingContext['@com.sap.vocabularies.UI.v1.LineItem'];
			for (var i = 0; i < aLineItems.length; i++) {
				if (aLineItems[i].$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" && !aLineItems[i].Inline) {
					return sap.m.ListMode.MultiSelect;
				}
			}

			return ListMode.None;
		},

		formatDraftLockText : function (IsActiveEntity, HasDraftEntity, LockedBy) {
			if (!IsActiveEntity) {

				return sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc").getText("draft.DRAFT_OBJECT");
			} else if (HasDraftEntity) {
				if (LockedBy) {
					return Library.getText("draft.LOCKED_OBJECT");
				} else {
					return Library.getText("draft.UNSAVED_CHANGES");
				}
			} else {
				return ""; // not visible
			}
		}

	};

	Table._helper.createAggregationBinding.requiresIContext = true;
	Table._helper.getSelectionMode.requiresIContext = true;

	return Table;

}, /* bExport= */true);

}; // end of sap/ui/mdc/Table.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.FilterBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.FilterBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/FilterBar",[
	"./library",
	'sap/ui/mdc/XMLComposite',
	'sap/ui/base/ManagedObject',
	'sap/ui/Device',
	"sap/ui/mdc/internal/common/Helper",
	"sap/ui/mdc/FilterField",
	"sap/m/SearchField",
	'sap/ui/mdc/base/ConditionModel'
], function (Library, XMLComposite, ManagedObject, Device, CommonHelper, FilterField, SearchField, ConditionModel) {
	"use strict";
	var FilterBar = XMLComposite.extend("sap.ui.mdc.FilterBar", {
		metadata: {
			designTime: true,
			specialSettings: {
				metadataContexts: {
					defaultValue: "{ model: 'entitySet', path:'',  name: 'entitySet'},{model: 'sap.fe.deviceModel', path: '/', name: 'sap.fe.deviceModel'}"
				}
			},
			properties: {
				liveUpdate: {
					type: "boolean",
					defaultValue: !Device.system.phone, // filtering should be via Go button on phone by default
					invalidate: "template"
				},
				searchOnStart: {
					type: "boolean",
					defaultValue: true,
					invalidate: "template"
				},
				filterSummary: {
					type: "string",
					defaultValue: "",
					invalidate: false
				},
				enabled: {
					type: "boolean",
					defaultValue: true,
					invalidate: false
				},
				conditionModelName: {
					type: "string",
					defaultValue: "sap.fe.cm",
					invalidate: false
				},
				// comma separated list of named binding ids, currently only one is supported
				listBindingNames: {
					type: "string[]",
					invalidate: false
				}
			},
			events: {
				search: {},
				change: {}
			},
			aggregations: {},
			publicMethods: []
		},
		fragment: "sap.ui.mdc.internal.filterbar.FilterBar"
	});


	var fnSearch = function(oEvent){
		var oConditionModel = this._getConditionModel(),
			oModel = this.getModel(),
			aListBindingNames, sSearchString, bFilterWithoutErrors;

		bFilterWithoutErrors = oConditionModel.applyFilters();

		if (bFilterWithoutErrors && oModel.getBindingForReference){
			var oSearchControl = this._getSearchControl();
			if (oSearchControl){
				sSearchString = oSearchControl.getValue() || undefined;
				aListBindingNames = this.getListBindingNames();

				aListBindingNames.forEach(function(sListBindingName){
					oModel.getBindingForReference(sListBindingName).then(function(oListBinding){
						oListBinding.changeParameters({
							$search : sSearchString
						});
					});
				});
			}
		}
	};

	FilterBar.prototype.init = function () {
		XMLComposite.prototype.init.call(this);

		var that = this;
		this._bIsReady = false;
		this.attachSearch(fnSearch);

		this._requestConditionModel().then(function(oConditionModel){
			if (!that.bInitialized) {
				that.bInitialized = true;

				var oConditionChangeBinding = oConditionModel.bindProperty("/", oConditionModel.getContext("/"));
				oConditionChangeBinding.attachChange(that.handleChange.bind(that));

				if (that.getSearchOnStart() && that.getEnabled()) {
					that._bIsReady = true;
					that.fireSearch();
				}

				if (!that.getEnabled()) {
					that._getInnerFilterBar().setBusy(true);
				}
			}
		});

	};

	FilterBar.prototype.onBeforeRendering = function () {
		this._setFilterSummary();
	};

	FilterBar.prototype.setEnabled = function (bEnabled) {
		this._getInnerFilterBar().setBusy(!bEnabled);
		this.setProperty("enabled", bEnabled);

		if (bEnabled) {
			if (this.bInitialized && this.getSearchOnStart()) {
				this._bIsReady = true;
				this.fireSearch();
			}
		}
	};

	FilterBar.prototype.isReady = function () {
		/* tells the connected controls if the filter bar is ready
		 ready = table is set to immediately search / user clicked on GO
		 = the control and all filter items are instanced
		 = the app state is applied if existing
		 = the (default) variant is loaded if existing
		 better name for method is welcome :-)
		 */
		return this._bIsReady;
	};

	FilterBar.prototype.getAppState = function () {
		// TODO: this only works if the condition model is created
		//       we should think about using request condition model as well and convert this into async
		var oConditionModel = this._getConditionModel(),
			oDraftEditState = this._getDraftEditStateControl(),
			oSearch = this._getSearchControl(),
			oAppState = {};

		if (oConditionModel) {
			oAppState.conditionModel = oConditionModel.serialize();
		}

		if (oDraftEditState) {
			oAppState.draftEditState = oDraftEditState.getSelectedKey();
		}

		if (oSearch) {
			oAppState.search = oSearch.getValue();
		}

		return oAppState;
	};

	FilterBar.prototype.setAppState = function (oAppState) {
		var that = this;

		return this._requestConditionModel().then(function(oConditionModel){
			var oDraftEditState = that._getDraftEditStateControl(),
				oSearch = that._getSearchControl();

			if (oAppState.conditionModel) {
				if (oConditionModel) {
					oConditionModel.parse(oAppState.conditionModel);
				} else {
					throw ("app state contains condition model state but condition model not yet set");
				}
			}

			if (oAppState.draftEditState && oDraftEditState) {
				oDraftEditState.setSelectedKey(oAppState.draftEditState);
			}

			if (oAppState.search && oSearch) {
				oSearch.setValue(oAppState.search);
			}

			if (!that.getLiveUpdate()) {
				that.handleGo();
			}
		});
	};

	/********** EVENT HANDLER ***************************************/

	FilterBar.prototype.handleChange = function () {
		// this event is fired once the user changed any filter and the live update is set
		// also it's only fired if it's enabled - in case it's disabled changes can not be done by the user - for
		// example via setting the app state - and no event is expected
		if (this.getLiveUpdate() && this.getEnabled()) {
			this.fireSearch();
			this._setFilterSummary();
			this.fireChange();
		} else {
			this._bIsReady = false;
			this.fireChange();
		}
	};

	FilterBar.prototype.handleSearch = function (oEvent) {
		// this event is fired when the user clicks enter in the search field or on the search icon
		this.fireSearch();
		this._setFilterSummary();
		this.fireChange();
	};

	FilterBar.prototype.handleSearchChange = function (oEvent) {
		// the live search is triggered but only if the user didn't type for a given time frame (400ms)
		var that = this,
			iSearchCounter;

		if (that._iSearchCounter){
			that._iSearchCounter++;
		} else {
			that._iSearchCounter = 1;
		}

		iSearchCounter = that._iSearchCounter;

		if (this.getLiveUpdate()) {
			setTimeout(function(){
				if (iSearchCounter === that._iSearchCounter){
					that.fireSearch();
					that._setFilterSummary();
					that.fireChange();
					delete that._iSearchCounter;
				}
			}, 400);
		} else {
			this._bIsReady = false;
			this.fireChange();
		}
	};

	FilterBar.prototype.handleGo = function () {
		this._bIsReady = true;
		this.fireSearch();
		this._setFilterSummary();
		this.fireChange();
	};

	/********** PRIVATE METHODS *************************/

	FilterBar.prototype._getInnerFilterBar = function () {
		return this.get_content();
	};

	FilterBar.prototype._setFilterSummary = function () {
		var oSearch = this._getSearchControl(),
			oDraftEditState = this._getDraftEditStateControl(),
			sSearch, sFilterSummary = "", aFilter = [], i;

		if (oSearch) {
			sSearch = oSearch.getValue();
		}

		if (sSearch) {
			sFilterSummary = Library.getText("filterbar.SEARCHBY") + ": " + sSearch + ((aFilter.length > 0) ? " | " : "");
		}

		if (oDraftEditState && oDraftEditState.getSelectedKey() !== '0') {
			aFilter.push(Library.getText("filterbar.EDITING_STATUS"));
		}

		var aFilterFields = this._getFilterFieldControls();

		for (i = 0; i < aFilterFields.length; i++) {
			if (aFilterFields[i].getConditions().length > 0) {
				// we park the title of the filter in the custom data - this will be changed with the next release
				aFilter.push(aFilterFields[i].getCustomData()[0].getValue());
			}
		}

		if (aFilter.length > 0) {
			sFilterSummary += Library.getText("filterbar.FILTERBY") + " (" + aFilter.length + "): ";
			for (i = 0; i < aFilter.length; i++) {
				sFilterSummary += ((i > 0) ? ', ' : '') + aFilter[i];
			}
		}

		if (!sFilterSummary) {
			sFilterSummary = Library.getText("filterbar.FILTERBYNONE");
		}

		this.setFilterSummary(sFilterSummary);

	};

	FilterBar.prototype._requestConditionModel = function () {
		var oConditionModel = this._getConditionModel(),
			that = this;

		if (oConditionModel) {
			return Promise.resolve(oConditionModel);
		} else {
			return new Promise(function (fnResolve) {
				var oModel = that.getModel();

				var fnCreateConditionModel = function(){
					var oModel, oConditionModel, aNamedBindings;

					that.detachModelContextChange(fnCreateConditionModel);


					oConditionModel = that.getModel(that.getConditionModelName());
					if (oConditionModel){
						// possible that another thread already created the condition model
						return Promise.resolve(oConditionModel);
					} else {
						oModel = oModel || that.getModel();
						aNamedBindings = that.getListBindingNames();

						//create the condition model only if named bindings are available
						if (aNamedBindings && oModel.getBindingForReference) {
							aNamedBindings.forEach(function(sNamedListBinding) {
								oModel.getBindingForReference(sNamedListBinding).then(function(oListBinding){
									oConditionModel = ConditionModel.getFor(oListBinding);
									this.setModel(oConditionModel, this.getConditionModelName());
									fnResolve(oConditionModel);
								}.bind(this));
							}.bind(that));
						}
					}
				};

				if (oModel){
					fnCreateConditionModel();
				} else {
					that.attachModelContextChange(fnCreateConditionModel);
				}
			});
		}
	};

	FilterBar.prototype._getConditionModel = function () {
		return this.getModel(this.getConditionModelName());
	};

	FilterBar.prototype._getDraftEditStateControl = function () {
		var aContent = this._getInnerFilterBar().getContent();
		var oFilterItem;

		for (var i = 0; i < aContent.length; i++) {
			if (!(aContent[i] instanceof FilterField) && aContent[i].getItems) {
				oFilterItem = aContent[i].getItems()[1];
				if (oFilterItem.getBinding("items") && oFilterItem.getBinding("items").getPath() === "/editStates" && oFilterItem.getBinding("items").getModel() === oFilterItem.getModel("$draft")) {
					return oFilterItem;
				}
			}
		}
	};

	FilterBar.prototype._getSearchControl = function () {
		var aContent = this._getInnerFilterBar().getContent();
		var oFilterItem;

		for (var i = 0; i < aContent.length; i++) {
			oFilterItem = aContent[i].getItems()[1];
			if (oFilterItem instanceof SearchField) {
				return oFilterItem;
			}
		}
	};

	FilterBar.prototype._getFilterFieldControls = function () {
		// FIXME: this returns the MDC Filter Fields, this is required by some methods
		// TODO: check if this is needed at all
		// we should return the sap.fe.filterFields and provide the needed methods here so no other method is accessing
		// the mdc field directly
		var aContent = this._getInnerFilterBar().getContent();
		var oFilterField,
			aFilterFields = [];

		for (var i = 0; i < aContent.length; i++) {
			oFilterField = aContent[i];
			if (oFilterField instanceof FilterField) {
				aFilterFields.push(oFilterField.get_content().getItems()[1]);
			}
		}

		return aFilterFields;
	};

	/********** STATIC HELPER FOR CONTROL TEMPLATE *************************/

	FilterBar._helper = {
		isPropertyFilterable: function (oContext, property) {
			var sEntitySetPath,
				sProperty,
				bIsNotFilterable = false,
				oModel = oContext.getModel(),
				sPropertyPath = oContext.getPath();

			if (oModel.getObject(sPropertyPath + "@com.sap.vocabularies.UI.v1.Hidden")) {
				return false;
			}
			if (oModel.getObject(sPropertyPath + "@com.sap.vocabularies.UI.v1.HiddenFilter")) {
				return false;
			}

			sEntitySetPath = CommonHelper._getEntitySetPath(oModel, sPropertyPath);
			if (typeof (property) === "string") {
				sProperty = property;
			} else {
				sProperty = oModel.getObject(sPropertyPath + "@sapui.name");
			}
			if (sProperty.indexOf("/") < 0) {
				bIsNotFilterable = FilterBar._helper._isInNonFilterableProperties(oModel, sEntitySetPath, sProperty);
			} else {
				bIsNotFilterable = FilterBar._helper._isContextPathFilterable(oModel, sEntitySetPath, sProperty);
			}

			return !bIsNotFilterable;
		},

		isNavPropertyFilterable: function (oContext, navProperty) {
			var sEntitySetPath,
				sContext,
				bIsNotFilterable = false,
				sPropertyPath = oContext.getPath(),
				oModel = oContext.getModel();

			sEntitySetPath = CommonHelper._getEntitySetPath(oModel, sPropertyPath);
			sContext = sPropertyPath.slice(sEntitySetPath.length + 1);
			if (sContext.indexOf("/") < 0) {
				bIsNotFilterable = FilterBar._helper._isInNonFilterableProperties(oModel, sEntitySetPath, sContext);
			} else {
				bIsNotFilterable = FilterBar._helper._isContextPathFilterable(oModel, sEntitySetPath, sContext);
			}
			return !bIsNotFilterable;
		},

		_isInNonFilterableProperties: function (oModel, sEntitySetPath, sContextPath) {
			var bIsNotFilterable = false;
			var oAnnotation = oModel.getObject(sEntitySetPath + "@Org.OData.Capabilities.V1.FilterRestrictions");
			if (oAnnotation && oAnnotation.NonFilterableProperties) {
				bIsNotFilterable = oAnnotation.NonFilterableProperties.some(function(property) {
					return property.$NavigationPropertyPath === sContextPath || property.$PropertyPath === sContextPath;
				});
			}
			return bIsNotFilterable;
		},

		_isContextPathFilterable: function (oModel, sEntitySetPath, sContexPath) {
			var aContext = sContexPath.split("/"),
				bIsNotFilterable = false,
				sContext = "";

			aContext.some(function(item, index, array) {
				if (sContext.length > 0) {
					sContext += "/" + item;
				} else {
					sContext = item;
				}
				if (index === array.length - 1) {
					//last path segment
					bIsNotFilterable = FilterBar._helper._isInNonFilterableProperties(oModel, sEntitySetPath, sContext);
				} else if (oModel.getObject(sEntitySetPath + "/$NavigationPropertyBinding/" + item)) {
					//check existing context path and initialize it
					bIsNotFilterable = FilterBar._helper._isInNonFilterableProperties(oModel, sEntitySetPath, sContext);
					sContext = "";
					//set the new EntitySet
					sEntitySetPath = "/" + oModel.getObject(sEntitySetPath + "/$NavigationPropertyBinding/" + item);
				}
				return bIsNotFilterable === true;
			});
			return bIsNotFilterable;
		},
		replaceSpecialCharsInId : function(sId){
			return CommonHelper.replaceSpecialCharsInId(sId);
		}
	};

	FilterBar._helper.isNavPropertyFilterable.requiresIContext = true;
	FilterBar._helper.isPropertyFilterable.requiresIContext = true;

	return FilterBar;

}, /* bExport= */true);

}; // end of sap/ui/mdc/FilterBar.js
