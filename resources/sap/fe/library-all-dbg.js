// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.fe.library-all');
if ( !jQuery.sap.isDeclared('sap.fe.controller.ActionController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.controller.ActionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/fe/controller/ActionController",[
	"jquery.sap.global",
	"sap/ui/base/Object"
//	"sap/ui/core/mvc/Controller"
], function (jQuery, BaseObject) {
	"use strict";

	function getMethods(oTemplateUtils) {
		var oMessageUtils = oTemplateUtils.getMessageUtils();

		/*
		 Call Action
		 */

		function callAction(oEvent) {
			var mParameters = oEvent.getParameters(),
				fnSuccess = mParameters.success,
				fnError = mParameters.error,
				aContexts = mParameters.contexts,
				oModel = aContexts[0].getModel(),
				oAction,
				oBusyPromise,
				aActionPromises = [],
				sAction = mParameters.actionName + "(...)",
				bChangeSet = mParameters.mode === 'ChangeSet',
				sGroupId,
				i;

			if (mParameters.checkBusy) {
				if (oTemplateUtils && oTemplateUtils.getBusyHelper().isBusy()) {
					return fnError ? fnError("Application is busy") : jQuery.noop();
				}
			}

			for (i = 0; i < aContexts.length; i++) {
				oAction = oModel.bindContext(sAction, aContexts[i]);

				if (aContexts.length === 1) {
					aActionPromises.push(oAction.execute('$auto'));
					oBusyPromise = aActionPromises[0];
				} else {
					sGroupId = (bChangeSet) ? '$direct' : 'action' + i;
					aActionPromises.push(oAction.execute(sGroupId));
				}
			}

			if (aContexts.length > 1) {
				if (bChangeSet) {
					oBusyPromise = oModel.submitBatch("actions");
				} else {
					// temp solution only, to be clarified with OData model colleagues,
					// until then we pass the busy helper only the last promise which should be OK for now
					for (i = 0; i < aContexts.length; i++) {
						oBusyPromise = oModel.submitBatch("action" + i);
					}
				}

				if (mParameters.setBusy && oTemplateUtils) {
					oTemplateUtils.getBusyHelper().setBusy(oBusyPromise);
				}
			} else if (mParameters.setBusy && oTemplateUtils) {
				oTemplateUtils.getBusyHelper().setBusy(oBusyPromise);
			}

			function fnDifferentiate(promise) {
				return promise.then(function (v) {
						return {v: v, status: "resolved"};
					},
					function (e) {
						return {e: e, status: "rejected"};
					});
			}

			Promise.all(aActionPromises.map(fnDifferentiate)).then(function (results) {
				var rejectedItems = [];
				var iResultCount;
				for (iResultCount = 0; iResultCount < results.length; iResultCount++) {
					if (results[iResultCount].status === "rejected") {
						rejectedItems.push(results[iResultCount].e);
					}
				}
				if (rejectedItems.length > 0) {
					oMessageUtils.handleRequestFailed(rejectedItems);
				}

				for (iResultCount = 0; iResultCount < results.length; iResultCount++) {
					if (results[iResultCount].status === "resolved") {
						oMessageUtils.handleSuccess(oTemplateUtils.getText("SAPFE_ACTION_SUCCESS", mParameters.actionLabel));

						// This is needed because the OData model does not update the returned data, already requested
						// from the OData model. as this anyway refreshes the complete list binding we
						// take the first selected context and refresh the binding, this refreshes the table
						aContexts[0].getBinding().refresh("$auto");

						fnSuccess ? fnSuccess() : jQuery.noop();
					}
				}
			});
		}

		return {
			callAction: callAction
		};
	}

	return BaseObject.extend(
		"sap.fe.controller.ActionController", {
			constructor: function (oTemplateUtils) {
				jQuery.extend(this, getMethods(oTemplateUtils));
			}
		});
});

}; // end of sap/fe/controller/ActionController.js
if ( !jQuery.sap.isDeclared('sap.fe.controller.NavigationController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.controller.NavigationController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePage'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
sap.ui.define("sap/fe/controller/NavigationController",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/m/MessageBox",
	"sap/m/MessageToast",
	"sap/m/MessagePage",
	"sap/m/Link"
], function (jQuery, BaseObject, MessageBox, MessageToast, MessagePage, Link) {
	"use strict";

	function getMethods(oTemplateContract, oTemplateUtils) {
		// Please note: oTemplateUtils is undefined in case the navigation controller is used before any template
		// is instantiated - so be prepared for this

		var oMessagePage;

		function navigateToMessagePage(mParameters) {
			if (!oMessagePage) {
				oMessagePage = new MessagePage({
					showHeader: false
				});

				oTemplateContract.oNavContainer.addPage(oMessagePage);
			}

			oMessagePage.setText(mParameters.text);
			oMessagePage.setIcon("sap-icon://message-error");
			if (mParameters.technicalMessage) {
				oMessagePage.setCustomDescription(
					new Link({
						text: mParameters.description,
						press: function() {
							MessageBox.show(mParameters.technicalMessage, {
								icon: MessageBox.Icon.ERROR,
								title: "Error",
								actions: [MessageBox.Action.OK],
								defaultAction: MessageBox.Action.OK,
								details: mParameters.technicalDetails || "",
								contentWidth: "60%"
							});
						}
					})
				);
			} else {
				oMessagePage.setDescription(mParameters.description || '');
			}
			oTemplateContract.oNavContainer.to(oMessagePage);

		}

		return {
			navigateToMessagePage: navigateToMessagePage
		};
	}

	return BaseObject.extend(
		"sap.fe.controller.NavigationController.js", {
			constructor: function (oTemplateContract, oTemplateUtils) {
				jQuery.extend(this, getMethods(oTemplateContract, oTemplateUtils));
			}
		});
});

}; // end of sap/fe/controller/NavigationController.js
if ( !jQuery.sap.isDeclared('sap.fe.core.AnnotationHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

(function () {
	"use strict";

	/*
	 This class contains annotation helpers that might be used from several templates or controls
	 */

	jQuery.sap.declare("sap.fe.core.AnnotationHelper");

	sap.fe.core.AnnotationHelper = {
		/* this helper can be activated to debug template processing
		 debug: function (oContext) {
		 //debugger;
		 },
		 */

		/*
		 getUI5Type : function(oInterface, sEntitySet, sFilterItemPath){
		 var oMetaModel = oInterface.getInterface(0).getModel();
		 if (typeof sFilterItemPath === 'object'){
		 // we need to get the filterItem name via @sapui.name
		 sFilterItemPath = oMetaModel.getObject(oInterface.getInterface(1).getPath() + '@sapui.name');
		 }

		 return oMetaModel.getUI5Type("/" + sEntitySet + "/" + sFilterItemPath).getName();
		 },
		 */

		getLineItemPresentation: function (oParamModel) {
			var mParameter = oParamModel.getObject();
			var oMetaModel = mParameter.metaModel;
			var oModel = oParamModel.getModel();
			var oWorkingContext;
			if (oModel.getProperty("/workingContext")) {
				oWorkingContext = oModel.getProperty("/workingContext");
			} else {
				oWorkingContext = sap.fe.core.AnnotationHelper._getWorkingContext(oMetaModel, mParameter.entitySet, undefined);
				oModel.setProperty("/workingContext", oWorkingContext);
			}
			return oMetaModel.getMetaContext(oWorkingContext.lineItemPath);
		},

		getChartPresentation: function (oParamModel) {
			var mParameter = oParamModel.getObject();
			var oMetaModel = mParameter.metaModel;
			var oModel = oParamModel.getModel();
			var oWorkingContext;
			if (oModel.getProperty("/workingContext")) {
				oWorkingContext = oModel.getProperty("/workingContext");
			} else {
				oWorkingContext = sap.fe.core.AnnotationHelper._getWorkingContext(oMetaModel, mParameter.entitySet, undefined);
				oModel.setProperty("/workingContext", oWorkingContext);
			}
			return oMetaModel.getMetaContext(oWorkingContext.chartPath);
		},

		_getWorkingContext: function (oMetaModel, sEntitySet, sQualifier) {
			var sAnnotationPath,
				oWorkingContext = {},
				selectionPresentationVariant,
				presentationVariant,
				sEntitySetPath = '/' + sEntitySet;

			/* Find SelectionPresentationVariant */
			sAnnotationPath = sEntitySetPath + "/@com.sap.vocabularies.UI.v1.SelectionPresentationVariant" + (sQualifier ? "#" + sQualifier : "");
			oWorkingContext.selectionPresentationVariant = oMetaModel.getObject(sAnnotationPath);
			oWorkingContext.selectionPresentationVariantQualifier = sAnnotationPath.split("#")[1] || "";
			oWorkingContext.selectionPresentationVariantPath = sAnnotationPath;
			selectionPresentationVariant = oWorkingContext.selectionPresentationVariant;
			/* Find PresentationVariant */
			if (selectionPresentationVariant && selectionPresentationVariant.PresentationVariant) {
				if (selectionPresentationVariant.PresentationVariant.$Path) {
					//Path for PV is specified
					sAnnotationPath = sEntitySetPath + "/" + selectionPresentationVariant.PresentationVariant.$Path;
				} else {
					//PV is defined inline and NOT via path
					sAnnotationPath = sAnnotationPath + "/PresentationVariant";
				}
			} else {
				sAnnotationPath = sEntitySetPath + "/@com.sap.vocabularies.UI.v1.PresentationVariant" + (sQualifier ? "#" + sQualifier : "");
			}
			if (typeof sAnnotationPath === "string") {
				oWorkingContext.presentationVariant = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.presentationVariantPath = sAnnotationPath;
				oWorkingContext.presentationVariantQualifier = sAnnotationPath.split("#")[1] || "";
				presentationVariant = oWorkingContext.presentationVariant;
			}
			/* Determine LineItem and Chart via PV */
			if (presentationVariant && presentationVariant.Visualizations) {
				presentationVariant.Visualizations.forEach(function (visualization) {
					sAnnotationPath = sEntitySetPath + '/' + visualization.$AnnotationPath;
					if (visualization.$AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.LineItem") > -1) {
						oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
						oWorkingContext.lineItemPath = sAnnotationPath;
						oWorkingContext.lineItemQualifier = sAnnotationPath.split("#")[1] || "";
					}
					if (visualization.$AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.Chart") > -1) {
						oWorkingContext.chart = oMetaModel.getObject(sAnnotationPath);
						oWorkingContext.chartPath = sAnnotationPath;
						oWorkingContext.chartQualifier = sAnnotationPath.split("#")[1] || "";
					}
				});
			}

			/* Fall back to defaults without qualifier */
			if (!oWorkingContext.lineItem) {
				sAnnotationPath = sEntitySetPath + "/@com.sap.vocabularies.UI.v1.LineItem";
				oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.lineItemPath = sAnnotationPath;
				oWorkingContext.lineItemQualifier = "";
			}
			if (!oWorkingContext.chart) {
				sAnnotationPath = sEntitySetPath + "/@com.sap.vocabularies.UI.v1.Chart";
				oWorkingContext.chart = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.chartPath = sAnnotationPath;
				oWorkingContext.chartQualifier = "";
			}
			return oWorkingContext;
		},

		hasNavigation: function (oParamModel) {
			/*
			 this is a very basic implementation, it just checks if for the entity set a entry default configuration
			 with an outbound is defined - this is currently the only situation in which we support navigation.
			 this coding needs to be enhanced in the future
			 */
			var oEntitySet = oParamModel.manifest["sap.fe"].entitySets[oParamModel.entitySet];

			return oEntitySet && oEntitySet.entry && oEntitySet.entry.default && oEntitySet.entry.default.outbound || false;

		},

		replaceSpecialCharsInId: function (sId) {
			if (sId.indexOf(" ") >= 0) {
				jQuery.sap.log.error("Annotation Helper: Spaces are not allowed in ID parts. Please check the annotations, probably something is wrong there.");
			}
			return sId.replace(/@/g, "").replace(/\//g, "::").replace(/#/g, "::");
		}
	};

	sap.fe.core.AnnotationHelper.getLineItemPresentation.requiresIContext = true;
	sap.fe.core.AnnotationHelper.getChartPresentation.requiresIContext = true;
	// sap.fe.core.AnnotationHelper.isRequiredInFilter.requiresIContext = true;

})();

}; // end of sap/fe/core/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.core.CommonUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.CommonUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.View'); // unlisted dependency retained
sap.ui.define("sap/fe/core/CommonUtils",[
	"sap/ui/core/mvc/View"
], function (View) {
	"use strict";
	function fnGetParentViewOfControl(oControl) {
		while (oControl && !(oControl instanceof View)) {
			oControl = oControl.getParent();
		}
		return oControl;
	}

	return {
		getParentViewOfControl: fnGetParentViewOfControl
	};
});

}; // end of sap/fe/core/CommonUtils.js
if ( !jQuery.sap.isDeclared('sap.fe.core.MessageUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.MessageUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageView'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.message.MessageModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Page'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
sap.ui.define("sap/fe/core/MessageUtils",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/m/MessageToast",
	"sap/m/MessageItem",
	"sap/m/MessageView",
	"sap/ui/layout/form/SimpleForm",
	"sap/ui/model/message/MessageModel",
	"sap/m/NavContainer",
	"sap/m/Page",
	"sap/m/Dialog",
	"sap/m/Button",
	"sap/ui/core/Title",
	"sap/m/Label",
	"sap/m/Text",
	"sap/ui/core/message/Message",
	"sap/m/Toolbar",
	"sap/m/ToolbarSpacer"
], function (jQuery, BaseObject, MessageToast, MessageItem, MessageView, SimpleForm, MessageModel, NavContainer,
			 Page, Dialog, Button, Title, Label, Text, Message, Toolbar, ToolbarSpacer) {
	"use strict";

	function getMethods(oTemplateUtils) {

		function fnHandleRequestFailed(aErrorItems) {
			var aMessages = [];

			function fnNavButtonPress(oEvent) {
				oEvent.getSource().getParent().getParent().getParent().to("errorMessagesPage");
				oEvent.getSource().getParent().getParent().getParent().getParent().getButtons()[0].setVisible(true);
			}

			if (!(aErrorItems instanceof Array)) {
				aErrorItems = Array(aErrorItems);
			}
			var oMessageTemplate = new MessageItem({
				counter: '{counter}',
				title: '{message}',
				subtitle: '{additionalText}',
				longtextUrl: '{descriptionUrl}',
				type: '{type}',
				description: '{description}'
			});

			var oMessageView = new MessageView({
				items: {
					path: '/',
					template: oMessageTemplate
				}
			});

			oMessageView.setModel(sap.ui.getCore().getMessageManager().getMessageModel());

			var oTechnicalDetails = new SimpleForm({
				width: "100%"
			});

			if (aErrorItems.length > 0) {
				if (aErrorItems[0].status) {
					oTechnicalDetails.addContent(
						new Label({
							text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_HTTP_STATUS"),
							design: "Bold"
						}));
					oTechnicalDetails.addContent(
						new Text({
							text: aErrorItems[0].status
						})
					);
				}
				if (aErrorItems[0].statusText) {
					oTechnicalDetails.addContent(
						new Label({
							text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_EXCEPTION_CATEGORY"),
							design: "Bold"
						}));
					oTechnicalDetails.addContent(
						new Text({
							text: aErrorItems[0].statusText
						})
					);
				}
				if (aErrorItems[0].error) {
					if (aErrorItems[0].error["@SAP__common.Application"]) {
						oTechnicalDetails.addContent(
							new Title({
								text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_GROUP_APPLICATION")
							})
						);
						if (aErrorItems[0].error["@SAP__common.Application"].ComponentId) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_COMPONENT_ID"),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error["@SAP__common.Application"].ComponentId
								})
							);
						}
						if (aErrorItems[0].error["@SAP__common.Application"].ServiceId) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_ODATA_SERVICE"),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error["@SAP__common.Application"].ServiceRepository + "\n"
									+ aErrorItems[0].error["@SAP__common.Application"].ServiceId + "\n"
									+ aErrorItems[0].error["@SAP__common.Application"].ServiceVersion
								})
							);
						}
					}
					oTechnicalDetails.addContent(
						new Title({
							text: "Error Resolution"
						})
					);
					if (aErrorItems[0].error["@SAP__common.TransactionId"]) {
						oTechnicalDetails.addContent(
							new Label({
								text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_TRANSACTION_ID"),
								design: "Bold"
							}));
						oTechnicalDetails.addContent(
							new Text({
								text: aErrorItems[0].error["@SAP__common.TransactionId"]
							})
						);
					}
					if (aErrorItems[0].error["@SAP__common.Timestamp"]) {
						oTechnicalDetails.addContent(
							new Label({
								text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_TIMESTAMP"),
								design: "Bold"
							}));
						oTechnicalDetails.addContent(
							new Text({
								text: aErrorItems[0].error["@SAP__common.Timestamp"]
							})
						);
					}
					if (aErrorItems[0].error["@SAP__common.ErrorResolution"]) {
						if (aErrorItems[0].error["@SAP__common.ErrorResolution"].Analysis) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_ANALYSIS"),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error["@SAP__common.ErrorResolution"].Analysis
								})
							);
						}
						if (aErrorItems[0].error["@SAP__common.ErrorResolution"].Note) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_SAP_NOTE"),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error["@SAP__common.ErrorResolution"].Note
								})
							);
						}
						if (aErrorItems[0].error["@SAP__common.ErrorResolution"].DetailedNote) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_SAP_DETAILED_NOTE"),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error["@SAP__common.ErrorResolution"].DetailedNote
								})
							);
						}
					}
					if (aErrorItems[0].error.details && aErrorItems[0].error.details[0] && aErrorItems[0].error.details[0].message) {
						oTechnicalDetails.addContent(
							new Title({
								text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_GROUP_MESSAGES")
							})
						);
						for (var i = 0; i < aErrorItems[0].error.details.length; i++) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_MESSAGES") + " " + (i + 1),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error.details[i].message + ", "
									+ aErrorItems[0].error.details[i].code + ", "
									+ aErrorItems[0].error.details[i]["@SAP__common.Severity"]
								})
							);
							aMessages.push(new Message({
								"message": aErrorItems[0].error.details[i].message,
								"code": aErrorItems[0].error.details[i].code,
								"type": aErrorItems[0].error.details[i]["@SAP__common.Severity"],
								"longtextUrl": aErrorItems[0].error.details[i].longtext_url
							}));
						}
						sap.ui.getCore().getMessageManager().addMessages(aMessages);
					}
				}
			}
			if (!this.errorMessagesPage) {
				this.errorMessagesPage = new Page({
					id: "errorMessagesPage",
					customHeader: [
						new Toolbar({
							design: "Transparent",
							content: [
								new ToolbarSpacer(),
								new sap.m.Title({
									text: oTemplateUtils.getText("SAPFE_ERROR_MESSAGES_PAGE_TITLE")
								}),
								new ToolbarSpacer()
							]
						})
					]
				});
			}
			if (this.errorMessagesPage.getContent()) {
				this.errorMessagesPage.removeAllContent();
			}
			this.errorMessagesPage.addContent(oMessageView);

			if (oTechnicalDetails.getContent().length > 0) {
				if (!this.technicalDetailsPage) {
					this.technicalDetailsPage = new Page({
						id: "technicalDetailsPage",
						customHeader: new Toolbar({
							design: "Transparent",
							content: [
								new Button({
									type: "Back",
									press: fnNavButtonPress
								}),
								new ToolbarSpacer(),
								new sap.m.Title({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_MESSAGES_PAGE_TITLE")
								}),
								new ToolbarSpacer()
							]
						})
					});
				}
				if (this.technicalDetailsPage.getContent()) {
					this.technicalDetailsPage.removeAllContent();
				}

				this.technicalDetailsPage.addContent(oTechnicalDetails);
			}
			var aPages = [];
			//Adding the pages only if it has content
			if (!!this.errorMessagesPage) {
				aPages.push(this.errorMessagesPage);
			}
			if (!!this.technicalDetailsPage) {
				aPages.push(this.technicalDetailsPage);
			}

			var oNavContainer = new NavContainer({
				height: "100%",
				width: "100%",
				defaultTransitionName: "show",
				pages: aPages
			});

			var oDialog = new Dialog({
				contentWidth: "37.5em",
				contentHeight: "25em",
				showHeader: false,
				state: 'Error',
				content: oNavContainer,
				resizable: true,
				draggable: true,
				ariaLabelledBy: new sap.ui.core.InvisibleText({
					text: oTemplateUtils.getText("SAPFE_ERROR_MESSAGES_PAGE_TITLE")
				}),
				beginButton: new Button({
					press: function () {
						oNavContainer.to("technicalDetailsPage");
						this.setVisible(false);
					},
					text: oTemplateUtils.getText("SAPFE_TECHNICAL_MESSAGES_PAGE_TITLE")
				}),
				endButton: new Button({
					press: function () {
						sap.ui.getCore().getMessageManager().removeAllMessages();
						oDialog.close();
					},
					text: oTemplateUtils.getText("SAPFE_CLOSE")
				}),
				verticalScrolling: false
			});

			if (!this.technicalDetailsPage) {
				oDialog.getBeginButton().setVisible(false);
			}
			oDialog.open();
		}

		function fnHandleSuccess(text) {
			MessageToast.show(text);
		}

		return {
			handleRequestFailed: fnHandleRequestFailed,
			handleSuccess: fnHandleSuccess
		};
	}

	return BaseObject.extend(
		"sap.fe.core.MessageUtils.js", {
			constructor: function (oTemplateUtils) {
				jQuery.extend(this, getMethods(oTemplateUtils));
			}
		});
});

}; // end of sap/fe/core/MessageUtils.js
if ( !jQuery.sap.isDeclared('sap.fe.core.TemplateComponent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.require('sap.ui.core.CustomizingConfiguration'); // unlisted dependency retained

(function () {
	"use strict";

	jQuery.sap.declare('sap.fe.core.TemplateComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/fe/core/TemplateComponent",[
		"jquery.sap.global",
		"sap/ui/core/mvc/ViewType",
		"sap/ui/core/UIComponent",
		"sap/ui/model/json/JSONModel",
		"sap/ui/model/resource/ResourceModel",
		"sap/ui/Device"
	], function (jQuery, ViewType, UIComponent, JSONModel, ResourceModel, Device) {

		// This method enhances the i18n model which has been attached to the application component via the manifest
		// For this purpose the following enhancement chain is built:
		// Generic Template texts <- Template specific texts <- Application specific texts
		// the method supports async loading as well as sync loading (and mixtures of both) and returns a promise that is resolved once all necessary bundles are loaded
		// and the enhancement is done

		function fnEnhanceI18nModel(oComponent) {
			var aPromises = [];

			// as long as we can't clone resource models we will create a new instance of a resource model causing additional requests
			//var oI18nModel = oComponent.getModel("sap.fe.i18n");
			//var oI18nModelClone = jQuery.extend(true, {}, oI18nModel);
			var oI18nModelClone = new ResourceModel({
				bundleName: "sap/fe/messagebundle",
				async: true
			});

			// add promise to load general text resource model
			aPromises.push(oI18nModelClone.getResourceBundle());

			/*
			Currently we don't allow template and application i18n models - once we support them we need to activate this
			coding. we might introduce a library i18n that is allowed to be overwritten by the application as well
			we need to invent a new model name as sap.fe.i18n is already used or rename this one
			// get template and application model
			var oTemplateModel = oComponent.getModel("i18n"), oPromiseTemplateModel;
			var oApplicationModel = oComponent.getAppComponent().getModel("i18n|" + oComponent.getMetadata().getComponentName() + "|" + oComponent.getEntitySet());

			if (oTemplateModel) {
				oPromiseTemplateModel = Promise.resolve(oTemplateModel.getResourceBundle()).then(function (oResourceBundle) {
					return oI18nModelClone.enhance(oResourceBundle);
				});
				aPromises.push(oPromiseTemplateModel);
			}

			if (oApplicationModel) {
				aPromises.push(Promise.resolve(oApplicationModel.getResourceBundle()).then(function (oResourceBundle) {
					return (oPromiseTemplateModel || Promise.resolve()).then(function () {
						return oI18nModelClone.enhance(oResourceBundle);
					});
				}));
			}*/

			Promise.all(aPromises).then(function () {
				oI18nModelClone.getResourceBundle().then(function (oResourceBundle) {
					// as we need the resource bundle in the formatter synchronously and as we take care that the
					// view is not rendered before all bundles are loaded we overwrite the getResourceBundle and
					// return the resource bundle instead of a (resolved) promise
					oI18nModelClone.getResourceBundle = function () {
						return oResourceBundle;
					};

					oComponent.setModel(oI18nModelClone, "sap.fe.i18n");
				});

			});

			return aPromises;
		}

		function fnDetermineStableID(oComponent) {
			// TODO Navigation: the navigation path is missing here - we should create real unique IDs, maybe we can also use the ID specified in the Page settings
			if (oComponent.getAppComponent().getMetadata().getComponentName() === "" || oComponent.getTemplateName() === "" || oComponent.getEntitySet() === "") {
				return false;
			}
			return oComponent.getAppComponent().getMetadata().getComponentName() + "::" + oComponent.getTemplateName() + "::" + oComponent.getEntitySet();
		}

		function createParameterModel(sEntityType, oComponent, oMetaModel) {
			var oSettings = null;
			var oAllSettings = oComponent.getComponentContainer().getSettings(); // this should have all settings passed to the component during creation

			// create settings section in parameter model with all settings passed to
			// the component
			oSettings = jQuery.extend({}, oAllSettings);

			// remove properties not needed or available on the component itself
			delete oSettings.appComponent;
			delete oSettings.entitySet;
			delete oSettings.navigationProperty;

			return new JSONModel({
				entitySet: oComponent.getEntitySet(),
				"sap-ui-debug": window["sap-ui-debug"],
				"settings": oSettings,
				"manifest": oComponent.getAppComponent().getMetadata().getManifest(),
				metaModel: oMetaModel
			});
		}

		/*
		 * Creates the XMLView based on some models.
		 *
		 */
		function createXMLView(oComponentRegistryEntry) {
			var oComponent = oComponentRegistryEntry.oComponent,
				fnCreateViewController = oComponentRegistryEntry.createViewController;
			//fnTemplateSpecificParameters = oComponentRegistryEntry.methods && oComponentRegistryEntry.methods.getTemplateSpecificParameters;
			var oView = null, oViewSettings;
			var oModel = oComponent.getModel();
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getObject("/$EntityContainer/" + oComponent.getEntitySet());
			var sStableId = fnDetermineStableID(oComponent);

			if (!oEntitySet || !sStableId) {
				oComponentRegistryEntry.oTemplateUtils.getNavigationController().navigateToMessagePage(
					{
						text: oComponentRegistryEntry.oTemplateUtils.getText("SAPFE_APPSTART_TECHNICAL_ISSUES"),
						description: oComponentRegistryEntry.oTemplateUtils.getText("SAPFE_APPSTART_WRONG_CONFIGURATION")
					}
				);
				return Promise.reject();
			}

			// TODO Navigation: should this happen at all if we have unique IDs? Couldn't we remove this?
			oView = sap.ui.getCore().byId(sStableId);
			if (oView) {
				jQuery.sap.log.warning("View with ID: " + sStableId + " already exists - old view is getting destroyed now!");
				try {
					oView.destroy();
				} catch (ex) {
					jQuery.sap.log.warning("Error destroying view: " + ex);
				}
				oView = null;
			}

			// device model
			var oDeviceModel = new JSONModel(sap.ui.Device);
			oDeviceModel.setDefaultBindingMode("OneWay");

			// parameter model
			var oParameterModel = createParameterModel(oEntitySet.$Type, oComponent, oMetaModel);

			var oViewPromise = new Promise(function (fnResolve, fnReject) {
				var mPreTemplaterParameters = {
					oParameterModel: oParameterModel.createBindingContext("/")
				};
				var checkTimeStamp = Date.now();

				// Pre PreProcessor to determine cross service navigations
				Promise.all(oComponent.preTemplater(mPreTemplaterParameters)).then(function (context) {
					oComponent.runAsOwner(function () {
						var mCache = null,
							sCacheKey = "",
							mDataSourceETags = oMetaModel.getETags(),
							aUrls = Object.keys(mDataSourceETags).sort(),
							bETagsAreValid = false;

						bETagsAreValid = aUrls.every(function(sUrl) {
							if (mDataSourceETags[sUrl]) {
								if (mDataSourceETags[sUrl].getTime) {
									if (mDataSourceETags[sUrl].getTime() > checkTimeStamp - 60000) {
										//timestamp, but a new one -> not worth using it as cache key
										return false;
									} else {
										//timestamp, but an older one -> worth using it as cache key
										sCacheKey += sUrl + " " + mDataSourceETags[sUrl].getTime() + " ";
										return true;
									}
								} else {
									//ETag -> should be used as cache key
									sCacheKey += sUrl + " " + mDataSourceETags[sUrl] + " ";
									return true;
								}
							} else {
								//no ETag, no last-Modified -> no cache
								return false;
							}
						});
						if (sCacheKey && bETagsAreValid) {
							//cut the last " " from the cache key and hash it
							mCache = { keys: [ jQuery.sap.hashCode(sCacheKey.slice(0, -1)) ] };
						}

						oViewSettings = {
							async: true,
							preprocessors: {
								xml: {
									bindingContexts: {
										entitySet: oMetaModel.createBindingContext("/" + oComponent.getEntitySet())
									},
									models: {
										entitySet: oMetaModel,
										'sap.fe.metaModel': oMetaModel,
										'sap.fe.deviceModel': oDeviceModel,
										parameter: oParameterModel
									},
									preprocessorsData: oComponent.getComponentData().preprocessorsData
								}
							},
							id: sStableId,
							type: ViewType.XML,
							viewName: oComponent.getTemplateName(),
							cache: mCache,
							height: "100%"
						};

						if (fnCreateViewController) {
							var ControllerClass = fnCreateViewController();
							oViewSettings.controller = new ControllerClass();
						}

						oView = sap.ui.view(oViewSettings);
						/* eslint max-nested-callbacks: 0 */
						oView.loaded().then(function (oView) {
							fnResolve(oView);
						}).catch(function (error) {
							oComponentRegistryEntry.oTemplateUtils.getNavigationController().navigateToMessagePage(
								{
									text: oComponentRegistryEntry.oTemplateUtils.getText("SAPFE_APPSTART_TECHNICAL_ISSUES"),
									description: oComponentRegistryEntry.oTemplateUtils.getText("SAPFE_APPSTART_TEMPLATING_ISSUE"),
									technicalMessage: error.message || ( error.messages && error.messages[0] && error.messages[0].text ) || "",
									technicalDetails: error.stack || error
								}
							);
							fnReject(error);
						});
					});
				}).catch(oComponent.preTemplaterReject.bind(oComponentRegistryEntry.oComponent));
			});

			// return oView;
			return oViewPromise;
		}

		return UIComponent.extend("sap.fe.core.TemplateComponent", {

			metadata: {
				properties: {
					/**
					 * Name of template
					 */
					templateName: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Entity Set
					 */
					entitySet: {
						type: "string",
						defaultValue: null
					}
				}
			},

			getAppComponent: function () {
				// search for sap.fe.AppComponent
				var oControl;

				if (!this._oAppComponent) {
					oControl = this.getComponentContainer();
					while (oControl && !(oControl instanceof sap.fe.AppComponent)) {
						oControl = oControl.getParent();
					}
					this._oAppComponent = oControl;
				}

				return this._oAppComponent;
			},

			init: function () {

				(UIComponent.prototype.init || jQuery.noop).apply(this, arguments);

				// TODO: TO be discussed, still one UI model for each component or shall we have one for all?
				var oUIModel = new JSONModel({
					editable: false,
					enabled: false,
					busyControls: {},
					outdatedControls: {}
				});
				this.setModel(oUIModel, "ui");

				var oParsingService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("URLParsing");

				// TODO Marcel: to be discussed, shall we have the _templPriv again? Should we have one for each template and one global?
				var oTemplatePrivate = new JSONModel({
					generic: {
						crossAppNavSupport: !!oParsingService && oParsingService.isIntentUrl(document.URL),
						draftIndicatorState: sap.m.DraftIndicatorState.Clear,
						listCommons: {
							functionEnabled: {}
						}
					},
					viewLevel: this.getComponentData().registryEntry.viewLevel
				});
				oTemplatePrivate.setDefaultBindingMode("TwoWay");
				this.setModel(oTemplatePrivate, "_templPriv");

			},

			// TODO: clearify with UI5 how to access the component container
			getComponentContainer: function () {
				return this.oContainer;
			},

			onBeforeRendering: function (oComponentRegistryEntry) {
				// oComponentRegistryEntry will be provided by TemplateAssembler
				// if Component is assembled without TemplateAssembler it could be that oComponentRegistryEntry is undefined
				// e.g. an application has an own implementation of Component
				if (oComponentRegistryEntry && !oComponentRegistryEntry.createViewStarted) {
					oComponentRegistryEntry.createViewStarted = true;

					oComponentRegistryEntry.aI18nLoadPromises = fnEnhanceI18nModel(oComponentRegistryEntry.oComponent);

					var oContainer = oComponentRegistryEntry.oComponent.getComponentContainer();
					var oModel = oContainer && oContainer.getModel();
					if (oModel) {
						// Do the templating once the $metadata documents and the annotation documents are loaded and all i18n Texts are loaded
						oModel.getMetaModel().requestObject("/$EntityContainer/").then(function () {
							createXMLView(oComponentRegistryEntry).then(function (oView) {
								// check that all i18n models
								Promise.all(oComponentRegistryEntry.aI18nLoadPromises).then(function () {
									oComponentRegistryEntry.oComponent.setAggregation("rootControl", oView);
									oContainer.invalidate();
								 });
							}, function(){
								// Resolve view registered promise to disable busy handling
								oComponentRegistryEntry.fnViewRegisteredResolve();
							});

						});
					}
				}
			}

		});
	});

})();

}; // end of sap/fe/core/TemplateComponent.js
if ( !jQuery.sap.isDeclared('sap.fe.core.TemplateUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.TemplateUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/fe/core/TemplateUtils",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/fe/controller/ActionController",
	"sap/fe/controller/NavigationController",
	"sap/fe/core/MessageUtils",
	"sap/fe/core/CommonUtils"
], function (jQuery, BaseObject, ActionController, NavigationController, MessageUtils, CommonUtils) {
	"use strict";

	function getMethods(oComponentRegistry, oTemplateContract) {

		function getMessageUtils() {
			if (!oTemplateContract.oMessageUtils) {
				oTemplateContract.oMessageUtils = new MessageUtils(this);
			}

			return oTemplateContract.oMessageUtils;
		}

		function getActionController() {
			if (!oTemplateContract.oActionController) {
				oTemplateContract.oActionController = new ActionController(this);
			}

			return oTemplateContract.oActionController;
		}

		function getNavigationController() {
			if (!oTemplateContract.oNavigationController) {
				oTemplateContract.oNavigationController = new NavigationController(oTemplateContract, this);
			}

			return oTemplateContract.oNavigationController;
		}

		function getCommonUtils() {
			if (!oTemplateContract.oCommonUtils) {
				oTemplateContract.oCommonUtils = new CommonUtils(this);
			}

			return oTemplateContract.oCommonUtils;
		}

		function getText(sTextId, parameters) {
			var aReplacementParameters;
			if (parameters){
				aReplacementParameters = parameters.constructor === Array ? parameters : [parameters];
			}

			var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.fe");
			return oResourceBundle.getText(sTextId, aReplacementParameters);
		}

		/* App State methods might be moved to an AppStateController */
		function getAppStateContainer(oView) {
				var sContainer = oTemplateContract.oAppStateModel.getProperty("/" + oView.getId());

			if (sContainer) {
				return JSON.parse(sContainer);
			}
		}

		function setAppStateContainer(oData) {
			oTemplateContract.oAppStateModel.setProperty("/" + oComponentRegistry.oController.getView().getId(), JSON.stringify(oData));

			var oAppStateData = oTemplateContract.oAppStateModel.getProperty("/");
			oTemplateContract.oAppState = sap.ushell.Container.getService("CrossApplicationNavigation").createEmptyAppState(oTemplateContract.oAppComponent);

			// we keep it simple now as we know we need to navigate to rootWithAppState but will be more complex in future as we need to know the target route
			oTemplateContract.oAppComponent.getRouter().navTo("rootWithAppState", {iAppState: oTemplateContract.oAppState.getKey()}, true);

			oTemplateContract.oAppState.setData(oAppStateData);
			oTemplateContract.oAppState.save().fail(function () {
				// what shall we do now?
			});
		}

		function attachAppStateChanged(fn) {
			oTemplateContract.aAppStateChangedListener.push(fn);
		}

		function detachAppStateChanged(fn) {
			for (var i = 0; i < oTemplateContract.aAppStateChangedListener.length; i++){
				if (oTemplateContract.aAppStateChangedListener[i] === fn){
					oTemplateContract.aAppStateChangedListener.splice(i, 1);
				}
			}
		}

		return {
			getText: getText,
			getActionController: getActionController,
			getNavigationController: getNavigationController,
			getMessageUtils: getMessageUtils,
			getCommonUtils: getCommonUtils,
			getBusyHelper: function () {
				return oTemplateContract.oBusyHelper;
			},
			getAppStateContainer: getAppStateContainer,
			setAppStateContainer: setAppStateContainer,
			attachAppStateChanged: attachAppStateChanged,
			detachAppStateChanged: detachAppStateChanged,
			getAppStateLoaded: function () {
				return oTemplateContract.oInnerAppStatePromise;
			}
		};
	}

	return BaseObject.extend("sap.fe.core.TemplateUtils.js", {
		constructor: function (oComponentRegistry, oTemplateContract) {
			jQuery.extend(this, getMethods(oComponentRegistry, oTemplateContract));
		}
	});
});

}; // end of sap/fe/core/TemplateUtils.js
if ( !jQuery.sap.isDeclared('sap.fe.core.internal.testableHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.internal.testableHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/fe/core/internal/testableHelper",[], function () {
	"use strict";

	/*
	 * This class provides facilities that support unit testing. Note thate the class provides methods which have to be called in the productive code
	 * and methods which have to be called in the test code.
	 * 1. This class provides the facility to define private functions that are nevertheless accessible for unit tests.
	 * More precisely: We consider it as best practice to define private methods of classes in a closure to prevent illegal use by
	 * other classes.
	 * Moreover, it is best practice to write unit tests for public methods.
	 * However, sometimes a private method is used several times inside a class. Therefore, it is demanded to make this private method
	 * accessible to unit tests.
	 * Actually, making a private method accessible to unit tests has two aspects:
	 * - Call this method directly in a unit test in order to test it
	 * - Define a stub/spy for the private method in a unit test for another method in order to test that the private method is invoked correctly
	 *   (and prevent the private method from being executed in the context of this test)
	 *
	 * Check method testable in order to find out, how a private method can be made accessible for unit tests.
	 * Check method startTest in order to find out, how to access a private method (prepared this way) can be accessed in a unit test
	 *
	 * Note: When testing private methods it might also be necessary to access private attributes of the class. This can also be achieved using this class.
	 * Just write a private function accessing the private attribute and make it accessible for unit tests via this class.
	 *
	 * 2. This class provides the possibility to spy or stub constructors of external classes (e.g. UI5).
	 * Check method observableConstructor in order to find out, how this can be achieved.
	 */

	var iTestMode = 0;
	var oPossessor;
	var mStartedApps = {};
	var iCount = 0;
	var oStaticFunctions = {};
	var aConstructors = [];

	function createLogAccessFunction(oConstructor) {
		return function (oInstance) {
			if (iTestMode >= 0) {
				return null;
			}
			var aLog = oConstructor.log || [];
			for (var i = 0; i < aLog.length; i++) {
				var oLog = aLog[i];
				if (oLog.me === oInstance) {
					return oLog.args;
				}
			}
		};
	}

	function removeConstructorObservation(oConstructor) {
		delete oConstructor.replace;
		delete oConstructor.observer;
		if (oConstructor.log) {
			if (oConstructor.isStatic) {
				var aNewLog = [];
				for (var i = 0; i < oConstructor.log.length; i++) {
					var oLog = oConstructor.log[i];
					if (oLog.testMode === 0) {
						aNewLog.push(oLog);
					}
				}
				if (aNewLog.length > 0) {
					oConstructor.log = aNewLog;
				} else {
					delete oConstructor.log;
				}
			} else {
				delete oConstructor.log;
			}
		}
	}

	function removeConstructorObservations() {
		aConstructors.forEach(removeConstructorObservation);
	}

	function fnObservableConstructor(fnConstructor, bStatic) {
		var oConstructor;
		for (var i = 0; i < aConstructors.length; i++) {
			oConstructor = aConstructors[i];
			if (oConstructor.fnConstructor === fnConstructor) {
				oConstructor.isStatic = oConstructor.isStatic || bStatic;
				return oConstructor;
			}
		}
		oConstructor = {
			fnConstructor: fnConstructor,
			isStatic: bStatic
		};
		oConstructor.observable = function () {
			var fnConstructorEffective = oConstructor.replace ? oConstructor.observer : fnConstructor;
			var oRet = Object.create(fnConstructorEffective.prototype);
			oRet = fnConstructorEffective.apply(oRet, arguments) || oRet;
			if (iTestMode < 0 || (iTestMode === 0 && oConstructor.isStatic)) {
				var oLog = {
					me: oRet,
					args: arguments,
					testMode: iTestMode
				};
				oConstructor.log = oConstructor.log || [];
				oConstructor.log.push(oLog);
				if (oConstructor.observer && !oConstructor.replace) {
					oConstructor.observer(oRet, arguments);
				}
			}
			return oRet;
		};
		aConstructors.push(oConstructor);
		return oConstructor;
	}

	return {
		// Call this method at the beginning of the setup of your unit test.
		// This method returns a stub object. This stub possesses all functions prepared via testable as methods.
		// Thereby, the name of the method is derived from the parameter sName of testable.
		// Thus, when testing the private method just test the corresponding method of the stub.
		// When defining a stub or spy for the private method, just define a stub or spy for the corresponding method of the stub object.
		startTest: function () {
			if (iTestMode !== 0) {
				return null;
			}
			iTestMode = -1;
			oPossessor = {};
			return oPossessor;
		},

		// Call this method at the end of the teardown of your unit test.
		endTest: function () {
			if (iTestMode < 0) {
				iTestMode = 0;
				oPossessor = null;
				removeConstructorObservations();
			}
		},

		// This method is called at the startup of a real app (in TemplateAssembler). If this method is called before startTest is called,
		// startTest has no effect anymore. Thus, private methods are not accessible in real tests.
		startApp: function () {
			if (iTestMode < 0) {
				return {};
			}
			iTestMode++;
			iCount++;
			var oRet = {id: iCount};
			mStartedApps[iCount] = oRet;
			return oRet;
		},

		// End the effect of startApp
		endApp: function (oAppId) {
			if (iTestMode > 0) {
				var id = oAppId.id;
				if (oAppId === mStartedApps[id]) {
					iTestMode--;
					delete mStartedApps[id];
				}
			}
		},

		// Use this method to define a private instance method that should be accessible to unit tests.
		// Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
		// Parameter sName is the name which can be used to access the function
		// This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testable: function (fnFunction, sName) {
			if (iTestMode === -1) {
				oPossessor[sName] = fnFunction;
				return function () {
					return oPossessor[sName].apply(null, arguments);
				};
			}
			return fnFunction;
		},

		// Use this method to define a private static method that should be accessible to unit tests.
		// Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
		// Parameter sName is the name which can be used to access the function during tests. Note that this name must be unique for the whole project.
		// This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testableStatic: function (fnFunction, sName) {
			if (iTestMode > 0 || (iTestMode === 0 && oStaticFunctions[sName])) {
				return fnFunction;
			}
			oStaticFunctions[sName] = oStaticFunctions[sName] || fnFunction;
			return function () {
				return oStaticFunctions[sName].apply(null, arguments);
			};
		},

		// This method must only be used while a test is running (see method startTest). It returns a stub object that possesses all (static) methods
		// which have been defined via testableStatic.
		getStaticStub: function () {
			return iTestMode === -1 && oStaticFunctions;
		},


		// Use this method to make a constructor which is used in an implementation accessible for unit tests. This is in particular
		// important for constructors of classes belonging to other software packages (e.g. sap.m), since there is no other way to
		// spy/stub on these contructors.
		// As an example let us assume that a class provides a public method that produces instances of sap.ui.model.Filter (via constructor).
		// A unit test for this method can easily test whether the method really provides an instance of sap.ui.model.Filter.
		// However, a unit test should also be able to test, whether the Filter instance was created with the correct parameters.
		// In order to achieve this the class to be tested has to be enhanced as follows:
		// sap.ui.define([..., "sap/ui/model/Filter", ..."sap/suite/ui/generic/template/testableHelper"],
		//      function(..., Filter, ..., testableHelper){        // normal declaration of dependency to sap.ui.model.Filter
		//
		//           Filter = testableHelper.observableConstructor(Filter);   // allow unit tests for this class to spy on constructor of Filter
		//
		// });
		// In the unit test use method observeConstructor (see below) in order to syp or stub the constructor
		// Normally only constructor calls that have been performed after a test was started can be spied via this facility. Sometimes constuctors
		// are already called in order to define static members of the class to be tested. In these cases it is necessary to have also access to
		// these static calls. Therefore, parameter bStatic should be set to true in these cases.
		// However, note that this parameter should only ber used if really necessary, as it produces additional effort at runtime, too.
		observableConstructor: function (fnConstructor, bStatic) {
			if (iTestMode > 0) {
				return fnConstructor;
			}
			return fnObservableConstructor(fnConstructor, bStatic).observable;
		},

		// This method must only be used while a test is running (see method startTest).
		// During tests this method provides access to instances created for constructor fnConstructor, provided the constructor has been
		// wrapped via method observableConstructor.
		// There are three way that access to these instances is possible:
		// 1. observeConstructor returns a function fnParameterAccess that provides access to the arguments that have been passed to
		//    the constructor when an instance was created. Call fnParameterAccess(oInstance) with oInstance being the instance that
		//    should be analyzed.
		// 2. Provide a spy function fnObserver that is called immediately after the instance was created. Two parameters are passed to fnObserver
		//    The first parameter is the newly created instance, the second parameter represents the arguments having been passed to the constructor
		// 3. If parameter bReplace is truthy fnObserver is actually treated as a stub for the constructor. That means that the real constructor
		//    is not called.
		// Note: There can always be only one observer for a constructor. Therefore, this method throws an exception when fnObserver is truthy and
		// another observer is already registered. Deregister an observer by calling this method with parameter fnObserver being faulty.
		// Moreover, all observers are automatically deregistered when a test ends.
		observeConstructor: function (fnConstructor, fnObserver, bReplace) {
			if (iTestMode >= 0) {
				return null;
			}
			var oConstructor = fnObservableConstructor(fnConstructor);
			if (fnObserver && oConstructor.observer) {
				throw new Error("Constructor is already observed");
			}
			oConstructor.observer = fnObserver;
			oConstructor.replace = fnObserver && bReplace;
			return createLogAccessFunction(oConstructor);
		}
	};
});

}; // end of sap/fe/core/internal/testableHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

/**
 * @namespace reserved for Fiori Elements
 * @name sap.fe
 * @private
 * @experimental
 */

/**
 * Initialization Code and shared classes of library sap.fe
 */
jQuery.sap.declare('sap.fe.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/fe/library",[
	"jquery.sap.global",
	"sap/ui/core/library"
], function (jQuery, library1) {
	"use strict";

	/**
	 * Fiori Elements Library
	 *
	 * @namespace
	 * @name sap.fe
	 * @private
	 * @experimental
	 */

	// library dependencies
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name: "sap.fe",
		dependencies: [
			"sap.ui.core"
		],
		types: [],
		interfaces: [],
		controls: [],
		elements: [],
		version: "1.52.0"
	});



	sap.ui.require(['sap/ui/core/XMLComposite', 'sap/ui/core/util/XMLPreprocessor'], function (XMLComposite, XMLPreprocessor) {
		function visitAttibutesIgnoringMetadataContext(oNode, oVisitor) {
			var vValue = oNode.getAttribute('metadataContexts');
			if (vValue) {
				oNode.removeAttribute('metadataContexts');
			}
			oVisitor.visitAttributes(oNode);
			if (vValue) {
				if (vValue.indexOf('sap.fe.deviceModel') < 0 ) {
					//TODO: Make this better. We need to add it to be passed through always
					vValue += ",{model: 'sap.fe.deviceModel', path: '/', name: 'sap.fe.deviceModel'}";
				}
				oNode.setAttribute('metadataContexts', vValue);
			}
		}

		function registerPlugin(oNode, oVisitor) {
			//'this' must be the name of the control
			visitAttibutesIgnoringMetadataContext(oNode, oVisitor);
			XMLComposite.initialTemplating(oNode, oVisitor, this);
			//TODO: Once sap.ui.mdc.providerHook can handle this we can remove the removal of the metadataContexts
			oNode.removeAttribute('metadataContexts');
		}

		XMLPreprocessor.plugIn(registerPlugin.bind("sap.fe.Form"), "sap.fe", "Form");

	});

	return sap.fe;

}, /* bExport= */false);

}; // end of sap/fe/library.js
if ( !jQuery.sap.isDeclared('sap.fe.model.DraftModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

//Provides class sap.fe.model.DraftModel
jQuery.sap.declare('sap.fe.model.DraftModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v4.ODataListBinding'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v4.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ChangeReason'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
sap.ui.define("sap/fe/model/DraftModel",[
	"sap/ui/model/json/JSONModel",
	"sap/ui/model/odata/v4/ODataListBinding",
	"sap/ui/model/odata/v4/Context",
	"sap/ui/model/Filter",
	"sap/ui/base/ManagedObject",
	"sap/ui/model/ChangeReason",
	"sap/ui/model/resource/ResourceModel",
	"sap/fe/core/internal/testableHelper"
], function (JSONModel, ODataListBinding, Context, Filter, ManagedObject, ChangeReason, ResourceModel, testableHelper) {
	"use strict";

	var MODELUPGRADENAMESPACE = "_$DraftModel";
	/* Just for support one can switch this in the debugger to have the internal private data added to the model */
	var bAddPrivateDataToModel = false;
	var REGEXFOREDITSTATEFILTER = /( and )?\(*IsActiveEntity eq.*$/g;

	/* Container for internal state per model. Needs to be destroyed with the model */
	var oPrivatModelData = {};

	/* Allow access for unit tests only */
	testableHelper.testableStatic(function () {
		bAddPrivateDataToModel = true;
	}, "addPrivateDataToModel");


	/**
	 * Stores private data
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @param {String} sKey key that is the target for the data in the object
	 * @param {Object} oData data to be stored
	 */
	function storeData(oModel, sKey, oData) {
		var oModelId = typeof oModel === "string" ? oModel : oModel.getId(),
			oPrivateData = oPrivatModelData[oModelId] = oPrivatModelData[oModelId] || {};
		oPrivateData[sKey] = oData;
		if (bAddPrivateDataToModel && !oModel[MODELUPGRADENAMESPACE]) {
			oModel[MODELUPGRADENAMESPACE] = oPrivateData;
		}
	}

	/**
	 * Retrieves private data from the model
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @param {String} sKey key that is the target for the data in the object
	 * @returns {Object} oData data to be stored
	 */
	function getData(oModel, sKey) {
		var oModelId = typeof oModel === "string" ? oModel : oModel.getId();
		return oPrivatModelData[oModelId] && oPrivatModelData[oModelId][sKey];
	}

	/**
	 * Enum for edit state of a document in an draft enabled service collection.
	 * Allows to simplify filtering on a set of documents as described by the
	 * individual state
	 * @alias sap.fe.model.DraftModel.EDITSTATE
	 * @readonly
	 * @enum {String}
	 * @private
	 * @sap-restricted
	 */
	var EDITSTATE = {
		/**
		 * Active documents that don't have a corresponding draft and all own draft documents
		 * @private
		 * @sap-restricted
	 	 */
		ALL: "0",
		/**
		 * Active documents that don't have a draft document
		 * @private
		 * @sap-restricted
		 */
		UNCHANGED: "1",
		/**
		 * Own draft documents
		 * @private
		 * @sap-restricted
		 */
		OWN_DRAFT: "2",
		/**
		 * Active documents that are locked by other users
		 * @private
		 * @sap-restricted
		 */
		LOCKED: "3",
		/**
		 * Active documents that have draft documents by other users
		 * @private

		 * @sap-restricted
		 */
		UNSAVED_CHANGES: "4"
	};
	testableHelper.testableStatic(EDITSTATE, "EDITSTATE");

	/**
	 * Transforms the internal editState into static filters for the list binding
	 * @param {String} sEditState id of the editState to be transformed
	 * @returns {String} OData compatible part of a $filter expression reflecting the state
	 */
	function getFilterForEditState(sEditState) {
		var sFilter = "";
		switch (sEditState) {
			case EDITSTATE.UNCHANGED:
				sFilter = "(IsActiveEntity eq true and HasDraftEntity eq false)";
				break;
			case EDITSTATE.OWN_DRAFT:
				sFilter = "(IsActiveEntity eq false)";
				break;
			case EDITSTATE.LOCKED:
				sFilter = "(IsActiveEntity eq true and SiblingEntity/IsActiveEntity eq null and DraftAdministrativeData/InProcessByUser ne '')";
				break;
			case EDITSTATE.UNSAVED_CHANGES:
				sFilter = "(IsActiveEntity eq true and SiblingEntity/IsActiveEntity eq null and DraftAdministrativeData/InProcessByUser eq '')";
				break;
			default:
				//EDITSTATE.ALL
				sFilter = "(IsActiveEntity eq false or SiblingEntity/IsActiveEntity eq null)";
				break;
		}
		return sFilter;
	}

	/* Allow access for unit tests only */
	testableHelper.testableStatic(getFilterForEditState, "getFilterForEditState");

	/**
	 * Get all EntitySets with all EntitySet annotations
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @returns {Array} Array of entity sets including annotations in @ and @sapui.name
	 */
	function getAllEntitySets(oModel) {
		var oMetaModel = oModel.getMetaModel(),
			aEntitySets = getData(oModel, "aEntitySets"),
			containerPromise = aEntitySets ? Promise.resolve(aEntitySets) : oMetaModel && oMetaModel.requestObject("/").then(function (oEntityContainer) {
				var aPromises = [];
				Object.keys(oEntityContainer).forEach(function (key) {
					var oElement = oEntityContainer[key], oPromise;
					if (oElement.$kind === "EntitySet") {
						oPromise = oMetaModel.requestObject("/" + key + "@");
						/* eslint max-nested-callbacks: 0 */
						aPromises.push(oPromise.then(function (oEntitySetAnnotations) {
							var oEntitySetAnnotation = {};
							/* Merge annotations to the entitySet object */
							oEntitySetAnnotation["@"] = oEntitySetAnnotations;
							oEntitySetAnnotation["@sapui.name"] = key;
							return oEntitySetAnnotation;
						}));
					}
				});
				return Promise.all(aPromises);
			});
		return containerPromise;
	}

	/**
	 * Creates an operation context binding for the given operation
	 * @param {sap.ui.model.odata.v4.Context} oContext The context that should be bound to the operation
	 * @param {String} sOperation The operation (action or function import)
	 * @return {sap.ui.model.odata.v4.ODataContextBinding} The context binding of the bound operation
	 */
	function createOperation(oContext, sOperation) {
		var oModel = oContext.getModel();
		return oModel.bindContext(sOperation + "(...)", oContext);
	}

	/* function templates of operations */

	/**
	 * Activates a draft document. The draft will replace the sibling entity and will be deleted by the backend
	 * @function
	 * @name sap.fe.model.DraftModel.upgradedContext#executeDraftActivationAction
	 * @returns {Promise.<sap.ui.model.odata.v4.Context>} Resolve function returns the context of the operation
	 * @private
	 * @sap-restricted
	 */
	function executeDraftActivationAction() {
		if (!this.getProperty("IsActiveEntity")) {
			var oOperation = createOperation(this, arguments[0]);
			return oOperation.execute().then(function() {
				return oOperation;
			});
		} else {
			throw new Error("The activation action cannot be executed on an active document");
		}
	}

	/**
	 * Execute a preparation action
	 * @function
	 * @name sap.fe.model.DraftModel.upgradedContext#executeDraftPreparationAction
	 * @param {String} [sideEffectsQualifier] Limits the prepare activities to a given side effects group specified by this qualifier
	 * @returns {Promise.<sap.ui.model.odata.v4.Context>} Resolve function returns the context of the operation
	 * @private
	 * @sap-restricted
	 */
	function executeDraftPreparationAction(sideEffectsQualifier) {
		if (!this.getProperty("IsActiveEntity")) {
			var oOperation = createOperation(this, arguments[0]);
			/* Fix arguments */
			sideEffectsQualifier = arguments[1];
			if (typeof sideEffectsQualifier === "undefined") {
				sideEffectsQualifier = "";
			}
			oOperation.setParameter("SideEffectsQualifier", sideEffectsQualifier);
			return oOperation.execute().then(function() {
				return oOperation;
			});
		} else {
			throw new Error("The preparation action cannot be executed on an active document");
		}
	}

	/**
	 * Executes validation of a draft function
	 * @function
	 * @name sap.fe.model.DraftModel.upgradedContext#executeDraftValidationFunction
	 * @returns {Promise.<sap.ui.model.odata.v4.Context>} Resolve function returns the context of the operation
	 * @private
	 * @sap-restricted
	 */
	function executeDraftValidationFunction() {
		if (!this.getProperty("IsActiveEntity")) {
			var oOperation = createOperation(this, arguments[0]);
			return oOperation.execute().then(function() {
				return oOperation;
			});
		} else {
			throw new Error("The validation function cannot be executed on an active document");
		}
	}

	/**
	 * Creates a new draft from an active document
	 * @function
	 * @name sap.fe.model.DraftModel.upgradedContext#executeDraftEditAction
	 * @param {Boolean} preserveChanges
	 *  <ul>
	 * 		<li>true - existing changes from another user that are not locked are preserved and an error message (http status 409) is send from the backend</li>
	 * 		<li>false - existing changes from another user that are not locked are overwritten</li>
	 * 	</ul>
	 * @returns {Promise.<sap.ui.model.odata.v4.Context>} Resolve function returns the context of the operation
	 * @private
	 * @sap-restricted
	 */
	function executeDraftEditAction(preserveChanges) {
		if (this.getProperty("IsActiveEntity")) {
			var oOperation = createOperation(this, arguments[0]);
			/* Fix arguments */
			preserveChanges = arguments[1];
			oOperation.setParameter("PreserveChanges", preserveChanges);
			return oOperation.execute().then(function() {
				return oOperation;
			});
		} else {
			throw new Error("The edit action cannot be executed on a draft document");
		}
	}

	/**
	 * @classdesc
	 * Only for documentation of the methods that are mixed into the {@link sap.ui.model.odata.v4.Context}
	 * if the context is part of a draft entitySet
	 * @namespace
	 * @alias sap.fe.model.DraftModel.upgradedContext
	 * @experimental This module is only for experimental use!
	 * @private
	 * @sap-restricted
	 */
	var oOperationTemplates = {
		/* draftOperations: */
		"ActivationAction": executeDraftActivationAction,
		"PreparationAction": executeDraftPreparationAction,
		"ValidationFunction": executeDraftValidationFunction,
		/* documentOperations: */
		"EditAction": executeDraftEditAction
	};

	/**
	 * Adds methods for creating bound operations on the context object
	 * @param {sap.ui.model.odata.v4.Context} oContext The context object that should get the operations
	 * @param {Object} oEntitySet The entitySet for the context
	 */
	function addOperationsToContext(oContext, oEntitySet) {
		var oOperations = oEntitySet["@"]["@com.sap.vocabularies.Common.v1.DraftRoot"];
		Object.keys(oOperations).forEach(function (operationName) {
			var sOperation = oOperations[operationName];
			oContext["executeDraft" + operationName] = oOperationTemplates[operationName].bind(oContext, sOperation);
		});
	}

	/**
	 * Check if this is a draft model.<br/>
	 *
	 * A model is considered a draft model if at least one entitySet of the OData service is annotated with one of the terms
	 * <ul>
	 *   <li>com.sap.vocabularies.Common.v1.DraftRoot</li>
	 *   <li>com.sap.vocabularies.Common.v1.DraftNode</li>
	 * </ul>
	 *
	 * @function
	 * @name sap.fe.model.DraftModel#isDraftModel
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @returns {Promise.<Boolean>} True if Draft Model
	 * @private
	 * @sap-restricted
	 * @static
	 */
	function isDraftModel(oModel) {
		/* Strategy: check if at least one entitySet is draft enabled */
		/* Load EntityContainer */
		return getAllEntitySets(oModel).then(function (aEntitySetWithAnnotations) {
			/* All entitySet annotations are avaialable */
			var aDraftEntitySetAnnotations = aEntitySetWithAnnotations.filter(function (oEntitySet) {
				var oAnnotations = oEntitySet["@"] || {};
				return oAnnotations.hasOwnProperty("@com.sap.vocabularies.Common.v1.DraftRoot") || oAnnotations.hasOwnProperty("@com.sap.vocabularies.Common.v1.DraftNode");
			}),
				isDraft = Array.isArray(aDraftEntitySetAnnotations) && aDraftEntitySetAnnotations.length > 0;
			if (isDraft) {
				/* it is very likely that we need the entiySet data again so save it to the model */
				storeData(oModel, "aEntitySets", aEntitySetWithAnnotations);
				storeData(oModel, "aDraftEntitySets", aDraftEntitySetAnnotations);
			}
			return isDraft;
		});
	}

	/**
	 * Merges a custom $filter in mParameters with the given edit state filter
	 * @param {String} sEditState id of the editState to be merged to the custom filter
	 * @param {String} sFilter the custome filter string
	 * @returns {String} The merged filter string (for $filter)
	 */
	function mergeEditStateFilterToFilter(sEditState, sFilter) {
		var sFilterValue = getFilterForEditState(sEditState, "");
		if (sFilter) {
			sFilter = "(" + sFilter + ") and " + sFilterValue;
		} else {
			sFilter = sFilterValue;
		}
		return sFilter;
	}

	/**
	 * Upgrades an OData v4 model to a draft model
	 *
	 * The model will overwrite the following methods to be able to serve data and keep state in an internal
	 * JSONModel:
	 *  <ul>
	 *        <li>bindList <ul>
	 *           <li>to add static filters to $filter and $expand to the binding for draft enabled EntitySets<li>
	 *        </ul></li>
	 * </ul>
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @private
	 */
	function _upgrade(oModel) {
		var fnOriginal = {},
			mListBindings = {},
			iListBindingIndex = -1, //index for mListBindings
			oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.fe"),
			oModelData = {
				/**
				 * editStates
				 * @constant For filtering documents by state e.g. own drafts, unchanged documents, etc
				 * @type {map}
				 */
				"editStates": [
					{ id: EDITSTATE.ALL, name: oResourceBundle.getText("SAPFE_DRAFT_ALL_FILTER") },
					{ id: EDITSTATE.UNCHANGED, name: oResourceBundle.getText("SAPFE_DRAFT_UNCHANGED_FILTER") },
					{ id: EDITSTATE.OWN_DRAFT, name: oResourceBundle.getText("SAPFE_DRAFT_OWN_DRAFT_FILTER") },
					{ id: EDITSTATE.LOCKED, name: oResourceBundle.getText("SAPFE_DRAFT_LOCKED_FILTER") },
					{ id: EDITSTATE.UNSAVED_CHANGES, name: oResourceBundle.getText("SAPFE_DRAFT_UNSAVED_CHANGES_FILTER") }
				],

				/*  We need the properties at least per entitySet (maybe even navigation props) */
				"entitySets": {}
			}, oInternalModel,
			aDraftEntitySets = getData(oModel, "aDraftEntitySets");

		storeData(oModel, "mListBindings", mListBindings);
		/* Allow access for unit tests only */
		testableHelper.testableStatic(function (oModel) {
			return getData(oModel, "mListBindings");
		}, "getOverwrittenListBindings");

		/* Work on draft entity sets */
		aDraftEntitySets.forEach(function (entitySet) {
			/* Create a draft management section for each draft entity set */
			oModelData.entitySets[entitySet["@sapui.name"]] = {
				editState: "0" //Default 'All'
			};
		});

		/* Provide access function */
		oInternalModel = new JSONModel(oModelData);

		storeData(oModel, "oDraftAccessModel", oInternalModel);
		oModel.getDraftAccessModel = getDraftAccessModel;
		/* React on internal model updates */
		oInternalModel.attachPropertyChange(function (oEvent) {
			var oParameter = oEvent.getParameters(),
				sPath = oParameter && (oParameter.path.indexOf("/entitySets") === 0 ? oParameter.path.split("/")[2] : false);
			if (sPath) {
				sPath = "/" + sPath;
				Object.keys(mListBindings).forEach(function (sKey) {
					var oBinding = mListBindings[sKey],
						mParameters = oBinding.mParameters, sCurrentFilter = "",
						sEditStateFilter = "", aResult = [];
					/* Check only list binding */
					if (oBinding instanceof ODataListBinding && oBinding.getPath() === sPath) {
						/* Change static filter values according to the edit state */
						sCurrentFilter = mParameters["$filter"];
						if (sCurrentFilter) {
							/* get rid of old edit state so the custom filter remains */
							aResult = sCurrentFilter.match(REGEXFOREDITSTATEFILTER);
							if (Array.isArray(aResult) && aResult[0]) {
								sEditStateFilter = aResult[0];
								sCurrentFilter = sCurrentFilter.replace(sEditStateFilter, "");
								//Remove first and last paranthesis */
								sCurrentFilter = sCurrentFilter.substr(1).slice(0, -1);
							}
						}
						mParameters["$filter"] = mergeEditStateFilterToFilter(oParameter.value, sCurrentFilter);
						oBinding.applyParameters(mParameters);
						oBinding.reset(sap.ui.model.ChangeReason.Change);
					}
				});
			}
		});

		/* Overwrite bindList */
		fnOriginal.bindList = oModel.bindList;
		oModel.bindList = function (sPath, oContext, vSorters, vFilters, mParameters) {
			/* Special handling for draft entity sets */
			var oEntitySetState = oInternalModel.getObject("/entitySets" + sPath),
				oListBinding, fnChangeParameters;

			if (oEntitySetState) {
				/* upgrade mParameters of ListBindng of Draft EntitySets only */
				var	sExpand = "";
				mParameters = mParameters || {};
				sExpand = mParameters.$expand;
				/* merge given $expand */
				if (sExpand) {
					if (sExpand.indexOf("DraftAdministrativeData") < 0) {
						sExpand += ",DraftAdministrativeData";
					}
				} else {
					sExpand = "DraftAdministrativeData";
				}
				mParameters.$expand = sExpand;
				mParameters.$filter = mergeEditStateFilterToFilter(oEntitySetState.editState, mParameters.$filter);
			}
			/* argument 4 is mParameters */
			arguments[4] = mParameters;
			oListBinding = fnOriginal.bindList.apply(this, arguments);

			if (oEntitySetState) {
				/* overwrite changeParameters method of ListBinding of Draft EntitySets only */
				fnChangeParameters = oListBinding.changeParameters;
				oListBinding.changeParameters = function (mParameters) {
					var oEntitySetState = oInternalModel.getObject("/entitySets" + sPath);
					mParameters.$filter = mergeEditStateFilterToFilter(oEntitySetState.editState, mParameters.$filter);
					return fnChangeParameters.call(this, mParameters);
				};
				/* keep a list of overwritten ListBindings */
				mListBindings[++iListBindingIndex] = oListBinding;
				/* overwrite destroy to remove from list. Since iListBindingIndex is native type we need a factory function */
				oListBinding.destroy = (function(index) {
					return function() {
						delete mListBindings[index];
						return ODataListBinding.prototype.destroy.apply(this, arguments);
					};
				})(iListBindingIndex);
			}
			return oListBinding;
		};

		/* Overwrite Context contstructor to add methods for bound (draft) operations if needed */
		fnOriginal.create = Context.create;
		Context.create = function (oModel, oBinding, sPath, iIndex, oCreatePromise) {
			var oContext = fnOriginal.create.apply(null, arguments),
				bFoundDraftEntitySet = false;
			/* Only manipulate if this is context of an upgraded model */
			if (getData(oModel, "bUpgraded") && sPath) {
				aDraftEntitySets.forEach(function (entitySet) {
					/* run only once so check if bFoundDraftEntitySet is not true already */
					var isDraftEntitySetPath = !bFoundDraftEntitySet && sPath.indexOf(entitySet["@sapui.name"]) === 1;
					if (isDraftEntitySetPath) {
						bFoundDraftEntitySet = true;
						addOperationsToContext(oContext, entitySet);
					}
				});
			}
			return oContext;
		};

		/* Clean up internal data in the destroy method */
		fnOriginal.modelDestroy = oModel.destroy;
		oModel.destroy = function () {
			delete oPrivatModelData[this.getId()];
			return fnOriginal.modelDestroy.apply(this, arguments);
		};
		/* Mark it as upgraded */
		storeData(oModel, "bUpgraded", true);
	}

	/**
	 * Upgrades an OData v4 model to a Draft Model. Throws an error if it is not a draft enabled service
	 * <p>The result of this function will mix new functions into instances of the following classes
	 * 	<ul>
	 * 		<li>{@link sap.ui.model.odata.v4.ODataModel}</li>
	 * 		<li>{@link sap.ui.model.odata.v4.Context}</li>
	 * </ul>
	 * Read the sections {@link sap.fe.model.DraftModel.upgradedModel}
	 * and {@link sap.fe.model.DraftModel.upgradedContext} for more information about the added functions
	 * </p>
	 * @example <caption>Example usage of upgrade</caption>
	 * var oModel = new ODataModel(...);
	 * DraftModel.upgrade(oModel).then(function() {
	 * 	oView.setModel(oModel);
	 * 	oView.setModel(oModel.getDraftAccessModel(), "$draft");
	 * });
	 * @function
	 * @name sap.fe.model.DraftModel#upgrade
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @returns {Promise} Resolves once the model is upgraded
	 * @throws Will throw an error if the service doesn't have any draft entity sets
	 * @private
	 * @sap-restricted
	 * @static
	 */
	function upgrade(oModel) {
		/* only upgrade draft models */
		return isDraftModel(oModel).then(function (isDraft) {
			if (isDraft) {
				/* preparation */
				_upgrade(oModel);
			} else {
				throw new Error("The model is not draft enabled");
			}
		});
	}

	/**
	 * Upgrades an OData v4 model to a Draft Model if it is a draft enbled service and
	 * leave it as is if not.
	 * @see {@link sap.fe.model.DraftModel#upgrade} for more information
	 * @function
	 * @name sap.fe.model.DraftModel#upgradeOnDemand
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @returns {Promise.<Boolean>} True if Draft Model detected and upgraded
	 * @private
	 * @sap-restricted
	 * @static
	 */
	function upgradeOnDemand(oModel) {
		/* only upgrade draft models */
		return isDraftModel(oModel).then(function (isDraft) {
			if (isDraft) {
				/* preparation */
				_upgrade(oModel);
			}
			return isDraft;
		});
	}

	/**
	 * Mixin for {@link sap.ui.model.odata.v4.ODataModel}. Returns the internal JSON Model aka DraftAccessModel
	 * @example <caption>The model can be set to a control or view as any other model</caption>
	 * oView.setModel(oModel.getDraftAccessModel(), "$draft");
	 * @function
	 * @name sap.fe.model.DraftModel.upgradedModel#getDraftAccessModel
	 * @returns {sap.ui.model.json.JSONModel} The interal DraftAccessModel
	 * @private
	 * @sap-restricted
	 */
	function getDraftAccessModel() {
		return getData(this, "oDraftAccessModel");
	}

	/**
	 * @classdesc
	 * Only for documentation of the methods that are mixed into the {@link sap.ui.model.odata.v4.ODataModel}
	 * after it has been upgraded to a sap.fe.model.DraftModel
	 * @namespace
	 * @alias sap.fe.model.DraftModel.upgradedModel
	 *
	 * @experimental This module is only for experimental use!
	 * @private
	 * @sap-restricted
	 */
	var upgradedModel = {}; /* eslint no-unused-vars: 0 */

	/**
	 * @classdesc
	 * Static Draft 2.0 Model transformation for {@link sap.ui.model.odata.v4.ODataModel}
	 * to simplify programming against the draft enabled OData services with sapui5
	 *
	 * @see {@link sap.ui.model.odata.v4.ODataModel}
	 * @namespace
	 * @alias sap.fe.model.DraftModel
	 * @private
	 * @sap-restricted
	 * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>
	 * @since 1.48.0
	 */
	var DraftModel = {
		upgrade: upgrade,
		upgradeOnDemand: upgradeOnDemand,
		isDraftModel: isDraftModel,
		EDITSTATE: EDITSTATE
	};

	return DraftModel;

}, /* bExport= */true);

}; // end of sap/fe/model/DraftModel.js
if ( !jQuery.sap.isDeclared('sap.fe.model.NamedBindingModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

//Provides class sap.fe.model.DraftModel
jQuery.sap.declare('sap.fe.model.NamedBindingModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/fe/model/NamedBindingModel",[
	"sap/fe/core/internal/testableHelper"
], function (testableHelper) {
	"use strict";

	/**
	 * Register a named Binding
	 * @param {sap.ui.model.Binding} oBinding binding instance that should be registered in the model
	 * @private
	 */
	function registerNamedBinding(oBinding) {
		oBinding.sId = oBinding.mParameters.id;
		//delete the id from mParameters to avoid it being forwarded to the URL
		delete oBinding.mParameters.id;
		this.mNamedBindings = this.mNamedBindings || {};
		if (!this.mNamedBindings[oBinding.sId]) {
			this.mNamedBindings[oBinding.sId] = oBinding;
		} else if (this.mNamedBindings[oBinding.sId].promise) {
			/* In case a refrence binding was defined first we replace it with the real binding */
			var fnResolve = this.mNamedBindings[oBinding.sId].resolve;
			this.mNamedBindings[oBinding.sId] = oBinding;
			fnResolve(oBinding);
		} else {
			throw new Error('Duplicate ID for named binding: ' + oBinding.sId);
		}
	}

	/**
	 * Unregister a named Binding
	 * @param {sap.ui.model.Binding} oBinding binding instance that should be unregistered in the model
	 * @private
	 */
	function unregisterNamedBinding(oBinding){
		if (this.mNamedBindings && this.mNamedBindings[oBinding.sId]) {
			delete this.mNamedBindings[oBinding.sId];
		}
	}

	/**
	 * Access a named binding
	 * @param {String} sReferenceId ID of a named binding
	 * @returns {Promise.<sap.ui.model.Binding>} Resolve function returns the binding instance
	 * @private
	 * @sap-restricted
	 * @static
	 */
	function getBindingForReference(sReferenceId) {
		this.mNamedBindings = this.mNamedBindings || {};
		if (typeof this.mNamedBindings[sReferenceId] === "undefined") {
			var fnResolve, promise = new Promise(function (resolve, reject) {
				fnResolve = resolve;
			});
			this.mNamedBindings[sReferenceId] = {
				promise: promise,
				resolve: fnResolve
			};
			return promise;

		} else if (this.mNamedBindings[sReferenceId].promise) {
			return this.mNamedBindings[sReferenceId].promise;
		} else {
			return Promise.resolve(this.mNamedBindings[sReferenceId]);
		}
	}

	/**
	 * Manage named list bindings
	 *
	 * @function
	 * @name sap.fe.model.NamedBindingModel#upgrade
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @return {Promise} Promise that resolves when the model has been upgraded
	 * @private
	 * @sap-restricted
	 * @static
	 */
	function upgrade(oModel) {
		var fnOriginal = {};

		oModel.registerNamedBinding = registerNamedBinding.bind(oModel);
		oModel.unregisterNamedBinding = unregisterNamedBinding.bind(oModel);
		oModel.getBindingForReference = getBindingForReference.bind(oModel);

		/* Overwrite bindList */
		fnOriginal.bindList = oModel.bindList;
		oModel.bindList = function (sPath, oContext, vSorters, vFilters, mParameters) {
			var oListBinding = fnOriginal.bindList.apply(this, arguments);
			if (mParameters && mParameters.id) {
				this.registerNamedBinding(oListBinding);
			}
			return oListBinding;
		};

		return Promise.resolve();
	}
	/**
	 * @classdesc
	 * Static Model transformation for {@link sap.ui.model.odata.v4.ODataModel}
	 * to allow using named bindings
	 *
	 * @see {@link sap.ui.model.odata.v4.ODataModel}
	 * @namespace
	 * @alias sap.fe.model.NamedBindingModel
	 * @private
	 * @sap-restricted
	 * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>
	 * @since 1.49.0
	 */
	var NamedBindingModel = {
		upgrade: upgrade
	};

	return NamedBindingModel;

}, /* bExport= */true);

}; // end of sap/fe/model/NamedBindingModel.js
if ( !jQuery.sap.isDeclared('sap.fe.templates.ListReport.controller.ControllerImplementation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

/* global hasher */
jQuery.sap.declare('sap.fe.templates.ListReport.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.mdc.base.ConditionModel'); // unlisted dependency retained
sap.ui.define("sap/fe/templates/ListReport/controller/ControllerImplementation",[
	"jquery.sap.global",
	"sap/ui/mdc/base/ConditionModel"
], function (jQuery, ConditionModel) {
	"use strict";

	return {
		getMethods: function (oViewProxy, oTemplateUtils, oController) {

			var oTable, oFilterBar;

			function fnCreateAppState() {
				var sFilterBarAppState = oFilterBar.getAppState();

				if (!sFilterBarAppState) {
					// no app state exists and filter bar does not have any app state relevant changes, there is
					// no need to generate an app state
					return;
				}

				var oAppState = {
					filterBar: sFilterBarAppState
				};

				oTemplateUtils.setAppStateContainer(oAppState);
			}

			function fnApplyAppState(oAppState) {
				if (!oAppState) {
					oAppState = oTemplateUtils.getAppStateContainer(oController.getView());
				}

				if (oAppState) {
					return oFilterBar.setAppState(oAppState.filterBar);
				}
			}

			/*
			 This coding is deactivated as the FLP does not yet support dynamic tiles for OData v4 - activate once
			 the FLP supports OData v4 as well
			 This coding needs to be adapted to the refactoring then for example ListBindingInfo shall be used
			 instead of the ListBinding

			 function fnCreateRequestUrl(oBinding, sPath, oContext, aUrlParams, bBatch){
			 // create the url for the service
			 var sNormalizedPath,
			 aAllUrlParameters = [],
			 sUrl = "";

			 if (sPath && sPath.indexOf('?') !== -1 ) {
			 sPath = sPath.substr(0, sPath.indexOf('?'));
			 }

			 if (!oContext && !jQuery.sap.startsWith(sPath,"/")) {
			 jQuery.sap.log.fatal(oBinding + " path " + sPath + " must be absolute if no Context is set");
			 }

			 sNormalizedPath = oBinding.getModel().resolve(sPath, oContext);

			 //An extra / is present at the end of the sServiceUrl, taking the normalized url from index 1
			 if (!bBatch) {
			 sUrl = oBinding.getModel().sServiceUrl + sNormalizedPath.substr(1);
			 } else {
			 sUrl = sNormalizedPath.substr(sNormalizedPath.indexOf('/') + 1);
			 }

			 if (aUrlParams) {
			 aAllUrlParameters = aAllUrlParameters.concat(aUrlParams);
			 }

			 if (aAllUrlParameters && aAllUrlParameters.length > 0) {
			 sUrl += "?" + aAllUrlParameters.join("&");
			 }
			 return sUrl;
			 }

			 function fnGetDownloadUrl(oBinding) {
			 var aParams = [];

			 if (oBinding.sFilterParams) {
			 aParams.push(oBinding.sFilterParams);
			 }

			 if (oBinding.sCustomParams) {
			 aParams.push(oBinding.sCustomParams);
			 }

			 if (oBinding.mParameters) {
			 if (oBinding.mParameters.$count) {
			 aParams.push("$count="+oBinding.mParameters.$count);
			 }

			 if (oBinding.mParameters.$filter) {
			 aParams.push("$filter=("+oBinding.mParameters.$filter.replace(/'/g,"%27").replace(/ /g,"%20")+")");
			 }

			 if (oBinding.mParameters.$select) {
			 aParams.push("$select="+oBinding.mParameters.$select.replace(/'/g,"%27").replace(/,/g,"%2c"));
			 }

			 // we can skip the $expand for now as the count shall be the same to avoid unnecessary read requests in the backend
			 // if (oBinding.mParameters.$expand) {
			 // 	aParams.push("$expand="+oBinding.mParameters.$expand.replace(/'/g,"%27").replace(/\//g,"%2f"));
			 // }

			 // we set $top to 0 to avoid that any data is requested - we are only interested in the count
			 aParams.push("$top=0");
			 }

			 var sPath = oBinding.getModel().resolve(oBinding.sPath,oBinding.oContext);

			 if (sPath) {
			 return fnCreateRequestUrl(oBinding,sPath, null, aParams);
			 }
			 }*/

			function fnSetShareModel() {
				var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
				//var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry("sap.ui");
				//var sBookmarkIcon = (oManifest && oManifest.icons && oManifest.icons.icon) || "";

				//shareModel: Holds all the sharing relevant information and info used in XML view
				var oShareInfo = {
					bookmarkTitle: document.title, //To name the bookmark according to the app title.
					bookmarkCustomUrl: function () {
						var sHash = hasher.getHash();
						return sHash ? ("#" + sHash) : window.location.href;
					},
					/*
					 To be activated once the FLP shows the count - see comment above
					 bookmarkServiceUrl: function() {
					 //var oTable = oTable.getInnerTable(); oTable is already the sap.fe table (but not the inner one)
					 // we should use table.getListBindingInfo instead of the binding
					 var oBinding = oTable.getBinding("rows") || oTable.getBinding("items");
					 return oBinding ? fnGetDownloadUrl(oBinding) : "";
					 },*/
					isShareInJamActive: !!fnGetUser && fnGetUser().isJamActive()
				};
				var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
				oTemplatePrivateModel.setProperty("/listReport/share", oShareInfo);
			}

			// Generation of Event Handlers
			return {
				onInit: function () {
					oTable = oController.byId("template::Table");
					oFilterBar = oController.getView().byId("template::FilterBar");

					// set filter bar to disabled until app state is loaded
					oFilterBar.setEnabled(false);

					fnSetShareModel();

					// handle app state
					oTemplateUtils.getAppStateLoaded().then(function () {
						var oAppState = oTemplateUtils.getAppStateContainer(oController.getView());
						if (oAppState) {
							// an app state exists, apply it
							fnApplyAppState(oAppState).then(function () {
								// enable filterbar once the app state is applied
								oFilterBar.setEnabled(true);
							});
						} else {
							oFilterBar.setEnabled(true);
						}

						// attach to further app state changed
						oTemplateUtils.attachAppStateChanged(fnApplyAppState);

					});
				},

				handlers: {
					onSearch: function () {
						if (oFilterBar.getLiveUpdate() === false) {
							/* we do not support the GO-Button in the first delivery although it's implemented in the table and filterBar.
							 one missing part is the app state - here we need to add the information that the GO button was pressed once
							 we officially support the Go button as well
							 */
							fnCreateAppState();
						}
					},
					onFilterBarChange: function () {
						if (oFilterBar.getLiveUpdate()) {
							fnCreateAppState();
						}
						if (!oFilterBar.isReady()) {
							oTable.setShowOverlay();
						}
					},
					onItemPress: function (oEvent) {
						// Handling for navigating to another app when clicking on an item
						var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifest();
						var sEntitySet = oController.getOwnerComponent().getEntitySet();
						var oEntitySet = oManifest["sap.fe"].entitySets[sEntitySet];
						var sOutbound = oEntitySet.entry.default.outbound;


						if (oManifest["sap.app"] && oManifest["sap.app"].crossNavigation && oManifest["sap.app"].crossNavigation.outbounds && oManifest["sap.app"].crossNavigation.outbounds[sOutbound]) {
							var oDisplayOutbound = oManifest["sap.app"].crossNavigation.outbounds[sOutbound];
							var oParameters = {};
							if (oDisplayOutbound.parameters) {
								var oBindingContext = oEvent.getParameters().listItem.getBindingContext();
								for (var sParameter in oDisplayOutbound.parameters) {
									if (oDisplayOutbound.parameters[sParameter].value.format === "binding") {
										oParameters[sParameter] = oBindingContext.getProperty(oDisplayOutbound.parameters[sParameter].value.value);
									}
								}
							}
							var oCrossAppNavigator = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
							oCrossAppNavigator && oCrossAppNavigator.toExternal({
								target: {
									semanticObject: oDisplayOutbound.semanticObject,
									action: oDisplayOutbound.action
								},
								params: oParameters
							});
						}


					},

					callAction: function (oEvent) {
						oTemplateUtils.getActionController().callAction(oEvent);
					},

					showError: function (oEvent) {
						// handling error after onDataReceived by the table to show message box
						var oSourceEvent = oEvent.getParameters();
						var oError = oSourceEvent.getParameter("error");
						oTemplateUtils.getMessageUtils().handleRequestFailed(oError);
					},

					onShareListReportActionButtonPress: function (oEvent) {
						var localI18nRef = oController.getView().getModel("sap.fe.i18n").getResourceBundle();
						if (!this._oShareActionButton) {
							//TODO: oCommonUtils was not defined for oTemplateUtils
							this._oShareActionButton = sap.ui.xmlfragment(
								"sap.fe.templates.listReport.view.fragments.ShareSheet", {
									shareEmailPressed: function () {
										sap.m.URLHelper.triggerEmail(null, localI18nRef.getText("SAPFE_EMAIL_SUBJECT", [document.title]), document.URL);
									},
									//TODO: JAM integration to be implemented
									shareJamPressed: function () {
									}
								});
							this.getView().addDependent(this._oShareActionButton);
						}
						this._oShareActionButton.openBy(oEvent.getSource());

					}

				},
				formatters: {},

				extensionAPI: null
			};
		}
	};

});

}; // end of sap/fe/templates/ListReport/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.fe.templates.ObjectPage.AnnotationHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

(function () {
	"use strict";

	/*
	 This class contains annotation helpers that might be used from several templates or controls
	 */

	jQuery.sap.declare("sap.fe.templates.ObjectPage.AnnotationHelper");

	sap.fe.templates.ObjectPage.AnnotationHelper = {
		isHasDeepHierarchy: function (oFacet) {
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet") {
						return true;
					}
				}
			}
			return false;
		},
		checkMoreBlockContent: function (oFacetContext) {
			return sap.fe.templates.ObjectPage.AnnotationHelper.checkFacetContent(oFacetContext, false);
		},

		checkBlockContent: function (oFacetContext) {
			return sap.fe.templates.ObjectPage.AnnotationHelper.checkFacetContent(oFacetContext, true);
		},

		checkFacetContent: function (oFacetContext, bBlock) {
			var sPath;
			var oInterface = oFacetContext.getInterface(0);
			var aFacets = oFacetContext.getModel().getProperty("", oFacetContext);

			//for Reference Facets directly under UI-Facets we need to check facets one level higher - by removing the last part of the path
			var aForPathOfFacetOneLevelHigher = oFacetContext.getPath().split("/Facets");
			var sContextOfFacetOneLevelHigher = oInterface.getModel().getContext(aForPathOfFacetOneLevelHigher[0]);
			if (oInterface.getModel().getProperty('', sContextOfFacetOneLevelHigher).RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				return sContextOfFacetOneLevelHigher.getPath();
			} else {
				if (!aFacets) {
					return;
				}

				for (var iFacet = 0; iFacet < aFacets.length; iFacet++) {
					if (!bBlock) {
						if (typeof aFacets[iFacet]["@com.sap.vocabularies.UI.v1.PartOfPreview"] !== 'undefined' && aFacets[iFacet]["@com.sap.vocabularies.UI.v1.PartOfPreview"] === false) {
							sPath = oInterface.getPath() + "/" + iFacet;
							break;
						}
					} else {
						if (aFacets[iFacet].$Type !== "com.sap.vocabularies.UI.v1.ReferenceFacet" || (typeof aFacets[iFacet]["@com.sap.vocabularies.UI.v1.PartOfPreview"] === 'undefined' || aFacets[iFacet]["@com.sap.vocabularies.UI.v1.PartOfPreview"] === true )) {
							sPath = oInterface.getPath() + "/" + iFacet;
							break;
						}
					}
				}
			}

			return sPath;
		},
		replaceSpecialCharsInId: function (sId) {
			if (sId.indexOf(" ") >= 0) {
				jQuery.sap.log.error("Annotation Helper: Spaces are not allowed in ID parts. Please check the annotations, probably something is wrong there.");
			}
			return sId.replace(/@/g, "").replace(/\//g, "::").replace(/#/g, "::");
		},
		getStableIdPartFromFacet: function (oFacet) {
			var sHeaderFacetPrefix = "";
			if (typeof this.getContext === "function" && this.getContext() && this.getContext().getPath() && this.getContext().getPath().indexOf("com.sap.vocabularies.UI.v1.HeaderFacets") >= 0) {
				sHeaderFacetPrefix = "headerEditable::";
			}
			if (oFacet.$Type && oFacet.$Type === "com.sap.vocabularies.UI.v1.CollectionFacet") {
				if (oFacet.ID && oFacet.ID.String) {
					return sHeaderFacetPrefix + oFacet.ID.String;
				} else {
					// If the ID is missing a random value is returned because a duplicate ID error will be thrown as soon as there is
					// more than one form on the UI.
					jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. You have to set an ID at all collection facets.");
					return Math.floor((Math.random() * 99999) + 1).toString();
				}
			} else if (oFacet.$Type && oFacet.$Type === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				if (oFacet.ID && oFacet.ID.String) {
					return sHeaderFacetPrefix + oFacet.ID.String;
				} else {
					return sHeaderFacetPrefix + sap.fe.templates.ObjectPage.AnnotationHelper.replaceSpecialCharsInId(oFacet.Target.$AnnotationPath);
				}
			} else {
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the facet annotations.");
				return Math.floor((Math.random() * 99999) + 1).toString();
			}
		},
		getStableIdPartFromDataPoint: function (oDataPoint) {
			var sPathConcat = "";
			if (oDataPoint.Value && oDataPoint.Value.$Path) {
				return sap.fe.templates.ObjectPage.AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.$Path);
			} else if (oDataPoint.Value && oDataPoint.Value.Apply && oDataPoint.Value.Apply.Name === "odata.concat") {
				//Needs to be tested
				for (var i = 0; i < oDataPoint.Value.Apply.Parameters.length; i++) {
					if (oDataPoint.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + sap.fe.templates.ObjectPage.AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Apply.Parameters[i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create stable ID derived from annotations.");
			}
		},
		doesCollectionFacetOnlyContainForms: function (oFacet) {
			var bReturn = true;
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].Target && oFacet.Facets[i].Target.AnnotationPath) {
						if ((oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.FieldGroup") < 0)
							&& (oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.Identification") < 0)
							&& (oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.DataPoint") < 0)) {
							bReturn = false;
						}
					}
				}
			} else {
				bReturn = false;
			}
			return bReturn;
		},
		/**
		 * Function to find out the type of table to be rendered on UI
		 * @param {object} oFacet - Object containing information about a facet
		 * @param {object} oSections - Object containing manifest settings of Object Page
		 */
		determineTableType: function (oFacet, oSections) {
			var oSettings; 				// contains properties of sections in object page
			if (oSections && oSections.sections) {
				oSettings = oSections.sections[sap.fe.templates.ObjectPage.AnnotationHelper.getStableIdPartFromFacet(oFacet)];
			}
			return (oSettings && (((oSettings.tableType || oSettings.treeTable)) || (oSections && oSections.tableType)));
		},
		buildExpressionForProgressIndicatorPercentValue: function (dataPoint, mUoM) {
			var sPercentValueExpression = "0";

			if (dataPoint.Value && dataPoint.Value.$Path) { // Value is mandatory and it must be a path
				var sValue = "${" + dataPoint.Value.$Path + "}"; // Value is expected to be always a path. ${Property}
				var sTarget;

				if (dataPoint.TargetValue) { // Target can be a path or Edm Primitive Type
					sTarget = dataPoint.TargetValue.$Path ? "${" + dataPoint.TargetValue.$Path + "}" : dataPoint.TargetValue.$Decimal;
				}

				if (mUoM) {
					mUoM = "'" + mUoM + "'";
				}
				// The expression consists of the following parts:
				// 1) When UoM is '%' then percent = value (target is ignored), and check for boundaries (value > 100 and value < 0).
				// 2) When UoM is not '%' (or is not provided) then percent = value / target * 100, check for division by zero and boundaries:
				// percent > 100 (value > target) and percent < 0 (value < 0)
				// Where 0 is Value, 1 is Target, 2 is UoM
				var sExpressionForUoMPercent = "({0} > 100 ? 100 : {0} < 0 ? 0 : {0} * 1)";
				var sExpressionForUoMNotPercent = "(({1} > 0) ? (({0} > {1}) ? 100 : (({0} < 0) ? 0 : ({0} / {1} * 100))) : 0)";
				var sExpressionTemplate = "'{'= ({2} === ''%'') ? " + sExpressionForUoMPercent + " : " + sExpressionForUoMNotPercent + " '}'";
				sPercentValueExpression = jQuery.sap.formatMessage(sExpressionTemplate, [sValue, sTarget, mUoM]);
			}

			return sPercentValueExpression;
		},

		trimCurlyBraces: function (value) {
			return value ? value.replace("{", "").replace("}", "") : undefined;
		},

		buildExpressionForProgressIndicatorDisplayValue: function (dataPoint, mUoM) {
			var sParts, sTargetValue;

			var buildPart = function (oProperty) {
				var sPropertyPath = sap.fe.templates.ObjectPage.AnnotationHelper.trimCurlyBraces(oProperty);
				var sPart = "{path: '" + sPropertyPath + "'}";
				return sPart;
			};

			sParts = buildPart(dataPoint.Value.$Path); //Value should always be a Path
			sTargetValue = dataPoint.TargetValue && (dataPoint.TargetValue.$Path || dataPoint.TargetValue.$Decimal);
			sParts += (", " + buildPart(sTargetValue) + ", " + buildPart(mUoM));

			var sDisplayValueExpression = "{ parts: [" + sParts + "], formatter: 'sap.fe.templates.ObjectPage.AnnotationHelper.formatDisplayValue' }";
			return sDisplayValueExpression;
		},

		/**
		 * This function is meant to run at runtime, so the control and resource bundle can be available
		 * @function
		 * @private
		 * @parameter {string} sValue A string containing the value
		 * @parameter {string} sTarget A string containing the target value
		 * @parameter {string} sUoM A string containing the unit of measure
		 * @returns {string} A string containing the text that will be used in the display value of the Progress Indicator
		 */
		formatDisplayValue: function (sValue, sTarget, sUoM) {
			var sDisplayValue = "";

			if (sValue) {
				var oControl = this;
				var oResourceBundle = oControl.getModel("i18n").getResourceBundle();
				var aCustomData = oControl.getCustomData();
				sTarget = sTarget || aCustomData[0].getValue();
				sUoM = sUoM || aCustomData[1].getValue();
				if (sUoM) {
					if (sUoM === '%') { // uom.String && uom.String === '%'
						sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_PERCENT", [sValue]);
					} else {// (uom.String and not '%') or uom.Path
						if (sTarget) {
							sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_NOT_PERCENT", [sValue, sTarget, sUoM]);
						} else {
							sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_NOT_PERCENT_NO_TARGET_VALUE", [sValue, sUoM]);
						}
					}
				} else {
					if (sTarget) {
						sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM", [sValue, sTarget]);
					} else {
						sDisplayValue = sValue;
					}
				}
			} else { // Cannot do anything
				jQuery.sap.log.warning("Value property is mandatory, the default (empty string) will be returned");
			}

			return sDisplayValue;
		},

		buildExpressionForProgressIndicatorCriticality: function (dataPoint) {
			var sFormatCriticalityExpression = sap.ui.core.ValueState.None;
			var sExpressionTemplate;
			var oCriticalityProperty = dataPoint.Criticality;

			if (oCriticalityProperty) {
				sExpressionTemplate = "'{'= ({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Negative'') || ({0} === ''1'') || ({0} === 1) ? ''" + sap.ui.core.ValueState.Error + "'' : " +
				"({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Critical'') || ({0} === ''2'') || ({0} === 2) ? ''" + sap.ui.core.ValueState.Warning + "'' : " +
				"({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Positive'') || ({0} === ''3'') || ({0} === 3) ? ''" + sap.ui.core.ValueState.Success + "'' : " +
				"''" + sap.ui.core.ValueState.None + "'' '}'";
				if (oCriticalityProperty.$Path) {
					var sCriticalitySimplePath = '${' + oCriticalityProperty.$Path + "}";
					sFormatCriticalityExpression = jQuery.sap.formatMessage(sExpressionTemplate, sCriticalitySimplePath);
				} else if (oCriticalityProperty.$EnumMember) {
					var sCriticality = "'" + oCriticalityProperty.$EnumMember + "'";
					sFormatCriticalityExpression = jQuery.sap.formatMessage(sExpressionTemplate, sCriticality);
				} else {
					jQuery.sap.log.warning("Case not supported, returning the default sap.ui.core.ValueState.None");
				}
			} else {
				// Any other cases are not valid, the default value of 'None' will be returned
				jQuery.sap.log.warning("Case not supported, returning the default sap.ui.core.ValueState.None");
			}

			return sFormatCriticalityExpression;
		},
		buildRatingIndicatorSubtitleExpression: function (mSampleSize) {
			if (mSampleSize) {
				return "{parts: [{path: '" + mSampleSize.$Path + "'}], formatter: 'sap.fe.templates.ObjectPage.AnnotationHelper.formatRatingIndicatorSubTitle'}";
			}
		},

		// returns the text for the Rating Indicator Subtitle (e.g. '7 reviews')
		formatRatingIndicatorSubTitle: function (iSampleSizeValue) {
			if (iSampleSizeValue) {
				var oResBundle = this.getModel("i18n").getResourceBundle();
				if (this.getCustomData().length > 0) {
					return oResBundle.getText("RATING_INDICATOR_SUBTITLE", [iSampleSizeValue, this.data("Subtitle")]);
				} else {
					var sSubTitleLabel = iSampleSizeValue > 1 ? oResBundle.getText("RATING_INDICATOR_SUBTITLE_LABEL_PLURAL") : oResBundle.getText("RATING_INDICATOR_SUBTITLE_LABEL");
					return oResBundle.getText("RATING_INDICATOR_SUBTITLE", [iSampleSizeValue, sSubTitleLabel]);
				}
			}
		},
		// builds the expression for the Rating Indicator footer
		buildRatingIndicatorFooterExpression: function (dataPoint) {
			var sParts, sTargetValue;

			var buildPart = function (oProperty) {
				var sPropertyPath = sap.fe.templates.ObjectPage.AnnotationHelper.trimCurlyBraces(oProperty);
				var sPart = "{path: '" + sPropertyPath + "'}";
				return sPart;
			};

			sParts = buildPart(dataPoint.Value.$Path); //Value should always be a Path
			sTargetValue = dataPoint.TargetValue && (dataPoint.TargetValue.$Path || dataPoint.TargetValue.$Decimal);
			sParts += (", " + buildPart(sTargetValue));

			var sFooterTextExpression = "{ parts: [" + sParts + "], formatter: 'sap.fe.templates.ObjectPage.AnnotationHelper.formatRatingIndicatorFooterText' }";
			return sFooterTextExpression;
		},

		// returns the text for the Rating Indicator footer (e.g. '2 out of 5')
		// note: the second placeholder (e.g. "5") for the text "RATING_INDICATOR_FOOTER" can come one from the following:
		// i. if the Property TargetValue for the term UI.DataPoint is a Path then the value is resolved by the method buildRatingIndicatorFooterExpression and passed to this method as 'targetValue'
		// ii. if the Property TargetValue is not a Path (i.e. 'Decimal') then we get the value from the control's Custom Data
		// iii. if neither i. or ii. apply then we use the default max value for the sap.m.RatingIndicator control
		formatRatingIndicatorFooterText: function (value, targetValue) {
			if (value) {
				var oResBundle = this.getModel("i18n").getResourceBundle();
				if (targetValue) {
					return oResBundle.getText("RATING_INDICATOR_FOOTER", [value, targetValue]);
				} else if (this.getCustomData().length > 0) {
					return oResBundle.getText("RATING_INDICATOR_FOOTER", [value, this.data("Footer")]);
				} else {
					var iRatingIndicatorDefaultMaxValue = sap.m.RatingIndicator.getMetadata().getPropertyDefaults().maxValue;
					return oResBundle.getText("RATING_INDICATOR_FOOTER", [value, iRatingIndicatorDefaultMaxValue]);
				}
			}
		}
	};
})();

}; // end of sap/fe/templates/ObjectPage/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.templates.ObjectPage.controller.ControllerImplementation') ) {
jQuery.sap.declare('sap.fe.templates.ObjectPage.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/fe/templates/ObjectPage/controller/ControllerImplementation",[

], function () {
	"use strict";

	return {
		getMethods: function (oViewProxy, oTemplateUtils, oController) {


			// Generation of Event Handlers
			return {
				onInit: function () {

				},

				handlers: {

				},
				formatters: {},

				extensionAPI: null
			};
		}
	};

});

}; // end of sap/fe/templates/ObjectPage/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.fe.templates.ObjectPage.view.fragments.DummyBlock') ) {
jQuery.sap.declare('sap.fe.templates.ObjectPage.view.fragments.DummyBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/fe/templates/ObjectPage/view/fragments/DummyBlock",['sap/uxap/BlockBase'],
	function (BlockBase) {
		"use strict";

		var DummyBlock = BlockBase.extend("sap.fe.templates.ObjectPage.view.fragments.DummyBlock", {
			metadata: {
				views: {
					Collapsed: {
						viewName: "sap.fe.templates.ObjectPage.view.fragments.DummyBlock",
						type: "XML"
					},
					Expanded: {
						viewName: "sap.fe.templates.ObjectPage.view.fragments.DummyBlock",
						type: "XML"
					}
				}
			}.fragments
		});

		return DummyBlock;

	});

}; // end of sap/fe/templates/ObjectPage/view/fragments/DummyBlock.js
if ( !jQuery.sap.isDeclared('sap.fe.util.testableHelper') ) {
jQuery.sap.declare('sap.fe.util.testableHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/fe/util/testableHelper",[], function() {
	"use strict";
/* Code copied from sap.suite.ui.generic.template.lib to avoid library dependency */

/*
 * This class provides facilities that support unit testing. Note thate the class provides methods which have to be called in the productive code
 * and methods which have to be called in the test code.
 * 1. This class provides the facility to define private functions that are nevertheless accessible for unit tests.
 * More precisely: We consider it as best practice to define private methods of classes in a closure to prevent illegal use by
 * other classes.
 * Moreover, it is best practice to write unit tests for public methods.
 * However, sometimes a private method is used several times inside a class. Therefore, it is demanded to make this private method
 * accessible to unit tests.
 * Actually, making a private method accessible to unit tests has two aspects:
 * - Call this method directly in a unit test in order to test it
 * - Define a stub/spy for the private method in a unit test for another method in order to test that the private method is invoked correctly
 *   (and prevent the private method from being executed in the context of this test)
 *
 * Check method testable in order to find out, how a private method can be made accessible for unit tests.
 * Check method startTest in order to find out, how to access a private method (prepared this way) can be accessed in a unit test
 *
 * Note: When testing private methods it might also be necessary to access private attributes of the class. This can also be achieved using this class.
 * Just write a private function accessing the private attribute and make it accessible for unit tests via this class.
 *
 * 2. This class provides the possibility to spy or stub constructors of external classes (e.g. UI5).
 * Check method observableConstructor in order to find out, how this can be achieved.
 */

	var iTestMode = 0;
	var oPossessor;
	var mStartedApps = {};
	var iCount = 0;
	var oStaticFunctions = {};
	var aConstructors = [];

	function createLogAccessFunction(oConstructor){
		return function(oInstance){
			if (iTestMode >= 0){
				return null;
			}
			var aLog = oConstructor.log || [];
			for (var i = 0; i < aLog.length; i++){
				var oLog = aLog[i];
				if (oLog.me === oInstance){
					return oLog.args;
				}
			}
		};
	}

	function removeConstructorObservation(oConstructor){
		delete oConstructor.replace;
		delete oConstructor.observer;
		if (oConstructor.log){
			if (oConstructor.isStatic){
				var aNewLog = [];
				for (var i = 0; i < oConstructor.log.length; i++){
					var oLog = oConstructor.log[i];
					if (oLog.testMode === 0){
						aNewLog.push(oLog);
					}
				}
				if (aNewLog.length > 0){
					oConstructor.log = aNewLog;
				} else {
					delete oConstructor.log;
				}
			} else {
				delete oConstructor.log;
			}
		}
	}

	function removeConstructorObservations(){
		aConstructors.forEach(removeConstructorObservation);
	}

	function fnObservableConstructor(fnConstructor, bStatic){
		var oConstructor;
		for (var i = 0; i < aConstructors.length; i++){
			oConstructor = aConstructors[i];
			if (oConstructor.fnConstructor === fnConstructor){
				oConstructor.isStatic = oConstructor.isStatic || bStatic;
				return oConstructor;
			}
		}
		oConstructor = {
			fnConstructor: fnConstructor,
			isStatic: bStatic
		};
		oConstructor.observable = function(){
			var fnConstructorEffective = oConstructor.replace ? oConstructor.observer : fnConstructor;
			var oRet = Object.create(fnConstructorEffective.prototype);
			oRet = fnConstructorEffective.apply(oRet, arguments) || oRet;
			if (iTestMode < 0 || (iTestMode === 0 && oConstructor.isStatic)){
				var oLog = {
					me: oRet,
					args: arguments,
					testMode: iTestMode
				};
				oConstructor.log = oConstructor.log || [];
				oConstructor.log.push(oLog);
				if (oConstructor.observer && !oConstructor.replace){
					oConstructor.observer(oRet, arguments);
				}
			}
			return oRet;
		};
		aConstructors.push(oConstructor);
		return oConstructor;
	}

	return {
	    // Call this method at the beginning of the setup of your unit test.
	    // This method returns a stub object. This stub possesses all functions prepared via testable as methods.
	    // Thereby, the name of the method is derived from the parameter sName of testable.
	    // Thus, when testing the private method just test the corresponding method of the stub.
	    // When defining a stub or spy for the private method, just define a stub or spy for the corresponding method of the stub object.
		startTest: function() {
			if (iTestMode !== 0) {
				return null;
			}
			iTestMode = -1;
			oPossessor = { };
			return oPossessor;
		},

        // Call this method at the end of the teardown of your unit test.
		endTest: function() {
			if (iTestMode < 0) {
				iTestMode = 0;
				oPossessor = null;
				removeConstructorObservations();
			}
		},

        // This method is called at the startup of a real app (in TemplateAssembler). If this method is called before startTest is called,
        // startTest has no effect anymore. Thus, private methods are not accessible in real tests.
		startApp: function() {
			if (iTestMode < 0) {
				return {};
			}
			iTestMode++;
			iCount++;
			var oRet = { id: iCount };
			mStartedApps[iCount] = oRet;
			return oRet;
		},

        // End the effect of startApp
		endApp: function(oAppId) {
			if (iTestMode > 0) {
			    var id = oAppId.id;
			    if (oAppId === mStartedApps[id]){
				    iTestMode--;
				    delete mStartedApps[id];
			    }
			}
		},

        // Use this method to define a private instance method that should be accessible to unit tests.
        // Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
        // Parameter sName is the name which can be used to access the function
        // This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testable: function(fnFunction, sName) {
			if (iTestMode === -1) {
				oPossessor[sName] = fnFunction;
				return function() {
					return oPossessor[sName].apply(null, arguments);
				};
			}
			return fnFunction;
		},

		// Use this method to define a private static method that should be accessible to unit tests.
        // Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
        // Parameter sName is the name which can be used to access the function during tests. Note that this name must be unique for the whole project.
        // This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testableStatic: function(fnFunction, sName){
		    if (iTestMode > 0 || (iTestMode === 0 && oStaticFunctions[sName])) {
		        return fnFunction;
		    }
		    oStaticFunctions[sName] = oStaticFunctions[sName] || fnFunction;
			return function() {
				return oStaticFunctions[sName].apply(null, arguments);
			};
		},

		// This method must only be used while a test is running (see method startTest). It returns a stub object that possesses all (static) methods
		// which have been defined via testableStatic.
		getStaticStub: function(){
			return iTestMode === -1 && oStaticFunctions;
		},


		// Use this method to make a constructor which is used in an implementation accessible for unit tests. This is in particular
		// important for constructors of classes belonging to other software packages (e.g. sap.m), since there is no other way to
		// spy/stub on these contructors.
		// As an example let us assume that a class provides a public method that produces instances of sap.ui.model.Filter (via constructor).
		// A unit test for this method can easily test whether the method really provides an instance of sap.ui.model.Filter.
		// However, a unit test should also be able to test, whether the Filter instance was created with the correct parameters.
		// In order to achieve this the class to be tested has to be enhanced as follows:
		// sap.ui.define([..., "sap/ui/model/Filter", ..."sap/suite/ui/generic/template/lib/testableHelper"],
		//      function(..., Filter, ..., testableHelper){        // normal declaration of dependency to sap.ui.model.Filter
		//
		//           Filter = testableHelper.observableConstructor(Filter);   // allow unit tests for this class to spy on constructor of Filter
		//
		// });
		// In the unit test use method observeConstructor (see below) in order to spy or stub the constructor
		// Normally only constructor calls that have been performed after a test was started can be spied via this facility. Sometimes constuctors
		// are already called in order to define static members of the class to be tested. In these cases it is necessary to have also access to
		// these static calls. Therefore, parameter bStatic should be set to true in these cases.
		// However, note that this parameter should only ber used if really necessary, as it produces additional effort at runtime, too.
		observableConstructor: function(fnConstructor, bStatic){
			if (iTestMode > 0){
				return fnConstructor;
			}
			return fnObservableConstructor(fnConstructor, bStatic).observable;
		},

		// This method must only be used while a test is running (see method startTest).
		// During tests this method provides access to instances created for constructor fnConstructor, provided the constructor has been
		// wrapped via method observableConstructor.
		// There are three way that access to these instances is possible:
		// 1. observeConstructor returns a function fnParameterAccess that provides access to the arguments that have been passed to
		//    the constructor when an instance was created. Call fnParameterAccess(oInstance) with oInstance being the instance that
		//    should be analyzed.
		// 2. Provide a spy function fnObserver that is called immediately after the instance was created. Two parameters are passed to fnObserver
		//    The first parameter is the newly created instance, the second parameter represents the arguments having been passed to the constructor
		// 3. If parameter bReplace is truthy fnObserver is actually treated as a stub for the constructor. That means that the real constructor
		//    is not called.
		// Note: There can always be only one observer for a constructor. Therefore, this method throws an exception when fnObserver is truthy and
		// another observer is already registered. Deregister an observer by calling this method with parameter fnObserver being faulty.
		// Moreover, all observers are automatically deregistered when a test ends.
		observeConstructor: function(fnConstructor, fnObserver, bReplace){
			if (iTestMode >= 0){
				return null;
			}
			var oConstructor = fnObservableConstructor(fnConstructor);
			if (fnObserver && oConstructor.observer){
				throw new Error("Constructor is already observed");
			}
			oConstructor.observer = fnObserver;
			oConstructor.replace = fnObserver && bReplace;
			return createLogAccessFunction(oConstructor);
		}
	};
});

}; // end of sap/fe/util/testableHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.viewFactory') ) {

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.core.mvc.View.
jQuery.sap.declare('sap.fe.viewFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.View'); // unlisted dependency retained
sap.ui.define("sap/fe/viewFactory",['jquery.sap.global', 'sap/ui/model/json/JSONModel', 'sap/ui/core/mvc/View'], function (jQuery, JSONModel, View) {
	"use strict";

	//TODO do wee need the entitySet parameter
	function create(oViewSettings, oModel) {
		var oMetaModel = oModel.getMetaModel(),
			oDeviceModel = new JSONModel(sap.ui.Device);
		oDeviceModel.setDefaultBindingMode("OneWay");
		//TODO we need to do the first requestObject ourselves it seems. Need to check why?
		return oMetaModel.requestObject("/").then(function() {
			oViewSettings.preprocessors = jQuery.extend(oViewSettings.preprocessors, {
				xml: {
					bindingContexts: {
					},
					models: {
						'sap.fe.metaModel': oMetaModel,
						'sap.fe.deviceModel': oDeviceModel
					}
					//TODO: Clarify if this is needed for freestyle
					//preprocessorsData: oComponent.getComponentData().preprocessorsData
				}
			});
			/* FE supports only type XML */
			oViewSettings.type = "XML";
			var oView = sap.ui.view(oViewSettings),
				//TODO We need to improve the resourcebundle loading mechanism. Maybe it should be done in the library loading already
				//Right now we cannot load async, because it is accessed later in the controller of the table
				oI18nModel = new sap.ui.model.resource.ResourceModel({ bundleName: "sap/fe/messagebundle", async : false });
			//Bind the i18n model to the view so all controls inside the view can access it
			oView.setModel(oI18nModel, "sap.fe.i18n");
			return oView;
		});

	}

	var viewFactory = {
		create: create
	};

	return viewFactory;
});




}; // end of sap/fe/viewFactory.js
if ( !jQuery.sap.isDeclared('sap.fe.Form') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.Form'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.XMLComposite'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v4.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/fe/Form",[
	'jquery.sap.global',
	'sap/ui/core/XMLComposite',
	'sap/ui/base/ManagedObject',
	'sap/ui/Device',
	'sap/fe/core/AnnotationHelper',
	'sap/ui/model/odata/v4/AnnotationHelper'
], function (jQuery, XMLComposite, ManagedObject, Device) {
	"use strict";
	var Form = XMLComposite.extend("sap.fe.Form", {
		metadata: {
			designTime: true,
			specialSettings: {
				metadataContexts: {
					defaultValue: "{ model: 'dataFieldCollectionModel', path:'',  name: 'dataFieldCollection'}"
				}
			},
			properties: {
				formElementsContextPath: {
					type: "any",
					invalidate: "template"
				},
				formTitle: {
					type: "string",
					invalidate: "template"
				}
			},
			events: {},
			aggregations: {},
			publicMethods: []
		},
		alias: "this",
		fragment: "sap.fe.controls._Form.Form"
	});

	Form.prototype.init = function () {};

	return Form;

}, /* bExport= */true);

}; // end of sap/fe/Form.js
if ( !jQuery.sap.isDeclared('sap.fe.core.BusyHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.BusyHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/fe/core/BusyHelper",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/fe/core/internal/testableHelper"
], function (jQuery, BaseObject, testableHelper) {
	"use strict";

	// Class for busy handling
	// This class enables the notion of a 'busy session'.
	// More precisely: At each point in time the app is either in a busy session or is not.
	// Reasons for being in a busy session can be set by calling methods setBusy or setBusyReason (see below).
	// Note that each busy reason has a lifetime.
	// A new busy session is started, as soon as the two following two conditions are fulfilled:
	// - The app is currently not in a busy session
	// - There is at least one (living) busy reason
	// A busy session potentially ends when the number of living busy reasons is reduced to zero. However, the end of the busy session is
	// potponed until a navigation which is currently active has finished and the current thread execution has come to an end. When a new
	// busy reason has been set meanwhile (and is still alive) the busy session is prolonged accordingly.
	//
	// The following features are connected to a busy session:
	// - A busy indication is displayed while the app is in a busy session. This busy indication may either be displayed immediately or with the standard
	//   busy delay (can be parametrized when setting the busy reason)
	// - When a busy session starts all transient messages are removed from the Apps message model
	// - When a busy session ends all transient messages being contained in the message model are displayed to the user and removed from the message model
	// Moreover, this class provides the possibility to interact with busy sessions/reasons (see methods isBusy and getUnbusy).
	function getMethods(oTemplateContract) {
		var mBusyReasons = {}; // currently living busy reasons of type string
		var bIsBusy = false; // is the app in a busy session
		var bBusyDirty = false; // is it already ensured that fnApplyBusy will be called
		var iBusyPromiseCount = 0; // number of currently living busy reasons of type Promise
		var iBusyDelay = oTemplateContract.oNavContainer.getBusyIndicatorDelay(); // standard busy delay of the App
		var oUnbusyPromise = Promise.resolve(); // a Promise which is resolved as soon as no busy session is running
		var fnUnbusyResolve = jQuery.noop; // function to be called when the current busy session ends

		// Returns information whether there is currently a living busy reason
		function isBusy() {
			return iBusyPromiseCount !== 0 || !jQuery.isEmptyObject(mBusyReasons);
		}

		var fnApplyBusyImmediately; // declare here to avoid use before declaration. Function that calls fnApplyBusy with bImmediate = true.
		// This function has the following tasks:
		// - If a busy session is running but no busy reason is available -> end the busy session (and thus display transient messages)
		// - Is a busy session is running set the app to busy, otherwise set it to unbusy
		// Note that ending the busy session will be postponed if a navugation is currently active and parameter bImmediate is false.
		// In this case the busy session might be prolonged if a new busy reason is set in the meantime
		function fnApplyBusy(bImmediate) {
			var bIsBusyNew = isBusy();
			if (bIsBusyNew || bImmediate) {
				bBusyDirty = false;
				oTemplateContract.oNavContainer.setBusy(bIsBusyNew);
				if (bIsBusyNew !== bIsBusy) {
					bIsBusy = bIsBusyNew;
					if (!bIsBusy) { // end of a busy session
						oTemplateContract.oNavContainer.setBusyIndicatorDelay(iBusyDelay);
						//MessageUtils.handleTransientMessages(oTemplateContract.oApplicationProxy.getDialogFragment);
						fnUnbusyResolve();
					}
				}
			} else {
				/* as we have only one page we don't need to wait until the navigation is done - therefore we call the
				   fnApplyBusyImmediately directly - once we introduce the  navigation we need to wait until the
				   navigation is done - see as example the implementation in the v2 library:
				   oTemplateContract.oApplicationProxy.getCurrentDisplayObject().promise.then(fnApplyBusyImmediately, fnApplyBusyImmediately);
				 */
				fnApplyBusyImmediately();
			}
		}

		fnApplyBusyImmediately = fnApplyBusy.bind(null, true);

		// Ensure that method fnApplyBusy is called
		// If bImmediate is true the busy delay is temporarily set to 0 and fnApplyBusy is called synchronously.
		// Otherwise the call of fnApplyBusy is postponed until the current thread is finished.
		function fnEnsureApplyBusy(bImmediate) {
			if (bImmediate) {
				oTemplateContract.oNavContainer.setBusyIndicatorDelay(0);
				fnApplyBusy();
			} else if (!bBusyDirty) {
				bBusyDirty = true;
				setTimeout(fnApplyBusy, 0);
			}
		}

		// function to be called when any Promise that serves as a busy reason is settled
		function fnBusyPromiseResolved() {
			iBusyPromiseCount--;
			if (!iBusyPromiseCount) {
				fnEnsureApplyBusy(false);
			}
		}

		// this method is called when a busy reason is set. It starts a busy session unless the App is already in a busy session.
		function fnMakeBusy() {
			if (bIsBusy) {
				return;  // App is already in a busy session
			}
			// Start a new busy session
			bIsBusy = true;
			oUnbusyPromise = new Promise(function (fnResolve) {
				fnUnbusyResolve = fnResolve;
			});
			// All transient messages still being contained in the message model belong to previous actions.
			// Therefore, we remove them. If they have not been shown yet, it is anyway to late to show them when this busy session has ended.
			//MessageUtils.removeTransientMessages();
		}

		// Sets or resets a busy reason of type string (parameter sReason).
		// Parameter bIsActive determines whether the busy reason is set or reset.
		// Note that resetting a reason applies to all living reasons using the same string (so calling this method with the same reason does not accumulate)
		// bImmediate is only evaluated when bIsActive is true. In this case it determines whether the busy indication should be displayed immediately or with
		// the usual delay.
		// Note that it is preferred to use method setBusy to set a busy reason
		function setBusyReason(sReason, bIsActive, bImmediate) {
			if (bIsActive) {
				fnMakeBusy();
				mBusyReasons[sReason] = true;
			} else {
				delete mBusyReasons[sReason];
			}
			fnEnsureApplyBusy(bImmediate);
		}

		// Sets a Promise (oBusyEndedPromise) as busy reason. This busy reason is alive until the promise is settled.
		// bImmediate determines whether the busy indication should be displayed immediately or with the usual delay.
		// Edge case: oBusyEndedPromise is already settled when this method is called (and the app is currently not in a busy session).
		// In this case, nevertheless a (probably short-living) busy session is started, such that the interaction with the message model is as defined above
		function setBusy(oBusyEndedPromise, bImmediate) {
			iBusyPromiseCount++;
			fnMakeBusy();
			oBusyEndedPromise.then(fnBusyPromiseResolved, fnBusyPromiseResolved);
			fnEnsureApplyBusy(bImmediate);
		}

		return {
			setBusyReason: setBusyReason,
			setBusy: setBusy,
			isBusy: isBusy,
			getUnbusy: function () { // returns a Promise that is resolved as soon as the App is not in a busy session
				return oUnbusyPromise;
			}
		};
	}

	return BaseObject.extend("sap.fe.core.BusyHelper", {
		constructor: function (oTemplateContract) {
			jQuery.extend(this, (testableHelper.testableStatic(getMethods, "BusyHelper"))(oTemplateContract));
		}
	});
});

}; // end of sap/fe/core/BusyHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.core.TemplateAssembler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.TemplateAssembler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
sap.ui.define("sap/fe/core/TemplateAssembler",[
	"jquery.sap.global",
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/json/JSONModel",
	"sap/ui/model/resource/ResourceModel",
	"sap/fe/core/TemplateComponent",
	"sap/fe/core/internal/testableHelper",
	"sap/fe/core/TemplateUtils"
], function (jQuery, Controller, JSONModel, ResourceModel, TemplateComponent, testableHelper, TemplateUtils) {
	"use strict";

	var mAppRegistry = {};
	var mControllerRegistry = {};

	// This function is handed over to class AppComponent. The variable will be set to null, once this has happened.
	// oAppRegistryEntry is a registry entry for the AppComponent. When it is registered it contains the following properties:
	// - appComponent: the AppComponent to be registered
	// - oTemplateContract: the TemplateContract for this App, as described in AppComponent
	// This function returns a function that can be used to deregister the AppComponent from the registry when it is exited.
	var fnRegisterAppComponent = function (oAppRegistryEntry) {
		var sAppComponentId = oAppRegistryEntry.appComponent.getId();
		mAppRegistry[sAppComponentId] = oAppRegistryEntry;
		return function () {
			delete mAppRegistry[sAppComponentId];
		};
	};

	function getAppRegistryEntry(oAppComponent) {
		var sAppComponentId = oAppComponent.getId();
		var oRet = mAppRegistry[sAppComponentId];
		return oRet;
	}

	function getComponentRegistryEntry(oComponent) {
		return getAppRegistryEntry(oComponent.getAppComponent()).oTemplateContract.componentRegistry[oComponent.getId()];
	}

	function getTemplateViewController(getMethods, sControllerName, oControllerDefinition, oTemplateUtils, oAppRegistryEntry) {
		oControllerDefinition = oControllerDefinition || {};

		oControllerDefinition.constructor = function () {
			Controller.prototype.constructor.apply(this, arguments);
			var oMethods = getMethods(oTemplateUtils, this);
			this._templateEventHandlers = Object.freeze(oMethods.handlers || {});
			this._templateFormatters = Object.freeze(oMethods.formatters || {});
			this.extensionAPI = Object.freeze(oMethods.extensionAPI || {});
			this.fnGenericOnInit = function (oController) {
				var oView = oController.getView();
				var sViewId = oView.getId();
				jQuery.sap.log.info("Init view " + sViewId + " of template " + sControllerName);
				var oComponent = oController.getOwnerComponent();
				var oComponentRegistryEntry = getComponentRegistryEntry(oComponent);

				oComponentRegistryEntry.oControllerRegistryEntry = {
					onExit: oMethods.onExit || jQuery.noop,
					oTemplateUtils: oTemplateUtils,
					oAppRegistryEntry: oAppRegistryEntry
				};
				mControllerRegistry[sViewId] = oComponentRegistryEntry.oControllerRegistryEntry;

				(oMethods.onInit || jQuery.noop)();
				// Note: This relies on the fact, that there is a 1-1 relationship between TemplateView and
				// TemplateComponent.
				// If we introduce Templates using more then one view, this must be reworked.
				oComponentRegistryEntry.oController = this;
				oComponentRegistryEntry.fnViewRegisteredResolve();
				delete oComponentRegistryEntry.fnViewRegisteredResolve;
			};
		};

		oControllerDefinition.onInit = function () {
			this.fnGenericOnInit(this);
			delete this.fnGenericOnInit;
		};

		oControllerDefinition.onExit = function () {
			var sViewId = this.getView().getId();
			var oControllerRegistryEntry = mControllerRegistry[sViewId];
			// TODO Marcel: destroy view is not implemented but seems to be not needed for now
			//oControllerRegistryEntry.oAppRegistryEntry.oTemplateContract.oApplicationProxy.destroyView(sViewId);
			oControllerRegistryEntry.onExit();
			delete mControllerRegistry[sViewId];
			jQuery.sap.log.info("View " + sViewId + " of template " + sControllerName + " exited");
		};

		return Controller.extend(sControllerName, oControllerDefinition);
	}

	function fnGetViewControllerCreator(oComponentRegistryEntry) {
		var oControllerSpecification = oComponentRegistryEntry.methods.oControllerSpecification;
		return oControllerSpecification && function () {
				var oAppComponent = oComponentRegistryEntry.oComponent.getAppComponent();
				var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);

				return getTemplateViewController(oControllerSpecification.getMethods, oComponentRegistryEntry.oComponent.getTemplateName(), oControllerSpecification.oControllerDefinition, oComponentRegistryEntry.oTemplateUtils, oAppRegistryEntry);
			};
	}

	fnRegisterAppComponent = testableHelper.testableStatic(fnRegisterAppComponent, "TemplateComponent_RegisterAppComponent");

	return {
		// This method assembles a Template that can be used in Fiori Elements applications.
		// Thereby, getMethods, sComponentName, and oComponentDefinition describe the behaviour of the component in detail.
		// More precisely the meaning of the parameters is as follows:
		// - sComponentName is the name of the component that realizes the Template. More precisely it describes the path (.-separated)
		//   to a folder which contains a file Component.js which is built using this function.
		// - oComponentDefinition is an object containing a property metadata which contains the metadata for the TemplateComponent realizing the Template.
		// - getMethods is a function that will be called once for each instance of the Template to be assembled.
		//   The parameters passed to this function are oComponent and oTemplateUtils
		//   ~ oComponent is the instance of class TemplateComponent that is created (can be considered as 'this')
		//   ~ oTemplateUtils is an instance of class TemplateUtils that provides certain reusable tasks
		//   the return value of getMethods must be an object possessing the following (optional) properties:
		//   ~ init: a function that serves as init for the component. Note that it is not necessary to call init of a superclass
		//   ~ onActivate: not yet implemented
		//   ~ onDeactivate: not yet implemented
		//   ~ refreshBinding: not yet implemented
		//   ~ updateBindingContext: a function that is called when a new binding context is available for the Template instance.
		//     Note that when switching to change (edit or create) this method will only be called in draft scenarios, since in non-draft scenarios
		//     no binding context from the backend is retrieved.
		//   ~ oControllerSpecification: an object specifying the controller for the view realizing this Template.
		//     For more details see comments at function fnGetViewControllerCreator
		getTemplateComponent: function (getMethods, sComponentName, oComponentDefinition) {
			var sComponentNameFull = sComponentName + ".Component";
			oComponentDefinition = oComponentDefinition || {};

			oComponentDefinition.init = function () {
				var oComponentRegistryEntry = this.getComponentData().registryEntry;
				oComponentRegistryEntry.viewRegistered = new Promise(function (fnResolve) {
					oComponentRegistryEntry.fnViewRegisteredResolve = fnResolve;
				});
				oComponentRegistryEntry.oViewRenderedPromise = new Promise(function (fnResolve) {
					oComponentRegistryEntry.fnViewRenderedResolve = fnResolve;
				});
				(TemplateComponent.prototype.init || jQuery.noop).apply(this, arguments);
				oComponentRegistryEntry.componentName = sComponentNameFull;
				oComponentRegistryEntry.oComponent = this;

				oComponentRegistryEntry.methods = getMethods(this, oComponentRegistryEntry.oTemplateUtils) || {};

				(oComponentRegistryEntry.methods.init || jQuery.noop)();
			};

			oComponentDefinition.preTemplater = function (mParameters) {
				var oComponentRegistryEntry = getComponentRegistryEntry(this);
				if (oComponentRegistryEntry.methods.preTemplater) {
					return oComponentRegistryEntry.methods.preTemplater(mParameters, oComponentRegistryEntry.oTemplateUtils);
				} else {
					return Promise.resolve();
				}
			};

			oComponentDefinition.preTemplaterReject = function (oError) {
				var oComponentRegistryEntry = getComponentRegistryEntry(this);

				// Resolve view registered promise to disable busy handling
				oComponentRegistryEntry.fnViewRegisteredResolve();

				oComponentRegistryEntry.oTemplateUtils.getNavigationController().navigateToMessagePage({
					text: "Application could not be started due to technical issues.",
					description: oError.message
				});
			};

			oComponentDefinition.exit = function () {
				var sId = this.getId();
				var oComponentRegistryEntry = getComponentRegistryEntry(this);
				var oAppRegistryEntry = getAppRegistryEntry(this.getAppComponent());
				var oMethods = oComponentRegistryEntry.methods;
				(oMethods.exit || jQuery.noop)();
				delete oAppRegistryEntry.oTemplateContract.componentRegistry[sId];
				(TemplateComponent.prototype.exit || jQuery.noop).apply(this, arguments);
			};

			oComponentDefinition.onBeforeRendering = function () {
				var oComponentRegistryEntry = getComponentRegistryEntry(this);
				(TemplateComponent.prototype.onBeforeRendering || jQuery.noop).bind(this, oComponentRegistryEntry).apply(this, arguments);
				var oMethods = oComponentRegistryEntry.methods;
				(oMethods.onBeforeRendering || jQuery.noop)();
			};

			oComponentDefinition.onAfterRendering = function () {
				var oComponentRegistryEntry = getComponentRegistryEntry(this);
				if (oComponentRegistryEntry.fnViewRenderedResolve && !oComponentRegistryEntry.fnViewRegisteredResolve) {
					oComponentRegistryEntry.fnViewRenderedResolve();
					delete oComponentRegistryEntry.fnViewRenderedResolve;
				}
				(TemplateComponent.prototype.onAfterRendering || jQuery.noop).bind(this, oComponentRegistryEntry).apply(this, arguments);
				var oMethods = oComponentRegistryEntry.methods;
				(oMethods.onAftereRendering || jQuery.noop)();
			};

			oComponentDefinition.setContainer = function () {
				TemplateComponent.prototype.setContainer.apply(this, arguments);
				var sId = this.getId();
				var oAppComponent = this.getAppComponent();
				var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);

				if (!oAppRegistryEntry.oTemplateContract.componentRegistry[sId]) {
					var oComponentData = this.getComponentData();
					var oComponentRegistryEntry = oComponentData.registryEntry;
					delete oComponentData.registryEntry;

					oComponentRegistryEntry.componentCreateResolve(this);
					delete oComponentRegistryEntry.componentCreateResolve;

					oAppRegistryEntry.oTemplateContract.componentRegistry[sId] = oComponentRegistryEntry;

					oAppRegistryEntry.oTemplateContract.oBusyHelper.setBusy(oComponentRegistryEntry.viewRegistered, true);

					oComponentRegistryEntry.oTemplateUtils = new TemplateUtils(oComponentRegistryEntry, oAppRegistryEntry.oTemplateContract);

					oComponentRegistryEntry.createViewController = fnGetViewControllerCreator(oComponentRegistryEntry);
					(oComponentRegistryEntry.methods.setContainer || jQuery.noop)();
				}
			};

			// not yet implemented and needed
			oComponentDefinition.onActivate = jQuery.noop;
			oComponentDefinition.onDeactivate = jQuery.noop;
			oComponentDefinition.refreshBinding = jQuery.noop;

			return TemplateComponent.extend(sComponentNameFull, oComponentDefinition);
		},

		// This method is called by class AppComponent when it is initialized. It hands over a registration method to this class.
		// This registration method can be used to register an AppComponent in the central AppComponentRegistry handled by this class.
		// See fnRegisterAppComponent for details.
		// Note that getRegisterAppComponent can only be called once.
		getRegisterAppComponent: function () {
			var fnRet = fnRegisterAppComponent;
			fnRegisterAppComponent = null;
			return fnRet;
		}
	};
});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

}; // end of sap/fe/core/TemplateAssembler.js
if ( !jQuery.sap.isDeclared('sap.fe.templates.ListReport.Component') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.templates.ListReport.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/fe/templates/ListReport/Component",[
	"jquery.sap.global",
	"sap/fe/core/TemplateAssembler",
	"sap/fe/templates/ListReport/controller/ControllerImplementation",
	"sap/fe/core/AnnotationHelper"
], function (jQuery, TemplateAssembler, ControllerImplementation, AnnotationHelper) {
	"use strict";

	function getMethods(oComponent) {

		var oViewProxy = {};
		return {
			oControllerSpecification: {
				getMethods: ControllerImplementation.getMethods.bind(null, oViewProxy),
				oControllerDefinition: {
					// ---------------------------------------------
					// Extensions
					// ---------------------------------------------
					onBeforeRebindTableExtension: function (oEvent) {
					}
				}
			},
			init: function () {
				var oTemplatePrivate = oComponent.getModel("_templPriv");
				oTemplatePrivate.setProperty("/listReport", {}); // Note that component properties are not yet available here
			},

			preTemplater : function(mParameters, oTemplateUtils){
				var oParameterModel = mParameters.oParameterModel;
				var oMetaModel = oParameterModel.getObject().metaModel;
				var sEntitySetPath = "/" + oParameterModel.getObject().entitySet + "/";
				var aSelectionFields = oMetaModel.getObject(sEntitySetPath + "@com.sap.vocabularies.UI.v1.SelectionFields");
				var aLineItems = oMetaModel.getObject(AnnotationHelper.getLineItemPresentation(oParameterModel).getPath());
				var oConcatPart = {};
				var aPromises = [];
				var oPathChecked = {},
					oAnnotationsChecked = {};
				var oLineItem = {}, oSelectionField = {};
				var aApplyParts, oLabeledElement, oApplyUriEncodeParts;
				var i, j;

				function checkContext(sContextPath) {
					var oContext = {},
						oNewContext;
					sContextPath = sContextPath.split("/").slice(0, -1).join("/");
					if (sContextPath.lastIndexOf("/") > 0) {
						oContext = checkContext(sContextPath);
					}
					oNewContext = oMetaModel.getObject(sContextPath);
					if (oNewContext.$kind === "NavigationProperty" && oNewContext.$Type) {
						oContext[oNewContext.$Type] = true;
					}
					return oContext;
				}
				function resolvePath(sContextPath) {
					if (!oPathChecked[sContextPath]) {
						jQuery.sap.log.debug("Requested: " + sContextPath, "PreTemplater");
						aPromises.push(oMetaModel.requestObject(sContextPath).then(function(context) {
							var oContext;
							//resolve annotations of the property
							resolveAnnotations(sContextPath);
							//determine types and namespaces that are part of the path
							oContext = checkContext(sContextPath);
							if (context.$kind === "NavigationProperty" && context.$Type) {
								oContext[context.$Type] = true;
							}
							return oContext;
						}));
						oPathChecked[sContextPath] = true;
					}
				}
				function resolveAnnotationPath(sContextAnnotationPath) {
					aPromises.push(oMetaModel.requestObject(sContextAnnotationPath).then(function(context) {
						if (context) {
							//resolve DataPoint properties
							if (context.Value && context.Value.$Path && context.Value.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.Value.$Path);
							}
							if (context.TargetValue && context.TargetValue.$Path && context.TargetValue.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.TargetValue.$Path);
							}
							//resolve Contact properties
							if (context.fn && context.fn.$Path && context.fn.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.fn.$Path);
							}
							if (context.photo && context.photo.$Path && context.photo.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.photo.$Path);
							}
							if (context.role && context.role.$Path && context.role.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.role.$Path);
							}
							if (context.title && context.title.$Path && context.title.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.title.$Path);
							}
							if (context.org && context.org.$Path && context.org.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.org.$Path);
							}
						}
						return checkContext(sContextAnnotationPath);
					}));
				}
				function resolveAnnotations(sContextPath) {
					var oAnnotationMap, oAnnotation, annotation;
					var oConcatPart;
					var k;
					if (!oAnnotationsChecked[sContextPath]) {
						oAnnotationMap = oMetaModel.getObject(sContextPath + "@");
						for (annotation in oAnnotationMap) {
							oAnnotation = oAnnotationMap[annotation];
							if (oAnnotation.$Path && oAnnotation.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oAnnotation.$Path);
							} else if (oAnnotation.$Apply && oAnnotation.$Function === "odata.concat") {
								for (k = 0; k < oAnnotation.$Apply.length; k++) {
									oConcatPart = oAnnotation.$Apply[k];
									if (oConcatPart && oConcatPart.$Path && oConcatPart.$Path.indexOf('/') > 0) {
										resolvePath(sEntitySetPath + oConcatPart.$Path);
									}
								}
							}
						}
						oAnnotationsChecked[sContextPath] = true;
					}
				}

				if (aSelectionFields) {
					for (i = 0; i < aSelectionFields.length; i++) {
						oSelectionField = aSelectionFields[i];
						if (oSelectionField.$PropertyPath && oSelectionField.$PropertyPath.indexOf('/') > 0) {
							// resolveSelectionField(oSelectionField);
							resolvePath(sEntitySetPath + oSelectionField.$PropertyPath);
						}
					}
				}

				if (aLineItems) {
					for (i = 0; i < aLineItems.length; i++) {
						oLineItem = aLineItems[i];
						if (oLineItem.$Type === "com.sap.vocabularies.UI.v1.DataField") {
							//check Value
							if (oLineItem.Value.$Path && oLineItem.Value.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Path) {
								resolveAnnotations(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Apply && oLineItem.Value.$Function === "odata.concat") {
								for (j = 0; j < oLineItem.Value.$Apply.length; j++) {
									oConcatPart = oLineItem.Value.$Apply[j];
									if (oConcatPart && oConcatPart.$Path && oConcatPart.$Path.indexOf('/') > 0) {
										resolvePath(sEntitySetPath + oConcatPart.$Path);
									}
								}
							}
							//check Label
							if (oLineItem.Label && oLineItem.Label.$Path && oLineItem.Label.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Label.$Path);
							}
							//check Criticality & CriticalityRepresentation
							if (oLineItem.Criticality) {
								if (oLineItem.Criticality.$Path && oLineItem.Criticality.$Path.indexOf('/') > 0) {
									resolvePath(sEntitySetPath + oLineItem.Criticality.$Path);
								}
								if (oLineItem.CriticalityRepresentation && oLineItem.CriticalityRepresentation.$Path && oLineItem.CriticalityRepresentation.$Path.indexOf('/') > 0) {
									resolvePath(sEntitySetPath + oLineItem.CriticalityRepresentationType.$Path);
								}
							}
							//check IconUrl
							if (oLineItem.IconUrl && oLineItem.IconUrl.$Path && oLineItem.IconUrl.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.IconUrl.$Path);
							}
						} else if (oLineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation") {
							//check SemanticObject
							if (oLineItem.SemanticObject.$Path && oLineItem.SemanticObject.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.SemanticObject.$Path);
							}
							//check Action
							if (oLineItem.Action && oLineItem.Action.$Path && oLineItem.Action.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Action.$Path);
							}
							//check Value
							if (oLineItem.Value.$Path && oLineItem.Value.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Path) {
								resolveAnnotations(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Apply && oLineItem.Value.$Function === "odata.concat") {
								for (j = 0; j < oLineItem.Value.$Apply.length; j++) {
									oConcatPart = oLineItem.Value.$Apply[j];
									if (oConcatPart && oConcatPart.$Path && oConcatPart.$Path.indexOf('/') > 0) {
										resolvePath(sEntitySetPath + oConcatPart.$Path);
									}
								}
							}
							//check Label
							if (oLineItem.Label && oLineItem.Label.$Path && oLineItem.Label.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Label.$Path);
							}
							//check Criticality & CriticalityRepresentation
							if (oLineItem.Criticality) {
								if (oLineItem.Criticality.$Path && oLineItem.Criticality.$Path.indexOf('/') > 0) {
									resolvePath(sEntitySetPath + oLineItem.Criticality.$Path);
								}
								if (oLineItem.CriticalityRepresentation && oLineItem.CriticalityRepresentation.$Path && oLineItem.CriticalityRepresentation.$Path.indexOf('/') > 0) {
									resolvePath(sEntitySetPath + oLineItem.CriticalityRepresentationType.$Path);
								}
							}
							//check IconUrl
							if (oLineItem.IconUrl && oLineItem.IconUrl.$Path && oLineItem.IconUrl.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.IconUrl.$Path);
							}
						} else if (oLineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {
							//check Value
							if (oLineItem.Value.$Path && oLineItem.Value.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Path) {
								resolveAnnotations(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Apply && oLineItem.Value.$Function === "odata.concat") {
								for (j = 0; j < oLineItem.Value.$Apply.length; j++) {
									oConcatPart = oLineItem.Value.$Apply[j];
									if (oConcatPart && oConcatPart.$Path && oConcatPart.$Path.indexOf('/') > 0) {
										resolvePath(sEntitySetPath + oConcatPart.$Path);
									}
								}
							}
							//check Label
							if (oLineItem.Label && oLineItem.Label.$Path && oLineItem.Label.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Label.$Path);
							}
							//check Url
							if (oLineItem.Url.$Path && oLineItem.Url.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Url.$Path);
							} else if (oLineItem.Url.$Apply) {
								aApplyParts = oLineItem.Url.$Apply;
								if (oLineItem.Url.$Function === "odata.fillUriTemplate") {
									if (aApplyParts[0].$Path && aApplyParts[0].$Path.indexOf('/') > 0) {
										resolvePath(sEntitySetPath + aApplyParts[0].$Path);
									}
									for (j = 1; j < aApplyParts.length; j++) {
										oLabeledElement = aApplyParts[j].$LabeledElement;
										if (oLabeledElement && oLabeledElement.$Path && oLabeledElement.$Path.indexOf('/') > 0) {
											resolvePath(sEntitySetPath + oLabeledElement.$Path);
										} else if (oLabeledElement && oLabeledElement.$Apply && oLabeledElement.$Function === "odata.uriEncode") {
											oApplyUriEncodeParts = oLabeledElement.$Apply[0];
											if (oApplyUriEncodeParts.$Path && oApplyUriEncodeParts.$Path.indexOf('/') > 0) {
												resolvePath(sEntitySetPath + oApplyUriEncodeParts.$Path);
											}
										}
									}
								} else if (oLineItem.Url.$Function === "odata.concat") {
									for (j = 0; j < oLineItem.Value.$Apply.length; j++) {
										oConcatPart = oLineItem.Value.$Apply[j];
										if (oConcatPart && oConcatPart.$Path && oConcatPart.$Path.indexOf('/') > 0) {
											resolvePath(sEntitySetPath + oConcatPart.$Path);
										}
									}
								}
							}
						} else if (oLineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
							//check SemanticObject
							if (oLineItem.SemanticObject.$Path && oLineItem.SemanticObject.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.SemanticObject.$Path);
							}
							//check Action
							if (oLineItem.Action && oLineItem.Action.$Path && oLineItem.Action.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Action.$Path);
							}
							//check RequiresContext
							if (oLineItem.RequiresContext && oLineItem.RequiresContext.$Path && oLineItem.RequiresContext.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.RequiresContext.$Path);
							}
						} else if (oLineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
							//check Target
							if (oLineItem.Target.$AnnotationPath && oLineItem.Target.$AnnotationPath.indexOf('/') > 0) {
								resolveAnnotationPath(sEntitySetPath + oLineItem.Target.$AnnotationPath);
							}
							//check Label
							if (oLineItem.Label && oLineItem.Label.$Path && oLineItem.Label.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Label.$Path);
							}
						}
					}
				}
				return aPromises;
			}
		};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.fe.templates.ListReport", {
			metadata: {
				properties: {
					"templateName": {
						"type": "string",
						"defaultValue": "sap.fe.templates.ListReport.view.ListReport"
					},
					"tableType": {
						"type": "string",
						"defaultValue": "ResponsiveTable"
					},
					"settingsDialogType": {
						"type": "string",
						"defaultValue": "ViewSettings"
					},
					"filterLiveUpdate": {
						"type": "boolean",
						"defaultValue":"true"
					}
				},
				"manifest": "json"
			}
		});
});

}; // end of sap/fe/templates/ListReport/Component.js
if ( !jQuery.sap.isDeclared('sap.fe.templates.ObjectPage.Component') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.templates.ObjectPage.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/fe/templates/ObjectPage/Component",[
	"jquery.sap.global",
	"sap/fe/core/TemplateAssembler",
	"sap/fe/templates/ObjectPage/controller/ControllerImplementation"
], function (jQuery, TemplateAssembler, ControllerImplementation) {
	"use strict";

	function getMethods(oComponent) {

		var oViewProxy = {};
		return {
			oControllerSpecification: {
				getMethods: ControllerImplementation.getMethods.bind(null, oViewProxy),
				oControllerDefinition: {
					// ---------------------------------------------
					// Extensions
					// ---------------------------------------------

				}
			},
			init: function () {
			},

			preTemplater : function(mParameters, oTemplateUtils){
				return [];
			}
		};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.fe.templates.ObjectPage", {
			metadata: {
				properties: {
					"templateName": {
						"type": "string",
						"defaultValue": "sap.fe.templates.ObjectPage.view.ObjectPage"
					}
				},
				"manifest": "json"
			}
		});
});

}; // end of sap/fe/templates/ObjectPage/Component.js
if ( !jQuery.sap.isDeclared('sap.fe.AppComponent') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

// ----------------------------------------------------------------------------------
// Provides base class sap.fe.AppComponent for all generic app components
// ----------------------------------------------------------------------------------
jQuery.sap.declare('sap.fe.AppComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ComponentContainer'); // unlisted dependency retained
sap.ui.define("sap/fe/AppComponent",[
	"jquery.sap.global",
	"sap/ui/core/UIComponent",
	"sap/m/NavContainer",
	"sap/fe/core/BusyHelper",
	"sap/fe/core/TemplateAssembler",
	"sap/ui/core/ComponentContainer",
	"sap/fe/core/internal/testableHelper",
	"sap/fe/model/DraftModel",
	"sap/fe/model/NamedBindingModel",
	"sap/fe/controller/NavigationController"
], function (jQuery,
			 UIComponent,
			 NavContainer,
			 BusyHelper,
			 TemplateAssembler,
			 ComponentContainer,
			 testableHelper,
			 DraftModel,
			 NamedBindingModel,
			 NavigationController) {
	"use strict";

	var fnRegisterAppComponent = TemplateAssembler.getRegisterAppComponent(); // Retrieve the possibility to register at TemplateAssembler

	var bCreateFirstPage = true;
	testableHelper.testableStatic(function() {
		bCreateFirstPage = false;
	}, "suppressPageCreation");

	function getMethods(oAppComponent, oTemplateContract) {
		// initialized on demand
		var oConfig;
		var fnDeregister; // function to be called to deregister at TemplateContract

		// // template contract which is used for data interchange between framework classes
		var oTemplateContract = {
			oAppComponent: oAppComponent, // reference to this application component

			// registry for all TemplateComponents instantiated in the context of this App
			// maps the ids of these components on an object (called registry entry)
			// They are inserted into the registry in method setContainer of TemplateComponent which can actually be found in TemplateAssembler
			// each entry of the component registry contains the following information:
			//		- oComponent : the component instance
			//		- componentName : name of the component
			//		- methods : methods of the component

			//		- methods.oControllerSpecification - specification of template view controller
			//		- createViewController - create template view controller
			//		- oController - template view controller
			//		- ControllerRegistryEntry - registry entry of template view controllers
			//			- onExit
			//			- oTemplateUtils
			//			- oAppRegistryEntry

			//		- viewRegistered : Promise which is resolved once the view is registered
			//		- fnViewRegisteredResolve : function to resolve the viewRegistered promise, deleted after usage

			//		- oViewRenderedPromise : Promise which is resolved once the view is rendered
			//		- fnViewRenderedResolve : function to resolve the oViewRenderedPromise promise, deleted after usage

			//		- componentCreateResolve : function which is called once the component is created
			componentRegistry: {},

			oBusyHelper: null, // instantiated in createContent
			oMessageUtils: null, // instantiated in templateUtils on demand
			oActionController: null, // instantiated in templateUtils on demand
			oCommonUtils: null, // instantiated in templateUtils on demand
			// oTemplatePrivateGlobalModel: (new JSONModel()).setDefaultBindingMode("TwoWay")

			aAppStateChangedListener: [], // listeners to the app state changed event

			getNavigationController: function () {
				// in case anything happens before the templateUtils are created we need to allow access to the navigation controller
				return new NavigationController(oTemplateContract);
			}

		};

		function getText(sId) {
			var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.fe");
			return oResourceBundle.getText(sId);
		}

		function createPageComponentContainer(sEntitySet, oConfig) {
			var sComponent = 'sap.fe.templates.' + oConfig.template,
				oSettings = {
					entitySet: sEntitySet,
					componentData: {
						preprocessorsData: {},
						registryEntry: {
							componentCreateResolve: jQuery.noop,
							viewLevel: 1
						}
					}
				};

			if (oConfig.settings) {
				// consider component specific settings from app descriptor
				jQuery.extend(oSettings, oConfig.settings);
			}

			var oPage = null;
			oAppComponent.runAsOwner(function(){
				 oPage = new ComponentContainer({
					name: sComponent,
					propagateModel: true,
					width: "100%",
					height: "100%",
					handleValidation: true,
					settings: oSettings
				});
			});
			return oPage;
		}

		testableHelper.testable({
			createPageComponentContainer: createPageComponentContainer,
			appComponent: oAppComponent
		}, "templateTester");

		function createFirstPage() {
			var oConfig = getConfig();
			var oPageConfigs,
				oDefaultPageConfig,
				oStartPage,
				aTargetParts,
				sEntitySet,
				sIntent;

			function wrongConfiguration(){
				return oTemplateContract.getNavigationController().navigateToMessagePage({
					text: getText("SAPFE_APPSTART_TECHNICAL_ISSUES"),
					description: getText("SAPFE_APPSTART_WRONG_CONFIGURATION")
				});
			}

			if (!oConfig ||  !oConfig.entitySets || !oConfig.navigation) {
				return wrongConfiguration();
			}

			for (var p in oConfig.navigation){
				if (oConfig.navigation[p].isStartPage){
					if (oStartPage){
						// having more than one start page is not allowed
						return wrongConfiguration();
					} else {
						oStartPage = oConfig.navigation[p];
					}
				}

			}

			if (!oStartPage || !oStartPage.target){
				return wrongConfiguration();
			}

			aTargetParts = oStartPage.target.split("/");

			if (aTargetParts.length !== 2){
				// currently we support only accessing directly the feed
				return wrongConfiguration();
			}

			sEntitySet = aTargetParts[0];
			sIntent = aTargetParts[1];

			if (sIntent !== "feed"){
				// currently we support only feed as target
				return wrongConfiguration();
			}

			oPageConfigs = oConfig.entitySets[sEntitySet][sIntent];

			if (!oPageConfigs || !oPageConfigs.default){
				// currently only the default config is supported
				return wrongConfiguration();
			}

			oDefaultPageConfig = oPageConfigs.default;

			if (!oDefaultPageConfig.template){
				// currently we support only specifying a template name
				return wrongConfiguration();
			}

			if (oDefaultPageConfig.template !== 'ListReport'){
				// currently we support only the List Report
				return wrongConfiguration();
			}
			try {
				var oPage = createPageComponentContainer(sEntitySet, oDefaultPageConfig);
				oTemplateContract.oNavContainer.addPage(oPage);
				var oRouter = oAppComponent.getRouter();

				oRouter.attachRoutePatternMatched(function (oEvent) {
					if (oEvent.getParameters().name === "root") {
						// no inner app state used
						oTemplateContract.oInnerAppStatePromise.resolve();

						if (oTemplateContract.oAppState) {
							// the app had an app state but navigated back to the initial route, we need to clean up the appstate
							oTemplateContract.oAppState = null;
							oTemplateContract.oAppStateModel.setData({});
							// fire app state change event
							for (var i = 0; i < oTemplateContract.aAppStateChangedListener.length; i++) {
								oTemplateContract.aAppStateChangedListener[i]();
							}
						}


					} else {
						var sInnerAppStateKey = oEvent.getParameters().arguments.iAppState;

						if (oTemplateContract.oAppState && sInnerAppStateKey === oTemplateContract.oAppState.getKey()) {
							// the app state was set by the app
							oTemplateContract.oInnerAppStatePromise.resolve();
							return;
						}

						// we must apply the inner App State *after* treating CrossAppState (x-app-state), reset InnerAppStatePromise
						//oTemplateContract.oCrossAppStatePromise.done(function () {
						sap.ushell.Container.getService("CrossApplicationNavigation").getAppState(oAppComponent, sInnerAppStateKey).done(function (oStartupInnerAppState) {
							oTemplateContract.oAppState = oStartupInnerAppState;
							updateAppStateModel(oTemplateContract.oAppStateModel, oStartupInnerAppState);
							oTemplateContract.oInnerAppStatePromise.resolve();

							// fire app state change event
							for (var i = 0; i < oTemplateContract.aAppStateChangedListener.length; i++) {
								oTemplateContract.aAppStateChangedListener[i]();
							}
						});
						//});
					}
				});

				oRouter.initialize();
			} catch (e) {
				oTemplateContract.getNavigationController().navigateToMessagePage({
					text: getText("SAPFE_APPSTART_TECHNICAL_ISSUES"),
					description: getText("SAPFE_APPSTART_WRONG_CONFIGURATION")
				});
			}
		}

		function getConfig() {
			if (!oConfig) {
				var oMeta = oAppComponent.getMetadata();
				oConfig = oMeta.getManifestEntry("sap.fe");
			}
			return oConfig;
		}

		function updateAppStateModel(oAppStateModel, oAppState) {
			var oData = oAppState.getData();

			if (oData && (JSON.stringify(oData) !== JSON.stringify(oAppStateModel.getProperty("/"))) && oAppStateModel) {
				oAppStateModel.setProperty("/", oData);
				return true;
			}
			return false;
		}

		return {
			init: function () {
				var oAppRegistryEntry = {
					appComponent: oAppComponent,
					oTemplateContract: oTemplateContract
				};
				var oShellServiceFactory = sap.ui.core.service.ServiceFactoryRegistry.get("sap.ushell.ui5service.ShellUIService");
				oTemplateContract.oShellServicePromise = (oShellServiceFactory && oShellServiceFactory.createInstance()) || Promise.reject();
				oTemplateContract.oShellServicePromise.catch(function () {
					jQuery.sap.log.warning("No ShellService available");
				});

				/* as the cross app state is not yet defined and supported the crossappstate coding is kept but deactivated
				 oTemplateContract.oCrossAppStatePromise = new jQuery.Deferred(); // Done when startup CrossAppState has been transferred into the model
				 sap.ushell.Container.getService("CrossApplicationNavigation").getStartupAppState(oAppComponent).done(function (oStartupCrossAppState) {
				 updateAppStateModel(oTemplateContract.oAppStateModel, oStartupCrossAppState);
				 oTemplateContract.oCrossAppStatePromise.resolve();
				 });
				 */

				oTemplateContract.oInnerAppStatePromise = new jQuery.Deferred(); // Done when above and startup InnerAppState transferred into the model

				// create AppState Model
				oTemplateContract.oAppStateModel = new sap.ui.model.json.JSONModel();

				// as the cross app state is not yet defined and supported we skip this coding and resolve the promise immediately
				// sap.ushell.Container.getService("CrossApplicationNavigation").getStartupAppState(oAppComponent).done(function (oStartupCrossAppState) {
				// 	updateAppStateModel(oTemplateContract.oAppStateModel, oStartupCrossAppState);
				// 	oTemplateContract.oCrossAppStatePromise.resolve();
				// });

				var oModel = oAppComponent.getModel();
				if (oModel) {
					// upgrade the model to a named binding model
					NamedBindingModel.upgrade(oModel).then(function() {

						// we call the UIComponent init once we upgraded our model to a named binding model
						(UIComponent.prototype.init || jQuery.noop).apply(oAppComponent, arguments);

						oTemplateContract.oBusyHelper.setBusy(oTemplateContract.oShellServicePromise);
						fnDeregister = fnRegisterAppComponent(oAppRegistryEntry);
						oTemplateContract.oBusyHelper.setBusyReason("initAppComponent", false);

						// Test if draft Model
						DraftModel.isDraftModel(oModel).then(function (bIsDraft) {
							if (bIsDraft) {
								// service contains a draft entity therefore upgrade the model to a draft model
								DraftModel.upgrade(oModel).then(function () {
									oAppComponent.setModel(oModel.getDraftAccessModel(), "$draft");
								});
							}
						});
					});

					// Error handling for erroneous metadata request
					oModel.getMetaModel().requestObject("/$EntityContainer/").catch(function (oError) {
						oTemplateContract.getNavigationController().navigateToMessagePage({
							text: getText("SAPFE_APPSTART_TECHNICAL_ISSUES"),
							description: oError.message
						});

						/* When the application's OData service's metadata document
						 * can't be retrieved or loaded, then none of children components
						 * can load. It is therefore important to look through those components
						 * and resolve their promises to register themselves with a view. */
						for (var childComponent in oTemplateContract.componentRegistry) {
							oTemplateContract.componentRegistry[childComponent].fnViewRegisteredResolve();
						}
					});
				}
			},
			exit: function () {
				if (oTemplateContract.oNavContainer) {
					oTemplateContract.oNavContainer.destroy();
				}
				fnDeregister();
			},
			createContent: function () {
				// Method must only be called once
				if (oTemplateContract.oNavContainer) {
					return "";
				}

				oTemplateContract.oNavContainer = new NavContainer({
					id: oAppComponent.getId() + "-appContent"
				});

				oTemplateContract.oBusyHelper = new BusyHelper(oTemplateContract);
				oTemplateContract.oBusyHelper.setBusyReason("initAppComponent", true, true);

				// as long as we don't introduce the navigation controller again we create the first page directly
				if (bCreateFirstPage) {
					createFirstPage();
				}

				return oTemplateContract.oNavContainer;
			}
		};
	}

	return UIComponent.extend("sap.fe.AppComponent", {
		metadata: {
			config: {
				fullWidth: true
			},
			events: {
				pageDataLoaded: {}
			},
			routing: {
				config: {},
				routes: [
					{
						pattern: "",
						name: "root"
					},
					{
						pattern: "?sap-iapp-state={iAppState}",
						name: "rootWithAppState"
					}],
				targets: []
			},
			library: "sap.fe"
		},

		constructor: function () {
			var oAppId = testableHelper.startApp(); // suppress access to private methods in productive coding
			jQuery.extend(this, getMethods(this, oAppId));

			(UIComponent.prototype.constructor || jQuery.noop).apply(this, arguments);
		}
	});
});

}; // end of sap/fe/AppComponent.js
